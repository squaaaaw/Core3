/*
 *	autogen/server/chat/PendingMessageList.h generated by engine3 IDL compiler 0.60
 */

#ifndef PENDINGMESSAGELIST_H_
#define PENDINGMESSAGELIST_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/core/ManagedObject.h"

#include "system/lang/System.h"

#include "system/util/Vector.h"

namespace server {
namespace chat {

class PendingMessageList : public ManagedObject {
public:
	PendingMessageList();

	Vector<unsigned long long>* getPendingMessages();

	void clearPendingMessages();

	void addPendingMessage(unsigned long long oid);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PendingMessageList(DummyConstructorParameter* param);

	virtual ~PendingMessageList();

	friend class PendingMessageListHelper;
};

} // namespace chat
} // namespace server

using namespace server::chat;

namespace server {
namespace chat {

class PendingMessageListImplementation : public ManagedObjectImplementation {
	Vector<unsigned long long> pendingMessages;

public:
	PendingMessageListImplementation();

	PendingMessageListImplementation(DummyConstructorParameter* param);

	Vector<unsigned long long>* getPendingMessages();

	void clearPendingMessages();

	void addPendingMessage(unsigned long long oid);

	WeakReference<PendingMessageList*> _this;

	operator const PendingMessageList*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PendingMessageListImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PendingMessageList;
};

class PendingMessageListAdapter : public ManagedObjectAdapter {
public:
	PendingMessageListAdapter(PendingMessageList* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void clearPendingMessages();

	void addPendingMessage(unsigned long long oid);

};

class PendingMessageListHelper : public DistributedObjectClassHelper, public Singleton<PendingMessageListHelper> {
	static PendingMessageListHelper* staticInitializer;

public:
	PendingMessageListHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PendingMessageListHelper>;
};

} // namespace chat
} // namespace server

using namespace server::chat;

#endif /*PENDINGMESSAGELIST_H_*/
