/*
 *	autogen/server/chat/PendingMessageList.cpp generated by engine3 IDL compiler 0.60
 */

#include "PendingMessageList.h"

/*
 *	PendingMessageListStub
 */

enum {RPC_CLEARPENDINGMESSAGES__,RPC_ADDPENDINGMESSAGE__LONG_};

PendingMessageList::PendingMessageList() : ManagedObject(DummyConstructorParameter::instance()) {
	PendingMessageListImplementation* _implementation = new PendingMessageListImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PendingMessageList");
}

PendingMessageList::PendingMessageList(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("PendingMessageList");
}

PendingMessageList::~PendingMessageList() {
}



Vector<unsigned long long>* PendingMessageList::getPendingMessages() {
	PendingMessageListImplementation* _implementation = static_cast<PendingMessageListImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPendingMessages();
	}
}

void PendingMessageList::clearPendingMessages() {
	PendingMessageListImplementation* _implementation = static_cast<PendingMessageListImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARPENDINGMESSAGES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearPendingMessages();
	}
}

void PendingMessageList::addPendingMessage(unsigned long long oid) {
	PendingMessageListImplementation* _implementation = static_cast<PendingMessageListImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPENDINGMESSAGE__LONG_);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else {
		_implementation->addPendingMessage(oid);
	}
}

DistributedObjectServant* PendingMessageList::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PendingMessageList::_getImplementationForRead() const {
	return _impl;
}

void PendingMessageList::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PendingMessageListImplementation
 */

PendingMessageListImplementation::PendingMessageListImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


PendingMessageListImplementation::~PendingMessageListImplementation() {
}


void PendingMessageListImplementation::finalize() {
}

void PendingMessageListImplementation::_initializeImplementation() {
	_setClassHelper(PendingMessageListHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PendingMessageListImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PendingMessageList*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PendingMessageListImplementation::_getStub() {
	return _this.get();
}

PendingMessageListImplementation::operator const PendingMessageList*() {
	return _this.get();
}

void PendingMessageListImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PendingMessageListImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PendingMessageListImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PendingMessageListImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PendingMessageListImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PendingMessageListImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PendingMessageListImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PendingMessageListImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("PendingMessageList");

}

void PendingMessageListImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PendingMessageListImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PendingMessageListImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x779b47a8: //PendingMessageList.pendingMessages
		TypeInfo<Vector<unsigned long long> >::parseFromBinaryStream(&pendingMessages, stream);
		return true;

	}

	return false;
}

void PendingMessageListImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PendingMessageListImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PendingMessageListImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x779b47a8; //PendingMessageList.pendingMessages
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&pendingMessages, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

PendingMessageListImplementation::PendingMessageListImplementation() {
	_initializeImplementation();
}

Vector<unsigned long long>* PendingMessageListImplementation::getPendingMessages() {
	// server/chat/PendingMessageList.idl():   return pendingMessages;
	return (&pendingMessages);
}

void PendingMessageListImplementation::clearPendingMessages() {
	// server/chat/PendingMessageList.idl():   pendingMessages.removeAll();
	(&pendingMessages)->removeAll();
}

void PendingMessageListImplementation::addPendingMessage(unsigned long long oid) {
	// server/chat/PendingMessageList.idl():   pendingMessages.add(oid);
	(&pendingMessages)->add(oid);
}

/*
 *	PendingMessageListAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PendingMessageListAdapter::PendingMessageListAdapter(PendingMessageList* obj) : ManagedObjectAdapter(obj) {
}

void PendingMessageListAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_CLEARPENDINGMESSAGES__:
		{
			
			clearPendingMessages();
			
		}
		break;
	case RPC_ADDPENDINGMESSAGE__LONG_:
		{
			unsigned long long oid = inv->getUnsignedLongParameter();
			
			addPendingMessage(oid);
			
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

void PendingMessageListAdapter::clearPendingMessages() {
	(static_cast<PendingMessageList*>(stub))->clearPendingMessages();
}

void PendingMessageListAdapter::addPendingMessage(unsigned long long oid) {
	(static_cast<PendingMessageList*>(stub))->addPendingMessage(oid);
}

/*
 *	PendingMessageListHelper
 */

PendingMessageListHelper* PendingMessageListHelper::staticInitializer = PendingMessageListHelper::instance();

PendingMessageListHelper::PendingMessageListHelper() {
	className = "PendingMessageList";

	Core::getObjectBroker()->registerClass(className, this);
}

void PendingMessageListHelper::finalizeHelper() {
	PendingMessageListHelper::finalize();
}

DistributedObject* PendingMessageListHelper::instantiateObject() {
	return new PendingMessageList(DummyConstructorParameter::instance());
}

DistributedObjectServant* PendingMessageListHelper::instantiateServant() {
	return new PendingMessageListImplementation();
}

DistributedObjectAdapter* PendingMessageListHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PendingMessageListAdapter(static_cast<PendingMessageList*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

