/*
 *	autogen/server/chat/room/ChatRoom.cpp generated by engine3 IDL compiler 0.60
 */

#include "ChatRoom.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/chat/ChatManager.h"

/*
 *	ChatRoomStub
 */

enum {RPC_INIT__ZONESERVER_CHATROOM_STRING_ = 1944964435,RPC_SENDTO__CREATUREOBJECT_,RPC_SENDDESTROYTO__CREATUREOBJECT_,RPC_ADDSUBROOM__STRING_INT_,RPC_REMOVESUBROOM__STRING_,RPC_GETSUBROOM__INT_,RPC_GETSUBROOM__STRING_,RPC_GETSUBROOMSSIZE__,RPC_ADDPLAYER__CREATUREOBJECT_,RPC_REMOVEPLAYER__CREATUREOBJECT_BOOL_,RPC_REMOVEALLPLAYERS__,RPC_GETPLAYERSIZE__,RPC_GETPLAYER__INT_,RPC_HASPLAYER__CREATUREOBJECT_,RPC_HASPLAYER__STRING_,RPC_ADDMODERATOR__CREATUREOBJECT_,RPC_REMOVEMODERATOR__CREATUREOBJECT_,RPC_REMOVEALLMODERATORS__,RPC_GETMODERATORSIZE__,RPC_GETMODERATORNAME__INT_,RPC_HASMODERATOR__CREATUREOBJECT_,RPC_ADDINVITED__CREATUREOBJECT_,RPC_REMOVEINVITED__CREATUREOBJECT_,RPC_REMOVEALLINVITED__,RPC_GETINVITEDSIZE__,RPC_GETINVITEDNAME__INT_,RPC_HASINVITED__CREATUREOBJECT_,RPC_ADDBANNED__CREATUREOBJECT_,RPC_REMOVEBANNED__CREATUREOBJECT_,RPC_REMOVEALLBANNED__,RPC_GETBANNEDSIZE__,RPC_GETBANNEDNAME__INT_,RPC_HASBANNED__CREATUREOBJECT_,RPC_BROADCASTMESSAGE__BASEMESSAGE_,RPC_BROADCASTMESSAGECHECKIGNORE__BASEMESSAGE_STRING_,RPC_CHECKENTERPERMISSION__CREATUREOBJECT_,RPC_GETPARENT__,RPC_SETPRIVATE__,RPC_SETPUBLIC__,RPC_ISPUBLIC__,RPC_ISPRIVATE__,RPC_CANENTER__,RPC_SETCANENTER__BOOL_,RPC_SUBROOMSALLOWED__,RPC_SETALLOWSUBROOMS__BOOL_,RPC_ISMODERATED__,RPC_SETMODERATED__BOOL_,RPC_SETNAME__STRING_,RPC_GETNAME__,RPC_SETFULLPATH__STRING_,RPC_GETFULLPATH__,RPC_SETOWNERID__LONG_,RPC_GETOWNERID__,RPC_SETOWNERNAME__STRING_,RPC_GETOWNERNAME__,RPC_SETCREATOR__STRING_,RPC_GETCREATOR__,RPC_SETTITLE__UNICODESTRING_,RPC_GETTITLE__,RPC_GETLASTJOINTIME__,RPC_GETGALAXYNAME__,RPC_SETROOMID__INT_,RPC_GETROOMID__,RPC_SETZONESERVER__ZONESERVER_,RPC_GETZONESERVER__,RPC_SETCHATMANAGER__CHATMANAGER_,RPC_SETCHATROOMTYPE__INT_,RPC_GETCHATROOMTYPE__,RPC_HASPERSISTENTPARENT__,RPC_SETPARENTISPERSISTENT__BOOL_,RPC_SETPARENTROOMID__INT_,RPC_SETDISABLED__BOOL_,RPC_ISDISABLED__,RPC_ISPERSISTENT__};

ChatRoom::ChatRoom() : ManagedObject(DummyConstructorParameter::instance()) {
	ChatRoomImplementation* _implementation = new ChatRoomImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ChatRoom");
}

ChatRoom::ChatRoom(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("ChatRoom");
}

ChatRoom::~ChatRoom() {
}



void ChatRoom::init(ZoneServer* serv, ChatRoom* parent, const String& roomName) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INIT__ZONESERVER_CHATROOM_STRING_);
		method.addObjectParameter(serv);
		method.addObjectParameter(parent);
		method.addAsciiParameter(roomName);

		method.executeWithVoidReturn();
	} else {
		_implementation->init(serv, parent, roomName);
	}
}

void ChatRoom::sendTo(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendTo(player);
	}
}

void ChatRoom::sendDestroyTo(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDESTROYTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendDestroyTo(player);
	}
}

void ChatRoom::addSubRoom(const String& name, unsigned int roomID) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSUBROOM__STRING_INT_);
		method.addAsciiParameter(name);
		method.addUnsignedIntParameter(roomID);

		method.executeWithVoidReturn();
	} else {
		_implementation->addSubRoom(name, roomID);
	}
}

void ChatRoom::removeSubRoom(const String& channel) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESUBROOM__STRING_);
		method.addAsciiParameter(channel);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeSubRoom(channel);
	}
}

unsigned int ChatRoom::getSubRoom(int i) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSUBROOM__INT_);
		method.addSignedIntParameter(i);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getSubRoom(i);
	}
}

unsigned int ChatRoom::getSubRoom(const String& name) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSUBROOM__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getSubRoom(name);
	}
}

int ChatRoom::getSubRoomsSize() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSUBROOMSSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSubRoomsSize();
	}
}

void ChatRoom::addPlayer(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->addPlayer(player);
	}
}

void ChatRoom::removePlayer(CreatureObject* player, bool disconnecting) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPLAYER__CREATUREOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(disconnecting);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->removePlayer(player, disconnecting);
	}
}

void ChatRoom::removeAllPlayers() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLPLAYERS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeAllPlayers();
	}
}

int ChatRoom::getPlayerSize() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYERSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPlayerSize();
	}
}

CreatureObject* ChatRoom::getPlayer(int idx) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__INT_);
		method.addSignedIntParameter(idx);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPlayer(idx);
	}
}

bool ChatRoom::hasPlayer(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasPlayer(player);
	}
}

bool ChatRoom::hasPlayer(const String& name) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPLAYER__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasPlayer(name);
	}
}

void ChatRoom::addModerator(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMODERATOR__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->addModerator(player);
	}
}

void ChatRoom::removeModerator(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMODERATOR__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeModerator(player);
	}
}

void ChatRoom::removeAllModerators() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLMODERATORS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeAllModerators();
	}
}

int ChatRoom::getModeratorSize() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMODERATORSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getModeratorSize();
	}
}

String ChatRoom::getModeratorName(int idx) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMODERATORNAME__INT_);
		method.addSignedIntParameter(idx);

		String _return_getModeratorName;
		method.executeWithAsciiReturn(_return_getModeratorName);
		return _return_getModeratorName;
	} else {
		return _implementation->getModeratorName(idx);
	}
}

bool ChatRoom::hasModerator(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMODERATOR__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasModerator(player);
	}
}

void ChatRoom::addInvited(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDINVITED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->addInvited(player);
	}
}

void ChatRoom::removeInvited(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEINVITED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeInvited(player);
	}
}

void ChatRoom::removeAllInvited() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLINVITED__);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeAllInvited();
	}
}

int ChatRoom::getInvitedSize() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINVITEDSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getInvitedSize();
	}
}

String ChatRoom::getInvitedName(int idx) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINVITEDNAME__INT_);
		method.addSignedIntParameter(idx);

		String _return_getInvitedName;
		method.executeWithAsciiReturn(_return_getInvitedName);
		return _return_getInvitedName;
	} else {
		return _implementation->getInvitedName(idx);
	}
}

bool ChatRoom::hasInvited(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASINVITED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasInvited(player);
	}
}

void ChatRoom::addBanned(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBANNED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->addBanned(player);
	}
}

void ChatRoom::removeBanned(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEBANNED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeBanned(player);
	}
}

void ChatRoom::removeAllBanned() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLBANNED__);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeAllBanned();
	}
}

int ChatRoom::getBannedSize() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBANNEDSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getBannedSize();
	}
}

String ChatRoom::getBannedName(int idx) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBANNEDNAME__INT_);
		method.addSignedIntParameter(idx);

		String _return_getBannedName;
		method.executeWithAsciiReturn(_return_getBannedName);
		return _return_getBannedName;
	} else {
		return _implementation->getBannedName(idx);
	}
}

bool ChatRoom::hasBanned(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASBANNED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasBanned(player);
	}
}

void ChatRoom::broadcastMessage(BaseMessage* msg) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEMESSAGE_);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessage(msg);
	}
}

void ChatRoom::broadcastMessageCheckIgnore(BaseMessage* msg, const String& senderName) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGECHECKIGNORE__BASEMESSAGE_STRING_);
		method.addObjectParameter(msg);
		method.addAsciiParameter(senderName);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessageCheckIgnore(msg, senderName);
	}
}

int ChatRoom::checkEnterPermission(CreatureObject* player) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKENTERPERMISSION__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->checkEnterPermission(player);
	}
}

void ChatRoom::broadcastMessages(Vector<BaseMessage*>* messages) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->broadcastMessages(messages);
	}
}

Reference<ChatRoom* > ChatRoom::getParent() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENT__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getParent();
	}
}

void ChatRoom::setPrivate() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPRIVATE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPrivate();
	}
}

void ChatRoom::setPublic() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPUBLIC__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPublic();
	}
}

bool ChatRoom::isPublic() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPUBLIC__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPublic();
	}
}

bool ChatRoom::isPrivate() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPRIVATE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPrivate();
	}
}

bool ChatRoom::canEnter() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANENTER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->canEnter();
	}
}

void ChatRoom::setCanEnter(bool value) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCANENTER__BOOL_);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCanEnter(value);
	}
}

bool ChatRoom::subroomsAllowed() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUBROOMSALLOWED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->subroomsAllowed();
	}
}

void ChatRoom::setAllowSubrooms(bool value) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETALLOWSUBROOMS__BOOL_);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setAllowSubrooms(value);
	}
}

bool ChatRoom::isModerated() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMODERATED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isModerated();
	}
}

void ChatRoom::setModerated(bool moderate) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMODERATED__BOOL_);
		method.addBooleanParameter(moderate);

		method.executeWithVoidReturn();
	} else {
		_implementation->setModerated(moderate);
	}
}

void ChatRoom::setName(const String& Name) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNAME__STRING_);
		method.addAsciiParameter(Name);

		method.executeWithVoidReturn();
	} else {
		_implementation->setName(Name);
	}
}

String ChatRoom::getName() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNAME__);

		String _return_getName;
		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else {
		return _implementation->getName();
	}
}

void ChatRoom::setFullPath(const String& newPath) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFULLPATH__STRING_);
		method.addAsciiParameter(newPath);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFullPath(newPath);
	}
}

String ChatRoom::getFullPath() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFULLPATH__);

		String _return_getFullPath;
		method.executeWithAsciiReturn(_return_getFullPath);
		return _return_getFullPath;
	} else {
		return _implementation->getFullPath();
	}
}

void ChatRoom::setOwnerID(unsigned long long objectID) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNERID__LONG_);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOwnerID(objectID);
	}
}

unsigned long long ChatRoom::getOwnerID() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getOwnerID();
	}
}

void ChatRoom::setOwnerName(const String& name) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNERNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOwnerName(name);
	}
}

String ChatRoom::getOwnerName() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNERNAME__);

		String _return_getOwnerName;
		method.executeWithAsciiReturn(_return_getOwnerName);
		return _return_getOwnerName;
	} else {
		return _implementation->getOwnerName();
	}
}

void ChatRoom::setCreator(const String& name) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCREATOR__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCreator(name);
	}
}

String ChatRoom::getCreator() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCREATOR__);

		String _return_getCreator;
		method.executeWithAsciiReturn(_return_getCreator);
		return _return_getCreator;
	} else {
		return _implementation->getCreator();
	}
}

void ChatRoom::setTitle(const UnicodeString& uniTitle) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTITLE__UNICODESTRING_);
		method.addUnicodeParameter(uniTitle);

		method.executeWithVoidReturn();
	} else {
		_implementation->setTitle(uniTitle);
	}
}

UnicodeString ChatRoom::getTitle() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTITLE__);

		UnicodeString _return_getTitle;
		method.executeWithUnicodeReturn(_return_getTitle);
		return _return_getTitle;
	} else {
		return _implementation->getTitle();
	}
}

unsigned int ChatRoom::getLastJoinTime() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLASTJOINTIME__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getLastJoinTime();
	}
}

String ChatRoom::getGalaxyName() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGALAXYNAME__);

		String _return_getGalaxyName;
		method.executeWithAsciiReturn(_return_getGalaxyName);
		return _return_getGalaxyName;
	} else {
		return _implementation->getGalaxyName();
	}
}

void ChatRoom::setRoomID(unsigned int id) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETROOMID__INT_);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else {
		_implementation->setRoomID(id);
	}
}

unsigned int ChatRoom::getRoomID() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOMID__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getRoomID();
	}
}

void ChatRoom::setZoneServer(ZoneServer* srv) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONESERVER__ZONESERVER_);
		method.addObjectParameter(srv);

		method.executeWithVoidReturn();
	} else {
		_implementation->setZoneServer(srv);
	}
}

ZoneServer* ChatRoom::getZoneServer() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONESERVER__);

		return static_cast<ZoneServer*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getZoneServer();
	}
}

void ChatRoom::setChatManager(ChatManager* mgr) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCHATMANAGER__CHATMANAGER_);
		method.addObjectParameter(mgr);

		method.executeWithVoidReturn();
	} else {
		_implementation->setChatManager(mgr);
	}
}

void ChatRoom::setChatRoomType(int type) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCHATROOMTYPE__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->setChatRoomType(type);
	}
}

int ChatRoom::getChatRoomType() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOMTYPE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getChatRoomType();
	}
}

bool ChatRoom::hasPersistentParent() const {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPERSISTENTPARENT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasPersistentParent();
	}
}

void ChatRoom::setParentIsPersistent(bool value) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPARENTISPERSISTENT__BOOL_);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setParentIsPersistent(value);
	}
}

void ChatRoom::setParentRoomID(unsigned int value) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPARENTROOMID__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setParentRoomID(value);
	}
}

void ChatRoom::setDisabled(bool value) {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDISABLED__BOOL_);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDisabled(value);
	}
}

bool ChatRoom::isDisabled() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDISABLED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDisabled();
	}
}

bool ChatRoom::isPersistent() {
	ChatRoomImplementation* _implementation = static_cast<ChatRoomImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPERSISTENT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPersistent();
	}
}

DistributedObjectServant* ChatRoom::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ChatRoom::_getImplementationForRead() const {
	return _impl;
}

void ChatRoom::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ChatRoomImplementation
 */

ChatRoomImplementation::ChatRoomImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ChatRoomImplementation::~ChatRoomImplementation() {
}


void ChatRoomImplementation::finalize() {
}

void ChatRoomImplementation::_initializeImplementation() {
	_setClassHelper(ChatRoomHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ChatRoomImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ChatRoom*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ChatRoomImplementation::_getStub() {
	return _this.get();
}

ChatRoomImplementation::operator const ChatRoom*() {
	return _this.get();
}

void ChatRoomImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ChatRoomImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ChatRoomImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ChatRoomImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ChatRoomImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ChatRoomImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ChatRoomImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ChatRoomImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ChatRoom");

}

void ChatRoomImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ChatRoomImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ChatRoomImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xe99edc33: //ChatRoom.name
		TypeInfo<String >::parseFromBinaryStream(&name, stream);
		return true;

	case 0x725e5873: //ChatRoom.fullPath
		TypeInfo<String >::parseFromBinaryStream(&fullPath, stream);
		return true;

	case 0x195b3a84: //ChatRoom.ownerID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&ownerID, stream);
		return true;

	case 0x38cdc6d8: //ChatRoom.ownerName
		TypeInfo<String >::parseFromBinaryStream(&ownerName, stream);
		return true;

	case 0xcd6f652d: //ChatRoom.creator
		TypeInfo<String >::parseFromBinaryStream(&creator, stream);
		return true;

	case 0x9026d49a: //ChatRoom.title
		TypeInfo<UnicodeString >::parseFromBinaryStream(&title, stream);
		return true;

	case 0xfd3c7b6a: //ChatRoom.roomID
		TypeInfo<unsigned int >::parseFromBinaryStream(&roomID, stream);
		return true;

	case 0xfbcb9e84: //ChatRoom.parentIsPersistent
		TypeInfo<bool >::parseFromBinaryStream(&parentIsPersistent, stream);
		return true;

	case 0x74508b4c: //ChatRoom.parentRoomID
		TypeInfo<unsigned int >::parseFromBinaryStream(&parentRoomID, stream);
		return true;

	case 0x7dc6373b: //ChatRoom.isPublicRoom
		TypeInfo<bool >::parseFromBinaryStream(&isPublicRoom, stream);
		return true;

	case 0xd6f6f60c: //ChatRoom.moderated
		TypeInfo<bool >::parseFromBinaryStream(&moderated, stream);
		return true;

	case 0xc54b24b: //ChatRoom.canEnterRoom
		TypeInfo<bool >::parseFromBinaryStream(&canEnterRoom, stream);
		return true;

	case 0x9ad457de: //ChatRoom.allowSubrooms
		TypeInfo<bool >::parseFromBinaryStream(&allowSubrooms, stream);
		return true;

	case 0x31df482a: //ChatRoom.disabled
		TypeInfo<bool >::parseFromBinaryStream(&disabled, stream);
		return true;

	case 0xc103fa1d: //ChatRoom.roomType
		TypeInfo<int >::parseFromBinaryStream(&roomType, stream);
		return true;

	case 0x8dcd9baf: //ChatRoom.lastJoin
		TypeInfo<Time >::parseFromBinaryStream(&lastJoin, stream);
		return true;

	case 0xc3b8c694: //ChatRoom.subRooms
		TypeInfo<VectorMap<String, unsigned int> >::parseFromBinaryStream(&subRooms, stream);
		return true;

	case 0xdbcad1a3: //ChatRoom.moderatorList
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&moderatorList, stream);
		return true;

	case 0xfea75e1a: //ChatRoom.invitedList
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&invitedList, stream);
		return true;

	case 0x181fbd17: //ChatRoom.bannedList
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&bannedList, stream);
		return true;

	}

	return false;
}

void ChatRoomImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ChatRoomImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ChatRoomImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xe99edc33; //ChatRoom.name
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&name, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x725e5873; //ChatRoom.fullPath
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&fullPath, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x195b3a84; //ChatRoom.ownerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&ownerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x38cdc6d8; //ChatRoom.ownerName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&ownerName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcd6f652d; //ChatRoom.creator
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&creator, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9026d49a; //ChatRoom.title
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<UnicodeString >::toBinaryStream(&title, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfd3c7b6a; //ChatRoom.roomID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&roomID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfbcb9e84; //ChatRoom.parentIsPersistent
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&parentIsPersistent, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x74508b4c; //ChatRoom.parentRoomID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&parentRoomID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7dc6373b; //ChatRoom.isPublicRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&isPublicRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd6f6f60c; //ChatRoom.moderated
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&moderated, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc54b24b; //ChatRoom.canEnterRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&canEnterRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9ad457de; //ChatRoom.allowSubrooms
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&allowSubrooms, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x31df482a; //ChatRoom.disabled
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&disabled, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc103fa1d; //ChatRoom.roomType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&roomType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8dcd9baf; //ChatRoom.lastJoin
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastJoin, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc3b8c694; //ChatRoom.subRooms
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, unsigned int> >::toBinaryStream(&subRooms, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xdbcad1a3; //ChatRoom.moderatorList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&moderatorList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfea75e1a; //ChatRoom.invitedList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&invitedList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x181fbd17; //ChatRoom.bannedList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&bannedList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 20;
}

ChatRoomImplementation::ChatRoomImplementation() {
	_initializeImplementation();
	// server/chat/room/ChatRoom.idl():  		server = null;
	server = NULL;
	// server/chat/room/ChatRoom.idl():  		manager = null;
	manager = NULL;
	// server/chat/room/ChatRoom.idl():  		name = "";
	name = "";
	// server/chat/room/ChatRoom.idl():  		roomID = 0;
	roomID = 0;
	// server/chat/room/ChatRoom.idl():  		parentRoomID = 0;
	parentRoomID = 0;
	// server/chat/room/ChatRoom.idl():  		ownerID = 0;
	ownerID = 0;
	// server/chat/room/ChatRoom.idl():  		ownerName = "system";
	ownerName = "system";
	// server/chat/room/ChatRoom.idl():  		creator = "system";
	creator = "system";
	// server/chat/room/ChatRoom.idl():  		title = "";
	title = "";
	// server/chat/room/ChatRoom.idl():  		fullPath = "";
	fullPath = "";
	// server/chat/room/ChatRoom.idl():  		parentIsPersistent = false;
	parentIsPersistent = false;
	// server/chat/room/ChatRoom.idl():  		isPublicRoom = true;
	isPublicRoom = true;
	// server/chat/room/ChatRoom.idl():  		moderated = false;
	moderated = false;
	// server/chat/room/ChatRoom.idl():  		canEnterRoom = false;
	canEnterRoom = false;
	// server/chat/room/ChatRoom.idl():  		allowSubrooms = false;
	allowSubrooms = false;
	// server/chat/room/ChatRoom.idl():  		disabled = false;
	disabled = false;
	// server/chat/room/ChatRoom.idl():  		roomType = DEFAULT;
	roomType = DEFAULT;
}

void ChatRoomImplementation::addSubRoom(const String& name, unsigned int roomID) {
	// server/chat/room/ChatRoom.idl():  		}
{
	Locker _locker((&subRoomsMutex));
	// server/chat/room/ChatRoom.idl():  			subRooms.put(name, roomID);
	(&subRooms)->put(name, roomID);
}
}

void ChatRoomImplementation::removeSubRoom(const String& channel) {
	// server/chat/room/ChatRoom.idl():  		}
{
	Locker _locker((&subRoomsMutex));
	// server/chat/room/ChatRoom.idl():  			subRooms.drop(channel);
	(&subRooms)->drop(channel);
}
}

unsigned int ChatRoomImplementation::getSubRoom(int i) {
	// server/chat/room/ChatRoom.idl():  		}
{
	Locker _locker((&subRoomsMutex));
	// server/chat/room/ChatRoom.idl():  			return subRooms.get(i);
	return (&subRooms)->get(i);
}
}

unsigned int ChatRoomImplementation::getSubRoom(const String& name) {
	// server/chat/room/ChatRoom.idl():  		}
{
	Locker _locker((&subRoomsMutex));
	// server/chat/room/ChatRoom.idl():  			return subRooms.get(name);
	return (&subRooms)->get(name);
}
}

int ChatRoomImplementation::getSubRoomsSize() {
	// server/chat/room/ChatRoom.idl():  		}
{
	Locker _locker((&subRoomsMutex));
	// server/chat/room/ChatRoom.idl():  			return subRooms.size();
	return (&subRooms)->size();
}
}

int ChatRoomImplementation::getPlayerSize() {
	// server/chat/room/ChatRoom.idl():  		return playerList.size();
	return (&playerList)->size();
}

bool ChatRoomImplementation::hasPlayer(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		return playerList.contains(player.getFirstName());
	return (&playerList)->contains(player->getFirstName());
}

bool ChatRoomImplementation::hasPlayer(const String& name) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		return playerList.contains(name);
	return (&playerList)->contains(name);
}

void ChatRoomImplementation::addModerator(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		moderatorList.put(player.getObjectID());
	(&moderatorList)->put(player->getObjectID());
}

void ChatRoomImplementation::removeModerator(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		moderatorList.removeElement(player.getObjectID());
	(&moderatorList)->removeElement(player->getObjectID());
}

void ChatRoomImplementation::removeAllModerators() {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		moderatorList.removeAll();
	(&moderatorList)->removeAll();
}

int ChatRoomImplementation::getModeratorSize() {
	// server/chat/room/ChatRoom.idl():  		return moderatorList.size();
	return (&moderatorList)->size();
}

bool ChatRoomImplementation::hasModerator(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		return moderatorList.contains(player.getObjectID());
	return (&moderatorList)->contains(player->getObjectID());
}

void ChatRoomImplementation::addInvited(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		invitedList.put(player.getObjectID());
	(&invitedList)->put(player->getObjectID());
}

void ChatRoomImplementation::removeInvited(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		invitedList.removeElement(player.getObjectID());
	(&invitedList)->removeElement(player->getObjectID());
}

void ChatRoomImplementation::removeAllInvited() {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		invitedList.removeAll();
	(&invitedList)->removeAll();
}

int ChatRoomImplementation::getInvitedSize() {
	// server/chat/room/ChatRoom.idl():  		return invitedList.size();
	return (&invitedList)->size();
}

bool ChatRoomImplementation::hasInvited(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		return invitedList.contains(player.getObjectID());
	return (&invitedList)->contains(player->getObjectID());
}

void ChatRoomImplementation::addBanned(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		bannedList.put(player.getObjectID());
	(&bannedList)->put(player->getObjectID());
}

void ChatRoomImplementation::removeBanned(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		bannedList.removeElement(player.getObjectID());
	(&bannedList)->removeElement(player->getObjectID());
}

void ChatRoomImplementation::removeAllBanned() {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		bannedList.removeAll();
	(&bannedList)->removeAll();
}

int ChatRoomImplementation::getBannedSize() {
	// server/chat/room/ChatRoom.idl():  		return bannedList.size();
	return (&bannedList)->size();
}

bool ChatRoomImplementation::hasBanned(CreatureObject* player) {
	Locker _locker(_this.get());
	// server/chat/room/ChatRoom.idl():  		return bannedList.contains(player.getObjectID());
	return (&bannedList)->contains(player->getObjectID());
}

Reference<ChatRoom* > ChatRoomImplementation::getParent() {
	// server/chat/room/ChatRoom.idl():  		return manager.getChatRoom(parentRoomID);
	return manager->getChatRoom(parentRoomID);
}

void ChatRoomImplementation::setPrivate() {
	// server/chat/room/ChatRoom.idl():  		isPublicRoom = false;
	isPublicRoom = false;
}

void ChatRoomImplementation::setPublic() {
	// server/chat/room/ChatRoom.idl():  		isPublicRoom = true;
	isPublicRoom = true;
}

bool ChatRoomImplementation::isPublic() {
	// server/chat/room/ChatRoom.idl():  		return isPublicRoom == true;
	return isPublicRoom == true;
}

bool ChatRoomImplementation::isPrivate() {
	// server/chat/room/ChatRoom.idl():  		return isPublicRoom == false;
	return isPublicRoom == false;
}

bool ChatRoomImplementation::canEnter() const{
	// server/chat/room/ChatRoom.idl():  		return canEnterRoom;
	return canEnterRoom;
}

void ChatRoomImplementation::setCanEnter(bool value) {
	// server/chat/room/ChatRoom.idl():  		canEnterRoom = value;
	canEnterRoom = value;
}

bool ChatRoomImplementation::subroomsAllowed() const{
	// server/chat/room/ChatRoom.idl():  		return allowSubrooms;
	return allowSubrooms;
}

void ChatRoomImplementation::setAllowSubrooms(bool value) {
	// server/chat/room/ChatRoom.idl():  		allowSubrooms = value;
	allowSubrooms = value;
}

bool ChatRoomImplementation::isModerated() const{
	// server/chat/room/ChatRoom.idl():  		return moderated;
	return moderated;
}

void ChatRoomImplementation::setModerated(bool moderate) {
	// server/chat/room/ChatRoom.idl():  		moderated = moderate;
	moderated = moderate;
}

void ChatRoomImplementation::setName(const String& Name) {
	// server/chat/room/ChatRoom.idl():  		name = Name;
	name = Name;
}

String ChatRoomImplementation::getName() const{
	// server/chat/room/ChatRoom.idl():  		return name;
	return name;
}

void ChatRoomImplementation::setFullPath(const String& newPath) {
	// server/chat/room/ChatRoom.idl():  		fullPath = newPath;
	fullPath = newPath;
}

String ChatRoomImplementation::getFullPath() const{
	// server/chat/room/ChatRoom.idl():  		return fullPath;
	return fullPath;
}

void ChatRoomImplementation::setOwnerID(unsigned long long objectID) {
	// server/chat/room/ChatRoom.idl():  		ownerID = objectID;
	ownerID = objectID;
}

unsigned long long ChatRoomImplementation::getOwnerID() const{
	// server/chat/room/ChatRoom.idl():  		return ownerID;
	return ownerID;
}

void ChatRoomImplementation::setOwnerName(const String& name) {
	// server/chat/room/ChatRoom.idl():  		ownerName = name;
	ownerName = name;
}

String ChatRoomImplementation::getOwnerName() const{
	// server/chat/room/ChatRoom.idl():  		return ownerName;
	return ownerName;
}

void ChatRoomImplementation::setCreator(const String& name) {
	// server/chat/room/ChatRoom.idl():  		creator = name;
	creator = name;
}

String ChatRoomImplementation::getCreator() {
	// server/chat/room/ChatRoom.idl():  		return creator;
	return creator;
}

void ChatRoomImplementation::setTitle(const UnicodeString& uniTitle) {
	// server/chat/room/ChatRoom.idl():  		title = uniTitle;
	title = uniTitle;
}

UnicodeString ChatRoomImplementation::getTitle() const{
	// server/chat/room/ChatRoom.idl():  		return title;
	return title;
}

unsigned int ChatRoomImplementation::getLastJoinTime() {
	// server/chat/room/ChatRoom.idl():  		return lastJoin.miliDifference();
	return (&lastJoin)->miliDifference();
}

void ChatRoomImplementation::setRoomID(unsigned int id) {
	// server/chat/room/ChatRoom.idl():  		roomID = id;
	roomID = id;
}

unsigned int ChatRoomImplementation::getRoomID() const{
	// server/chat/room/ChatRoom.idl():  		return roomID;
	return roomID;
}

void ChatRoomImplementation::setZoneServer(ZoneServer* srv) {
	// server/chat/room/ChatRoom.idl():  		server = srv;
	server = srv;
}

ZoneServer* ChatRoomImplementation::getZoneServer() {
	// server/chat/room/ChatRoom.idl():  		return server;
	return server;
}

void ChatRoomImplementation::setChatManager(ChatManager* mgr) {
	// server/chat/room/ChatRoom.idl():  		manager = mgr;
	manager = mgr;
}

void ChatRoomImplementation::setChatRoomType(int type) {
	// server/chat/room/ChatRoom.idl():  		roomType = type;
	roomType = type;
}

int ChatRoomImplementation::getChatRoomType() const{
	// server/chat/room/ChatRoom.idl():  		return roomType;
	return roomType;
}

bool ChatRoomImplementation::hasPersistentParent() const{
	// server/chat/room/ChatRoom.idl():  		return parentIsPersistent;
	return parentIsPersistent;
}

void ChatRoomImplementation::setParentIsPersistent(bool value) {
	// server/chat/room/ChatRoom.idl():  		parentIsPersistent = value;
	parentIsPersistent = value;
}

void ChatRoomImplementation::setParentRoomID(unsigned int value) {
	// server/chat/room/ChatRoom.idl():  		parentRoomID = value;
	parentRoomID = value;
}

void ChatRoomImplementation::setDisabled(bool value) {
	// server/chat/room/ChatRoom.idl():  		disabled = value;
	disabled = value;
}

bool ChatRoomImplementation::isDisabled() {
	// server/chat/room/ChatRoom.idl():  		return disabled == true;
	return disabled == true;
}

bool ChatRoomImplementation::isPersistent() {
	// server/chat/room/ChatRoom.idl():  		return roomType == CUSTOM;
	return roomType == CUSTOM;
}

/*
 *	ChatRoomAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ChatRoomAdapter::ChatRoomAdapter(ChatRoom* obj) : ManagedObjectAdapter(obj) {
}

void ChatRoomAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INIT__ZONESERVER_CHATROOM_STRING_:
		{
			ZoneServer* serv = static_cast<ZoneServer*>(inv->getObjectParameter());
			ChatRoom* parent = static_cast<ChatRoom*>(inv->getObjectParameter());
			 String roomName; inv->getAsciiParameter(roomName);
			
			init(serv, parent, roomName);
			
		}
		break;
	case RPC_SENDTO__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendTo(player);
			
		}
		break;
	case RPC_SENDDESTROYTO__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendDestroyTo(player);
			
		}
		break;
	case RPC_ADDSUBROOM__STRING_INT_:
		{
			 String name; inv->getAsciiParameter(name);
			unsigned int roomID = inv->getUnsignedIntParameter();
			
			addSubRoom(name, roomID);
			
		}
		break;
	case RPC_REMOVESUBROOM__STRING_:
		{
			 String channel; inv->getAsciiParameter(channel);
			
			removeSubRoom(channel);
			
		}
		break;
	case RPC_GETSUBROOM__INT_:
		{
			int i = inv->getSignedIntParameter();
			
			unsigned int _m_res = getSubRoom(i);
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETSUBROOM__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			unsigned int _m_res = getSubRoom(name);
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETSUBROOMSSIZE__:
		{
			
			int _m_res = getSubRoomsSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ADDPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			addPlayer(player);
			
		}
		break;
	case RPC_REMOVEPLAYER__CREATUREOBJECT_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			bool disconnecting = inv->getBooleanParameter();
			
			removePlayer(player, disconnecting);
			
		}
		break;
	case RPC_REMOVEALLPLAYERS__:
		{
			
			removeAllPlayers();
			
		}
		break;
	case RPC_GETPLAYERSIZE__:
		{
			
			int _m_res = getPlayerSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPLAYER__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			DistributedObject* _m_res = getPlayer(idx);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_HASPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = hasPlayer(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASPLAYER__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			bool _m_res = hasPlayer(name);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDMODERATOR__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			addModerator(player);
			
		}
		break;
	case RPC_REMOVEMODERATOR__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeModerator(player);
			
		}
		break;
	case RPC_REMOVEALLMODERATORS__:
		{
			
			removeAllModerators();
			
		}
		break;
	case RPC_GETMODERATORSIZE__:
		{
			
			int _m_res = getModeratorSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMODERATORNAME__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			String _m_res = getModeratorName(idx);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_HASMODERATOR__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = hasModerator(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDINVITED__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			addInvited(player);
			
		}
		break;
	case RPC_REMOVEINVITED__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeInvited(player);
			
		}
		break;
	case RPC_REMOVEALLINVITED__:
		{
			
			removeAllInvited();
			
		}
		break;
	case RPC_GETINVITEDSIZE__:
		{
			
			int _m_res = getInvitedSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETINVITEDNAME__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			String _m_res = getInvitedName(idx);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_HASINVITED__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = hasInvited(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDBANNED__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			addBanned(player);
			
		}
		break;
	case RPC_REMOVEBANNED__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeBanned(player);
			
		}
		break;
	case RPC_REMOVEALLBANNED__:
		{
			
			removeAllBanned();
			
		}
		break;
	case RPC_GETBANNEDSIZE__:
		{
			
			int _m_res = getBannedSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETBANNEDNAME__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			String _m_res = getBannedName(idx);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_HASBANNED__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = hasBanned(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_BROADCASTMESSAGE__BASEMESSAGE_:
		{
			BaseMessage* msg = static_cast<BaseMessage*>(inv->getObjectParameter());
			
			broadcastMessage(msg);
			
		}
		break;
	case RPC_BROADCASTMESSAGECHECKIGNORE__BASEMESSAGE_STRING_:
		{
			BaseMessage* msg = static_cast<BaseMessage*>(inv->getObjectParameter());
			 String senderName; inv->getAsciiParameter(senderName);
			
			broadcastMessageCheckIgnore(msg, senderName);
			
		}
		break;
	case RPC_CHECKENTERPERMISSION__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			int _m_res = checkEnterPermission(player);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPARENT__:
		{
			
			DistributedObject* _m_res = getParent();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SETPRIVATE__:
		{
			
			setPrivate();
			
		}
		break;
	case RPC_SETPUBLIC__:
		{
			
			setPublic();
			
		}
		break;
	case RPC_ISPUBLIC__:
		{
			
			bool _m_res = isPublic();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPRIVATE__:
		{
			
			bool _m_res = isPrivate();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CANENTER__:
		{
			
			bool _m_res = canEnter();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETCANENTER__BOOL_:
		{
			bool value = inv->getBooleanParameter();
			
			setCanEnter(value);
			
		}
		break;
	case RPC_SUBROOMSALLOWED__:
		{
			
			bool _m_res = subroomsAllowed();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETALLOWSUBROOMS__BOOL_:
		{
			bool value = inv->getBooleanParameter();
			
			setAllowSubrooms(value);
			
		}
		break;
	case RPC_ISMODERATED__:
		{
			
			bool _m_res = isModerated();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETMODERATED__BOOL_:
		{
			bool moderate = inv->getBooleanParameter();
			
			setModerated(moderate);
			
		}
		break;
	case RPC_SETNAME__STRING_:
		{
			 String Name; inv->getAsciiParameter(Name);
			
			setName(Name);
			
		}
		break;
	case RPC_GETNAME__:
		{
			
			String _m_res = getName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETFULLPATH__STRING_:
		{
			 String newPath; inv->getAsciiParameter(newPath);
			
			setFullPath(newPath);
			
		}
		break;
	case RPC_GETFULLPATH__:
		{
			
			String _m_res = getFullPath();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETOWNERID__LONG_:
		{
			unsigned long long objectID = inv->getUnsignedLongParameter();
			
			setOwnerID(objectID);
			
		}
		break;
	case RPC_GETOWNERID__:
		{
			
			unsigned long long _m_res = getOwnerID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_SETOWNERNAME__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			setOwnerName(name);
			
		}
		break;
	case RPC_GETOWNERNAME__:
		{
			
			String _m_res = getOwnerName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETCREATOR__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			setCreator(name);
			
		}
		break;
	case RPC_GETCREATOR__:
		{
			
			String _m_res = getCreator();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETTITLE__UNICODESTRING_:
		{
			 UnicodeString uniTitle; inv->getUnicodeParameter(uniTitle);
			
			setTitle(uniTitle);
			
		}
		break;
	case RPC_GETTITLE__:
		{
			
			UnicodeString _m_res = getTitle();
			resp->insertUnicode(_m_res);
		}
		break;
	case RPC_GETLASTJOINTIME__:
		{
			
			unsigned int _m_res = getLastJoinTime();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETGALAXYNAME__:
		{
			
			String _m_res = getGalaxyName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETROOMID__INT_:
		{
			unsigned int id = inv->getUnsignedIntParameter();
			
			setRoomID(id);
			
		}
		break;
	case RPC_GETROOMID__:
		{
			
			unsigned int _m_res = getRoomID();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_SETZONESERVER__ZONESERVER_:
		{
			ZoneServer* srv = static_cast<ZoneServer*>(inv->getObjectParameter());
			
			setZoneServer(srv);
			
		}
		break;
	case RPC_GETZONESERVER__:
		{
			
			DistributedObject* _m_res = getZoneServer();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SETCHATMANAGER__CHATMANAGER_:
		{
			ChatManager* mgr = static_cast<ChatManager*>(inv->getObjectParameter());
			
			setChatManager(mgr);
			
		}
		break;
	case RPC_SETCHATROOMTYPE__INT_:
		{
			int type = inv->getSignedIntParameter();
			
			setChatRoomType(type);
			
		}
		break;
	case RPC_GETCHATROOMTYPE__:
		{
			
			int _m_res = getChatRoomType();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HASPERSISTENTPARENT__:
		{
			
			bool _m_res = hasPersistentParent();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETPARENTISPERSISTENT__BOOL_:
		{
			bool value = inv->getBooleanParameter();
			
			setParentIsPersistent(value);
			
		}
		break;
	case RPC_SETPARENTROOMID__INT_:
		{
			unsigned int value = inv->getUnsignedIntParameter();
			
			setParentRoomID(value);
			
		}
		break;
	case RPC_SETDISABLED__BOOL_:
		{
			bool value = inv->getBooleanParameter();
			
			setDisabled(value);
			
		}
		break;
	case RPC_ISDISABLED__:
		{
			
			bool _m_res = isDisabled();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPERSISTENT__:
		{
			
			bool _m_res = isPersistent();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

void ChatRoomAdapter::init(ZoneServer* serv, ChatRoom* parent, const String& roomName) {
	(static_cast<ChatRoom*>(stub))->init(serv, parent, roomName);
}

void ChatRoomAdapter::sendTo(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->sendTo(player);
}

void ChatRoomAdapter::sendDestroyTo(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->sendDestroyTo(player);
}

void ChatRoomAdapter::addSubRoom(const String& name, unsigned int roomID) {
	(static_cast<ChatRoom*>(stub))->addSubRoom(name, roomID);
}

void ChatRoomAdapter::removeSubRoom(const String& channel) {
	(static_cast<ChatRoom*>(stub))->removeSubRoom(channel);
}

unsigned int ChatRoomAdapter::getSubRoom(int i) {
	return (static_cast<ChatRoom*>(stub))->getSubRoom(i);
}

unsigned int ChatRoomAdapter::getSubRoom(const String& name) {
	return (static_cast<ChatRoom*>(stub))->getSubRoom(name);
}

int ChatRoomAdapter::getSubRoomsSize() {
	return (static_cast<ChatRoom*>(stub))->getSubRoomsSize();
}

void ChatRoomAdapter::addPlayer(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->addPlayer(player);
}

void ChatRoomAdapter::removePlayer(CreatureObject* player, bool disconnecting) {
	(static_cast<ChatRoom*>(stub))->removePlayer(player, disconnecting);
}

void ChatRoomAdapter::removeAllPlayers() {
	(static_cast<ChatRoom*>(stub))->removeAllPlayers();
}

int ChatRoomAdapter::getPlayerSize() {
	return (static_cast<ChatRoom*>(stub))->getPlayerSize();
}

CreatureObject* ChatRoomAdapter::getPlayer(int idx) {
	return (static_cast<ChatRoom*>(stub))->getPlayer(idx);
}

bool ChatRoomAdapter::hasPlayer(CreatureObject* player) {
	return (static_cast<ChatRoom*>(stub))->hasPlayer(player);
}

bool ChatRoomAdapter::hasPlayer(const String& name) {
	return (static_cast<ChatRoom*>(stub))->hasPlayer(name);
}

void ChatRoomAdapter::addModerator(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->addModerator(player);
}

void ChatRoomAdapter::removeModerator(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->removeModerator(player);
}

void ChatRoomAdapter::removeAllModerators() {
	(static_cast<ChatRoom*>(stub))->removeAllModerators();
}

int ChatRoomAdapter::getModeratorSize() {
	return (static_cast<ChatRoom*>(stub))->getModeratorSize();
}

String ChatRoomAdapter::getModeratorName(int idx) {
	return (static_cast<ChatRoom*>(stub))->getModeratorName(idx);
}

bool ChatRoomAdapter::hasModerator(CreatureObject* player) {
	return (static_cast<ChatRoom*>(stub))->hasModerator(player);
}

void ChatRoomAdapter::addInvited(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->addInvited(player);
}

void ChatRoomAdapter::removeInvited(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->removeInvited(player);
}

void ChatRoomAdapter::removeAllInvited() {
	(static_cast<ChatRoom*>(stub))->removeAllInvited();
}

int ChatRoomAdapter::getInvitedSize() {
	return (static_cast<ChatRoom*>(stub))->getInvitedSize();
}

String ChatRoomAdapter::getInvitedName(int idx) {
	return (static_cast<ChatRoom*>(stub))->getInvitedName(idx);
}

bool ChatRoomAdapter::hasInvited(CreatureObject* player) {
	return (static_cast<ChatRoom*>(stub))->hasInvited(player);
}

void ChatRoomAdapter::addBanned(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->addBanned(player);
}

void ChatRoomAdapter::removeBanned(CreatureObject* player) {
	(static_cast<ChatRoom*>(stub))->removeBanned(player);
}

void ChatRoomAdapter::removeAllBanned() {
	(static_cast<ChatRoom*>(stub))->removeAllBanned();
}

int ChatRoomAdapter::getBannedSize() {
	return (static_cast<ChatRoom*>(stub))->getBannedSize();
}

String ChatRoomAdapter::getBannedName(int idx) {
	return (static_cast<ChatRoom*>(stub))->getBannedName(idx);
}

bool ChatRoomAdapter::hasBanned(CreatureObject* player) {
	return (static_cast<ChatRoom*>(stub))->hasBanned(player);
}

void ChatRoomAdapter::broadcastMessage(BaseMessage* msg) {
	(static_cast<ChatRoom*>(stub))->broadcastMessage(msg);
}

void ChatRoomAdapter::broadcastMessageCheckIgnore(BaseMessage* msg, const String& senderName) {
	(static_cast<ChatRoom*>(stub))->broadcastMessageCheckIgnore(msg, senderName);
}

int ChatRoomAdapter::checkEnterPermission(CreatureObject* player) {
	return (static_cast<ChatRoom*>(stub))->checkEnterPermission(player);
}

Reference<ChatRoom* > ChatRoomAdapter::getParent() {
	return (static_cast<ChatRoom*>(stub))->getParent();
}

void ChatRoomAdapter::setPrivate() {
	(static_cast<ChatRoom*>(stub))->setPrivate();
}

void ChatRoomAdapter::setPublic() {
	(static_cast<ChatRoom*>(stub))->setPublic();
}

bool ChatRoomAdapter::isPublic() {
	return (static_cast<ChatRoom*>(stub))->isPublic();
}

bool ChatRoomAdapter::isPrivate() {
	return (static_cast<ChatRoom*>(stub))->isPrivate();
}

bool ChatRoomAdapter::canEnter() const {
	return (static_cast<ChatRoom*>(stub))->canEnter();
}

void ChatRoomAdapter::setCanEnter(bool value) {
	(static_cast<ChatRoom*>(stub))->setCanEnter(value);
}

bool ChatRoomAdapter::subroomsAllowed() const {
	return (static_cast<ChatRoom*>(stub))->subroomsAllowed();
}

void ChatRoomAdapter::setAllowSubrooms(bool value) {
	(static_cast<ChatRoom*>(stub))->setAllowSubrooms(value);
}

bool ChatRoomAdapter::isModerated() const {
	return (static_cast<ChatRoom*>(stub))->isModerated();
}

void ChatRoomAdapter::setModerated(bool moderate) {
	(static_cast<ChatRoom*>(stub))->setModerated(moderate);
}

void ChatRoomAdapter::setName(const String& Name) {
	(static_cast<ChatRoom*>(stub))->setName(Name);
}

String ChatRoomAdapter::getName() const {
	return (static_cast<ChatRoom*>(stub))->getName();
}

void ChatRoomAdapter::setFullPath(const String& newPath) {
	(static_cast<ChatRoom*>(stub))->setFullPath(newPath);
}

String ChatRoomAdapter::getFullPath() const {
	return (static_cast<ChatRoom*>(stub))->getFullPath();
}

void ChatRoomAdapter::setOwnerID(unsigned long long objectID) {
	(static_cast<ChatRoom*>(stub))->setOwnerID(objectID);
}

unsigned long long ChatRoomAdapter::getOwnerID() const {
	return (static_cast<ChatRoom*>(stub))->getOwnerID();
}

void ChatRoomAdapter::setOwnerName(const String& name) {
	(static_cast<ChatRoom*>(stub))->setOwnerName(name);
}

String ChatRoomAdapter::getOwnerName() const {
	return (static_cast<ChatRoom*>(stub))->getOwnerName();
}

void ChatRoomAdapter::setCreator(const String& name) {
	(static_cast<ChatRoom*>(stub))->setCreator(name);
}

String ChatRoomAdapter::getCreator() {
	return (static_cast<ChatRoom*>(stub))->getCreator();
}

void ChatRoomAdapter::setTitle(const UnicodeString& uniTitle) {
	(static_cast<ChatRoom*>(stub))->setTitle(uniTitle);
}

UnicodeString ChatRoomAdapter::getTitle() const {
	return (static_cast<ChatRoom*>(stub))->getTitle();
}

unsigned int ChatRoomAdapter::getLastJoinTime() {
	return (static_cast<ChatRoom*>(stub))->getLastJoinTime();
}

String ChatRoomAdapter::getGalaxyName() {
	return (static_cast<ChatRoom*>(stub))->getGalaxyName();
}

void ChatRoomAdapter::setRoomID(unsigned int id) {
	(static_cast<ChatRoom*>(stub))->setRoomID(id);
}

unsigned int ChatRoomAdapter::getRoomID() const {
	return (static_cast<ChatRoom*>(stub))->getRoomID();
}

void ChatRoomAdapter::setZoneServer(ZoneServer* srv) {
	(static_cast<ChatRoom*>(stub))->setZoneServer(srv);
}

ZoneServer* ChatRoomAdapter::getZoneServer() {
	return (static_cast<ChatRoom*>(stub))->getZoneServer();
}

void ChatRoomAdapter::setChatManager(ChatManager* mgr) {
	(static_cast<ChatRoom*>(stub))->setChatManager(mgr);
}

void ChatRoomAdapter::setChatRoomType(int type) {
	(static_cast<ChatRoom*>(stub))->setChatRoomType(type);
}

int ChatRoomAdapter::getChatRoomType() const {
	return (static_cast<ChatRoom*>(stub))->getChatRoomType();
}

bool ChatRoomAdapter::hasPersistentParent() const {
	return (static_cast<ChatRoom*>(stub))->hasPersistentParent();
}

void ChatRoomAdapter::setParentIsPersistent(bool value) {
	(static_cast<ChatRoom*>(stub))->setParentIsPersistent(value);
}

void ChatRoomAdapter::setParentRoomID(unsigned int value) {
	(static_cast<ChatRoom*>(stub))->setParentRoomID(value);
}

void ChatRoomAdapter::setDisabled(bool value) {
	(static_cast<ChatRoom*>(stub))->setDisabled(value);
}

bool ChatRoomAdapter::isDisabled() {
	return (static_cast<ChatRoom*>(stub))->isDisabled();
}

bool ChatRoomAdapter::isPersistent() {
	return (static_cast<ChatRoom*>(stub))->isPersistent();
}

/*
 *	ChatRoomHelper
 */

ChatRoomHelper* ChatRoomHelper::staticInitializer = ChatRoomHelper::instance();

ChatRoomHelper::ChatRoomHelper() {
	className = "ChatRoom";

	Core::getObjectBroker()->registerClass(className, this);
}

void ChatRoomHelper::finalizeHelper() {
	ChatRoomHelper::finalize();
}

DistributedObject* ChatRoomHelper::instantiateObject() {
	return new ChatRoom(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChatRoomHelper::instantiateServant() {
	return new ChatRoomImplementation();
}

DistributedObjectAdapter* ChatRoomHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChatRoomAdapter(static_cast<ChatRoom*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

