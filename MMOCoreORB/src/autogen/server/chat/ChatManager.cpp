/*
 *	autogen/server/chat/ChatManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "ChatManager.h"

#include "server/zone/ZoneServer.h"

#include "server/chat/room/ChatRoom.h"

#include "server/chat/room/ChatRoomMap.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/managers/player/PlayerMap.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/packets/chat/ChatInstantMessageToCharacter.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/chat/PendingMessageList.h"

/*
 *	ChatManagerStub
 */

unsigned const int ChatManager::MAXCHATROOMNAMELENGTH = 25;

unsigned const int ChatManager::MAXCUSTOMCHATROOMS = 3;

unsigned const int ChatManager::MAXPERSISTENTNODES = 5;

unsigned const int ChatManager::ROOMEXPIRATIONTIME = 168;

enum {RPC_STOP__ = 3192532258,RPC_INITIATEROOMS__,RPC_INITIATEPLANETROOMS__,RPC_LOADPERSISTENTROOMS__,RPC_ADDPLAYER__CREATUREOBJECT_,RPC_GETPLAYER__STRING_,RPC_REMOVEPLAYER__STRING_,RPC_GETTAGGEDNAME__PLAYEROBJECT_STRING_,RPC_CREATEPERSISTENTROOMBYFULLPATH__CREATUREOBJECT_STRING_STRING_INT_,RPC_DELETEROOM__CHATROOM_,RPC_DISABLEROOM__CHATROOM_,RPC_CREATEROOM__STRING_CHATROOM_,RPC_CREATEPERSISTENTROOM__STRING_CHATROOM_,RPC_DESTROYROOM__CHATROOM_,RPC_DESTROYROOMS__,RPC_CREATEGROUPROOM__LONG_CREATUREOBJECT_,RPC_HANDLECHATCREATEROOM__CREATUREOBJECT_BYTE_BYTE_STRING_STRING_INT_,RPC_SENDCHATONCREATEROOMERROR__CREATUREOBJECT_INT_INT_,RPC_HANDLECHATDESTROYROOM__CREATUREOBJECT_INT_INT_,RPC_ADDROOM__CHATROOM_,RPC_REMOVEROOM__CHATROOM_,RPC_GETCHATROOMBYFULLPATH__STRING_,RPC_GETCHATROOMBYGAMEPATH__CHATROOM_STRING_,RPC_GETROOMNAMEFROMPATH__STRING_,RPC_HANDLECHATLEAVEROOM__CREATUREOBJECT_STRING_,RPC_HANDLECHATENTERROOMBYID__CREATUREOBJECT_INT_INT_BOOL_,RPC_HANDLECHATQUERYROOM__CREATUREOBJECT_STRING_INT_,RPC_SENDROOMLIST__CREATUREOBJECT_,RPC_HANDLECHATINVITEPLAYER__CREATUREOBJECT_STRING_STRING_INT_,RPC_HANDLECHATUNINVITEPLAYER__CREATUREOBJECT_STRING_STRING_INT_,RPC_HANDLECHATKICKPLAYER__CREATUREOBJECT_STRING_STRING_,RPC_HANDLECHATADDMODERATOR__CREATUREOBJECT_STRING_STRING_INT_,RPC_HANDLECHATREMOVEMODERATOR__CREATUREOBJECT_STRING_STRING_INT_,RPC_HANDLECHATBANPLAYER__CREATUREOBJECT_STRING_STRING_INT_,RPC_HANDLECHATUNBANPLAYER__CREATUREOBJECT_STRING_STRING_INT_,RPC_HANDLESPATIALCHATINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_,RPC_HANDLEGROUPCHAT__CREATUREOBJECT_UNICODESTRING_,RPC_HANDLEGUILDCHAT__CREATUREOBJECT_UNICODESTRING_,RPC_HANDLEPLANETCHAT__CREATUREOBJECT_UNICODESTRING_,RPC_HANDLEAUCTIONCHAT__CREATUREOBJECT_UNICODESTRING_,RPC_HANDLECHATROOMMESSAGE__CREATUREOBJECT_UNICODESTRING_INT_INT_,RPC_HANDLESOCIALINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_,RPC_BROADCASTMESSAGE__BASEMESSAGE_,RPC_BROADCASTCHATMESSAGE__CREATUREOBJECT_UNICODESTRING_LONG_INT_INT_INT_INT_,RPC_BROADCASTGALAXY__CREATUREOBJECT_STRING_,RPC_BROADCASTGALAXY__STRING_STRING_,RPC_NOTIFYSPATIALCHATOBSERVERS__SCENEOBJECT_SCENEOBJECT_UNICODESTRING_,RPC_GETSPATIALCHATTYPE__STRING_,RPC_GETMOODID__STRING_,RPC_GETMOODTYPE__INT_,RPC_GETMOODANIMATION__STRING_,RPC_GETRANDOMMOODID__,RPC_LOADMAIL__CREATUREOBJECT_,RPC_SENDMAIL__STRING_UNICODESTRING_UNICODESTRING_STRING_,RPC_HANDLEREQUESTPERSISTENTMSG__CREATUREOBJECT_INT_,RPC_DELETEPERSISTENTMESSAGE__CREATUREOBJECT_INT_,RPC_FORMATMESSAGE__UNICODESTRING_,RPC_SETPLAYERMANAGER__PLAYERMANAGER_,RPC_GETCHATROOM__INT_,RPC_GETGAMEROOM__STRING_,RPC_GETPLAYERCOUNT__,RPC_GETZONESERVER__,RPC_GETGUILDROOM__,RPC_GETGROUPROOM__,RPC_GETAUCTIONROOM__,RPC_GETSYSTEMROOM__,RPC_GETSOCIALTYPE__INT_,RPC_GETPENDINGMESSAGES__LONG_};

ChatManager::ChatManager(ZoneServer* serv, int initsize) : ManagedService(DummyConstructorParameter::instance()) {
	ChatManagerImplementation* _implementation = new ChatManagerImplementation(serv, initsize);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ChatManager");
}

ChatManager::ChatManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("ChatManager");
}

ChatManager::~ChatManager() {
}



void ChatManager::stop() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOP__);

		method.executeWithVoidReturn();
	} else {
		_implementation->stop();
	}
}

void ChatManager::initiateRooms() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIATEROOMS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initiateRooms();
	}
}

void ChatManager::initiatePlanetRooms() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIATEPLANETROOMS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initiatePlanetRooms();
	}
}

void ChatManager::loadPersistentRooms() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADPERSISTENTROOMS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadPersistentRooms();
	}
}

void ChatManager::addPlayer(CreatureObject* player) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->addPlayer(player);
	}
}

CreatureObject* ChatManager::getPlayer(const String& name) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__STRING_);
		method.addAsciiParameter(name);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPlayer(name);
	}
}

CreatureObject* ChatManager::removePlayer(const String& name) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPLAYER__STRING_);
		method.addAsciiParameter(name);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->removePlayer(name);
	}
}

String ChatManager::getTaggedName(PlayerObject* ghost, const String& name) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTAGGEDNAME__PLAYEROBJECT_STRING_);
		method.addObjectParameter(ghost);
		method.addAsciiParameter(name);

		String _return_getTaggedName;
		method.executeWithAsciiReturn(_return_getTaggedName);
		return _return_getTaggedName;
	} else {
		return _implementation->getTaggedName(ghost, name);
	}
}

Reference<ChatRoom* > ChatManager::createPersistentRoomByFullPath(CreatureObject* player, const String& path, const String& title, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEPERSISTENTROOMBYFULLPATH__CREATUREOBJECT_STRING_STRING_INT_);
		method.addObjectParameter(player);
		method.addAsciiParameter(path);
		method.addAsciiParameter(title);
		method.addSignedIntParameter(requestID);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->createPersistentRoomByFullPath(player, path, title, requestID);
	}
}

void ChatManager::deleteRoom(ChatRoom* room) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DELETEROOM__CHATROOM_);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else {
		_implementation->deleteRoom(room);
	}
}

void ChatManager::disableRoom(ChatRoom* room) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DISABLEROOM__CHATROOM_);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else {
		_implementation->disableRoom(room);
	}
}

Reference<ChatRoom* > ChatManager::createRoom(const String& roomName, ChatRoom* parent) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEROOM__STRING_CHATROOM_);
		method.addAsciiParameter(roomName);
		method.addObjectParameter(parent);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->createRoom(roomName, parent);
	}
}

Reference<ChatRoom* > ChatManager::createPersistentRoom(const String& roomName, ChatRoom* parent) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEPERSISTENTROOM__STRING_CHATROOM_);
		method.addAsciiParameter(roomName);
		method.addObjectParameter(parent);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->createPersistentRoom(roomName, parent);
	}
}

void ChatManager::destroyRoom(ChatRoom* room) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYROOM__CHATROOM_);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyRoom(room);
	}
}

void ChatManager::destroyRooms() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYROOMS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyRooms();
	}
}

Reference<ChatRoom* > ChatManager::createGroupRoom(unsigned long long groupID, CreatureObject* creator) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEGROUPROOM__LONG_CREATUREOBJECT_);
		method.addUnsignedLongParameter(groupID);
		method.addObjectParameter(creator);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->createGroupRoom(groupID, creator);
	}
}

void ChatManager::handleChatCreateRoom(CreatureObject* player, byte permissionFlag, byte moderationFlag, const String& roomPath, const String& roomTitle, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATCREATEROOM__CREATUREOBJECT_BYTE_BYTE_STRING_STRING_INT_);
		method.addObjectParameter(player);
		method.addByteParameter(permissionFlag);
		method.addByteParameter(moderationFlag);
		method.addAsciiParameter(roomPath);
		method.addAsciiParameter(roomTitle);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatCreateRoom(player, permissionFlag, moderationFlag, roomPath, roomTitle, requestID);
	}
}

void ChatManager::sendChatOnCreateRoomError(CreatureObject* player, int requestID, int error) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCHATONCREATEROOMERROR__CREATUREOBJECT_INT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(requestID);
		method.addSignedIntParameter(error);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendChatOnCreateRoomError(player, requestID, error);
	}
}

void ChatManager::handleChatDestroyRoom(CreatureObject* player, unsigned int roomID, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATDESTROYROOM__CREATUREOBJECT_INT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(roomID);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatDestroyRoom(player, roomID, requestID);
	}
}

void ChatManager::addRoom(ChatRoom* channel) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDROOM__CHATROOM_);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else {
		_implementation->addRoom(channel);
	}
}

void ChatManager::removeRoom(ChatRoom* channel) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEROOM__CHATROOM_);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeRoom(channel);
	}
}

Reference<ChatRoom* > ChatManager::getChatRoomByFullPath(const String& path) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOMBYFULLPATH__STRING_);
		method.addAsciiParameter(path);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getChatRoomByFullPath(path);
	}
}

Reference<ChatRoom* > ChatManager::getChatRoomByGamePath(ChatRoom* game, const String& path) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOMBYGAMEPATH__CHATROOM_STRING_);
		method.addObjectParameter(game);
		method.addAsciiParameter(path);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getChatRoomByGamePath(game, path);
	}
}

String ChatManager::getRoomNameFromPath(const String& path) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOMNAMEFROMPATH__STRING_);
		method.addAsciiParameter(path);

		String _return_getRoomNameFromPath;
		method.executeWithAsciiReturn(_return_getRoomNameFromPath);
		return _return_getRoomNameFromPath;
	} else {
		return _implementation->getRoomNameFromPath(path);
	}
}

void ChatManager::handleChatLeaveRoom(CreatureObject* player, const String& roomPath) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATLEAVEROOM__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(roomPath);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleChatLeaveRoom(player, roomPath);
	}
}

void ChatManager::handleChatEnterRoomById(CreatureObject* player, unsigned int roomID, int requestID, bool bypassSecurity) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATENTERROOMBYID__CREATUREOBJECT_INT_INT_BOOL_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(roomID);
		method.addSignedIntParameter(requestID);
		method.addBooleanParameter(bypassSecurity);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatEnterRoomById(player, roomID, requestID, bypassSecurity);
	}
}

void ChatManager::handleChatQueryRoom(CreatureObject* player, const String& roomPath, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATQUERYROOM__CREATUREOBJECT_STRING_INT_);
		method.addObjectParameter(player);
		method.addAsciiParameter(roomPath);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatQueryRoom(player, roomPath, requestID);
	}
}

void ChatManager::sendRoomList(CreatureObject* player) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDROOMLIST__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendRoomList(player);
	}
}

void ChatManager::handleChatInvitePlayer(CreatureObject* inviter, const String& inviteeName, const String& roomPath, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATINVITEPLAYER__CREATUREOBJECT_STRING_STRING_INT_);
		method.addObjectParameter(inviter);
		method.addAsciiParameter(inviteeName);
		method.addAsciiParameter(roomPath);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatInvitePlayer(inviter, inviteeName, roomPath, requestID);
	}
}

void ChatManager::handleChatUninvitePlayer(CreatureObject* uninviter, const String& uninviteeName, const String& roomPath, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATUNINVITEPLAYER__CREATUREOBJECT_STRING_STRING_INT_);
		method.addObjectParameter(uninviter);
		method.addAsciiParameter(uninviteeName);
		method.addAsciiParameter(roomPath);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatUninvitePlayer(uninviter, uninviteeName, roomPath, requestID);
	}
}

void ChatManager::handleChatKickPlayer(CreatureObject* kicker, const String& kickeeName, const String& roomPath) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATKICKPLAYER__CREATUREOBJECT_STRING_STRING_);
		method.addObjectParameter(kicker);
		method.addAsciiParameter(kickeeName);
		method.addAsciiParameter(roomPath);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatKickPlayer(kicker, kickeeName, roomPath);
	}
}

void ChatManager::handleChatAddModerator(CreatureObject* oper, const String& opeeName, const String& roomPath, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATADDMODERATOR__CREATUREOBJECT_STRING_STRING_INT_);
		method.addObjectParameter(oper);
		method.addAsciiParameter(opeeName);
		method.addAsciiParameter(roomPath);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatAddModerator(oper, opeeName, roomPath, requestID);
	}
}

void ChatManager::handleChatRemoveModerator(CreatureObject* deoper, const String& deopeeName, const String& roomPath, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATREMOVEMODERATOR__CREATUREOBJECT_STRING_STRING_INT_);
		method.addObjectParameter(deoper);
		method.addAsciiParameter(deopeeName);
		method.addAsciiParameter(roomPath);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatRemoveModerator(deoper, deopeeName, roomPath, requestID);
	}
}

void ChatManager::handleChatBanPlayer(CreatureObject* banner, const String& baneeName, const String& roomPath, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATBANPLAYER__CREATUREOBJECT_STRING_STRING_INT_);
		method.addObjectParameter(banner);
		method.addAsciiParameter(baneeName);
		method.addAsciiParameter(roomPath);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatBanPlayer(banner, baneeName, roomPath, requestID);
	}
}

void ChatManager::handleChatUnbanPlayer(CreatureObject* unbanner, const String& unbaneeName, const String& roomPath, int requestID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATUNBANPLAYER__CREATUREOBJECT_STRING_STRING_INT_);
		method.addObjectParameter(unbanner);
		method.addAsciiParameter(unbaneeName);
		method.addAsciiParameter(roomPath);
		method.addSignedIntParameter(requestID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatUnbanPlayer(unbanner, unbaneeName, roomPath, requestID);
	}
}

void ChatManager::handleChatInstantMessageToCharacter(ChatInstantMessageToCharacter* message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->handleChatInstantMessageToCharacter(message);
	}
}

void ChatManager::broadcastChatMessage(CreatureObject* player, StringIdChatParameter& message, unsigned long long target, unsigned int spatialChatType, unsigned int moodType, unsigned int chatFlags, int languageID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->broadcastChatMessage(player, message, target, spatialChatType, moodType, chatFlags, languageID);
	}
}

void ChatManager::handleSpatialChatInternalMessage(CreatureObject* player, const UnicodeString& args) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLESPATIALCHATINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(args);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleSpatialChatInternalMessage(player, args);
	}
}

void ChatManager::handleGroupChat(CreatureObject* player, const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEGROUPCHAT__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleGroupChat(player, message);
	}
}

void ChatManager::handleGuildChat(CreatureObject* player, const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEGUILDCHAT__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleGuildChat(player, message);
	}
}

void ChatManager::handlePlanetChat(CreatureObject* player, const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEPLANETCHAT__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else {
		_implementation->handlePlanetChat(player, message);
	}
}

void ChatManager::handleAuctionChat(CreatureObject* player, const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEAUCTIONCHAT__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleAuctionChat(player, message);
	}
}

void ChatManager::handleChatRoomMessage(CreatureObject* sender, const UnicodeString& message, unsigned int roomID, unsigned int counter) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATROOMMESSAGE__CREATUREOBJECT_UNICODESTRING_INT_INT_);
		method.addObjectParameter(sender);
		method.addUnicodeParameter(message);
		method.addUnsignedIntParameter(roomID);
		method.addUnsignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleChatRoomMessage(sender, message, roomID, counter);
	}
}

void ChatManager::handleSocialInternalMessage(CreatureObject* sender, const UnicodeString& arguments) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLESOCIALINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(sender);
		method.addUnicodeParameter(arguments);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleSocialInternalMessage(sender, arguments);
	}
}

void ChatManager::broadcastMessage(BaseMessage* message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEMESSAGE_);
		method.addObjectParameter(message);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessage(message);
	}
}

void ChatManager::broadcastChatMessage(CreatureObject* player, const UnicodeString& message, unsigned long long target, unsigned int spatialChatType, unsigned int moodType, unsigned int chatFlags, int languageID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTCHATMESSAGE__CREATUREOBJECT_UNICODESTRING_LONG_INT_INT_INT_INT_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);
		method.addUnsignedLongParameter(target);
		method.addUnsignedIntParameter(spatialChatType);
		method.addUnsignedIntParameter(moodType);
		method.addUnsignedIntParameter(chatFlags);
		method.addSignedIntParameter(languageID);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastChatMessage(player, message, target, spatialChatType, moodType, chatFlags, languageID);
	}
}

void ChatManager::broadcastGalaxy(CreatureObject* player, const String& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTGALAXY__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastGalaxy(player, message);
	}
}

void ChatManager::broadcastGalaxy(const String& message, const String& faction) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTGALAXY__STRING_STRING_);
		method.addAsciiParameter(message);
		method.addAsciiParameter(faction);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastGalaxy(message, faction);
	}
}

void ChatManager::notifySpatialChatObservers(SceneObject* target, SceneObject* source, const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYSPATIALCHATOBSERVERS__SCENEOBJECT_SCENEOBJECT_UNICODESTRING_);
		method.addObjectParameter(target);
		method.addObjectParameter(source);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifySpatialChatObservers(target, source, message);
	}
}

unsigned int ChatManager::getSpatialChatType(const String& spatialChatType) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPATIALCHATTYPE__STRING_);
		method.addAsciiParameter(spatialChatType);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getSpatialChatType(spatialChatType);
	}
}

unsigned int ChatManager::getMoodID(const String& moodType) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMOODID__STRING_);
		method.addAsciiParameter(moodType);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getMoodID(moodType);
	}
}

const String ChatManager::getMoodType(unsigned int id) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMOODTYPE__INT_);
		method.addUnsignedIntParameter(id);

		String _return_getMoodType;
		method.executeWithAsciiReturn(_return_getMoodType);
		return _return_getMoodType;
	} else {
		return _implementation->getMoodType(id);
	}
}

const String ChatManager::getMoodAnimation(const String& moodType) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMOODANIMATION__STRING_);
		method.addAsciiParameter(moodType);

		String _return_getMoodAnimation;
		method.executeWithAsciiReturn(_return_getMoodAnimation);
		return _return_getMoodAnimation;
	} else {
		return _implementation->getMoodAnimation(moodType);
	}
}

unsigned int ChatManager::getRandomMoodID() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANDOMMOODID__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getRandomMoodID();
	}
}

void ChatManager::loadMail(CreatureObject* player) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADMAIL__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadMail(player);
	}
}

void ChatManager::sendMail(const String& sendername, const UnicodeString& header, const UnicodeString& body, const String& name) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAIL__STRING_UNICODESTRING_UNICODESTRING_STRING_);
		method.addAsciiParameter(sendername);
		method.addUnicodeParameter(header);
		method.addUnicodeParameter(body);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendMail(sendername, header, body, name);
	}
}

void ChatManager::handleRequestPersistentMsg(CreatureObject* player, unsigned int mailID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEREQUESTPERSISTENTMSG__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(mailID);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleRequestPersistentMsg(player, mailID);
	}
}

void ChatManager::deletePersistentMessage(CreatureObject* player, unsigned int mailID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DELETEPERSISTENTMESSAGE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(mailID);

		method.executeWithVoidReturn();
	} else {
		_implementation->deletePersistentMessage(player, mailID);
	}
}

UnicodeString ChatManager::formatMessage(const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FORMATMESSAGE__UNICODESTRING_);
		method.addUnicodeParameter(message);

		UnicodeString _return_formatMessage;
		method.executeWithUnicodeReturn(_return_formatMessage);
		return _return_formatMessage;
	} else {
		return _implementation->formatMessage(message);
	}
}

int ChatManager::sendMail(const String& sendername, const UnicodeString& subject, StringIdChatParameter& body, const String& recipientName, WaypointObject* waypoint) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->sendMail(sendername, subject, body, recipientName, waypoint);
	}
}

int ChatManager::sendMail(const String& sendername, const UnicodeString& subject, const UnicodeString& body, const String& recipientName, StringIdChatParameterVector* stringIdParameters, WaypointChatParameterVector* waypointParameters) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->sendMail(sendername, subject, body, recipientName, stringIdParameters, waypointParameters);
	}
}

void ChatManager::setPlayerManager(PlayerManager* manager) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPLAYERMANAGER__PLAYERMANAGER_);
		method.addObjectParameter(manager);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPlayerManager(manager);
	}
}

Reference<ChatRoom* > ChatManager::getChatRoom(unsigned int id) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOM__INT_);
		method.addUnsignedIntParameter(id);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getChatRoom(id);
	}
}

Reference<ChatRoom* > ChatManager::getGameRoom(const String& game) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGAMEROOM__STRING_);
		method.addAsciiParameter(game);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getGameRoom(game);
	}
}

int ChatManager::getPlayerCount() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYERCOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPlayerCount();
	}
}

ZoneServer* ChatManager::getZoneServer() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONESERVER__);

		return static_cast<ZoneServer*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getZoneServer();
	}
}

PlayerMap* ChatManager::getPlayerMap() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPlayerMap();
	}
}

ChatRoom* ChatManager::getGuildRoom() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getGuildRoom();
	}
}

ChatRoom* ChatManager::getGroupRoom() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getGroupRoom();
	}
}

ChatRoom* ChatManager::getAuctionRoom() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAUCTIONROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getAuctionRoom();
	}
}

ChatRoom* ChatManager::getSystemRoom() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSYSTEMROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getSystemRoom();
	}
}

String ChatManager::getSocialType(unsigned int id) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSOCIALTYPE__INT_);
		method.addUnsignedIntParameter(id);

		String _return_getSocialType;
		method.executeWithAsciiReturn(_return_getSocialType);
		return _return_getSocialType;
	} else {
		return _implementation->getSocialType(id);
	}
}

Reference<PendingMessageList* > ChatManager::getPendingMessages(unsigned long long oid) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPENDINGMESSAGES__LONG_);
		method.addUnsignedLongParameter(oid);

		return static_cast<PendingMessageList*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPendingMessages(oid);
	}
}

DistributedObjectServant* ChatManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ChatManager::_getImplementationForRead() const {
	return _impl;
}

void ChatManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ChatManagerImplementation
 */

unsigned const int ChatManagerImplementation::MAXCHATROOMNAMELENGTH = 25;

unsigned const int ChatManagerImplementation::MAXCUSTOMCHATROOMS = 3;

unsigned const int ChatManagerImplementation::MAXPERSISTENTNODES = 5;

unsigned const int ChatManagerImplementation::ROOMEXPIRATIONTIME = 168;

ChatManagerImplementation::ChatManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


ChatManagerImplementation::~ChatManagerImplementation() {
}


void ChatManagerImplementation::finalize() {
}

void ChatManagerImplementation::_initializeImplementation() {
	_setClassHelper(ChatManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ChatManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ChatManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* ChatManagerImplementation::_getStub() {
	return _this.get();
}

ChatManagerImplementation::operator const ChatManager*() {
	return _this.get();
}

void ChatManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ChatManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ChatManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ChatManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ChatManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ChatManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ChatManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ChatManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("ChatManager");

}

void ChatManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ChatManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ChatManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x839fbd3c: //ChatManager.server
		TypeInfo<ManagedReference<ZoneServer* > >::parseFromBinaryStream(&server, stream);
		return true;

	case 0x708e5b17: //ChatManager.playerManager
		TypeInfo<ManagedReference<PlayerManager* > >::parseFromBinaryStream(&playerManager, stream);
		return true;

	case 0x6afdf8fc: //ChatManager.gameRooms
		TypeInfo<VectorMap<String, ManagedReference<ChatRoom* > > >::parseFromBinaryStream(&gameRooms, stream);
		return true;

	case 0xeb7966f6: //ChatManager.socialTypes
		TypeInfo<VectorMap<unsigned int, String> >::parseFromBinaryStream(&socialTypes, stream);
		return true;

	case 0x1e18b207: //ChatManager.galaxyRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&galaxyRoom, stream);
		return true;

	case 0x6b52e56: //ChatManager.groupRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&groupRoom, stream);
		return true;

	case 0xf02c6946: //ChatManager.guildRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&guildRoom, stream);
		return true;

	case 0xf9a6368b: //ChatManager.auctionRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&auctionRoom, stream);
		return true;

	case 0x783bbc2f: //ChatManager.systemRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&systemRoom, stream);
		return true;

	case 0xaa079cc4: //ChatManager.mute
		TypeInfo<bool >::parseFromBinaryStream(&mute, stream);
		return true;

	}

	return false;
}

void ChatManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ChatManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ChatManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x839fbd3c; //ChatManager.server
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ZoneServer* > >::toBinaryStream(&server, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x708e5b17; //ChatManager.playerManager
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<PlayerManager* > >::toBinaryStream(&playerManager, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6afdf8fc; //ChatManager.gameRooms
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, ManagedReference<ChatRoom* > > >::toBinaryStream(&gameRooms, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xeb7966f6; //ChatManager.socialTypes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned int, String> >::toBinaryStream(&socialTypes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1e18b207; //ChatManager.galaxyRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&galaxyRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6b52e56; //ChatManager.groupRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&groupRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf02c6946; //ChatManager.guildRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&guildRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf9a6368b; //ChatManager.auctionRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&auctionRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x783bbc2f; //ChatManager.systemRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&systemRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xaa079cc4; //ChatManager.mute
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&mute, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 10;
}

void ChatManagerImplementation::addRoom(ChatRoom* channel) {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		roomMap.put(channel.getRoomID(), channel);
	roomMap->put(channel->getRoomID(), channel);
}

void ChatManagerImplementation::removeRoom(ChatRoom* channel) {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		roomMap.remove(channel.getRoomID());
	roomMap->remove(channel->getRoomID());
}

void ChatManagerImplementation::setPlayerManager(PlayerManager* manager) {
	// server/chat/ChatManager.idl():  		playerManager = manager;
	playerManager = manager;
}

Reference<ChatRoom* > ChatManagerImplementation::getChatRoom(unsigned int id) {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		return roomMap.get(id);
	return roomMap->get(id);
}

Reference<ChatRoom* > ChatManagerImplementation::getGameRoom(const String& game) {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		return gameRooms.get(game);
	return (&gameRooms)->get(game);
}

int ChatManagerImplementation::getPlayerCount() {
	// server/chat/ChatManager.idl():  		return playerMap.size();
	return playerMap->size();
}

ZoneServer* ChatManagerImplementation::getZoneServer() {
	// server/chat/ChatManager.idl():  		return server;
	return server;
}

PlayerMap* ChatManagerImplementation::getPlayerMap() {
	// server/chat/ChatManager.idl():  		return playerMap;
	return playerMap;
}

ChatRoom* ChatManagerImplementation::getGuildRoom() {
	// server/chat/ChatManager.idl():  		return guildRoom;
	return guildRoom;
}

ChatRoom* ChatManagerImplementation::getGroupRoom() {
	// server/chat/ChatManager.idl():  		return groupRoom;
	return groupRoom;
}

ChatRoom* ChatManagerImplementation::getAuctionRoom() {
	// server/chat/ChatManager.idl():  		return auctionRoom;
	return auctionRoom;
}

ChatRoom* ChatManagerImplementation::getSystemRoom() {
	// server/chat/ChatManager.idl():  		return systemRoom;
	return systemRoom;
}

String ChatManagerImplementation::getSocialType(unsigned int id) {
	// server/chat/ChatManager.idl():  		return socialTypes.get(id);
	return (&socialTypes)->get(id);
}

/*
 *	ChatManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ChatManagerAdapter::ChatManagerAdapter(ChatManager* obj) : ManagedServiceAdapter(obj) {
}

void ChatManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_STOP__:
		{
			
			stop();
			
		}
		break;
	case RPC_INITIATEROOMS__:
		{
			
			initiateRooms();
			
		}
		break;
	case RPC_INITIATEPLANETROOMS__:
		{
			
			initiatePlanetRooms();
			
		}
		break;
	case RPC_LOADPERSISTENTROOMS__:
		{
			
			loadPersistentRooms();
			
		}
		break;
	case RPC_ADDPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			addPlayer(player);
			
		}
		break;
	case RPC_GETPLAYER__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			DistributedObject* _m_res = getPlayer(name);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_REMOVEPLAYER__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			DistributedObject* _m_res = removePlayer(name);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETTAGGEDNAME__PLAYEROBJECT_STRING_:
		{
			PlayerObject* ghost = static_cast<PlayerObject*>(inv->getObjectParameter());
			 String name; inv->getAsciiParameter(name);
			
			String _m_res = getTaggedName(ghost, name);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_CREATEPERSISTENTROOMBYFULLPATH__CREATUREOBJECT_STRING_STRING_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String path; inv->getAsciiParameter(path);
			 String title; inv->getAsciiParameter(title);
			int requestID = inv->getSignedIntParameter();
			
			DistributedObject* _m_res = createPersistentRoomByFullPath(player, path, title, requestID);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_DELETEROOM__CHATROOM_:
		{
			ChatRoom* room = static_cast<ChatRoom*>(inv->getObjectParameter());
			
			deleteRoom(room);
			
		}
		break;
	case RPC_DISABLEROOM__CHATROOM_:
		{
			ChatRoom* room = static_cast<ChatRoom*>(inv->getObjectParameter());
			
			disableRoom(room);
			
		}
		break;
	case RPC_CREATEROOM__STRING_CHATROOM_:
		{
			 String roomName; inv->getAsciiParameter(roomName);
			ChatRoom* parent = static_cast<ChatRoom*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = createRoom(roomName, parent);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_CREATEPERSISTENTROOM__STRING_CHATROOM_:
		{
			 String roomName; inv->getAsciiParameter(roomName);
			ChatRoom* parent = static_cast<ChatRoom*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = createPersistentRoom(roomName, parent);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_DESTROYROOM__CHATROOM_:
		{
			ChatRoom* room = static_cast<ChatRoom*>(inv->getObjectParameter());
			
			destroyRoom(room);
			
		}
		break;
	case RPC_DESTROYROOMS__:
		{
			
			destroyRooms();
			
		}
		break;
	case RPC_CREATEGROUPROOM__LONG_CREATUREOBJECT_:
		{
			unsigned long long groupID = inv->getUnsignedLongParameter();
			CreatureObject* creator = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = createGroupRoom(groupID, creator);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_HANDLECHATCREATEROOM__CREATUREOBJECT_BYTE_BYTE_STRING_STRING_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte permissionFlag = inv->getByteParameter();
			byte moderationFlag = inv->getByteParameter();
			 String roomPath; inv->getAsciiParameter(roomPath);
			 String roomTitle; inv->getAsciiParameter(roomTitle);
			int requestID = inv->getSignedIntParameter();
			
			handleChatCreateRoom(player, permissionFlag, moderationFlag, roomPath, roomTitle, requestID);
			
		}
		break;
	case RPC_SENDCHATONCREATEROOMERROR__CREATUREOBJECT_INT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int requestID = inv->getSignedIntParameter();
			int error = inv->getSignedIntParameter();
			
			sendChatOnCreateRoomError(player, requestID, error);
			
		}
		break;
	case RPC_HANDLECHATDESTROYROOM__CREATUREOBJECT_INT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int roomID = inv->getUnsignedIntParameter();
			int requestID = inv->getSignedIntParameter();
			
			handleChatDestroyRoom(player, roomID, requestID);
			
		}
		break;
	case RPC_ADDROOM__CHATROOM_:
		{
			ChatRoom* channel = static_cast<ChatRoom*>(inv->getObjectParameter());
			
			addRoom(channel);
			
		}
		break;
	case RPC_REMOVEROOM__CHATROOM_:
		{
			ChatRoom* channel = static_cast<ChatRoom*>(inv->getObjectParameter());
			
			removeRoom(channel);
			
		}
		break;
	case RPC_GETCHATROOMBYFULLPATH__STRING_:
		{
			 String path; inv->getAsciiParameter(path);
			
			DistributedObject* _m_res = getChatRoomByFullPath(path);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETCHATROOMBYGAMEPATH__CHATROOM_STRING_:
		{
			ChatRoom* game = static_cast<ChatRoom*>(inv->getObjectParameter());
			 String path; inv->getAsciiParameter(path);
			
			DistributedObject* _m_res = getChatRoomByGamePath(game, path);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETROOMNAMEFROMPATH__STRING_:
		{
			 String path; inv->getAsciiParameter(path);
			
			String _m_res = getRoomNameFromPath(path);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_HANDLECHATLEAVEROOM__CREATUREOBJECT_STRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String roomPath; inv->getAsciiParameter(roomPath);
			
			handleChatLeaveRoom(player, roomPath);
			
		}
		break;
	case RPC_HANDLECHATENTERROOMBYID__CREATUREOBJECT_INT_INT_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int roomID = inv->getUnsignedIntParameter();
			int requestID = inv->getSignedIntParameter();
			bool bypassSecurity = inv->getBooleanParameter();
			
			handleChatEnterRoomById(player, roomID, requestID, bypassSecurity);
			
		}
		break;
	case RPC_HANDLECHATQUERYROOM__CREATUREOBJECT_STRING_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String roomPath; inv->getAsciiParameter(roomPath);
			int requestID = inv->getSignedIntParameter();
			
			handleChatQueryRoom(player, roomPath, requestID);
			
		}
		break;
	case RPC_SENDROOMLIST__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendRoomList(player);
			
		}
		break;
	case RPC_HANDLECHATINVITEPLAYER__CREATUREOBJECT_STRING_STRING_INT_:
		{
			CreatureObject* inviter = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String inviteeName; inv->getAsciiParameter(inviteeName);
			 String roomPath; inv->getAsciiParameter(roomPath);
			int requestID = inv->getSignedIntParameter();
			
			handleChatInvitePlayer(inviter, inviteeName, roomPath, requestID);
			
		}
		break;
	case RPC_HANDLECHATUNINVITEPLAYER__CREATUREOBJECT_STRING_STRING_INT_:
		{
			CreatureObject* uninviter = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String uninviteeName; inv->getAsciiParameter(uninviteeName);
			 String roomPath; inv->getAsciiParameter(roomPath);
			int requestID = inv->getSignedIntParameter();
			
			handleChatUninvitePlayer(uninviter, uninviteeName, roomPath, requestID);
			
		}
		break;
	case RPC_HANDLECHATKICKPLAYER__CREATUREOBJECT_STRING_STRING_:
		{
			CreatureObject* kicker = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String kickeeName; inv->getAsciiParameter(kickeeName);
			 String roomPath; inv->getAsciiParameter(roomPath);
			
			handleChatKickPlayer(kicker, kickeeName, roomPath);
			
		}
		break;
	case RPC_HANDLECHATADDMODERATOR__CREATUREOBJECT_STRING_STRING_INT_:
		{
			CreatureObject* oper = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String opeeName; inv->getAsciiParameter(opeeName);
			 String roomPath; inv->getAsciiParameter(roomPath);
			int requestID = inv->getSignedIntParameter();
			
			handleChatAddModerator(oper, opeeName, roomPath, requestID);
			
		}
		break;
	case RPC_HANDLECHATREMOVEMODERATOR__CREATUREOBJECT_STRING_STRING_INT_:
		{
			CreatureObject* deoper = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String deopeeName; inv->getAsciiParameter(deopeeName);
			 String roomPath; inv->getAsciiParameter(roomPath);
			int requestID = inv->getSignedIntParameter();
			
			handleChatRemoveModerator(deoper, deopeeName, roomPath, requestID);
			
		}
		break;
	case RPC_HANDLECHATBANPLAYER__CREATUREOBJECT_STRING_STRING_INT_:
		{
			CreatureObject* banner = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String baneeName; inv->getAsciiParameter(baneeName);
			 String roomPath; inv->getAsciiParameter(roomPath);
			int requestID = inv->getSignedIntParameter();
			
			handleChatBanPlayer(banner, baneeName, roomPath, requestID);
			
		}
		break;
	case RPC_HANDLECHATUNBANPLAYER__CREATUREOBJECT_STRING_STRING_INT_:
		{
			CreatureObject* unbanner = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String unbaneeName; inv->getAsciiParameter(unbaneeName);
			 String roomPath; inv->getAsciiParameter(roomPath);
			int requestID = inv->getSignedIntParameter();
			
			handleChatUnbanPlayer(unbanner, unbaneeName, roomPath, requestID);
			
		}
		break;
	case RPC_HANDLESPATIALCHATINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString args; inv->getUnicodeParameter(args);
			
			handleSpatialChatInternalMessage(player, args);
			
		}
		break;
	case RPC_HANDLEGROUPCHAT__CREATUREOBJECT_UNICODESTRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString message; inv->getUnicodeParameter(message);
			
			handleGroupChat(player, message);
			
		}
		break;
	case RPC_HANDLEGUILDCHAT__CREATUREOBJECT_UNICODESTRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString message; inv->getUnicodeParameter(message);
			
			handleGuildChat(player, message);
			
		}
		break;
	case RPC_HANDLEPLANETCHAT__CREATUREOBJECT_UNICODESTRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString message; inv->getUnicodeParameter(message);
			
			handlePlanetChat(player, message);
			
		}
		break;
	case RPC_HANDLEAUCTIONCHAT__CREATUREOBJECT_UNICODESTRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString message; inv->getUnicodeParameter(message);
			
			handleAuctionChat(player, message);
			
		}
		break;
	case RPC_HANDLECHATROOMMESSAGE__CREATUREOBJECT_UNICODESTRING_INT_INT_:
		{
			CreatureObject* sender = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString message; inv->getUnicodeParameter(message);
			unsigned int roomID = inv->getUnsignedIntParameter();
			unsigned int counter = inv->getUnsignedIntParameter();
			
			handleChatRoomMessage(sender, message, roomID, counter);
			
		}
		break;
	case RPC_HANDLESOCIALINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_:
		{
			CreatureObject* sender = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString arguments; inv->getUnicodeParameter(arguments);
			
			handleSocialInternalMessage(sender, arguments);
			
		}
		break;
	case RPC_BROADCASTMESSAGE__BASEMESSAGE_:
		{
			BaseMessage* message = static_cast<BaseMessage*>(inv->getObjectParameter());
			
			broadcastMessage(message);
			
		}
		break;
	case RPC_BROADCASTCHATMESSAGE__CREATUREOBJECT_UNICODESTRING_LONG_INT_INT_INT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString message; inv->getUnicodeParameter(message);
			unsigned long long target = inv->getUnsignedLongParameter();
			unsigned int spatialChatType = inv->getUnsignedIntParameter();
			unsigned int moodType = inv->getUnsignedIntParameter();
			unsigned int chatFlags = inv->getUnsignedIntParameter();
			int languageID = inv->getSignedIntParameter();
			
			broadcastChatMessage(player, message, target, spatialChatType, moodType, chatFlags, languageID);
			
		}
		break;
	case RPC_BROADCASTGALAXY__CREATUREOBJECT_STRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String message; inv->getAsciiParameter(message);
			
			broadcastGalaxy(player, message);
			
		}
		break;
	case RPC_BROADCASTGALAXY__STRING_STRING_:
		{
			 String message; inv->getAsciiParameter(message);
			 String faction; inv->getAsciiParameter(faction);
			
			broadcastGalaxy(message, faction);
			
		}
		break;
	case RPC_NOTIFYSPATIALCHATOBSERVERS__SCENEOBJECT_SCENEOBJECT_UNICODESTRING_:
		{
			SceneObject* target = static_cast<SceneObject*>(inv->getObjectParameter());
			SceneObject* source = static_cast<SceneObject*>(inv->getObjectParameter());
			 UnicodeString message; inv->getUnicodeParameter(message);
			
			notifySpatialChatObservers(target, source, message);
			
		}
		break;
	case RPC_GETSPATIALCHATTYPE__STRING_:
		{
			 String spatialChatType; inv->getAsciiParameter(spatialChatType);
			
			unsigned int _m_res = getSpatialChatType(spatialChatType);
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETMOODID__STRING_:
		{
			 String moodType; inv->getAsciiParameter(moodType);
			
			unsigned int _m_res = getMoodID(moodType);
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETMOODTYPE__INT_:
		{
			unsigned int id = inv->getUnsignedIntParameter();
			
			const String _m_res = getMoodType(id);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETMOODANIMATION__STRING_:
		{
			 String moodType; inv->getAsciiParameter(moodType);
			
			const String _m_res = getMoodAnimation(moodType);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETRANDOMMOODID__:
		{
			
			unsigned int _m_res = getRandomMoodID();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_LOADMAIL__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			loadMail(player);
			
		}
		break;
	case RPC_SENDMAIL__STRING_UNICODESTRING_UNICODESTRING_STRING_:
		{
			 String sendername; inv->getAsciiParameter(sendername);
			 UnicodeString header; inv->getUnicodeParameter(header);
			 UnicodeString body; inv->getUnicodeParameter(body);
			 String name; inv->getAsciiParameter(name);
			
			sendMail(sendername, header, body, name);
			
		}
		break;
	case RPC_HANDLEREQUESTPERSISTENTMSG__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int mailID = inv->getUnsignedIntParameter();
			
			handleRequestPersistentMsg(player, mailID);
			
		}
		break;
	case RPC_DELETEPERSISTENTMESSAGE__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int mailID = inv->getUnsignedIntParameter();
			
			deletePersistentMessage(player, mailID);
			
		}
		break;
	case RPC_FORMATMESSAGE__UNICODESTRING_:
		{
			 UnicodeString message; inv->getUnicodeParameter(message);
			
			UnicodeString _m_res = formatMessage(message);
			resp->insertUnicode(_m_res);
		}
		break;
	case RPC_SETPLAYERMANAGER__PLAYERMANAGER_:
		{
			PlayerManager* manager = static_cast<PlayerManager*>(inv->getObjectParameter());
			
			setPlayerManager(manager);
			
		}
		break;
	case RPC_GETCHATROOM__INT_:
		{
			unsigned int id = inv->getUnsignedIntParameter();
			
			DistributedObject* _m_res = getChatRoom(id);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETGAMEROOM__STRING_:
		{
			 String game; inv->getAsciiParameter(game);
			
			DistributedObject* _m_res = getGameRoom(game);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETPLAYERCOUNT__:
		{
			
			int _m_res = getPlayerCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETZONESERVER__:
		{
			
			DistributedObject* _m_res = getZoneServer();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETGUILDROOM__:
		{
			
			DistributedObject* _m_res = getGuildRoom();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETGROUPROOM__:
		{
			
			DistributedObject* _m_res = getGroupRoom();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETAUCTIONROOM__:
		{
			
			DistributedObject* _m_res = getAuctionRoom();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETSYSTEMROOM__:
		{
			
			DistributedObject* _m_res = getSystemRoom();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETSOCIALTYPE__INT_:
		{
			unsigned int id = inv->getUnsignedIntParameter();
			
			String _m_res = getSocialType(id);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETPENDINGMESSAGES__LONG_:
		{
			unsigned long long oid = inv->getUnsignedLongParameter();
			
			DistributedObject* _m_res = getPendingMessages(oid);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	default:
		ManagedServiceAdapter::invokeMethod(methid, inv);
	}
}

void ChatManagerAdapter::stop() {
	(static_cast<ChatManager*>(stub))->stop();
}

void ChatManagerAdapter::initiateRooms() {
	(static_cast<ChatManager*>(stub))->initiateRooms();
}

void ChatManagerAdapter::initiatePlanetRooms() {
	(static_cast<ChatManager*>(stub))->initiatePlanetRooms();
}

void ChatManagerAdapter::loadPersistentRooms() {
	(static_cast<ChatManager*>(stub))->loadPersistentRooms();
}

void ChatManagerAdapter::addPlayer(CreatureObject* player) {
	(static_cast<ChatManager*>(stub))->addPlayer(player);
}

CreatureObject* ChatManagerAdapter::getPlayer(const String& name) {
	return (static_cast<ChatManager*>(stub))->getPlayer(name);
}

CreatureObject* ChatManagerAdapter::removePlayer(const String& name) {
	return (static_cast<ChatManager*>(stub))->removePlayer(name);
}

String ChatManagerAdapter::getTaggedName(PlayerObject* ghost, const String& name) {
	return (static_cast<ChatManager*>(stub))->getTaggedName(ghost, name);
}

Reference<ChatRoom* > ChatManagerAdapter::createPersistentRoomByFullPath(CreatureObject* player, const String& path, const String& title, int requestID) {
	return (static_cast<ChatManager*>(stub))->createPersistentRoomByFullPath(player, path, title, requestID);
}

void ChatManagerAdapter::deleteRoom(ChatRoom* room) {
	(static_cast<ChatManager*>(stub))->deleteRoom(room);
}

void ChatManagerAdapter::disableRoom(ChatRoom* room) {
	(static_cast<ChatManager*>(stub))->disableRoom(room);
}

Reference<ChatRoom* > ChatManagerAdapter::createRoom(const String& roomName, ChatRoom* parent) {
	return (static_cast<ChatManager*>(stub))->createRoom(roomName, parent);
}

Reference<ChatRoom* > ChatManagerAdapter::createPersistentRoom(const String& roomName, ChatRoom* parent) {
	return (static_cast<ChatManager*>(stub))->createPersistentRoom(roomName, parent);
}

void ChatManagerAdapter::destroyRoom(ChatRoom* room) {
	(static_cast<ChatManager*>(stub))->destroyRoom(room);
}

void ChatManagerAdapter::destroyRooms() {
	(static_cast<ChatManager*>(stub))->destroyRooms();
}

Reference<ChatRoom* > ChatManagerAdapter::createGroupRoom(unsigned long long groupID, CreatureObject* creator) {
	return (static_cast<ChatManager*>(stub))->createGroupRoom(groupID, creator);
}

void ChatManagerAdapter::handleChatCreateRoom(CreatureObject* player, byte permissionFlag, byte moderationFlag, const String& roomPath, const String& roomTitle, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatCreateRoom(player, permissionFlag, moderationFlag, roomPath, roomTitle, requestID);
}

void ChatManagerAdapter::sendChatOnCreateRoomError(CreatureObject* player, int requestID, int error) {
	(static_cast<ChatManager*>(stub))->sendChatOnCreateRoomError(player, requestID, error);
}

void ChatManagerAdapter::handleChatDestroyRoom(CreatureObject* player, unsigned int roomID, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatDestroyRoom(player, roomID, requestID);
}

void ChatManagerAdapter::addRoom(ChatRoom* channel) {
	(static_cast<ChatManager*>(stub))->addRoom(channel);
}

void ChatManagerAdapter::removeRoom(ChatRoom* channel) {
	(static_cast<ChatManager*>(stub))->removeRoom(channel);
}

Reference<ChatRoom* > ChatManagerAdapter::getChatRoomByFullPath(const String& path) {
	return (static_cast<ChatManager*>(stub))->getChatRoomByFullPath(path);
}

Reference<ChatRoom* > ChatManagerAdapter::getChatRoomByGamePath(ChatRoom* game, const String& path) {
	return (static_cast<ChatManager*>(stub))->getChatRoomByGamePath(game, path);
}

String ChatManagerAdapter::getRoomNameFromPath(const String& path) {
	return (static_cast<ChatManager*>(stub))->getRoomNameFromPath(path);
}

void ChatManagerAdapter::handleChatLeaveRoom(CreatureObject* player, const String& roomPath) {
	(static_cast<ChatManager*>(stub))->handleChatLeaveRoom(player, roomPath);
}

void ChatManagerAdapter::handleChatEnterRoomById(CreatureObject* player, unsigned int roomID, int requestID, bool bypassSecurity) {
	(static_cast<ChatManager*>(stub))->handleChatEnterRoomById(player, roomID, requestID, bypassSecurity);
}

void ChatManagerAdapter::handleChatQueryRoom(CreatureObject* player, const String& roomPath, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatQueryRoom(player, roomPath, requestID);
}

void ChatManagerAdapter::sendRoomList(CreatureObject* player) {
	(static_cast<ChatManager*>(stub))->sendRoomList(player);
}

void ChatManagerAdapter::handleChatInvitePlayer(CreatureObject* inviter, const String& inviteeName, const String& roomPath, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatInvitePlayer(inviter, inviteeName, roomPath, requestID);
}

void ChatManagerAdapter::handleChatUninvitePlayer(CreatureObject* uninviter, const String& uninviteeName, const String& roomPath, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatUninvitePlayer(uninviter, uninviteeName, roomPath, requestID);
}

void ChatManagerAdapter::handleChatKickPlayer(CreatureObject* kicker, const String& kickeeName, const String& roomPath) {
	(static_cast<ChatManager*>(stub))->handleChatKickPlayer(kicker, kickeeName, roomPath);
}

void ChatManagerAdapter::handleChatAddModerator(CreatureObject* oper, const String& opeeName, const String& roomPath, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatAddModerator(oper, opeeName, roomPath, requestID);
}

void ChatManagerAdapter::handleChatRemoveModerator(CreatureObject* deoper, const String& deopeeName, const String& roomPath, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatRemoveModerator(deoper, deopeeName, roomPath, requestID);
}

void ChatManagerAdapter::handleChatBanPlayer(CreatureObject* banner, const String& baneeName, const String& roomPath, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatBanPlayer(banner, baneeName, roomPath, requestID);
}

void ChatManagerAdapter::handleChatUnbanPlayer(CreatureObject* unbanner, const String& unbaneeName, const String& roomPath, int requestID) {
	(static_cast<ChatManager*>(stub))->handleChatUnbanPlayer(unbanner, unbaneeName, roomPath, requestID);
}

void ChatManagerAdapter::handleSpatialChatInternalMessage(CreatureObject* player, const UnicodeString& args) {
	(static_cast<ChatManager*>(stub))->handleSpatialChatInternalMessage(player, args);
}

void ChatManagerAdapter::handleGroupChat(CreatureObject* player, const UnicodeString& message) {
	(static_cast<ChatManager*>(stub))->handleGroupChat(player, message);
}

void ChatManagerAdapter::handleGuildChat(CreatureObject* player, const UnicodeString& message) {
	(static_cast<ChatManager*>(stub))->handleGuildChat(player, message);
}

void ChatManagerAdapter::handlePlanetChat(CreatureObject* player, const UnicodeString& message) {
	(static_cast<ChatManager*>(stub))->handlePlanetChat(player, message);
}

void ChatManagerAdapter::handleAuctionChat(CreatureObject* player, const UnicodeString& message) {
	(static_cast<ChatManager*>(stub))->handleAuctionChat(player, message);
}

void ChatManagerAdapter::handleChatRoomMessage(CreatureObject* sender, const UnicodeString& message, unsigned int roomID, unsigned int counter) {
	(static_cast<ChatManager*>(stub))->handleChatRoomMessage(sender, message, roomID, counter);
}

void ChatManagerAdapter::handleSocialInternalMessage(CreatureObject* sender, const UnicodeString& arguments) {
	(static_cast<ChatManager*>(stub))->handleSocialInternalMessage(sender, arguments);
}

void ChatManagerAdapter::broadcastMessage(BaseMessage* message) {
	(static_cast<ChatManager*>(stub))->broadcastMessage(message);
}

void ChatManagerAdapter::broadcastChatMessage(CreatureObject* player, const UnicodeString& message, unsigned long long target, unsigned int spatialChatType, unsigned int moodType, unsigned int chatFlags, int languageID) {
	(static_cast<ChatManager*>(stub))->broadcastChatMessage(player, message, target, spatialChatType, moodType, chatFlags, languageID);
}

void ChatManagerAdapter::broadcastGalaxy(CreatureObject* player, const String& message) {
	(static_cast<ChatManager*>(stub))->broadcastGalaxy(player, message);
}

void ChatManagerAdapter::broadcastGalaxy(const String& message, const String& faction) {
	(static_cast<ChatManager*>(stub))->broadcastGalaxy(message, faction);
}

void ChatManagerAdapter::notifySpatialChatObservers(SceneObject* target, SceneObject* source, const UnicodeString& message) {
	(static_cast<ChatManager*>(stub))->notifySpatialChatObservers(target, source, message);
}

unsigned int ChatManagerAdapter::getSpatialChatType(const String& spatialChatType) {
	return (static_cast<ChatManager*>(stub))->getSpatialChatType(spatialChatType);
}

unsigned int ChatManagerAdapter::getMoodID(const String& moodType) {
	return (static_cast<ChatManager*>(stub))->getMoodID(moodType);
}

const String ChatManagerAdapter::getMoodType(unsigned int id) {
	return (static_cast<ChatManager*>(stub))->getMoodType(id);
}

const String ChatManagerAdapter::getMoodAnimation(const String& moodType) {
	return (static_cast<ChatManager*>(stub))->getMoodAnimation(moodType);
}

unsigned int ChatManagerAdapter::getRandomMoodID() {
	return (static_cast<ChatManager*>(stub))->getRandomMoodID();
}

void ChatManagerAdapter::loadMail(CreatureObject* player) {
	(static_cast<ChatManager*>(stub))->loadMail(player);
}

void ChatManagerAdapter::sendMail(const String& sendername, const UnicodeString& header, const UnicodeString& body, const String& name) {
	(static_cast<ChatManager*>(stub))->sendMail(sendername, header, body, name);
}

void ChatManagerAdapter::handleRequestPersistentMsg(CreatureObject* player, unsigned int mailID) {
	(static_cast<ChatManager*>(stub))->handleRequestPersistentMsg(player, mailID);
}

void ChatManagerAdapter::deletePersistentMessage(CreatureObject* player, unsigned int mailID) {
	(static_cast<ChatManager*>(stub))->deletePersistentMessage(player, mailID);
}

UnicodeString ChatManagerAdapter::formatMessage(const UnicodeString& message) {
	return (static_cast<ChatManager*>(stub))->formatMessage(message);
}

void ChatManagerAdapter::setPlayerManager(PlayerManager* manager) {
	(static_cast<ChatManager*>(stub))->setPlayerManager(manager);
}

Reference<ChatRoom* > ChatManagerAdapter::getChatRoom(unsigned int id) {
	return (static_cast<ChatManager*>(stub))->getChatRoom(id);
}

Reference<ChatRoom* > ChatManagerAdapter::getGameRoom(const String& game) {
	return (static_cast<ChatManager*>(stub))->getGameRoom(game);
}

int ChatManagerAdapter::getPlayerCount() {
	return (static_cast<ChatManager*>(stub))->getPlayerCount();
}

ZoneServer* ChatManagerAdapter::getZoneServer() {
	return (static_cast<ChatManager*>(stub))->getZoneServer();
}

ChatRoom* ChatManagerAdapter::getGuildRoom() {
	return (static_cast<ChatManager*>(stub))->getGuildRoom();
}

ChatRoom* ChatManagerAdapter::getGroupRoom() {
	return (static_cast<ChatManager*>(stub))->getGroupRoom();
}

ChatRoom* ChatManagerAdapter::getAuctionRoom() {
	return (static_cast<ChatManager*>(stub))->getAuctionRoom();
}

ChatRoom* ChatManagerAdapter::getSystemRoom() {
	return (static_cast<ChatManager*>(stub))->getSystemRoom();
}

String ChatManagerAdapter::getSocialType(unsigned int id) {
	return (static_cast<ChatManager*>(stub))->getSocialType(id);
}

Reference<PendingMessageList* > ChatManagerAdapter::getPendingMessages(unsigned long long oid) {
	return (static_cast<ChatManager*>(stub))->getPendingMessages(oid);
}

/*
 *	ChatManagerHelper
 */

ChatManagerHelper* ChatManagerHelper::staticInitializer = ChatManagerHelper::instance();

ChatManagerHelper::ChatManagerHelper() {
	className = "ChatManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void ChatManagerHelper::finalizeHelper() {
	ChatManagerHelper::finalize();
}

DistributedObject* ChatManagerHelper::instantiateObject() {
	return new ChatManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChatManagerHelper::instantiateServant() {
	return new ChatManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ChatManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChatManagerAdapter(static_cast<ChatManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

