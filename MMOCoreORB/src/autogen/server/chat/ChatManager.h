/*
 *	autogen/server/chat/ChatManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef CHATMANAGER_H_
#define CHATMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace chat {
namespace room {

class ChatRoom;

} // namespace room
} // namespace chat
} // namespace server

using namespace server::chat::room;

namespace server {
namespace chat {
namespace room {

class ChatRoomMap;

} // namespace room
} // namespace chat
} // namespace server

using namespace server::chat::room;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace managers {
namespace player {

class PlayerMap;

} // namespace player
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::player;

namespace server {
namespace zone {
namespace managers {
namespace player {

class PlayerManager;

} // namespace player
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::player;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace packets {
namespace chat {

class ChatInstantMessageToCharacter;

} // namespace chat
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::chat;

namespace server {
namespace zone {
namespace objects {
namespace waypoint {

class WaypointObject;

} // namespace waypoint
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::waypoint;

namespace server {
namespace chat {

class PendingMessageList;

} // namespace chat
} // namespace server

using namespace server::chat;

#include "server/chat/StringIdChatParameter.h"

#include "server/chat/StringIdChatParameterVector.h"

#include "server/chat/WaypointChatParameterVector.h"

#include "engine/core/ManagedService.h"

#include "engine/service/proto/BaseMessage.h"

#include "system/util/VectorMap.h"

#include "engine/log/Logger.h"

namespace server {
namespace chat {

class ChatManager : public ManagedService {
public:
	unsigned static const int MAXCHATROOMNAMELENGTH;

	unsigned static const int MAXCUSTOMCHATROOMS;

	unsigned static const int MAXPERSISTENTNODES;

	unsigned static const int ROOMEXPIRATIONTIME;

	static const int SUCCESS = 0;

	static const int FAIL = 1;

	static const int NOAVATAR = 4;

	static const int NOROOM = 6;

	static const int NOTPRIVATE = 9;

	static const int INVALIDBANSTATE = 12;

	static const int NOTINVITED = 13;

	static const int NOPERMISSION = 16;

	static const int IM_SUCCESS = 0x00;

	static const int IM_OFFLINE = 0x04;

	static const int IM_IGNORED = 0x09;

	static const int IM_TOOLONG = 0x10;

	static const int IM_MAXSIZE = 255;

	static const int PM_MAXSIZE = 4000;

	static const int PM_LIFESPAN = 15552000;

	static const int CF_PRIVATE = 0x01;

	static const int CF_UNK1 = 0x02;

	static const int CF_UNK2 = 0x04;

	static const int CF_TARGET_ONLY = 0x08;

	static const int CF_TARGET_GROUP_ONLY = 0x10;

	static const int CF_TARGET_SOURCE_GROUP_ONLY = 0x100;

	ChatManager(ZoneServer* serv, int initsize);

	void stop();

	void initiateRooms();

	void initiatePlanetRooms();

	void loadPersistentRooms();

	void addPlayer(CreatureObject* player);

	CreatureObject* getPlayer(const String& name);

	CreatureObject* removePlayer(const String& name);

	String getTaggedName(PlayerObject* ghost, const String& name);

	Reference<ChatRoom* > createPersistentRoomByFullPath(CreatureObject* player, const String& path, const String& title, int requestID);

	void deleteRoom(ChatRoom* room);

	void disableRoom(ChatRoom* room);

	Reference<ChatRoom* > createRoom(const String& roomName, ChatRoom* parent = NULL);

	Reference<ChatRoom* > createPersistentRoom(const String& roomName, ChatRoom* parent = NULL);

	void destroyRoom(ChatRoom* room);

	void destroyRooms();

	Reference<ChatRoom* > createGroupRoom(unsigned long long groupID, CreatureObject* creator);

	void handleChatCreateRoom(CreatureObject* player, byte permissionFlag, byte moderationFlag, const String& roomPath, const String& roomTitle, int requestID);

	void sendChatOnCreateRoomError(CreatureObject* player, int requestID, int error);

	void handleChatDestroyRoom(CreatureObject* player, unsigned int roomID, int requestID);

	void addRoom(ChatRoom* channel);

	void removeRoom(ChatRoom* channel);

	Reference<ChatRoom* > getChatRoomByFullPath(const String& path);

	Reference<ChatRoom* > getChatRoomByGamePath(ChatRoom* game, const String& path);

	String getRoomNameFromPath(const String& path);

	void handleChatLeaveRoom(CreatureObject* player, const String& roomPath);

	void handleChatEnterRoomById(CreatureObject* player, unsigned int roomID, int requestID, bool bypassSecurity = false);

	void handleChatQueryRoom(CreatureObject* player, const String& roomPath, int requestID);

	void sendRoomList(CreatureObject* player);

	/**
	 * Adds the invitee's objectID to the room's invited list if all checks are successful
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param inviter player who is inviting someone
	 * @param inviteeName name of player who is being invited
	 * @param roomPath path to room the invitee is being invited to
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatInvitePlayer(CreatureObject* inviter, const String& inviteeName, const String& roomPath, int requestID);

	/**
	 * Removes the uninvitee's objectID from the room's invited list if all checks are successful.
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param uninviter player who is uninviting someone
	 * @param uninviteeName name of player who is being uninvited
	 * @param roomPath path to room the uninvitee is being uninvited from
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatUninvitePlayer(CreatureObject* uninviter, const String& uninviteeName, const String& roomPath, int requestID);

	/**
	 * Removes the kickee from the chat room if all checks are successful
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param kicker player who is kicking someone
	 * @param kickeeName name of player who is being kicked
	 * @param roomPath path to room the kickee is being kicked from
	 */
	void handleChatKickPlayer(CreatureObject* kicker, const String& kickeeName, const String& roomPath);

	/**
	 * Adds the new moderator's objectID to the room's moderator list if all checks are successful. Also adds to invite list if not already invited.
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param oper player who is op'ing someone
	 * @param opeeName name of player who is being op'd
	 * @param roomPath path to room the op'ee is being made a moderator in
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatAddModerator(CreatureObject* oper, const String& opeeName, const String& roomPath, int requestID);

	/**
	 * Removes the deopee's objectID from the room's moderator list if all checks are successful.
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param deoper player who is deop'ing someone
	 * @param deopeeName name of player who is being deop'd
	 * @param roomPath path to room the deopee is being deop'd from
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatRemoveModerator(CreatureObject* deoper, const String& deopeeName, const String& roomPath, int requestID);

	/**
	 * Adds the banee's objectID to the room's banned list if all checks are successful
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param banner player who is banning someone
	 * @param baneeName name of player who is being banned
	 * @param roomPath path to room the banee is being banned from
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatBanPlayer(CreatureObject* banner, const String& baneeName, const String& roomPath, int requestID);

	/**
	 * Removes the unbanee's objectID from the room's banned list if all checks are successful
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param unbanner player who is banning someone
	 * @param unbaneeName name of player who is being banned
	 * @param roomPath path to room the unbanee is being unbanned from
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatUnbanPlayer(CreatureObject* unbanner, const String& unbaneeName, const String& roomPath, int requestID);

	void handleChatInstantMessageToCharacter(ChatInstantMessageToCharacter* message);

	void broadcastChatMessage(CreatureObject* player, StringIdChatParameter& message, unsigned long long target = 0, unsigned int spatialChatType = 0, unsigned int moodType = 0, unsigned int chatFlags = 0, int languageID = 1);

	void handleSpatialChatInternalMessage(CreatureObject* player, const UnicodeString& args);

	void handleGroupChat(CreatureObject* player, const UnicodeString& message);

	void handleGuildChat(CreatureObject* player, const UnicodeString& message);

	void handlePlanetChat(CreatureObject* player, const UnicodeString& message);

	void handleAuctionChat(CreatureObject* player, const UnicodeString& message);

	void handleChatRoomMessage(CreatureObject* sender, const UnicodeString& message, unsigned int roomID, unsigned int counter);

	void handleSocialInternalMessage(CreatureObject* sender, const UnicodeString& arguments);

	void broadcastMessage(BaseMessage* message);

	void broadcastChatMessage(CreatureObject* player, const UnicodeString& message, unsigned long long target = 0, unsigned int spatialChatType = 0, unsigned int moodType = 0, unsigned int chatFlags = 0, int languageID = 1);

	void broadcastGalaxy(CreatureObject* player, const String& message);

	void broadcastGalaxy(const String& message, const String& faction);

	void notifySpatialChatObservers(SceneObject* target, SceneObject* source, const UnicodeString& message);

	unsigned int getSpatialChatType(const String& spatialChatType);

	unsigned int getMoodID(const String& moodType);

	const String getMoodType(unsigned int id);

	const String getMoodAnimation(const String& moodType);

	unsigned int getRandomMoodID();

	void loadMail(CreatureObject* player);

	void sendMail(const String& sendername, const UnicodeString& header, const UnicodeString& body, const String& name);

	void handleRequestPersistentMsg(CreatureObject* player, unsigned int mailID);

	void deletePersistentMessage(CreatureObject* player, unsigned int mailID);

	UnicodeString formatMessage(const UnicodeString& message);

	int sendMail(const String& sendername, const UnicodeString& subject, StringIdChatParameter& body, const String& recipientName, WaypointObject* waypoint = NULL);

	int sendMail(const String& sendername, const UnicodeString& subject, const UnicodeString& body, const String& recipientName, StringIdChatParameterVector* stringIdParameters, WaypointChatParameterVector* waypointParameters);

	void setPlayerManager(PlayerManager* manager);

	Reference<ChatRoom* > getChatRoom(unsigned int id);

	Reference<ChatRoom* > getGameRoom(const String& game);

	int getPlayerCount();

	ZoneServer* getZoneServer();

	PlayerMap* getPlayerMap();

	ChatRoom* getGuildRoom();

	ChatRoom* getGroupRoom();

	ChatRoom* getAuctionRoom();

	ChatRoom* getSystemRoom();

	String getSocialType(unsigned int id);

	Reference<PendingMessageList* > getPendingMessages(unsigned long long oid);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ChatManager(DummyConstructorParameter* param);

	virtual ~ChatManager();

	friend class ChatManagerHelper;
};

} // namespace chat
} // namespace server

using namespace server::chat;

namespace server {
namespace chat {

class ChatManagerImplementation : public ManagedServiceImplementation, public Logger {
	ManagedReference<ZoneServer* > server;

	ManagedReference<PlayerManager* > playerManager;

	Reference<PlayerMap* > playerMap;

	VectorMap<String, ManagedReference<ChatRoom* > > gameRooms;

protected:
	VectorMap<unsigned int, String> socialTypes;

private:
	ManagedReference<ChatRoom* > galaxyRoom;

	ManagedReference<ChatRoom* > groupRoom;

	ManagedReference<ChatRoom* > guildRoom;

	ManagedReference<ChatRoom* > auctionRoom;

	ManagedReference<ChatRoom* > systemRoom;

	Reference<ChatRoomMap* > roomMap;

	bool mute;

	VectorMap<String, unsigned int> moodTypes;

	VectorMap<String, String> moodAnimations;

	VectorMap<String, unsigned int> spatialChatTypes;

	VectorMap<unsigned int, String> spatialChatTypeSkillNeeded;

	VectorMap<unsigned int, short> spatialChatDistances;

	short defaultSpatialChatDistance;

public:
	unsigned static const int MAXCHATROOMNAMELENGTH;

	unsigned static const int MAXCUSTOMCHATROOMS;

	unsigned static const int MAXPERSISTENTNODES;

	unsigned static const int ROOMEXPIRATIONTIME;

	static const int SUCCESS = 0;

	static const int FAIL = 1;

	static const int NOAVATAR = 4;

	static const int NOROOM = 6;

	static const int NOTPRIVATE = 9;

	static const int INVALIDBANSTATE = 12;

	static const int NOTINVITED = 13;

	static const int NOPERMISSION = 16;

	static const int IM_SUCCESS = 0x00;

	static const int IM_OFFLINE = 0x04;

	static const int IM_IGNORED = 0x09;

	static const int IM_TOOLONG = 0x10;

	static const int IM_MAXSIZE = 255;

	static const int PM_MAXSIZE = 4000;

	static const int PM_LIFESPAN = 15552000;

	static const int CF_PRIVATE = 0x01;

	static const int CF_UNK1 = 0x02;

	static const int CF_UNK2 = 0x04;

	static const int CF_TARGET_ONLY = 0x08;

	static const int CF_TARGET_GROUP_ONLY = 0x10;

	static const int CF_TARGET_SOURCE_GROUP_ONLY = 0x100;

	ChatManagerImplementation(ZoneServer* serv, int initsize);

	ChatManagerImplementation(DummyConstructorParameter* param);

	void stop();

private:
	void loadMailDatabase();

	void loadSocialTypes();

	void loadSpatialChatTypes();

	void loadMoodTypes();

public:
	void initiateRooms();

	void initiatePlanetRooms();

	void loadPersistentRooms();

private:
	int checkRoomPaths();

	int checkRoomExpirations();

public:
	void addPlayer(CreatureObject* player);

	CreatureObject* getPlayer(const String& name);

	CreatureObject* removePlayer(const String& name);

	String getTaggedName(PlayerObject* ghost, const String& name);

	Reference<ChatRoom* > createPersistentRoomByFullPath(CreatureObject* player, const String& path, const String& title, int requestID);

	void deleteRoom(ChatRoom* room);

	void disableRoom(ChatRoom* room);

private:
	void enableRoom(CreatureObject* player, ChatRoom* room, int requestID);

public:
	Reference<ChatRoom* > createRoom(const String& roomName, ChatRoom* parent = NULL);

	Reference<ChatRoom* > createPersistentRoom(const String& roomName, ChatRoom* parent = NULL);

	void destroyRoom(ChatRoom* room);

	void destroyRooms();

	Reference<ChatRoom* > createGroupRoom(unsigned long long groupID, CreatureObject* creator);

	void handleChatCreateRoom(CreatureObject* player, byte permissionFlag, byte moderationFlag, const String& roomPath, const String& roomTitle, int requestID);

	void sendChatOnCreateRoomError(CreatureObject* player, int requestID, int error);

	void handleChatDestroyRoom(CreatureObject* player, unsigned int roomID, int requestID);

	void addRoom(ChatRoom* channel);

	void removeRoom(ChatRoom* channel);

	Reference<ChatRoom* > getChatRoomByFullPath(const String& path);

	Reference<ChatRoom* > getChatRoomByGamePath(ChatRoom* game, const String& path);

	String getRoomNameFromPath(const String& path);

	void handleChatLeaveRoom(CreatureObject* player, const String& roomPath);

	void handleChatEnterRoomById(CreatureObject* player, unsigned int roomID, int requestID, bool bypassSecurity = false);

	void handleChatQueryRoom(CreatureObject* player, const String& roomPath, int requestID);

private:
	void broadcastQueryResultsToRoom(ChatRoom* room);

public:
	void sendRoomList(CreatureObject* player);

	/**
	 * Adds the invitee's objectID to the room's invited list if all checks are successful
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param inviter player who is inviting someone
	 * @param inviteeName name of player who is being invited
	 * @param roomPath path to room the invitee is being invited to
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatInvitePlayer(CreatureObject* inviter, const String& inviteeName, const String& roomPath, int requestID);

private:
	/**
	 * Sends a ChatOnInviteToRoom result packet to the player attempting to invite someone to a room.
	 * @param inviter player who is inviting someone
	 * @param inviteeName name of player who is being invited
	 * @param roomPath path to room the invitee is being invited to
	 * @param error the error code to determine which result message the client displays
	 * @param requestID the counter value the client sent for this request
	 */
	void sendChatOnInviteResult(CreatureObject* inviter, const String& inviteeName, const String& roomPath, int error, int requestID);

public:
	/**
	 * Removes the uninvitee's objectID from the room's invited list if all checks are successful.
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param uninviter player who is uninviting someone
	 * @param uninviteeName name of player who is being uninvited
	 * @param roomPath path to room the uninvitee is being uninvited from
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatUninvitePlayer(CreatureObject* uninviter, const String& uninviteeName, const String& roomPath, int requestID);

private:
	/**
	 * Sends a ChatOnUninviteToRoom result packet to the player attempting to uninvite someone from a room.
	 * @param uninviter player who is uninviting someone
	 * @param uninviteeName name of player who is being uninvited
	 * @param roomPath path to room the uninvitee is being uninvited from
	 * @param error the error code to determine which result message the client displays
	 * @param requestID the counter value the client sent for this request
	 */
	void sendChatOnUninviteResult(CreatureObject* uninviter, const String& uninviteeName, const String& roomPath, int error, int requestID);

public:
	/**
	 * Removes the kickee from the chat room if all checks are successful
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param kicker player who is kicking someone
	 * @param kickeeName name of player who is being kicked
	 * @param roomPath path to room the kickee is being kicked from
	 */
	void handleChatKickPlayer(CreatureObject* kicker, const String& kickeeName, const String& roomPath);

	/**
	 * Adds the new moderator's objectID to the room's moderator list if all checks are successful. Also adds to invite list if not already invited.
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param oper player who is op'ing someone
	 * @param opeeName name of player who is being op'd
	 * @param roomPath path to room the op'ee is being made a moderator in
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatAddModerator(CreatureObject* oper, const String& opeeName, const String& roomPath, int requestID);

private:
	/**
	 * Sends a ChatOnAddModeratorToRoom result packet to the player attempting to op someone in the room.
	 * @param oper player who is op'ing another player
	 * @param opeeName name of player who is being op'd
	 * @param roomPath path to room the op'ee is being op'd in
	 * @param error the error code to determine which result message the client displays
	 * @param requestID the counter value the client sent for this request
	 */
	void sendChatOnAddModeratorResult(CreatureObject* oper, const String& opeeName, const String& roomPath, int error, int requestID);

public:
	/**
	 * Removes the deopee's objectID from the room's moderator list if all checks are successful.
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param deoper player who is deop'ing someone
	 * @param deopeeName name of player who is being deop'd
	 * @param roomPath path to room the deopee is being deop'd from
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatRemoveModerator(CreatureObject* deoper, const String& deopeeName, const String& roomPath, int requestID);

private:
	/**
	 * Sends a ChatOnRemoveModeratorFromRoom result packet to the player attempting to deop someone in the room.
	 * @param deoper player who is deop'ing another player
	 * @param deopeeName name of player who is being deop'd
	 * @param roomPath path to room the deop'ee is being deop'd in
	 * @param error the error code to determine which result message the client displays
	 * @param requestID the counter value the client sent for this request
	 */
	void sendChatOnRemoveModeratorResult(CreatureObject* deoper, const String& deopeeName, const String& roomPath, int error, int requestID);

public:
	/**
	 * Adds the banee's objectID to the room's banned list if all checks are successful
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param banner player who is banning someone
	 * @param baneeName name of player who is being banned
	 * @param roomPath path to room the banee is being banned from
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatBanPlayer(CreatureObject* banner, const String& baneeName, const String& roomPath, int requestID);

private:
	/**
	 * Sends a ChatOnBanFromRoom result packet to the player attempting to ban someone from a room.
	 * @param banner player who is banning someone
	 * @param baneeName name of player who is being banned
	 * @param roomPath path to room the banee is being banned from
	 * @param error the error code to determine which result message the client displays
	 * @param requestID the counter value the client sent for this request
	 */
	void sendChatOnBanResult(CreatureObject* banner, const String& baneeName, const String& roomPath, int error, int requestID);

public:
	/**
	 * Removes the unbanee's objectID from the room's banned list if all checks are successful
	 * @pre { nothing is locked }
	 * @post { nothing is locked }
	 * @param unbanner player who is banning someone
	 * @param unbaneeName name of player who is being banned
	 * @param roomPath path to room the unbanee is being unbanned from
	 * @param requestID the counter value the client sent for this request
	 */
	void handleChatUnbanPlayer(CreatureObject* unbanner, const String& unbaneeName, const String& roomPath, int requestID);

private:
	/**
	 * Sends a ChatOnUnbanFromRoom result packet to the player attempting to unban someone from a room.
	 * @param unbanner player who is unbanning someone
	 * @param unbaneeName name of player who is being unbanned
	 * @param roomPath path to room the unbanee is being unbanned from
	 * @param error the error code to determine which result message the client displays
	 * @param requestID the counter value the client sent for this request
	 */
	void sendChatOnUnbanResult(CreatureObject* unbanner, const String& unbaneeName, const String& roomPath, int error, int requestID);

public:
	void handleChatInstantMessageToCharacter(ChatInstantMessageToCharacter* message);

	void broadcastChatMessage(CreatureObject* player, StringIdChatParameter& message, unsigned long long target = 0, unsigned int spatialChatType = 0, unsigned int moodType = 0, unsigned int chatFlags = 0, int languageID = 1);

	void handleSpatialChatInternalMessage(CreatureObject* player, const UnicodeString& args);

	void handleGroupChat(CreatureObject* player, const UnicodeString& message);

	void handleGuildChat(CreatureObject* player, const UnicodeString& message);

	void handlePlanetChat(CreatureObject* player, const UnicodeString& message);

	void handleAuctionChat(CreatureObject* player, const UnicodeString& message);

	void handleChatRoomMessage(CreatureObject* sender, const UnicodeString& message, unsigned int roomID, unsigned int counter);

	void handleSocialInternalMessage(CreatureObject* sender, const UnicodeString& arguments);

	void broadcastMessage(BaseMessage* message);

	void broadcastChatMessage(CreatureObject* player, const UnicodeString& message, unsigned long long target = 0, unsigned int spatialChatType = 0, unsigned int moodType = 0, unsigned int chatFlags = 0, int languageID = 1);

	void broadcastGalaxy(CreatureObject* player, const String& message);

	void broadcastGalaxy(const String& message, const String& faction);

	void notifySpatialChatObservers(SceneObject* target, SceneObject* source, const UnicodeString& message);

	unsigned int getSpatialChatType(const String& spatialChatType);

	unsigned int getMoodID(const String& moodType);

	const String getMoodType(unsigned int id);

	const String getMoodAnimation(const String& moodType);

	unsigned int getRandomMoodID();

	void loadMail(CreatureObject* player);

	void sendMail(const String& sendername, const UnicodeString& header, const UnicodeString& body, const String& name);

	void handleRequestPersistentMsg(CreatureObject* player, unsigned int mailID);

	void deletePersistentMessage(CreatureObject* player, unsigned int mailID);

	UnicodeString formatMessage(const UnicodeString& message);

	int sendMail(const String& sendername, const UnicodeString& subject, StringIdChatParameter& body, const String& recipientName, WaypointObject* waypoint = NULL);

	int sendMail(const String& sendername, const UnicodeString& subject, const UnicodeString& body, const String& recipientName, StringIdChatParameterVector* stringIdParameters, WaypointChatParameterVector* waypointParameters);

	void setPlayerManager(PlayerManager* manager);

	Reference<ChatRoom* > getChatRoom(unsigned int id);

	Reference<ChatRoom* > getGameRoom(const String& game);

	int getPlayerCount();

	ZoneServer* getZoneServer();

	PlayerMap* getPlayerMap();

	ChatRoom* getGuildRoom();

	ChatRoom* getGroupRoom();

	ChatRoom* getAuctionRoom();

	ChatRoom* getSystemRoom();

	String getSocialType(unsigned int id);

	Reference<PendingMessageList* > getPendingMessages(unsigned long long oid);

	WeakReference<ChatManager*> _this;

	operator const ChatManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ChatManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ChatManager;
};

class ChatManagerAdapter : public ManagedServiceAdapter {
public:
	ChatManagerAdapter(ChatManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void stop();

	void initiateRooms();

	void initiatePlanetRooms();

	void loadPersistentRooms();

	void addPlayer(CreatureObject* player);

	CreatureObject* getPlayer(const String& name);

	CreatureObject* removePlayer(const String& name);

	String getTaggedName(PlayerObject* ghost, const String& name);

	Reference<ChatRoom* > createPersistentRoomByFullPath(CreatureObject* player, const String& path, const String& title, int requestID);

	void deleteRoom(ChatRoom* room);

	void disableRoom(ChatRoom* room);

	Reference<ChatRoom* > createRoom(const String& roomName, ChatRoom* parent);

	Reference<ChatRoom* > createPersistentRoom(const String& roomName, ChatRoom* parent);

	void destroyRoom(ChatRoom* room);

	void destroyRooms();

	Reference<ChatRoom* > createGroupRoom(unsigned long long groupID, CreatureObject* creator);

	void handleChatCreateRoom(CreatureObject* player, byte permissionFlag, byte moderationFlag, const String& roomPath, const String& roomTitle, int requestID);

	void sendChatOnCreateRoomError(CreatureObject* player, int requestID, int error);

	void handleChatDestroyRoom(CreatureObject* player, unsigned int roomID, int requestID);

	void addRoom(ChatRoom* channel);

	void removeRoom(ChatRoom* channel);

	Reference<ChatRoom* > getChatRoomByFullPath(const String& path);

	Reference<ChatRoom* > getChatRoomByGamePath(ChatRoom* game, const String& path);

	String getRoomNameFromPath(const String& path);

	void handleChatLeaveRoom(CreatureObject* player, const String& roomPath);

	void handleChatEnterRoomById(CreatureObject* player, unsigned int roomID, int requestID, bool bypassSecurity);

	void handleChatQueryRoom(CreatureObject* player, const String& roomPath, int requestID);

	void sendRoomList(CreatureObject* player);

	void handleChatInvitePlayer(CreatureObject* inviter, const String& inviteeName, const String& roomPath, int requestID);

	void handleChatUninvitePlayer(CreatureObject* uninviter, const String& uninviteeName, const String& roomPath, int requestID);

	void handleChatKickPlayer(CreatureObject* kicker, const String& kickeeName, const String& roomPath);

	void handleChatAddModerator(CreatureObject* oper, const String& opeeName, const String& roomPath, int requestID);

	void handleChatRemoveModerator(CreatureObject* deoper, const String& deopeeName, const String& roomPath, int requestID);

	void handleChatBanPlayer(CreatureObject* banner, const String& baneeName, const String& roomPath, int requestID);

	void handleChatUnbanPlayer(CreatureObject* unbanner, const String& unbaneeName, const String& roomPath, int requestID);

	void handleSpatialChatInternalMessage(CreatureObject* player, const UnicodeString& args);

	void handleGroupChat(CreatureObject* player, const UnicodeString& message);

	void handleGuildChat(CreatureObject* player, const UnicodeString& message);

	void handlePlanetChat(CreatureObject* player, const UnicodeString& message);

	void handleAuctionChat(CreatureObject* player, const UnicodeString& message);

	void handleChatRoomMessage(CreatureObject* sender, const UnicodeString& message, unsigned int roomID, unsigned int counter);

	void handleSocialInternalMessage(CreatureObject* sender, const UnicodeString& arguments);

	void broadcastMessage(BaseMessage* message);

	void broadcastChatMessage(CreatureObject* player, const UnicodeString& message, unsigned long long target, unsigned int spatialChatType, unsigned int moodType, unsigned int chatFlags, int languageID);

	void broadcastGalaxy(CreatureObject* player, const String& message);

	void broadcastGalaxy(const String& message, const String& faction);

	void notifySpatialChatObservers(SceneObject* target, SceneObject* source, const UnicodeString& message);

	unsigned int getSpatialChatType(const String& spatialChatType);

	unsigned int getMoodID(const String& moodType);

	const String getMoodType(unsigned int id);

	const String getMoodAnimation(const String& moodType);

	unsigned int getRandomMoodID();

	void loadMail(CreatureObject* player);

	void sendMail(const String& sendername, const UnicodeString& header, const UnicodeString& body, const String& name);

	void handleRequestPersistentMsg(CreatureObject* player, unsigned int mailID);

	void deletePersistentMessage(CreatureObject* player, unsigned int mailID);

	UnicodeString formatMessage(const UnicodeString& message);

	void setPlayerManager(PlayerManager* manager);

	Reference<ChatRoom* > getChatRoom(unsigned int id);

	Reference<ChatRoom* > getGameRoom(const String& game);

	int getPlayerCount();

	ZoneServer* getZoneServer();

	ChatRoom* getGuildRoom();

	ChatRoom* getGroupRoom();

	ChatRoom* getAuctionRoom();

	ChatRoom* getSystemRoom();

	String getSocialType(unsigned int id);

	Reference<PendingMessageList* > getPendingMessages(unsigned long long oid);

};

class ChatManagerHelper : public DistributedObjectClassHelper, public Singleton<ChatManagerHelper> {
	static ChatManagerHelper* staticInitializer;

public:
	ChatManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ChatManagerHelper>;
};

} // namespace chat
} // namespace server

using namespace server::chat;

#endif /*CHATMANAGER_H_*/
