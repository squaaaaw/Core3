/*
 *	autogen/server/zone/managers/reaction/ReactionManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "ReactionManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

/*
 *	ReactionManagerStub
 */

enum {RPC_GETREACTIONLEVEL__STRING_ = 913684871,RPC_LOADLUACONFIG__,RPC_SENDCHATREACTION__AIAGENT_INT_INT_BOOL_,RPC_GETREACTIONQUIP__INT_,RPC_EMOTEREACTION__CREATUREOBJECT_AIAGENT_INT_,RPC_DOKNOCKDOWN__CREATUREOBJECT_AIAGENT_,RPC_DOREACTIONFINEMAILCHECK__CREATUREOBJECT_};

ReactionManager::ReactionManager(ZoneServer* zserv) : ManagedService(DummyConstructorParameter::instance()) {
	ReactionManagerImplementation* _implementation = new ReactionManagerImplementation(zserv);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ReactionManager");
}

ReactionManager::ReactionManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("ReactionManager");
}

ReactionManager::~ReactionManager() {
}



int ReactionManager::getReactionLevel(const String& emote) {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREACTIONLEVEL__STRING_);
		method.addAsciiParameter(emote);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getReactionLevel(emote);
	}
}

void ReactionManager::loadLuaConfig() {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLUACONFIG__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadLuaConfig();
	}
}

void ReactionManager::sendChatReaction(AiAgent* npc, int type, int state, bool force) {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCHATREACTION__AIAGENT_INT_INT_BOOL_);
		method.addObjectParameter(npc);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(state);
		method.addBooleanParameter(force);

		method.executeWithVoidReturn();
	} else {
		assert((npc == NULL) || npc->isLockedByCurrentThread());
		_implementation->sendChatReaction(npc, type, state, force);
	}
}

EmoteReactionFine* ReactionManager::getEmoteReactionFine(CreatureObject* emoteUser, AiAgent* emoteTarget, int reactionLevel) {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getEmoteReactionFine(emoteUser, emoteTarget, reactionLevel);
	}
}

ReactionRankData* ReactionManager::getReactionRankData(const String& name) {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getReactionRankData(name);
	}
}

String ReactionManager::getReactionQuip(int num) {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREACTIONQUIP__INT_);
		method.addSignedIntParameter(num);

		String _return_getReactionQuip;
		method.executeWithAsciiReturn(_return_getReactionQuip);
		return _return_getReactionQuip;
	} else {
		return _implementation->getReactionQuip(num);
	}
}

void ReactionManager::emoteReaction(CreatureObject* emoteUser, AiAgent* emoteTarget, int emoteid) {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_EMOTEREACTION__CREATUREOBJECT_AIAGENT_INT_);
		method.addObjectParameter(emoteUser);
		method.addObjectParameter(emoteTarget);
		method.addSignedIntParameter(emoteid);

		method.executeWithVoidReturn();
	} else {
		_implementation->emoteReaction(emoteUser, emoteTarget, emoteid);
	}
}

void ReactionManager::doKnockdown(CreatureObject* victim, AiAgent* attacker) {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOKNOCKDOWN__CREATUREOBJECT_AIAGENT_);
		method.addObjectParameter(victim);
		method.addObjectParameter(attacker);

		method.executeWithVoidReturn();
	} else {
		_implementation->doKnockdown(victim, attacker);
	}
}

void ReactionManager::doReactionFineMailCheck(CreatureObject* player) {
	ReactionManagerImplementation* _implementation = static_cast<ReactionManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOREACTIONFINEMAILCHECK__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->doReactionFineMailCheck(player);
	}
}

DistributedObjectServant* ReactionManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ReactionManager::_getImplementationForRead() const {
	return _impl;
}

void ReactionManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ReactionManagerImplementation
 */

ReactionManagerImplementation::ReactionManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


ReactionManagerImplementation::~ReactionManagerImplementation() {
}


void ReactionManagerImplementation::finalize() {
}

void ReactionManagerImplementation::_initializeImplementation() {
	_setClassHelper(ReactionManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ReactionManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ReactionManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* ReactionManagerImplementation::_getStub() {
	return _this.get();
}

ReactionManagerImplementation::operator const ReactionManager*() {
	return _this.get();
}

void ReactionManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ReactionManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ReactionManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ReactionManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ReactionManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ReactionManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ReactionManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ReactionManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("ReactionManager");

}

void ReactionManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ReactionManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ReactionManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void ReactionManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ReactionManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ReactionManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

ReactionManagerImplementation::ReactionManagerImplementation(ZoneServer* zserv) {
	_initializeImplementation();
	// server/zone/managers/reaction/ReactionManager.idl():  		Logger.setLoggingName("ReactionManager");
	Logger::setLoggingName("ReactionManager");
	// server/zone/managers/reaction/ReactionManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/reaction/ReactionManager.idl():  		zoneServer = zserv;
	zoneServer = zserv;
}

int ReactionManagerImplementation::getReactionLevel(const String& emote) {
	// server/zone/managers/reaction/ReactionManager.idl():  		return 
	if ((&reactionEmotes)->contains(emote))	// server/zone/managers/reaction/ReactionManager.idl():  			return reactionEmotes.get(emote);
	return (&reactionEmotes)->get(emote);
	// server/zone/managers/reaction/ReactionManager.idl():  		return 0;
	return 0;
}

/*
 *	ReactionManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ReactionManagerAdapter::ReactionManagerAdapter(ReactionManager* obj) : ManagedServiceAdapter(obj) {
}

void ReactionManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETREACTIONLEVEL__STRING_:
		{
			 String emote; inv->getAsciiParameter(emote);
			
			int _m_res = getReactionLevel(emote);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_LOADLUACONFIG__:
		{
			
			loadLuaConfig();
			
		}
		break;
	case RPC_SENDCHATREACTION__AIAGENT_INT_INT_BOOL_:
		{
			AiAgent* npc = static_cast<AiAgent*>(inv->getObjectParameter());
			int type = inv->getSignedIntParameter();
			int state = inv->getSignedIntParameter();
			bool force = inv->getBooleanParameter();
			
			sendChatReaction(npc, type, state, force);
			
		}
		break;
	case RPC_GETREACTIONQUIP__INT_:
		{
			int num = inv->getSignedIntParameter();
			
			String _m_res = getReactionQuip(num);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_EMOTEREACTION__CREATUREOBJECT_AIAGENT_INT_:
		{
			CreatureObject* emoteUser = static_cast<CreatureObject*>(inv->getObjectParameter());
			AiAgent* emoteTarget = static_cast<AiAgent*>(inv->getObjectParameter());
			int emoteid = inv->getSignedIntParameter();
			
			emoteReaction(emoteUser, emoteTarget, emoteid);
			
		}
		break;
	case RPC_DOKNOCKDOWN__CREATUREOBJECT_AIAGENT_:
		{
			CreatureObject* victim = static_cast<CreatureObject*>(inv->getObjectParameter());
			AiAgent* attacker = static_cast<AiAgent*>(inv->getObjectParameter());
			
			doKnockdown(victim, attacker);
			
		}
		break;
	case RPC_DOREACTIONFINEMAILCHECK__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			doReactionFineMailCheck(player);
			
		}
		break;
	default:
		ManagedServiceAdapter::invokeMethod(methid, inv);
	}
}

int ReactionManagerAdapter::getReactionLevel(const String& emote) {
	return (static_cast<ReactionManager*>(stub))->getReactionLevel(emote);
}

void ReactionManagerAdapter::loadLuaConfig() {
	(static_cast<ReactionManager*>(stub))->loadLuaConfig();
}

void ReactionManagerAdapter::sendChatReaction(AiAgent* npc, int type, int state, bool force) {
	(static_cast<ReactionManager*>(stub))->sendChatReaction(npc, type, state, force);
}

String ReactionManagerAdapter::getReactionQuip(int num) {
	return (static_cast<ReactionManager*>(stub))->getReactionQuip(num);
}

void ReactionManagerAdapter::emoteReaction(CreatureObject* emoteUser, AiAgent* emoteTarget, int emoteid) {
	(static_cast<ReactionManager*>(stub))->emoteReaction(emoteUser, emoteTarget, emoteid);
}

void ReactionManagerAdapter::doKnockdown(CreatureObject* victim, AiAgent* attacker) {
	(static_cast<ReactionManager*>(stub))->doKnockdown(victim, attacker);
}

void ReactionManagerAdapter::doReactionFineMailCheck(CreatureObject* player) {
	(static_cast<ReactionManager*>(stub))->doReactionFineMailCheck(player);
}

/*
 *	ReactionManagerHelper
 */

ReactionManagerHelper* ReactionManagerHelper::staticInitializer = ReactionManagerHelper::instance();

ReactionManagerHelper::ReactionManagerHelper() {
	className = "ReactionManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void ReactionManagerHelper::finalizeHelper() {
	ReactionManagerHelper::finalize();
}

DistributedObject* ReactionManagerHelper::instantiateObject() {
	return new ReactionManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* ReactionManagerHelper::instantiateServant() {
	return new ReactionManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ReactionManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ReactionManagerAdapter(static_cast<ReactionManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

