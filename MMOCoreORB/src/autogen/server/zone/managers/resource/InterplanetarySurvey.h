/*
 *	autogen/server/zone/managers/resource/InterplanetarySurvey.h generated by engine3 IDL compiler 0.60
 */

#ifndef INTERPLANETARYSURVEY_H_
#define INTERPLANETARYSURVEY_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/core/ManagedObject.h"

namespace server {
namespace zone {
namespace managers {
namespace resource {

class InterplanetarySurvey : public ManagedObject {
public:
	InterplanetarySurvey();

	int getTimeStamp();

	void setTimeStamp(int stamp);

	int getCurTime();

	void setCurTime(int time);

	const String getRequestor();

	void setRequestor(const String& player);

	const String getPlanet();

	void setPlanet(const String& en);

	const String getSurveyType();

	void setSurveyType(const String& en);

	void setSurveyToolType(int toolType);

	int getSurveyToolType();

	void setExecuted(bool val);

	void notifyLoadFromDatabase();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	InterplanetarySurvey(DummyConstructorParameter* param);

	virtual ~InterplanetarySurvey();

	friend class InterplanetarySurveyHelper;
};

} // namespace resource
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::resource;

namespace server {
namespace zone {
namespace managers {
namespace resource {

class InterplanetarySurveyImplementation : public ManagedObjectImplementation {
protected:
	int timeStamp;

	int curTime;

	String requestor;

	String planet;

	String surveyType;

	int surveyToolType;

	bool executed;

public:
	InterplanetarySurveyImplementation();

	InterplanetarySurveyImplementation(DummyConstructorParameter* param);

	int getTimeStamp();

	void setTimeStamp(int stamp);

	int getCurTime();

	void setCurTime(int time);

	const String getRequestor();

	void setRequestor(const String& player);

	const String getPlanet();

	void setPlanet(const String& en);

	const String getSurveyType();

	void setSurveyType(const String& en);

	void setSurveyToolType(int toolType);

	int getSurveyToolType();

	void setExecuted(bool val);

	void notifyLoadFromDatabase();

	WeakReference<InterplanetarySurvey*> _this;

	operator const InterplanetarySurvey*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~InterplanetarySurveyImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class InterplanetarySurvey;
};

class InterplanetarySurveyAdapter : public ManagedObjectAdapter {
public:
	InterplanetarySurveyAdapter(InterplanetarySurvey* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int getTimeStamp();

	void setTimeStamp(int stamp);

	int getCurTime();

	void setCurTime(int time);

	const String getRequestor();

	void setRequestor(const String& player);

	const String getPlanet();

	void setPlanet(const String& en);

	const String getSurveyType();

	void setSurveyType(const String& en);

	void setSurveyToolType(int toolType);

	int getSurveyToolType();

	void setExecuted(bool val);

	void notifyLoadFromDatabase();

};

class InterplanetarySurveyHelper : public DistributedObjectClassHelper, public Singleton<InterplanetarySurveyHelper> {
	static InterplanetarySurveyHelper* staticInitializer;

public:
	InterplanetarySurveyHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<InterplanetarySurveyHelper>;
};

} // namespace resource
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::resource;

#endif /*INTERPLANETARYSURVEY_H_*/
