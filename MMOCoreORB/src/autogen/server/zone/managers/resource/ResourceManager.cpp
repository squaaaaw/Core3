/*
 *	autogen/server/zone/managers/resource/ResourceManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/resource/ResourceContainer.h"

#include "server/zone/objects/player/sui/listbox/SuiListBox.h"

/*
 *	ResourceManagerStub
 */

enum {RPC_STOP__ = 1114213504,RPC_INITIALIZE__,RPC_SHIFTRESOURCES__,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_GETRESOURCERECYCLETYPE__RESOURCESPAWN_,RPC_SENDRESOURCELISTFORSURVEY__CREATUREOBJECT_INT_STRING_,RPC_SENDSURVEY__CREATUREOBJECT_STRING_,RPC_SENDSAMPLE__CREATUREOBJECT_STRING_STRING_,RPC_HARVESTRESOURCE__CREATUREOBJECT_STRING_INT_,RPC_HARVESTRESOURCETOPLAYER__CREATUREOBJECT_RESOURCESPAWN_INT_,RPC_GETAVAILABLEPOWERFROMPLAYER__CREATUREOBJECT_,RPC_REMOVEPOWERFROMPLAYER__CREATUREOBJECT_INT_,RPC_CREATERESOURCESPAWN__CREATUREOBJECT_UNICODESTRING_,RPC_GIVEPLAYERRESOURCE__CREATUREOBJECT_STRING_INT_,RPC_GETCURRENTSPAWN__STRING_STRING_,RPC_GETRESOURCESPAWN__STRING_,RPC_ISRECYCLEDRESOURCE__RESOURCESPAWN_,RPC_GETRECYCLEDVERSION__RESOURCESPAWN_,RPC_ADDNODETOLISTBOX__SUILISTBOX_STRING_,RPC_ADDPARENTNODETOLISTBOX__SUILISTBOX_STRING_,RPC_LISTRESOURCESFORPLANETONSCREEN__CREATUREOBJECT_STRING_,RPC_HEALTHCHECK__,RPC_DUMPRESOURCES__,RPC_DESPAWNRESOURCE__STRING_,RPC_ADDPLANETSTOLISTBOX__SUILISTBOX_,RPC_GETPLANETBYINDEX__INT_,RPC_GETZONESERVER__};

ResourceManager::ResourceManager(ZoneServer* server, ZoneProcessServer* impl) : Observer(DummyConstructorParameter::instance()) {
	ResourceManagerImplementation* _implementation = new ResourceManagerImplementation(server, impl);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ResourceManager");
}

ResourceManager::ResourceManager(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("ResourceManager");
}

ResourceManager::~ResourceManager() {
}



void ResourceManager::stop() {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOP__);

		method.executeWithVoidReturn();
	} else {
		_implementation->stop();
	}
}

void ResourceManager::initialize() {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initialize();
	}
}

void ResourceManager::shiftResources() {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SHIFTRESOURCES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->shiftResources();
	}
}

int ResourceManager::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

int ResourceManager::getResourceRecycleType(ResourceSpawn* resource) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRESOURCERECYCLETYPE__RESOURCESPAWN_);
		method.addObjectParameter(resource);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getResourceRecycleType(resource);
	}
}

void ResourceManager::sendResourceListForSurvey(CreatureObject* playerCreature, const int toolType, const String& surveyType) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDRESOURCELISTFORSURVEY__CREATUREOBJECT_INT_STRING_);
		method.addObjectParameter(playerCreature);
		method.addSignedIntParameter(toolType);
		method.addAsciiParameter(surveyType);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendResourceListForSurvey(playerCreature, toolType, surveyType);
	}
}

void ResourceManager::sendSurvey(CreatureObject* playerCreature, const String& resname) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSURVEY__CREATUREOBJECT_STRING_);
		method.addObjectParameter(playerCreature);
		method.addAsciiParameter(resname);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendSurvey(playerCreature, resname);
	}
}

void ResourceManager::sendSample(CreatureObject* playerCreature, const String& resname, const String& sampleAnimation) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSAMPLE__CREATUREOBJECT_STRING_STRING_);
		method.addObjectParameter(playerCreature);
		method.addAsciiParameter(resname);
		method.addAsciiParameter(sampleAnimation);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendSample(playerCreature, resname, sampleAnimation);
	}
}

ResourceContainer* ResourceManager::harvestResource(CreatureObject* player, const String& type, const int quantity) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HARVESTRESOURCE__CREATUREOBJECT_STRING_INT_);
		method.addObjectParameter(player);
		method.addAsciiParameter(type);
		method.addSignedIntParameter(quantity);

		return static_cast<ResourceContainer*>(method.executeWithObjectReturn());
	} else {
		return _implementation->harvestResource(player, type, quantity);
	}
}

bool ResourceManager::harvestResourceToPlayer(CreatureObject* player, ResourceSpawn* resourceSpawn, const int quantity) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HARVESTRESOURCETOPLAYER__CREATUREOBJECT_RESOURCESPAWN_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(resourceSpawn);
		method.addSignedIntParameter(quantity);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->harvestResourceToPlayer(player, resourceSpawn, quantity);
	}
}

unsigned int ResourceManager::getAvailablePowerFromPlayer(CreatureObject* player) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAVAILABLEPOWERFROMPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getAvailablePowerFromPlayer(player);
	}
}

void ResourceManager::removePowerFromPlayer(CreatureObject* player, unsigned int power) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPOWERFROMPLAYER__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(power);

		method.executeWithVoidReturn();
	} else {
		_implementation->removePowerFromPlayer(player, power);
	}
}

void ResourceManager::getResourceListByType(Vector<ManagedReference<ResourceSpawn* > >& list, int type, const String& zoneName) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->getResourceListByType(list, type, zoneName);
	}
}

void ResourceManager::createResourceSpawn(CreatureObject* playerCreature, const UnicodeString& args) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATERESOURCESPAWN__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(playerCreature);
		method.addUnicodeParameter(args);

		method.executeWithVoidReturn();
	} else {
		_implementation->createResourceSpawn(playerCreature, args);
	}
}

void ResourceManager::givePlayerResource(CreatureObject* playerCreature, const String& restype, const int quantity) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GIVEPLAYERRESOURCE__CREATUREOBJECT_STRING_INT_);
		method.addObjectParameter(playerCreature);
		method.addAsciiParameter(restype);
		method.addSignedIntParameter(quantity);

		method.executeWithVoidReturn();
	} else {
		_implementation->givePlayerResource(playerCreature, restype, quantity);
	}
}

ResourceSpawn* ResourceManager::getCurrentSpawn(const String& restype, const String& zoneName) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCURRENTSPAWN__STRING_STRING_);
		method.addAsciiParameter(restype);
		method.addAsciiParameter(zoneName);

		return static_cast<ResourceSpawn*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getCurrentSpawn(restype, zoneName);
	}
}

ResourceSpawn* ResourceManager::getResourceSpawn(const String& spawnName) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRESOURCESPAWN__STRING_);
		method.addAsciiParameter(spawnName);

		return static_cast<ResourceSpawn*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getResourceSpawn(spawnName);
	}
}

bool ResourceManager::isRecycledResource(ResourceSpawn* resource) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRECYCLEDRESOURCE__RESOURCESPAWN_);
		method.addObjectParameter(resource);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRecycledResource(resource);
	}
}

ResourceSpawn* ResourceManager::getRecycledVersion(ResourceSpawn* resource) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRECYCLEDVERSION__RESOURCESPAWN_);
		method.addObjectParameter(resource);

		return static_cast<ResourceSpawn*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getRecycledVersion(resource);
	}
}

void ResourceManager::addNodeToListBox(SuiListBox* sui, const String& nodeName) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDNODETOLISTBOX__SUILISTBOX_STRING_);
		method.addObjectParameter(sui);
		method.addAsciiParameter(nodeName);

		method.executeWithVoidReturn();
	} else {
		_implementation->addNodeToListBox(sui, nodeName);
	}
}

String ResourceManager::addParentNodeToListBox(SuiListBox* sui, const String& currentNode) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPARENTNODETOLISTBOX__SUILISTBOX_STRING_);
		method.addObjectParameter(sui);
		method.addAsciiParameter(currentNode);

		String _return_addParentNodeToListBox;
		method.executeWithAsciiReturn(_return_addParentNodeToListBox);
		return _return_addParentNodeToListBox;
	} else {
		return _implementation->addParentNodeToListBox(sui, currentNode);
	}
}

void ResourceManager::listResourcesForPlanetOnScreen(CreatureObject* creature, const String& planet) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LISTRESOURCESFORPLANETONSCREEN__CREATUREOBJECT_STRING_);
		method.addObjectParameter(creature);
		method.addAsciiParameter(planet);

		method.executeWithVoidReturn();
	} else {
		_implementation->listResourcesForPlanetOnScreen(creature, planet);
	}
}

String ResourceManager::healthCheck() {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HEALTHCHECK__);

		String _return_healthCheck;
		method.executeWithAsciiReturn(_return_healthCheck);
		return _return_healthCheck;
	} else {
		return _implementation->healthCheck();
	}
}

String ResourceManager::dumpResources() {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DUMPRESOURCES__);

		String _return_dumpResources;
		method.executeWithAsciiReturn(_return_dumpResources);
		return _return_dumpResources;
	} else {
		return _implementation->dumpResources();
	}
}

String ResourceManager::despawnResource(String& resourceName) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESPAWNRESOURCE__STRING_);
		method.addAsciiParameter(resourceName);

		String _return_despawnResource;
		method.executeWithAsciiReturn(_return_despawnResource);
		return _return_despawnResource;
	} else {
		return _implementation->despawnResource(resourceName);
	}
}

void ResourceManager::addPlanetsToListBox(SuiListBox* sui) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPLANETSTOLISTBOX__SUILISTBOX_);
		method.addObjectParameter(sui);

		method.executeWithVoidReturn();
	} else {
		_implementation->addPlanetsToListBox(sui);
	}
}

String ResourceManager::getPlanetByIndex(int idx) {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETBYINDEX__INT_);
		method.addSignedIntParameter(idx);

		String _return_getPlanetByIndex;
		method.executeWithAsciiReturn(_return_getPlanetByIndex);
		return _return_getPlanetByIndex;
	} else {
		return _implementation->getPlanetByIndex(idx);
	}
}

ResourceSpawner* ResourceManager::getResourceSpawner() {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getResourceSpawner();
	}
}

ZoneServer* ResourceManager::getZoneServer() {
	ResourceManagerImplementation* _implementation = static_cast<ResourceManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONESERVER__);

		return static_cast<ZoneServer*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getZoneServer();
	}
}

DistributedObjectServant* ResourceManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ResourceManager::_getImplementationForRead() const {
	return _impl;
}

void ResourceManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ResourceManagerImplementation
 */

ResourceManagerImplementation::ResourceManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


ResourceManagerImplementation::~ResourceManagerImplementation() {
}


void ResourceManagerImplementation::finalize() {
}

void ResourceManagerImplementation::_initializeImplementation() {
	_setClassHelper(ResourceManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ResourceManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ResourceManager*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceManagerImplementation::_getStub() {
	return _this.get();
}

ResourceManagerImplementation::operator const ResourceManager*() {
	return _this.get();
}

void ResourceManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ResourceManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ResourceManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ResourceManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ResourceManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ResourceManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ResourceManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ResourceManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("ResourceManager");

}

void ResourceManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ResourceManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ResourceManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void ResourceManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ResourceManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ResourceManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

ResourceManagerImplementation::ResourceManagerImplementation(ZoneServer* server, ZoneProcessServer* impl) {
	_initializeImplementation();
	Reference<ResourceSpawner*> _ref0;
	// server/zone/managers/resource/ResourceManager.idl():  		Logger.setLoggingName("ResourceManager");
	Logger::setLoggingName("ResourceManager");
	// server/zone/managers/resource/ResourceManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/resource/ResourceManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/resource/ResourceManager.idl():  		zoneServer = server;
	zoneServer = server;
	// server/zone/managers/resource/ResourceManager.idl():  		processor = impl;
	processor = impl;
	// server/zone/managers/resource/ResourceManager.idl():  		resourceSpawner = new ResourceSpawner(server, impl);
	resourceSpawner = _ref0 = new ResourceSpawner(server, impl);
	// server/zone/managers/resource/ResourceManager.idl():  		Logger.info("ResourceManager started");
	Logger::info("ResourceManager started");
}

ResourceSpawner* ResourceManagerImplementation::getResourceSpawner() {
	// server/zone/managers/resource/ResourceManager.idl():  		return resourceSpawner;
	return resourceSpawner;
}

ZoneServer* ResourceManagerImplementation::getZoneServer() {
	// server/zone/managers/resource/ResourceManager.idl():  		return zoneServer;
	return zoneServer;
}

/*
 *	ResourceManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ResourceManagerAdapter::ResourceManagerAdapter(ResourceManager* obj) : ObserverAdapter(obj) {
}

void ResourceManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_STOP__:
		{
			
			stop();
			
		}
		break;
	case RPC_INITIALIZE__:
		{
			
			initialize();
			
		}
		break;
	case RPC_SHIFTRESOURCES__:
		{
			
			shiftResources();
			
		}
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETRESOURCERECYCLETYPE__RESOURCESPAWN_:
		{
			ResourceSpawn* resource = static_cast<ResourceSpawn*>(inv->getObjectParameter());
			
			int _m_res = getResourceRecycleType(resource);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SENDRESOURCELISTFORSURVEY__CREATUREOBJECT_INT_STRING_:
		{
			CreatureObject* playerCreature = static_cast<CreatureObject*>(inv->getObjectParameter());
			 int toolType = inv->getSignedIntParameter();
			 String surveyType; inv->getAsciiParameter(surveyType);
			
			sendResourceListForSurvey(playerCreature, toolType, surveyType);
			
		}
		break;
	case RPC_SENDSURVEY__CREATUREOBJECT_STRING_:
		{
			CreatureObject* playerCreature = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String resname; inv->getAsciiParameter(resname);
			
			sendSurvey(playerCreature, resname);
			
		}
		break;
	case RPC_SENDSAMPLE__CREATUREOBJECT_STRING_STRING_:
		{
			CreatureObject* playerCreature = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String resname; inv->getAsciiParameter(resname);
			 String sampleAnimation; inv->getAsciiParameter(sampleAnimation);
			
			sendSample(playerCreature, resname, sampleAnimation);
			
		}
		break;
	case RPC_HARVESTRESOURCE__CREATUREOBJECT_STRING_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String type; inv->getAsciiParameter(type);
			 int quantity = inv->getSignedIntParameter();
			
			DistributedObject* _m_res = harvestResource(player, type, quantity);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_HARVESTRESOURCETOPLAYER__CREATUREOBJECT_RESOURCESPAWN_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			ResourceSpawn* resourceSpawn = static_cast<ResourceSpawn*>(inv->getObjectParameter());
			 int quantity = inv->getSignedIntParameter();
			
			bool _m_res = harvestResourceToPlayer(player, resourceSpawn, quantity);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETAVAILABLEPOWERFROMPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			unsigned int _m_res = getAvailablePowerFromPlayer(player);
			resp->insertInt(_m_res);
		}
		break;
	case RPC_REMOVEPOWERFROMPLAYER__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int power = inv->getUnsignedIntParameter();
			
			removePowerFromPlayer(player, power);
			
		}
		break;
	case RPC_CREATERESOURCESPAWN__CREATUREOBJECT_UNICODESTRING_:
		{
			CreatureObject* playerCreature = static_cast<CreatureObject*>(inv->getObjectParameter());
			 UnicodeString args; inv->getUnicodeParameter(args);
			
			createResourceSpawn(playerCreature, args);
			
		}
		break;
	case RPC_GIVEPLAYERRESOURCE__CREATUREOBJECT_STRING_INT_:
		{
			CreatureObject* playerCreature = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String restype; inv->getAsciiParameter(restype);
			 int quantity = inv->getSignedIntParameter();
			
			givePlayerResource(playerCreature, restype, quantity);
			
		}
		break;
	case RPC_GETCURRENTSPAWN__STRING_STRING_:
		{
			 String restype; inv->getAsciiParameter(restype);
			 String zoneName; inv->getAsciiParameter(zoneName);
			
			DistributedObject* _m_res = getCurrentSpawn(restype, zoneName);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETRESOURCESPAWN__STRING_:
		{
			 String spawnName; inv->getAsciiParameter(spawnName);
			
			DistributedObject* _m_res = getResourceSpawn(spawnName);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ISRECYCLEDRESOURCE__RESOURCESPAWN_:
		{
			ResourceSpawn* resource = static_cast<ResourceSpawn*>(inv->getObjectParameter());
			
			bool _m_res = isRecycledResource(resource);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETRECYCLEDVERSION__RESOURCESPAWN_:
		{
			ResourceSpawn* resource = static_cast<ResourceSpawn*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = getRecycledVersion(resource);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ADDNODETOLISTBOX__SUILISTBOX_STRING_:
		{
			SuiListBox* sui = static_cast<SuiListBox*>(inv->getObjectParameter());
			 String nodeName; inv->getAsciiParameter(nodeName);
			
			addNodeToListBox(sui, nodeName);
			
		}
		break;
	case RPC_ADDPARENTNODETOLISTBOX__SUILISTBOX_STRING_:
		{
			SuiListBox* sui = static_cast<SuiListBox*>(inv->getObjectParameter());
			 String currentNode; inv->getAsciiParameter(currentNode);
			
			String _m_res = addParentNodeToListBox(sui, currentNode);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_LISTRESOURCESFORPLANETONSCREEN__CREATUREOBJECT_STRING_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String planet; inv->getAsciiParameter(planet);
			
			listResourcesForPlanetOnScreen(creature, planet);
			
		}
		break;
	case RPC_HEALTHCHECK__:
		{
			
			String _m_res = healthCheck();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_DUMPRESOURCES__:
		{
			
			String _m_res = dumpResources();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_DESPAWNRESOURCE__STRING_:
		{
			String resourceName; inv->getAsciiParameter(resourceName);
			
			String _m_res = despawnResource(resourceName);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_ADDPLANETSTOLISTBOX__SUILISTBOX_:
		{
			SuiListBox* sui = static_cast<SuiListBox*>(inv->getObjectParameter());
			
			addPlanetsToListBox(sui);
			
		}
		break;
	case RPC_GETPLANETBYINDEX__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			String _m_res = getPlanetByIndex(idx);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETZONESERVER__:
		{
			
			DistributedObject* _m_res = getZoneServer();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

void ResourceManagerAdapter::stop() {
	(static_cast<ResourceManager*>(stub))->stop();
}

void ResourceManagerAdapter::initialize() {
	(static_cast<ResourceManager*>(stub))->initialize();
}

void ResourceManagerAdapter::shiftResources() {
	(static_cast<ResourceManager*>(stub))->shiftResources();
}

int ResourceManagerAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<ResourceManager*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

int ResourceManagerAdapter::getResourceRecycleType(ResourceSpawn* resource) {
	return (static_cast<ResourceManager*>(stub))->getResourceRecycleType(resource);
}

void ResourceManagerAdapter::sendResourceListForSurvey(CreatureObject* playerCreature, const int toolType, const String& surveyType) {
	(static_cast<ResourceManager*>(stub))->sendResourceListForSurvey(playerCreature, toolType, surveyType);
}

void ResourceManagerAdapter::sendSurvey(CreatureObject* playerCreature, const String& resname) {
	(static_cast<ResourceManager*>(stub))->sendSurvey(playerCreature, resname);
}

void ResourceManagerAdapter::sendSample(CreatureObject* playerCreature, const String& resname, const String& sampleAnimation) {
	(static_cast<ResourceManager*>(stub))->sendSample(playerCreature, resname, sampleAnimation);
}

ResourceContainer* ResourceManagerAdapter::harvestResource(CreatureObject* player, const String& type, const int quantity) {
	return (static_cast<ResourceManager*>(stub))->harvestResource(player, type, quantity);
}

bool ResourceManagerAdapter::harvestResourceToPlayer(CreatureObject* player, ResourceSpawn* resourceSpawn, const int quantity) {
	return (static_cast<ResourceManager*>(stub))->harvestResourceToPlayer(player, resourceSpawn, quantity);
}

unsigned int ResourceManagerAdapter::getAvailablePowerFromPlayer(CreatureObject* player) {
	return (static_cast<ResourceManager*>(stub))->getAvailablePowerFromPlayer(player);
}

void ResourceManagerAdapter::removePowerFromPlayer(CreatureObject* player, unsigned int power) {
	(static_cast<ResourceManager*>(stub))->removePowerFromPlayer(player, power);
}

void ResourceManagerAdapter::createResourceSpawn(CreatureObject* playerCreature, const UnicodeString& args) {
	(static_cast<ResourceManager*>(stub))->createResourceSpawn(playerCreature, args);
}

void ResourceManagerAdapter::givePlayerResource(CreatureObject* playerCreature, const String& restype, const int quantity) {
	(static_cast<ResourceManager*>(stub))->givePlayerResource(playerCreature, restype, quantity);
}

ResourceSpawn* ResourceManagerAdapter::getCurrentSpawn(const String& restype, const String& zoneName) {
	return (static_cast<ResourceManager*>(stub))->getCurrentSpawn(restype, zoneName);
}

ResourceSpawn* ResourceManagerAdapter::getResourceSpawn(const String& spawnName) {
	return (static_cast<ResourceManager*>(stub))->getResourceSpawn(spawnName);
}

bool ResourceManagerAdapter::isRecycledResource(ResourceSpawn* resource) {
	return (static_cast<ResourceManager*>(stub))->isRecycledResource(resource);
}

ResourceSpawn* ResourceManagerAdapter::getRecycledVersion(ResourceSpawn* resource) {
	return (static_cast<ResourceManager*>(stub))->getRecycledVersion(resource);
}

void ResourceManagerAdapter::addNodeToListBox(SuiListBox* sui, const String& nodeName) {
	(static_cast<ResourceManager*>(stub))->addNodeToListBox(sui, nodeName);
}

String ResourceManagerAdapter::addParentNodeToListBox(SuiListBox* sui, const String& currentNode) {
	return (static_cast<ResourceManager*>(stub))->addParentNodeToListBox(sui, currentNode);
}

void ResourceManagerAdapter::listResourcesForPlanetOnScreen(CreatureObject* creature, const String& planet) {
	(static_cast<ResourceManager*>(stub))->listResourcesForPlanetOnScreen(creature, planet);
}

String ResourceManagerAdapter::healthCheck() {
	return (static_cast<ResourceManager*>(stub))->healthCheck();
}

String ResourceManagerAdapter::dumpResources() {
	return (static_cast<ResourceManager*>(stub))->dumpResources();
}

String ResourceManagerAdapter::despawnResource(String& resourceName) {
	return (static_cast<ResourceManager*>(stub))->despawnResource(resourceName);
}

void ResourceManagerAdapter::addPlanetsToListBox(SuiListBox* sui) {
	(static_cast<ResourceManager*>(stub))->addPlanetsToListBox(sui);
}

String ResourceManagerAdapter::getPlanetByIndex(int idx) {
	return (static_cast<ResourceManager*>(stub))->getPlanetByIndex(idx);
}

ZoneServer* ResourceManagerAdapter::getZoneServer() {
	return (static_cast<ResourceManager*>(stub))->getZoneServer();
}

/*
 *	ResourceManagerHelper
 */

ResourceManagerHelper* ResourceManagerHelper::staticInitializer = ResourceManagerHelper::instance();

ResourceManagerHelper::ResourceManagerHelper() {
	className = "ResourceManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void ResourceManagerHelper::finalizeHelper() {
	ResourceManagerHelper::finalize();
}

DistributedObject* ResourceManagerHelper::instantiateObject() {
	return new ResourceManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceManagerHelper::instantiateServant() {
	return new ResourceManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceManagerAdapter(static_cast<ResourceManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

