/*
 *	autogen/server/zone/managers/resource/InterplanetarySurvey.cpp generated by engine3 IDL compiler 0.60
 */

#include "InterplanetarySurvey.h"

/*
 *	InterplanetarySurveyStub
 */

enum {RPC_GETTIMESTAMP__ = 308824843,RPC_SETTIMESTAMP__INT_,RPC_GETCURTIME__,RPC_SETCURTIME__INT_,RPC_GETREQUESTOR__,RPC_SETREQUESTOR__STRING_,RPC_GETPLANET__,RPC_SETPLANET__STRING_,RPC_GETSURVEYTYPE__,RPC_SETSURVEYTYPE__STRING_,RPC_SETSURVEYTOOLTYPE__INT_,RPC_GETSURVEYTOOLTYPE__,RPC_SETEXECUTED__BOOL_,RPC_NOTIFYLOADFROMDATABASE__};

InterplanetarySurvey::InterplanetarySurvey() : ManagedObject(DummyConstructorParameter::instance()) {
	InterplanetarySurveyImplementation* _implementation = new InterplanetarySurveyImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("InterplanetarySurvey");
}

InterplanetarySurvey::InterplanetarySurvey(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("InterplanetarySurvey");
}

InterplanetarySurvey::~InterplanetarySurvey() {
}



int InterplanetarySurvey::getTimeStamp() {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMESTAMP__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTimeStamp();
	}
}

void InterplanetarySurvey::setTimeStamp(int stamp) {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTIMESTAMP__INT_);
		method.addSignedIntParameter(stamp);

		method.executeWithVoidReturn();
	} else {
		_implementation->setTimeStamp(stamp);
	}
}

int InterplanetarySurvey::getCurTime() {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCURTIME__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCurTime();
	}
}

void InterplanetarySurvey::setCurTime(int time) {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCURTIME__INT_);
		method.addSignedIntParameter(time);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCurTime(time);
	}
}

const String InterplanetarySurvey::getRequestor() {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREQUESTOR__);

		String _return_getRequestor;
		method.executeWithAsciiReturn(_return_getRequestor);
		return _return_getRequestor;
	} else {
		return _implementation->getRequestor();
	}
}

void InterplanetarySurvey::setRequestor(const String& player) {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREQUESTOR__STRING_);
		method.addAsciiParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->setRequestor(player);
	}
}

const String InterplanetarySurvey::getPlanet() {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANET__);

		String _return_getPlanet;
		method.executeWithAsciiReturn(_return_getPlanet);
		return _return_getPlanet;
	} else {
		return _implementation->getPlanet();
	}
}

void InterplanetarySurvey::setPlanet(const String& en) {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPLANET__STRING_);
		method.addAsciiParameter(en);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPlanet(en);
	}
}

const String InterplanetarySurvey::getSurveyType() {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURVEYTYPE__);

		String _return_getSurveyType;
		method.executeWithAsciiReturn(_return_getSurveyType);
		return _return_getSurveyType;
	} else {
		return _implementation->getSurveyType();
	}
}

void InterplanetarySurvey::setSurveyType(const String& en) {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURVEYTYPE__STRING_);
		method.addAsciiParameter(en);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSurveyType(en);
	}
}

void InterplanetarySurvey::setSurveyToolType(int toolType) {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURVEYTOOLTYPE__INT_);
		method.addSignedIntParameter(toolType);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSurveyToolType(toolType);
	}
}

int InterplanetarySurvey::getSurveyToolType() {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURVEYTOOLTYPE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSurveyToolType();
	}
}

void InterplanetarySurvey::setExecuted(bool val) {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETEXECUTED__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else {
		_implementation->setExecuted(val);
	}
}

void InterplanetarySurvey::notifyLoadFromDatabase() {
	InterplanetarySurveyImplementation* _implementation = static_cast<InterplanetarySurveyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyLoadFromDatabase();
	}
}

DistributedObjectServant* InterplanetarySurvey::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* InterplanetarySurvey::_getImplementationForRead() const {
	return _impl;
}

void InterplanetarySurvey::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	InterplanetarySurveyImplementation
 */

InterplanetarySurveyImplementation::InterplanetarySurveyImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


InterplanetarySurveyImplementation::~InterplanetarySurveyImplementation() {
}


void InterplanetarySurveyImplementation::finalize() {
}

void InterplanetarySurveyImplementation::_initializeImplementation() {
	_setClassHelper(InterplanetarySurveyHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void InterplanetarySurveyImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<InterplanetarySurvey*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InterplanetarySurveyImplementation::_getStub() {
	return _this.get();
}

InterplanetarySurveyImplementation::operator const InterplanetarySurvey*() {
	return _this.get();
}

void InterplanetarySurveyImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void InterplanetarySurveyImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void InterplanetarySurveyImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void InterplanetarySurveyImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void InterplanetarySurveyImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void InterplanetarySurveyImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void InterplanetarySurveyImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void InterplanetarySurveyImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("InterplanetarySurvey");

}

void InterplanetarySurveyImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(InterplanetarySurveyImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool InterplanetarySurveyImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xb222f1bb: //InterplanetarySurvey.timeStamp
		TypeInfo<int >::parseFromBinaryStream(&timeStamp, stream);
		return true;

	case 0x745276ad: //InterplanetarySurvey.curTime
		TypeInfo<int >::parseFromBinaryStream(&curTime, stream);
		return true;

	case 0xaf64b115: //InterplanetarySurvey.requestor
		TypeInfo<String >::parseFromBinaryStream(&requestor, stream);
		return true;

	case 0xb1c5f75a: //InterplanetarySurvey.planet
		TypeInfo<String >::parseFromBinaryStream(&planet, stream);
		return true;

	case 0x82394653: //InterplanetarySurvey.surveyType
		TypeInfo<String >::parseFromBinaryStream(&surveyType, stream);
		return true;

	case 0x7233accb: //InterplanetarySurvey.surveyToolType
		TypeInfo<int >::parseFromBinaryStream(&surveyToolType, stream);
		return true;

	case 0x9b367abf: //InterplanetarySurvey.executed
		TypeInfo<bool >::parseFromBinaryStream(&executed, stream);
		return true;

	}

	return false;
}

void InterplanetarySurveyImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = InterplanetarySurveyImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int InterplanetarySurveyImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xb222f1bb; //InterplanetarySurvey.timeStamp
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&timeStamp, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x745276ad; //InterplanetarySurvey.curTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&curTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xaf64b115; //InterplanetarySurvey.requestor
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&requestor, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb1c5f75a; //InterplanetarySurvey.planet
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&planet, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x82394653; //InterplanetarySurvey.surveyType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&surveyType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7233accb; //InterplanetarySurvey.surveyToolType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&surveyToolType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9b367abf; //InterplanetarySurvey.executed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&executed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 7;
}

InterplanetarySurveyImplementation::InterplanetarySurveyImplementation() {
	_initializeImplementation();
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		executed = false;
	executed = false;
}

int InterplanetarySurveyImplementation::getTimeStamp() {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		return timeStamp;
	return timeStamp;
}

void InterplanetarySurveyImplementation::setTimeStamp(int stamp) {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		timeStamp = stamp;
	timeStamp = stamp;
}

int InterplanetarySurveyImplementation::getCurTime() {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		return curTime;
	return curTime;
}

void InterplanetarySurveyImplementation::setCurTime(int time) {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		curTime = time;
	curTime = time;
}

const String InterplanetarySurveyImplementation::getRequestor() {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		return requestor;
	return requestor;
}

void InterplanetarySurveyImplementation::setRequestor(const String& player) {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		requestor = player;
	requestor = player;
}

const String InterplanetarySurveyImplementation::getPlanet() {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		return planet;
	return planet;
}

void InterplanetarySurveyImplementation::setPlanet(const String& en) {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		planet = en;
	planet = en;
}

const String InterplanetarySurveyImplementation::getSurveyType() {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		return surveyType;
	return surveyType;
}

void InterplanetarySurveyImplementation::setSurveyType(const String& en) {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		surveyType = en;
	surveyType = en;
}

void InterplanetarySurveyImplementation::setSurveyToolType(int toolType) {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		surveyToolType = toolType;
	surveyToolType = toolType;
}

int InterplanetarySurveyImplementation::getSurveyToolType() {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		return surveyToolType;
	return surveyToolType;
}

void InterplanetarySurveyImplementation::setExecuted(bool val) {
	// server/zone/managers/resource/InterplanetarySurvey.idl():  		executed = val;
	executed = val;
}

/*
 *	InterplanetarySurveyAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


InterplanetarySurveyAdapter::InterplanetarySurveyAdapter(InterplanetarySurvey* obj) : ManagedObjectAdapter(obj) {
}

void InterplanetarySurveyAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETTIMESTAMP__:
		{
			
			int _m_res = getTimeStamp();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETTIMESTAMP__INT_:
		{
			int stamp = inv->getSignedIntParameter();
			
			setTimeStamp(stamp);
			
		}
		break;
	case RPC_GETCURTIME__:
		{
			
			int _m_res = getCurTime();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETCURTIME__INT_:
		{
			int time = inv->getSignedIntParameter();
			
			setCurTime(time);
			
		}
		break;
	case RPC_GETREQUESTOR__:
		{
			
			const String _m_res = getRequestor();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETREQUESTOR__STRING_:
		{
			 String player; inv->getAsciiParameter(player);
			
			setRequestor(player);
			
		}
		break;
	case RPC_GETPLANET__:
		{
			
			const String _m_res = getPlanet();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETPLANET__STRING_:
		{
			 String en; inv->getAsciiParameter(en);
			
			setPlanet(en);
			
		}
		break;
	case RPC_GETSURVEYTYPE__:
		{
			
			const String _m_res = getSurveyType();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETSURVEYTYPE__STRING_:
		{
			 String en; inv->getAsciiParameter(en);
			
			setSurveyType(en);
			
		}
		break;
	case RPC_SETSURVEYTOOLTYPE__INT_:
		{
			int toolType = inv->getSignedIntParameter();
			
			setSurveyToolType(toolType);
			
		}
		break;
	case RPC_GETSURVEYTOOLTYPE__:
		{
			
			int _m_res = getSurveyToolType();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETEXECUTED__BOOL_:
		{
			bool val = inv->getBooleanParameter();
			
			setExecuted(val);
			
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			
			notifyLoadFromDatabase();
			
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

int InterplanetarySurveyAdapter::getTimeStamp() {
	return (static_cast<InterplanetarySurvey*>(stub))->getTimeStamp();
}

void InterplanetarySurveyAdapter::setTimeStamp(int stamp) {
	(static_cast<InterplanetarySurvey*>(stub))->setTimeStamp(stamp);
}

int InterplanetarySurveyAdapter::getCurTime() {
	return (static_cast<InterplanetarySurvey*>(stub))->getCurTime();
}

void InterplanetarySurveyAdapter::setCurTime(int time) {
	(static_cast<InterplanetarySurvey*>(stub))->setCurTime(time);
}

const String InterplanetarySurveyAdapter::getRequestor() {
	return (static_cast<InterplanetarySurvey*>(stub))->getRequestor();
}

void InterplanetarySurveyAdapter::setRequestor(const String& player) {
	(static_cast<InterplanetarySurvey*>(stub))->setRequestor(player);
}

const String InterplanetarySurveyAdapter::getPlanet() {
	return (static_cast<InterplanetarySurvey*>(stub))->getPlanet();
}

void InterplanetarySurveyAdapter::setPlanet(const String& en) {
	(static_cast<InterplanetarySurvey*>(stub))->setPlanet(en);
}

const String InterplanetarySurveyAdapter::getSurveyType() {
	return (static_cast<InterplanetarySurvey*>(stub))->getSurveyType();
}

void InterplanetarySurveyAdapter::setSurveyType(const String& en) {
	(static_cast<InterplanetarySurvey*>(stub))->setSurveyType(en);
}

void InterplanetarySurveyAdapter::setSurveyToolType(int toolType) {
	(static_cast<InterplanetarySurvey*>(stub))->setSurveyToolType(toolType);
}

int InterplanetarySurveyAdapter::getSurveyToolType() {
	return (static_cast<InterplanetarySurvey*>(stub))->getSurveyToolType();
}

void InterplanetarySurveyAdapter::setExecuted(bool val) {
	(static_cast<InterplanetarySurvey*>(stub))->setExecuted(val);
}

void InterplanetarySurveyAdapter::notifyLoadFromDatabase() {
	(static_cast<InterplanetarySurvey*>(stub))->notifyLoadFromDatabase();
}

/*
 *	InterplanetarySurveyHelper
 */

InterplanetarySurveyHelper* InterplanetarySurveyHelper::staticInitializer = InterplanetarySurveyHelper::instance();

InterplanetarySurveyHelper::InterplanetarySurveyHelper() {
	className = "InterplanetarySurvey";

	Core::getObjectBroker()->registerClass(className, this);
}

void InterplanetarySurveyHelper::finalizeHelper() {
	InterplanetarySurveyHelper::finalize();
}

DistributedObject* InterplanetarySurveyHelper::instantiateObject() {
	return new InterplanetarySurvey(DummyConstructorParameter::instance());
}

DistributedObjectServant* InterplanetarySurveyHelper::instantiateServant() {
	return new InterplanetarySurveyImplementation();
}

DistributedObjectAdapter* InterplanetarySurveyHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InterplanetarySurveyAdapter(static_cast<InterplanetarySurvey*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

