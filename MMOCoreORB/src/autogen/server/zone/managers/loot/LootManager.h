/*
 *	autogen/server/zone/managers/loot/LootManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef LOOTMANAGER_H_
#define LOOTMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiAgent;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

namespace server {
namespace zone {
namespace managers {
namespace crafting {

class CraftingManager;

} // namespace crafting
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::crafting;

namespace server {
namespace zone {
namespace managers {
namespace object {

class ObjectManager;

} // namespace object
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::object;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

#include "server/zone/managers/loot/LootGroupMap.h"

#include "server/zone/managers/loot/lootgroup/LootGroupCollection.h"

#include "templates/LootItemTemplate.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/managers/loot/CrystalData.h"

#include "system/lang/ref/Reference.h"

#include "system/util/SortedVector.h"

#include "engine/core/ManagedService.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace managers {
namespace loot {

class LootManager : public ManagedService {
public:
	LootManager(CraftingManager* craftman, ObjectManager* objMan, ZoneServer* server);

	void initialize();

	void stop();

	TangibleObject* createLootObject(LootItemTemplate* templateObject, int level, bool maxCondition = false);

	String getRandomLootableMod(unsigned int sceneObjectType);

	int calculateLootCredits(int level);

	bool createLoot(SceneObject* container, AiAgent* creature);

	bool createLootFromCollection(SceneObject* container, LootGroupCollection* collection, int level);

	bool createLoot(SceneObject* container, const String& lootGroup, int level = -1, bool maxCondition = false);

	bool createLootSet(SceneObject* container, const String& lootGroup, int level, bool maxCondition, int setSize);

	unsigned int getYellowLooted();

	unsigned int getExceptionalLooted();

	unsigned int getLegendaryLooted();

	LootGroupMap* getLootMap();

	CrystalData* getCrystalData(const String& name);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	LootManager(DummyConstructorParameter* param);

	virtual ~LootManager();

	friend class LootManagerHelper;
};

} // namespace loot
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::loot;

namespace server {
namespace zone {
namespace managers {
namespace loot {

class LootManagerImplementation : public ManagedServiceImplementation, public Logger {
	ManagedReference<CraftingManager* > craftingManager;

	ManagedReference<ZoneServer* > zoneServer;

	Reference<ObjectManager* > objectManager;

	Reference<LootGroupMap* > lootGroupMap;

	float yellowChance;

	float yellowModifier;

	float exceptionalChance;

	float exceptionalModifier;

	float legendaryChance;

	float legendaryModifier;

	AtomicInteger yellowLooted;

	AtomicInteger exceptionalLooted;

	AtomicInteger legendaryLooted;

	float skillModChance;

	float junkValueModifier;

	SortedVector<int> randomDotAttribute;

	SortedVector<int> randomDotStrength;

	SortedVector<int> randomDotDuration;

	SortedVector<int> randomDotPotency;

	SortedVector<int> randomDotUses;

	SortedVector<String> lootableArmorAttachmentMods;

	SortedVector<String> lootableClothingAttachmentMods;

	SortedVector<String> lootableArmorMods;

	SortedVector<String> lootableClothingMods;

	SortedVector<String> lootableOneHandedMeleeMods;

	SortedVector<String> lootableTwoHandedMeleeMods;

	SortedVector<String> lootableUnarmedMods;

	SortedVector<String> lootablePistolMods;

	SortedVector<String> lootableRifleMods;

	SortedVector<String> lootableCarbineMods;

	SortedVector<String> lootablePolearmMods;

	SortedVector<String> lootableHeavyWeaponMods;

	VectorMap<String, Reference<CrystalData*> > crystalData;

public:
	LootManagerImplementation(CraftingManager* craftman, ObjectManager* objMan, ZoneServer* server);

	LootManagerImplementation(DummyConstructorParameter* param);

	void initialize();

	void stop();

private:
	bool loadConfigData();

	void loadDefaultConfig();

	void setInitialObjectStats(LootItemTemplate* templateObject, CraftingValues* craftingValues, TangibleObject* prototype);

	void setSkillMods(TangibleObject* object, LootItemTemplate* templateObject, int level, float excMod);

	void setCustomObjectName(TangibleObject* object, LootItemTemplate* templateObject);

	void setSockets(TangibleObject* object, CraftingValues* craftingValues);

	void addRandomDots(TangibleObject* object, LootItemTemplate* templateObject, int level, float excMod);

	void addStaticDots(TangibleObject* object, LootItemTemplate* templateObject, int level);

	float calculateDotValue(float min, float max, float level);

	void addConditionDamage(TangibleObject* loot, CraftingValues* craftingValues);

	void loadLootableMods(LuaObject* modTable, SortedVector<String>* mods);

public:
	TangibleObject* createLootObject(LootItemTemplate* templateObject, int level, bool maxCondition = false);

	String getRandomLootableMod(unsigned int sceneObjectType);

	int calculateLootCredits(int level);

	bool createLoot(SceneObject* container, AiAgent* creature);

	bool createLootFromCollection(SceneObject* container, LootGroupCollection* collection, int level);

	bool createLoot(SceneObject* container, const String& lootGroup, int level = -1, bool maxCondition = false);

	bool createLootSet(SceneObject* container, const String& lootGroup, int level, bool maxCondition, int setSize);

	unsigned int getYellowLooted();

	unsigned int getExceptionalLooted();

	unsigned int getLegendaryLooted();

	LootGroupMap* getLootMap();

	CrystalData* getCrystalData(const String& name);

	WeakReference<LootManager*> _this;

	operator const LootManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~LootManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class LootManager;
};

class LootManagerAdapter : public ManagedServiceAdapter {
public:
	LootManagerAdapter(LootManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize();

	void stop();

	int calculateLootCredits(int level);

	bool createLoot(SceneObject* container, AiAgent* creature);

	bool createLoot(SceneObject* container, const String& lootGroup, int level, bool maxCondition);

	bool createLootSet(SceneObject* container, const String& lootGroup, int level, bool maxCondition, int setSize);

	unsigned int getYellowLooted();

	unsigned int getExceptionalLooted();

	unsigned int getLegendaryLooted();

};

class LootManagerHelper : public DistributedObjectClassHelper, public Singleton<LootManagerHelper> {
	static LootManagerHelper* staticInitializer;

public:
	LootManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<LootManagerHelper>;
};

} // namespace loot
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::loot;

#endif /*LOOTMANAGER_H_*/
