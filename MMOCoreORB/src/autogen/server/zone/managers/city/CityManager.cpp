/*
 *	autogen/server/zone/managers/city/CityManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/region/CityRegion.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/objects/structure/StructureObject.h"

/*
 *	CityManagerStub
 */

const byte CityManager::CLIENT = 0;

const byte CityManager::OUTPOST = 1;

const byte CityManager::VILLAGE = 2;

const byte CityManager::TOWNSHIP = 3;

const byte CityManager::CITY = 4;

const byte CityManager::METROPOLIS = 5;

enum {RPC_LOADLUACONFIG__ = 4105559252,RPC_LOADCITYREGIONS__,RPC_STOP__,RPC_VALIDATECITYNAME__STRING_,RPC_ISCITYINRANGE__ZONE_FLOAT_FLOAT_,RPC_CREATECITY__CREATUREOBJECT_STRING_FLOAT_FLOAT_,RPC_ASSESSCITIZENS__CITYREGION_,RPC_PROCESSCITYUPDATE__CITYREGION_,RPC_PROCESSINCOMETAX__CITYREGION_,RPC_UPDATECITYVOTING__CITYREGION_BOOL_,RPC_DEDUCTCITYMAINTENANCE__CITYREGION_,RPC_COLLECTNONSTRUCTUREMAINTENANCE__SCENEOBJECT_CITYREGION_INT_,RPC_COLLECTCIVICSTRUCTUREMAINTENANCE__STRUCTUREOBJECT_CITYREGION_INT_,RPC_SENDMAINTENANCEEMAIL__CITYREGION_INT_,RPC_SENDMAINTENANCEDECAYEMAIL__CITYREGION_STRUCTUREOBJECT_INT_,RPC_SENDMAINTENANCEDESTROYEMAIL__CITYREGION_SCENEOBJECT_,RPC_SENDMAINTENANCEREPAIREMAIL__CITYREGION_STRUCTUREOBJECT_,RPC_CONTRACTCITY__CITYREGION_,RPC_EXPANDCITY__CITYREGION_,RPC_DESTROYCITY__CITYREGION_,RPC_SENDSTATUSREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_PROMPTCITYSPECIALIZATION__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_CHANGECITYSPECIALIZATION__CITYREGION_CREATUREOBJECT_STRING_,RPC_PROMPTWITHDRAWCITYTREASURY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_PROMPTDEPOSITCITYTREASURY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_WITHDRAWFROMCITYTREASURY__CITYREGION_CREATUREOBJECT_INT_STRING_SCENEOBJECT_,RPC_DEPOSITTOCITYTREASURY__CITYREGION_CREATUREOBJECT_INT_,RPC_SENDTREASURYREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_SENDCITIZENSHIPREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_REGISTERCITIZEN__CITYREGION_CREATUREOBJECT_,RPC_UNREGISTERCITIZEN__CITYREGION_CREATUREOBJECT_,RPC_SENDMANAGEMILITIA__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_PROMPTADDMILITIAMEMBER__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_ADDMILITIAMEMBER__CITYREGION_CREATUREOBJECT_STRING_,RPC_REMOVEMILITIAMEMBER__CITYREGION_CREATUREOBJECT_LONG_,RPC_SENDCITYADVANCEMENT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_GETNEXTUPDATETIMESTRING__CITYREGION_,RPC_PROMPTREGISTERCITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_PROMPTUNREGISTERCITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_REGISTERCITY__CITYREGION_CREATUREOBJECT_,RPC_UNREGISTERCITY__CITYREGION_CREATUREOBJECT_,RPC_PROMPTADJUSTTAXES__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_PROMPTSETTAX__CITYREGION_CREATUREOBJECT_INT_SCENEOBJECT_,RPC_SETTAX__CITYREGION_CREATUREOBJECT_INT_INT_,RPC_SENDMAINTENANCEREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_CONTAINSCITYNAME__STRING_,RPC_ISCITYRANKCAPPED__STRING_BYTE_,RPC_SENDCITYREPORT__CREATUREOBJECT_STRING_BYTE_,RPC_VALIDATECITYINRANGE__CREATUREOBJECT_ZONE_FLOAT_FLOAT_,RPC_PROMPTTOGGLEZONINGENABLED__CITYREGION_CREATUREOBJECT_,RPC_TOGGLEZONINGENABLED__CITYREGION_CREATUREOBJECT_,RPC_GETTOTALCITIES__,RPC_RENAMECITY__CITYREGION_STRING_,RPC_SENDMAYORALSTANDINGS__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_PROMPTMAYORALVOTE__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_REGISTERFORMAYORALRACE__CITYREGION_CREATUREOBJECT_,RPC_UNREGISTERFROMMAYORALRACE__CITYREGION_CREATUREOBJECT_BOOL_,RPC_CASTMAYORALVOTE__CITYREGION_CREATUREOBJECT_LONG_,RPC_SENDSTRUCTUREREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_,RPC_CANSUPPORTMOREDECORATIONS__CITYREGION_,RPC_CANSUPPORTMORETRAINERS__CITYREGION_,RPC_CANSUPPORTMOREMISSIONTERMINALS__CITYREGION_,RPC_SENDCHANGECITYNAME__CITYREGION_CREATUREOBJECT_,RPC_SENDADDSTRUCTUREMAILS__CITYREGION_STRUCTUREOBJECT_,RPC_PROMPTFORCERANK__CITYREGION_CREATUREOBJECT_BOOL_,RPC_PROMPTFORCEUPDATE__CITYREGION_CREATUREOBJECT_,RPC_ALIGNAMENITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_INT_};

CityManager::CityManager(ZoneServer* zserv) : ManagedService(DummyConstructorParameter::instance()) {
	CityManagerImplementation* _implementation = new CityManagerImplementation(zserv);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("CityManager");
}

CityManager::CityManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("CityManager");
}

CityManager::~CityManager() {
}



void CityManager::loadLuaConfig() {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLUACONFIG__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadLuaConfig();
	}
}

void CityManager::loadCityRegions() {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADCITYREGIONS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadCityRegions();
	}
}

void CityManager::stop() {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOP__);

		method.executeWithVoidReturn();
	} else {
		_implementation->stop();
	}
}

bool CityManager::validateCityName(const String& name) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATECITYNAME__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->validateCityName(name);
	}
}

bool CityManager::isCityInRange(Zone* zone, float x, float y) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYINRANGE__ZONE_FLOAT_FLOAT_);
		method.addObjectParameter(zone);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCityInRange(zone, x, y);
	}
}

CityRegion* CityManager::createCity(CreatureObject* mayor, const String& cityName, float x, float y) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECITY__CREATUREOBJECT_STRING_FLOAT_FLOAT_);
		method.addObjectParameter(mayor);
		method.addAsciiParameter(cityName);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return static_cast<CityRegion*>(method.executeWithObjectReturn());
	} else {
		assert(this->isLockedByCurrentThread());
		assert((mayor == NULL) || mayor->isLockedByCurrentThread());
		return _implementation->createCity(mayor, cityName, x, y);
	}
}

void CityManager::assessCitizens(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ASSESSCITIZENS__CITYREGION_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else {
		_implementation->assessCitizens(city);
	}
}

void CityManager::processCityUpdate(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROCESSCITYUPDATE__CITYREGION_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else {
		_implementation->processCityUpdate(city);
	}
}

void CityManager::processIncomeTax(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROCESSINCOMETAX__CITYREGION_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else {
		_implementation->processIncomeTax(city);
	}
}

void CityManager::updateCityVoting(CityRegion* city, bool override) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATECITYVOTING__CITYREGION_BOOL_);
		method.addObjectParameter(city);
		method.addBooleanParameter(override);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateCityVoting(city, override);
	}
}

void CityManager::deductCityMaintenance(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEDUCTCITYMAINTENANCE__CITYREGION_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else {
		_implementation->deductCityMaintenance(city);
	}
}

int CityManager::collectNonStructureMaintenance(SceneObject* object, CityRegion* city, int maintenanceDue) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COLLECTNONSTRUCTUREMAINTENANCE__SCENEOBJECT_CITYREGION_INT_);
		method.addObjectParameter(object);
		method.addObjectParameter(city);
		method.addSignedIntParameter(maintenanceDue);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->collectNonStructureMaintenance(object, city, maintenanceDue);
	}
}

int CityManager::collectCivicStructureMaintenance(StructureObject* structure, CityRegion* city, int maintenanceDue) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COLLECTCIVICSTRUCTUREMAINTENANCE__STRUCTUREOBJECT_CITYREGION_INT_);
		method.addObjectParameter(structure);
		method.addObjectParameter(city);
		method.addSignedIntParameter(maintenanceDue);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->collectCivicStructureMaintenance(structure, city, maintenanceDue);
	}
}

void CityManager::sendMaintenanceEmail(CityRegion* city, int maintenancePaid) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAINTENANCEEMAIL__CITYREGION_INT_);
		method.addObjectParameter(city);
		method.addSignedIntParameter(maintenancePaid);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendMaintenanceEmail(city, maintenancePaid);
	}
}

void CityManager::sendMaintenanceDecayEmail(CityRegion* city, StructureObject* structure, int maintenanceDue) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAINTENANCEDECAYEMAIL__CITYREGION_STRUCTUREOBJECT_INT_);
		method.addObjectParameter(city);
		method.addObjectParameter(structure);
		method.addSignedIntParameter(maintenanceDue);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendMaintenanceDecayEmail(city, structure, maintenanceDue);
	}
}

void CityManager::sendMaintenanceDestroyEmail(CityRegion* city, SceneObject* object) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAINTENANCEDESTROYEMAIL__CITYREGION_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendMaintenanceDestroyEmail(city, object);
	}
}

void CityManager::sendMaintenanceRepairEmail(CityRegion* city, StructureObject* structure) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAINTENANCEREPAIREMAIL__CITYREGION_STRUCTUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(structure);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendMaintenanceRepairEmail(city, structure);
	}
}

void CityManager::contractCity(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTRACTCITY__CITYREGION_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else {
		_implementation->contractCity(city);
	}
}

void CityManager::expandCity(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_EXPANDCITY__CITYREGION_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else {
		_implementation->expandCity(city);
	}
}

void CityManager::destroyCity(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYCITY__CITYREGION_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyCity(city);
	}
}

void CityManager::sendStatusReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSTATUSREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendStatusReport(city, creature, terminal);
	}
}

void CityManager::promptCitySpecialization(CityRegion* city, CreatureObject* mayor, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTCITYSPECIALIZATION__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptCitySpecialization(city, mayor, terminal);
	}
}

void CityManager::changeCitySpecialization(CityRegion* city, CreatureObject* mayor, const String& spec) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHANGECITYSPECIALIZATION__CITYREGION_CREATUREOBJECT_STRING_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addAsciiParameter(spec);

		method.executeWithVoidReturn();
	} else {
		_implementation->changeCitySpecialization(city, mayor, spec);
	}
}

void CityManager::promptWithdrawCityTreasury(CityRegion* city, CreatureObject* mayor, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTWITHDRAWCITYTREASURY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptWithdrawCityTreasury(city, mayor, terminal);
	}
}

void CityManager::promptDepositCityTreasury(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTDEPOSITCITYTREASURY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptDepositCityTreasury(city, creature, terminal);
	}
}

void CityManager::withdrawFromCityTreasury(CityRegion* city, CreatureObject* mayor, int value, const String& reason, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_WITHDRAWFROMCITYTREASURY__CITYREGION_CREATUREOBJECT_INT_STRING_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addSignedIntParameter(value);
		method.addAsciiParameter(reason);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->withdrawFromCityTreasury(city, mayor, value, reason, terminal);
	}
}

void CityManager::depositToCityTreasury(CityRegion* city, CreatureObject* creature, int value) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEPOSITTOCITYTREASURY__CITYREGION_CREATUREOBJECT_INT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->depositToCityTreasury(city, creature, value);
	}
}

void CityManager::sendTreasuryReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTREASURYREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendTreasuryReport(city, creature, terminal);
	}
}

void CityManager::sendCitizenshipReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCITIZENSHIPREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendCitizenshipReport(city, creature, terminal);
	}
}

void CityManager::registerCitizen(CityRegion* city, CreatureObject* creature) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REGISTERCITIZEN__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else {
		_implementation->registerCitizen(city, creature);
	}
}

void CityManager::unregisterCitizen(CityRegion* city, CreatureObject* creature) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UNREGISTERCITIZEN__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else {
		_implementation->unregisterCitizen(city, creature);
	}
}

void CityManager::sendManageMilitia(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMANAGEMILITIA__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendManageMilitia(city, creature, terminal);
	}
}

void CityManager::promptAddMilitiaMember(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTADDMILITIAMEMBER__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptAddMilitiaMember(city, creature, terminal);
	}
}

void CityManager::addMilitiaMember(CityRegion* city, CreatureObject* mayor, const String& playerName) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMILITIAMEMBER__CITYREGION_CREATUREOBJECT_STRING_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addAsciiParameter(playerName);

		method.executeWithVoidReturn();
	} else {
		_implementation->addMilitiaMember(city, mayor, playerName);
	}
}

void CityManager::removeMilitiaMember(CityRegion* city, CreatureObject* mayor, unsigned long long militiaid) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMILITIAMEMBER__CITYREGION_CREATUREOBJECT_LONG_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addUnsignedLongParameter(militiaid);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeMilitiaMember(city, mayor, militiaid);
	}
}

void CityManager::sendCityAdvancement(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCITYADVANCEMENT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendCityAdvancement(city, creature, terminal);
	}
}

String CityManager::getNextUpdateTimeString(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNEXTUPDATETIMESTRING__CITYREGION_);
		method.addObjectParameter(city);

		String _return_getNextUpdateTimeString;
		method.executeWithAsciiReturn(_return_getNextUpdateTimeString);
		return _return_getNextUpdateTimeString;
	} else {
		return _implementation->getNextUpdateTimeString(city);
	}
}

void CityManager::promptRegisterCity(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTREGISTERCITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptRegisterCity(city, creature, terminal);
	}
}

void CityManager::promptUnregisterCity(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTUNREGISTERCITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptUnregisterCity(city, creature, terminal);
	}
}

void CityManager::registerCity(CityRegion* city, CreatureObject* mayor) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REGISTERCITY__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);

		method.executeWithVoidReturn();
	} else {
		_implementation->registerCity(city, mayor);
	}
}

void CityManager::unregisterCity(CityRegion* city, CreatureObject* mayor) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UNREGISTERCITY__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);

		method.executeWithVoidReturn();
	} else {
		_implementation->unregisterCity(city, mayor);
	}
}

void CityManager::promptAdjustTaxes(CityRegion* city, CreatureObject* mayor, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTADJUSTTAXES__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptAdjustTaxes(city, mayor, terminal);
	}
}

void CityManager::promptSetTax(CityRegion* city, CreatureObject* mayor, int selectedTax, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTSETTAX__CITYREGION_CREATUREOBJECT_INT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addSignedIntParameter(selectedTax);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptSetTax(city, mayor, selectedTax, terminal);
	}
}

void CityManager::setTax(CityRegion* city, CreatureObject* mayor, int selectedTax, int value) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTAX__CITYREGION_CREATUREOBJECT_INT_INT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);
		method.addSignedIntParameter(selectedTax);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setTax(city, mayor, selectedTax, value);
	}
}

void CityManager::sendMaintenanceReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAINTENANCEREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendMaintenanceReport(city, creature, terminal);
	}
}

void CityManager::sendMail(CityRegion* city, const String& sender, const UnicodeString& subject, StringIdChatParameter& params, WaypointObject* waypoint) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->sendMail(city, sender, subject, params, waypoint);
	}
}

bool CityManager::containsCityName(const String& name) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSCITYNAME__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->containsCityName(name);
	}
}

bool CityManager::isCityRankCapped(const String& planetName, byte cityRank) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYRANKCAPPED__STRING_BYTE_);
		method.addAsciiParameter(planetName);
		method.addByteParameter(cityRank);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCityRankCapped(planetName, cityRank);
	}
}

void CityManager::sendCityReport(CreatureObject* creature, const String& planetName, byte rank) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCITYREPORT__CREATUREOBJECT_STRING_BYTE_);
		method.addObjectParameter(creature);
		method.addAsciiParameter(planetName);
		method.addByteParameter(rank);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendCityReport(creature, planetName, rank);
	}
}

bool CityManager::validateCityInRange(CreatureObject* creature, Zone* zone, float x, float y) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATECITYINRANGE__CREATUREOBJECT_ZONE_FLOAT_FLOAT_);
		method.addObjectParameter(creature);
		method.addObjectParameter(zone);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->validateCityInRange(creature, zone, x, y);
	}
}

void CityManager::promptToggleZoningEnabled(CityRegion* city, CreatureObject* mayor) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTTOGGLEZONINGENABLED__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptToggleZoningEnabled(city, mayor);
	}
}

void CityManager::toggleZoningEnabled(CityRegion* city, CreatureObject* mayor) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOGGLEZONINGENABLED__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);

		method.executeWithVoidReturn();
	} else {
		_implementation->toggleZoningEnabled(city, mayor);
	}
}

int CityManager::getTotalCities() {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALCITIES__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalCities();
	}
}

bool CityManager::renameCity(CityRegion* city, const String& newName) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RENAMECITY__CITYREGION_STRING_);
		method.addObjectParameter(city);
		method.addAsciiParameter(newName);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->renameCity(city, newName);
	}
}

void CityManager::sendMayoralStandings(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAYORALSTANDINGS__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendMayoralStandings(city, creature, terminal);
	}
}

void CityManager::promptMayoralVote(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTMAYORALVOTE__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptMayoralVote(city, creature, terminal);
	}
}

void CityManager::registerForMayoralRace(CityRegion* city, CreatureObject* creature) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REGISTERFORMAYORALRACE__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else {
		_implementation->registerForMayoralRace(city, creature);
	}
}

void CityManager::unregisterFromMayoralRace(CityRegion* city, CreatureObject* creature, bool force) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UNREGISTERFROMMAYORALRACE__CITYREGION_CREATUREOBJECT_BOOL_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addBooleanParameter(force);

		method.executeWithVoidReturn();
	} else {
		_implementation->unregisterFromMayoralRace(city, creature, force);
	}
}

void CityManager::castMayoralVote(CityRegion* city, CreatureObject* creature, unsigned long long oid) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CASTMAYORALVOTE__CITYREGION_CREATUREOBJECT_LONG_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else {
		_implementation->castMayoralVote(city, creature, oid);
	}
}

void CityManager::sendStructureReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSTRUCTUREREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(creature);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendStructureReport(city, creature, terminal);
	}
}

bool CityManager::canSupportMoreDecorations(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANSUPPORTMOREDECORATIONS__CITYREGION_);
		method.addObjectParameter(city);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->canSupportMoreDecorations(city);
	}
}

bool CityManager::canSupportMoreTrainers(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANSUPPORTMORETRAINERS__CITYREGION_);
		method.addObjectParameter(city);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->canSupportMoreTrainers(city);
	}
}

bool CityManager::canSupportMoreMissionTerminals(CityRegion* city) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANSUPPORTMOREMISSIONTERMINALS__CITYREGION_);
		method.addObjectParameter(city);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->canSupportMoreMissionTerminals(city);
	}
}

const CitySpecialization* CityManager::getCitySpecialization(const String& cityspec) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCitySpecialization(cityspec);
	}
}

const CityTax* CityManager::getCityTax(int idx) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCityTax(idx);
	}
}

void CityManager::sendChangeCityName(CityRegion* city, CreatureObject* mayor) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCHANGECITYNAME__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(mayor);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendChangeCityName(city, mayor);
	}
}

void CityManager::sendAddStructureMails(CityRegion* city, StructureObject* structure) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDADDSTRUCTUREMAILS__CITYREGION_STRUCTUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(structure);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendAddStructureMails(city, structure);
	}
}

void CityManager::promptForceRank(CityRegion* city, CreatureObject* player, bool rankUp) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTFORCERANK__CITYREGION_CREATUREOBJECT_BOOL_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);
		method.addBooleanParameter(rankUp);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptForceRank(city, player, rankUp);
	}
}

void CityManager::promptForceUpdate(CityRegion* city, CreatureObject* player) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTFORCEUPDATE__CITYREGION_CREATUREOBJECT_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->promptForceUpdate(city, player);
	}
}

void CityManager::alignAmenity(CityRegion* city, CreatureObject* player, SceneObject* amenity, int direction) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ALIGNAMENITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_INT_);
		method.addObjectParameter(city);
		method.addObjectParameter(player);
		method.addObjectParameter(amenity);
		method.addSignedIntParameter(direction);

		method.executeWithVoidReturn();
	} else {
		_implementation->alignAmenity(city, player, amenity, direction);
	}
}

DistributedObjectServant* CityManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* CityManager::_getImplementationForRead() const {
	return _impl;
}

void CityManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CityManagerImplementation
 */

const byte CityManagerImplementation::CLIENT = 0;

const byte CityManagerImplementation::OUTPOST = 1;

const byte CityManagerImplementation::VILLAGE = 2;

const byte CityManagerImplementation::TOWNSHIP = 3;

const byte CityManagerImplementation::CITY = 4;

const byte CityManagerImplementation::METROPOLIS = 5;

CityManagerImplementation::CityManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


CityManagerImplementation::~CityManagerImplementation() {
}


void CityManagerImplementation::finalize() {
}

void CityManagerImplementation::_initializeImplementation() {
	_setClassHelper(CityManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CityManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CityManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* CityManagerImplementation::_getStub() {
	return _this.get();
}

CityManagerImplementation::operator const CityManager*() {
	return _this.get();
}

void CityManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void CityManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void CityManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void CityManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void CityManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void CityManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void CityManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void CityManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("CityManager");

}

void CityManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(CityManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CityManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void CityManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CityManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CityManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

CityManagerImplementation::CityManagerImplementation(ZoneServer* zserv) {
	_initializeImplementation();
	// server/zone/managers/city/CityManager.idl():  		Logger.setLoggingName("CityManager");
	Logger::setLoggingName("CityManager");
	// server/zone/managers/city/CityManager.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/managers/city/CityManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/city/CityManager.idl():  		zoneServer = zserv;
	zoneServer = zserv;
	// server/zone/managers/city/CityManager.idl():  		cities.setNoDuplicateInsertPlan();
	(&cities)->setNoDuplicateInsertPlan();
	// server/zone/managers/city/CityManager.idl():  		cities.setNullValue(null);
	(&cities)->setNullValue(NULL);
}

bool CityManagerImplementation::containsCityName(const String& name) {
	Locker _locker(_this.get());
	// server/zone/managers/city/CityManager.idl():  		return cities.contains(name);
	return (&cities)->contains(name);
}

void CityManagerImplementation::toggleZoningEnabled(CityRegion* city, CreatureObject* mayor) {
	// server/zone/managers/city/CityManager.idl():  		boolean val = city.isZoningEnabled();
	bool val = city->isZoningEnabled();
	// server/zone/managers/city/CityManager.idl():  		city.setZoningEnabled(!val);
	city->setZoningEnabled(!val);
	// server/zone/managers/city/CityManager.idl():  		}
	if (!val){
	// server/zone/managers/city/CityManager.idl():  			mayor.sendSystemMessage("@city/city:zoning_enabled");
	mayor->sendSystemMessage("@city/city:zoning_enabled");
}

	else {
	// server/zone/managers/city/CityManager.idl():  			mayor.sendSystemMessage("@city/city:zoning_disabled");
	mayor->sendSystemMessage("@city/city:zoning_disabled");
}
}

int CityManagerImplementation::getTotalCities() {
	// server/zone/managers/city/CityManager.idl():  		return cities.size();
	return (&cities)->size();
}

bool CityManagerImplementation::renameCity(CityRegion* city, const String& newName) {
	// server/zone/managers/city/CityManager.idl():  		return 
	if ((&cities)->contains(city->getRegionName())){
	// server/zone/managers/city/CityManager.idl():  			cities.drop(city.getRegionName());
	(&cities)->drop(city->getRegionName());
	// server/zone/managers/city/CityManager.idl():  			cities.put(newName, city);
	(&cities)->put(newName, city);
	// server/zone/managers/city/CityManager.idl():  			return true;
	return true;
}
	// server/zone/managers/city/CityManager.idl():  		return false;
	return false;
}

/*
 *	CityManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


CityManagerAdapter::CityManagerAdapter(CityManager* obj) : ManagedServiceAdapter(obj) {
}

void CityManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_LOADLUACONFIG__:
		{
			
			loadLuaConfig();
			
		}
		break;
	case RPC_LOADCITYREGIONS__:
		{
			
			loadCityRegions();
			
		}
		break;
	case RPC_STOP__:
		{
			
			stop();
			
		}
		break;
	case RPC_VALIDATECITYNAME__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			bool _m_res = validateCityName(name);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCITYINRANGE__ZONE_FLOAT_FLOAT_:
		{
			Zone* zone = static_cast<Zone*>(inv->getObjectParameter());
			float x = inv->getFloatParameter();
			float y = inv->getFloatParameter();
			
			bool _m_res = isCityInRange(zone, x, y);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CREATECITY__CREATUREOBJECT_STRING_FLOAT_FLOAT_:
		{
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String cityName; inv->getAsciiParameter(cityName);
			float x = inv->getFloatParameter();
			float y = inv->getFloatParameter();
			
			DistributedObject* _m_res = createCity(mayor, cityName, x, y);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ASSESSCITIZENS__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			assessCitizens(city);
			
		}
		break;
	case RPC_PROCESSCITYUPDATE__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			processCityUpdate(city);
			
		}
		break;
	case RPC_PROCESSINCOMETAX__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			processIncomeTax(city);
			
		}
		break;
	case RPC_UPDATECITYVOTING__CITYREGION_BOOL_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			bool override = inv->getBooleanParameter();
			
			updateCityVoting(city, override);
			
		}
		break;
	case RPC_DEDUCTCITYMAINTENANCE__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			deductCityMaintenance(city);
			
		}
		break;
	case RPC_COLLECTNONSTRUCTUREMAINTENANCE__SCENEOBJECT_CITYREGION_INT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			int maintenanceDue = inv->getSignedIntParameter();
			
			int _m_res = collectNonStructureMaintenance(object, city, maintenanceDue);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_COLLECTCIVICSTRUCTUREMAINTENANCE__STRUCTUREOBJECT_CITYREGION_INT_:
		{
			StructureObject* structure = static_cast<StructureObject*>(inv->getObjectParameter());
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			int maintenanceDue = inv->getSignedIntParameter();
			
			int _m_res = collectCivicStructureMaintenance(structure, city, maintenanceDue);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SENDMAINTENANCEEMAIL__CITYREGION_INT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			int maintenancePaid = inv->getSignedIntParameter();
			
			sendMaintenanceEmail(city, maintenancePaid);
			
		}
		break;
	case RPC_SENDMAINTENANCEDECAYEMAIL__CITYREGION_STRUCTUREOBJECT_INT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			StructureObject* structure = static_cast<StructureObject*>(inv->getObjectParameter());
			int maintenanceDue = inv->getSignedIntParameter();
			
			sendMaintenanceDecayEmail(city, structure, maintenanceDue);
			
		}
		break;
	case RPC_SENDMAINTENANCEDESTROYEMAIL__CITYREGION_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendMaintenanceDestroyEmail(city, object);
			
		}
		break;
	case RPC_SENDMAINTENANCEREPAIREMAIL__CITYREGION_STRUCTUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			StructureObject* structure = static_cast<StructureObject*>(inv->getObjectParameter());
			
			sendMaintenanceRepairEmail(city, structure);
			
		}
		break;
	case RPC_CONTRACTCITY__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			contractCity(city);
			
		}
		break;
	case RPC_EXPANDCITY__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			expandCity(city);
			
		}
		break;
	case RPC_DESTROYCITY__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			destroyCity(city);
			
		}
		break;
	case RPC_SENDSTATUSREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendStatusReport(city, creature, terminal);
			
		}
		break;
	case RPC_PROMPTCITYSPECIALIZATION__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptCitySpecialization(city, mayor, terminal);
			
		}
		break;
	case RPC_CHANGECITYSPECIALIZATION__CITYREGION_CREATUREOBJECT_STRING_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String spec; inv->getAsciiParameter(spec);
			
			changeCitySpecialization(city, mayor, spec);
			
		}
		break;
	case RPC_PROMPTWITHDRAWCITYTREASURY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptWithdrawCityTreasury(city, mayor, terminal);
			
		}
		break;
	case RPC_PROMPTDEPOSITCITYTREASURY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptDepositCityTreasury(city, creature, terminal);
			
		}
		break;
	case RPC_WITHDRAWFROMCITYTREASURY__CITYREGION_CREATUREOBJECT_INT_STRING_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			int value = inv->getSignedIntParameter();
			 String reason; inv->getAsciiParameter(reason);
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			withdrawFromCityTreasury(city, mayor, value, reason, terminal);
			
		}
		break;
	case RPC_DEPOSITTOCITYTREASURY__CITYREGION_CREATUREOBJECT_INT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			int value = inv->getSignedIntParameter();
			
			depositToCityTreasury(city, creature, value);
			
		}
		break;
	case RPC_SENDTREASURYREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendTreasuryReport(city, creature, terminal);
			
		}
		break;
	case RPC_SENDCITIZENSHIPREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendCitizenshipReport(city, creature, terminal);
			
		}
		break;
	case RPC_REGISTERCITIZEN__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			registerCitizen(city, creature);
			
		}
		break;
	case RPC_UNREGISTERCITIZEN__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			unregisterCitizen(city, creature);
			
		}
		break;
	case RPC_SENDMANAGEMILITIA__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendManageMilitia(city, creature, terminal);
			
		}
		break;
	case RPC_PROMPTADDMILITIAMEMBER__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptAddMilitiaMember(city, creature, terminal);
			
		}
		break;
	case RPC_ADDMILITIAMEMBER__CITYREGION_CREATUREOBJECT_STRING_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String playerName; inv->getAsciiParameter(playerName);
			
			addMilitiaMember(city, mayor, playerName);
			
		}
		break;
	case RPC_REMOVEMILITIAMEMBER__CITYREGION_CREATUREOBJECT_LONG_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned long long militiaid = inv->getUnsignedLongParameter();
			
			removeMilitiaMember(city, mayor, militiaid);
			
		}
		break;
	case RPC_SENDCITYADVANCEMENT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendCityAdvancement(city, creature, terminal);
			
		}
		break;
	case RPC_GETNEXTUPDATETIMESTRING__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			String _m_res = getNextUpdateTimeString(city);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_PROMPTREGISTERCITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptRegisterCity(city, creature, terminal);
			
		}
		break;
	case RPC_PROMPTUNREGISTERCITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptUnregisterCity(city, creature, terminal);
			
		}
		break;
	case RPC_REGISTERCITY__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			registerCity(city, mayor);
			
		}
		break;
	case RPC_UNREGISTERCITY__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			unregisterCity(city, mayor);
			
		}
		break;
	case RPC_PROMPTADJUSTTAXES__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptAdjustTaxes(city, mayor, terminal);
			
		}
		break;
	case RPC_PROMPTSETTAX__CITYREGION_CREATUREOBJECT_INT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			int selectedTax = inv->getSignedIntParameter();
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptSetTax(city, mayor, selectedTax, terminal);
			
		}
		break;
	case RPC_SETTAX__CITYREGION_CREATUREOBJECT_INT_INT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			int selectedTax = inv->getSignedIntParameter();
			int value = inv->getSignedIntParameter();
			
			setTax(city, mayor, selectedTax, value);
			
		}
		break;
	case RPC_SENDMAINTENANCEREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendMaintenanceReport(city, creature, terminal);
			
		}
		break;
	case RPC_CONTAINSCITYNAME__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			bool _m_res = containsCityName(name);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCITYRANKCAPPED__STRING_BYTE_:
		{
			 String planetName; inv->getAsciiParameter(planetName);
			byte cityRank = inv->getByteParameter();
			
			bool _m_res = isCityRankCapped(planetName, cityRank);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SENDCITYREPORT__CREATUREOBJECT_STRING_BYTE_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String planetName; inv->getAsciiParameter(planetName);
			byte rank = inv->getByteParameter();
			
			sendCityReport(creature, planetName, rank);
			
		}
		break;
	case RPC_VALIDATECITYINRANGE__CREATUREOBJECT_ZONE_FLOAT_FLOAT_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			Zone* zone = static_cast<Zone*>(inv->getObjectParameter());
			float x = inv->getFloatParameter();
			float y = inv->getFloatParameter();
			
			bool _m_res = validateCityInRange(creature, zone, x, y);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_PROMPTTOGGLEZONINGENABLED__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			promptToggleZoningEnabled(city, mayor);
			
		}
		break;
	case RPC_TOGGLEZONINGENABLED__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			toggleZoningEnabled(city, mayor);
			
		}
		break;
	case RPC_GETTOTALCITIES__:
		{
			
			int _m_res = getTotalCities();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_RENAMECITY__CITYREGION_STRING_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			 String newName; inv->getAsciiParameter(newName);
			
			bool _m_res = renameCity(city, newName);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SENDMAYORALSTANDINGS__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendMayoralStandings(city, creature, terminal);
			
		}
		break;
	case RPC_PROMPTMAYORALVOTE__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			promptMayoralVote(city, creature, terminal);
			
		}
		break;
	case RPC_REGISTERFORMAYORALRACE__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			registerForMayoralRace(city, creature);
			
		}
		break;
	case RPC_UNREGISTERFROMMAYORALRACE__CITYREGION_CREATUREOBJECT_BOOL_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			bool force = inv->getBooleanParameter();
			
			unregisterFromMayoralRace(city, creature, force);
			
		}
		break;
	case RPC_CASTMAYORALVOTE__CITYREGION_CREATUREOBJECT_LONG_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned long long oid = inv->getUnsignedLongParameter();
			
			castMayoralVote(city, creature, oid);
			
		}
		break;
	case RPC_SENDSTRUCTUREREPORT__CITYREGION_CREATUREOBJECT_SCENEOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendStructureReport(city, creature, terminal);
			
		}
		break;
	case RPC_CANSUPPORTMOREDECORATIONS__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			bool _m_res = canSupportMoreDecorations(city);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CANSUPPORTMORETRAINERS__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			bool _m_res = canSupportMoreTrainers(city);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CANSUPPORTMOREMISSIONTERMINALS__CITYREGION_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			
			bool _m_res = canSupportMoreMissionTerminals(city);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SENDCHANGECITYNAME__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* mayor = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendChangeCityName(city, mayor);
			
		}
		break;
	case RPC_SENDADDSTRUCTUREMAILS__CITYREGION_STRUCTUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			StructureObject* structure = static_cast<StructureObject*>(inv->getObjectParameter());
			
			sendAddStructureMails(city, structure);
			
		}
		break;
	case RPC_PROMPTFORCERANK__CITYREGION_CREATUREOBJECT_BOOL_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			bool rankUp = inv->getBooleanParameter();
			
			promptForceRank(city, player, rankUp);
			
		}
		break;
	case RPC_PROMPTFORCEUPDATE__CITYREGION_CREATUREOBJECT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			promptForceUpdate(city, player);
			
		}
		break;
	case RPC_ALIGNAMENITY__CITYREGION_CREATUREOBJECT_SCENEOBJECT_INT_:
		{
			CityRegion* city = static_cast<CityRegion*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* amenity = static_cast<SceneObject*>(inv->getObjectParameter());
			int direction = inv->getSignedIntParameter();
			
			alignAmenity(city, player, amenity, direction);
			
		}
		break;
	default:
		ManagedServiceAdapter::invokeMethod(methid, inv);
	}
}

void CityManagerAdapter::loadLuaConfig() {
	(static_cast<CityManager*>(stub))->loadLuaConfig();
}

void CityManagerAdapter::loadCityRegions() {
	(static_cast<CityManager*>(stub))->loadCityRegions();
}

void CityManagerAdapter::stop() {
	(static_cast<CityManager*>(stub))->stop();
}

bool CityManagerAdapter::validateCityName(const String& name) {
	return (static_cast<CityManager*>(stub))->validateCityName(name);
}

bool CityManagerAdapter::isCityInRange(Zone* zone, float x, float y) {
	return (static_cast<CityManager*>(stub))->isCityInRange(zone, x, y);
}

CityRegion* CityManagerAdapter::createCity(CreatureObject* mayor, const String& cityName, float x, float y) {
	return (static_cast<CityManager*>(stub))->createCity(mayor, cityName, x, y);
}

void CityManagerAdapter::assessCitizens(CityRegion* city) {
	(static_cast<CityManager*>(stub))->assessCitizens(city);
}

void CityManagerAdapter::processCityUpdate(CityRegion* city) {
	(static_cast<CityManager*>(stub))->processCityUpdate(city);
}

void CityManagerAdapter::processIncomeTax(CityRegion* city) {
	(static_cast<CityManager*>(stub))->processIncomeTax(city);
}

void CityManagerAdapter::updateCityVoting(CityRegion* city, bool override) {
	(static_cast<CityManager*>(stub))->updateCityVoting(city, override);
}

void CityManagerAdapter::deductCityMaintenance(CityRegion* city) {
	(static_cast<CityManager*>(stub))->deductCityMaintenance(city);
}

int CityManagerAdapter::collectNonStructureMaintenance(SceneObject* object, CityRegion* city, int maintenanceDue) {
	return (static_cast<CityManager*>(stub))->collectNonStructureMaintenance(object, city, maintenanceDue);
}

int CityManagerAdapter::collectCivicStructureMaintenance(StructureObject* structure, CityRegion* city, int maintenanceDue) {
	return (static_cast<CityManager*>(stub))->collectCivicStructureMaintenance(structure, city, maintenanceDue);
}

void CityManagerAdapter::sendMaintenanceEmail(CityRegion* city, int maintenancePaid) {
	(static_cast<CityManager*>(stub))->sendMaintenanceEmail(city, maintenancePaid);
}

void CityManagerAdapter::sendMaintenanceDecayEmail(CityRegion* city, StructureObject* structure, int maintenanceDue) {
	(static_cast<CityManager*>(stub))->sendMaintenanceDecayEmail(city, structure, maintenanceDue);
}

void CityManagerAdapter::sendMaintenanceDestroyEmail(CityRegion* city, SceneObject* object) {
	(static_cast<CityManager*>(stub))->sendMaintenanceDestroyEmail(city, object);
}

void CityManagerAdapter::sendMaintenanceRepairEmail(CityRegion* city, StructureObject* structure) {
	(static_cast<CityManager*>(stub))->sendMaintenanceRepairEmail(city, structure);
}

void CityManagerAdapter::contractCity(CityRegion* city) {
	(static_cast<CityManager*>(stub))->contractCity(city);
}

void CityManagerAdapter::expandCity(CityRegion* city) {
	(static_cast<CityManager*>(stub))->expandCity(city);
}

void CityManagerAdapter::destroyCity(CityRegion* city) {
	(static_cast<CityManager*>(stub))->destroyCity(city);
}

void CityManagerAdapter::sendStatusReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->sendStatusReport(city, creature, terminal);
}

void CityManagerAdapter::promptCitySpecialization(CityRegion* city, CreatureObject* mayor, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptCitySpecialization(city, mayor, terminal);
}

void CityManagerAdapter::changeCitySpecialization(CityRegion* city, CreatureObject* mayor, const String& spec) {
	(static_cast<CityManager*>(stub))->changeCitySpecialization(city, mayor, spec);
}

void CityManagerAdapter::promptWithdrawCityTreasury(CityRegion* city, CreatureObject* mayor, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptWithdrawCityTreasury(city, mayor, terminal);
}

void CityManagerAdapter::promptDepositCityTreasury(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptDepositCityTreasury(city, creature, terminal);
}

void CityManagerAdapter::withdrawFromCityTreasury(CityRegion* city, CreatureObject* mayor, int value, const String& reason, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->withdrawFromCityTreasury(city, mayor, value, reason, terminal);
}

void CityManagerAdapter::depositToCityTreasury(CityRegion* city, CreatureObject* creature, int value) {
	(static_cast<CityManager*>(stub))->depositToCityTreasury(city, creature, value);
}

void CityManagerAdapter::sendTreasuryReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->sendTreasuryReport(city, creature, terminal);
}

void CityManagerAdapter::sendCitizenshipReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->sendCitizenshipReport(city, creature, terminal);
}

void CityManagerAdapter::registerCitizen(CityRegion* city, CreatureObject* creature) {
	(static_cast<CityManager*>(stub))->registerCitizen(city, creature);
}

void CityManagerAdapter::unregisterCitizen(CityRegion* city, CreatureObject* creature) {
	(static_cast<CityManager*>(stub))->unregisterCitizen(city, creature);
}

void CityManagerAdapter::sendManageMilitia(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->sendManageMilitia(city, creature, terminal);
}

void CityManagerAdapter::promptAddMilitiaMember(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptAddMilitiaMember(city, creature, terminal);
}

void CityManagerAdapter::addMilitiaMember(CityRegion* city, CreatureObject* mayor, const String& playerName) {
	(static_cast<CityManager*>(stub))->addMilitiaMember(city, mayor, playerName);
}

void CityManagerAdapter::removeMilitiaMember(CityRegion* city, CreatureObject* mayor, unsigned long long militiaid) {
	(static_cast<CityManager*>(stub))->removeMilitiaMember(city, mayor, militiaid);
}

void CityManagerAdapter::sendCityAdvancement(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->sendCityAdvancement(city, creature, terminal);
}

String CityManagerAdapter::getNextUpdateTimeString(CityRegion* city) {
	return (static_cast<CityManager*>(stub))->getNextUpdateTimeString(city);
}

void CityManagerAdapter::promptRegisterCity(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptRegisterCity(city, creature, terminal);
}

void CityManagerAdapter::promptUnregisterCity(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptUnregisterCity(city, creature, terminal);
}

void CityManagerAdapter::registerCity(CityRegion* city, CreatureObject* mayor) {
	(static_cast<CityManager*>(stub))->registerCity(city, mayor);
}

void CityManagerAdapter::unregisterCity(CityRegion* city, CreatureObject* mayor) {
	(static_cast<CityManager*>(stub))->unregisterCity(city, mayor);
}

void CityManagerAdapter::promptAdjustTaxes(CityRegion* city, CreatureObject* mayor, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptAdjustTaxes(city, mayor, terminal);
}

void CityManagerAdapter::promptSetTax(CityRegion* city, CreatureObject* mayor, int selectedTax, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptSetTax(city, mayor, selectedTax, terminal);
}

void CityManagerAdapter::setTax(CityRegion* city, CreatureObject* mayor, int selectedTax, int value) {
	(static_cast<CityManager*>(stub))->setTax(city, mayor, selectedTax, value);
}

void CityManagerAdapter::sendMaintenanceReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->sendMaintenanceReport(city, creature, terminal);
}

bool CityManagerAdapter::containsCityName(const String& name) {
	return (static_cast<CityManager*>(stub))->containsCityName(name);
}

bool CityManagerAdapter::isCityRankCapped(const String& planetName, byte cityRank) {
	return (static_cast<CityManager*>(stub))->isCityRankCapped(planetName, cityRank);
}

void CityManagerAdapter::sendCityReport(CreatureObject* creature, const String& planetName, byte rank) {
	(static_cast<CityManager*>(stub))->sendCityReport(creature, planetName, rank);
}

bool CityManagerAdapter::validateCityInRange(CreatureObject* creature, Zone* zone, float x, float y) {
	return (static_cast<CityManager*>(stub))->validateCityInRange(creature, zone, x, y);
}

void CityManagerAdapter::promptToggleZoningEnabled(CityRegion* city, CreatureObject* mayor) {
	(static_cast<CityManager*>(stub))->promptToggleZoningEnabled(city, mayor);
}

void CityManagerAdapter::toggleZoningEnabled(CityRegion* city, CreatureObject* mayor) {
	(static_cast<CityManager*>(stub))->toggleZoningEnabled(city, mayor);
}

int CityManagerAdapter::getTotalCities() {
	return (static_cast<CityManager*>(stub))->getTotalCities();
}

bool CityManagerAdapter::renameCity(CityRegion* city, const String& newName) {
	return (static_cast<CityManager*>(stub))->renameCity(city, newName);
}

void CityManagerAdapter::sendMayoralStandings(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->sendMayoralStandings(city, creature, terminal);
}

void CityManagerAdapter::promptMayoralVote(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->promptMayoralVote(city, creature, terminal);
}

void CityManagerAdapter::registerForMayoralRace(CityRegion* city, CreatureObject* creature) {
	(static_cast<CityManager*>(stub))->registerForMayoralRace(city, creature);
}

void CityManagerAdapter::unregisterFromMayoralRace(CityRegion* city, CreatureObject* creature, bool force) {
	(static_cast<CityManager*>(stub))->unregisterFromMayoralRace(city, creature, force);
}

void CityManagerAdapter::castMayoralVote(CityRegion* city, CreatureObject* creature, unsigned long long oid) {
	(static_cast<CityManager*>(stub))->castMayoralVote(city, creature, oid);
}

void CityManagerAdapter::sendStructureReport(CityRegion* city, CreatureObject* creature, SceneObject* terminal) {
	(static_cast<CityManager*>(stub))->sendStructureReport(city, creature, terminal);
}

bool CityManagerAdapter::canSupportMoreDecorations(CityRegion* city) {
	return (static_cast<CityManager*>(stub))->canSupportMoreDecorations(city);
}

bool CityManagerAdapter::canSupportMoreTrainers(CityRegion* city) {
	return (static_cast<CityManager*>(stub))->canSupportMoreTrainers(city);
}

bool CityManagerAdapter::canSupportMoreMissionTerminals(CityRegion* city) {
	return (static_cast<CityManager*>(stub))->canSupportMoreMissionTerminals(city);
}

void CityManagerAdapter::sendChangeCityName(CityRegion* city, CreatureObject* mayor) {
	(static_cast<CityManager*>(stub))->sendChangeCityName(city, mayor);
}

void CityManagerAdapter::sendAddStructureMails(CityRegion* city, StructureObject* structure) {
	(static_cast<CityManager*>(stub))->sendAddStructureMails(city, structure);
}

void CityManagerAdapter::promptForceRank(CityRegion* city, CreatureObject* player, bool rankUp) {
	(static_cast<CityManager*>(stub))->promptForceRank(city, player, rankUp);
}

void CityManagerAdapter::promptForceUpdate(CityRegion* city, CreatureObject* player) {
	(static_cast<CityManager*>(stub))->promptForceUpdate(city, player);
}

void CityManagerAdapter::alignAmenity(CityRegion* city, CreatureObject* player, SceneObject* amenity, int direction) {
	(static_cast<CityManager*>(stub))->alignAmenity(city, player, amenity, direction);
}

/*
 *	CityManagerHelper
 */

CityManagerHelper* CityManagerHelper::staticInitializer = CityManagerHelper::instance();

CityManagerHelper::CityManagerHelper() {
	className = "CityManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void CityManagerHelper::finalizeHelper() {
	CityManagerHelper::finalize();
}

DistributedObject* CityManagerHelper::instantiateObject() {
	return new CityManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityManagerHelper::instantiateServant() {
	return new CityManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CityManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityManagerAdapter(static_cast<CityManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

