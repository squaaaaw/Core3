/*
 *	autogen/server/zone/managers/mission/MissionManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/tangible/terminal/mission/MissionTerminal.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

#include "server/zone/managers/creature/LairSpawn.h"

/*
 *	MissionManagerStub
 */

unsigned const int MissionManager::UNKNOWN_TARGET = 0xB911DA26;

enum {RPC_HANDLEMISSIONLISTREQUEST__MISSIONTERMINAL_CREATUREOBJECT_INT_,RPC_HANDLEMISSIONACCEPT__MISSIONTERMINAL_MISSIONOBJECT_CREATUREOBJECT_,RPC_HANDLEMISSIONABORT__MISSIONOBJECT_CREATUREOBJECT_,RPC_REMOVEMISSION__MISSIONOBJECT_CREATUREOBJECT_,RPC_CREATESPAWNPOINT__CREATUREOBJECT_STRING_,RPC_GETBOUNTYHUNTERMISSION__CREATUREOBJECT_,RPC_ADDPLAYERTOBOUNTYLIST__LONG_INT_,RPC_REMOVEPLAYERFROMBOUNTYLIST__LONG_,RPC_UPDATEPLAYERBOUNTYREWARD__LONG_INT_,RPC_UPDATEPLAYERBOUNTYONLINESTATUS__LONG_BOOL_,RPC_COMPLETEPLAYERBOUNTY__LONG_LONG_,RPC_FAILPLAYERBOUNTYMISSION__LONG_,RPC_HASPLAYERBOUNTYTARGETINLIST__LONG_,RPC_HASBOUNTYHUNTERINPLAYERBOUNTY__LONG_LONG_,RPC_DEACTIVATEMISSIONS__CREATUREOBJECT_,RPC_GETRANDOMBOUNTYPLANET__};

MissionManager::MissionManager(ZoneServer* srv, ZoneProcessServer* impl) : Observer(DummyConstructorParameter::instance()) {
	MissionManagerImplementation* _implementation = new MissionManagerImplementation(srv, impl);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("MissionManager");
}

MissionManager::MissionManager(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("MissionManager");
}

MissionManager::~MissionManager() {
}



void MissionManager::handleMissionListRequest(MissionTerminal* missionTerminal, CreatureObject* player, int counter) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEMISSIONLISTREQUEST__MISSIONTERMINAL_CREATUREOBJECT_INT_);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleMissionListRequest(missionTerminal, player, counter);
	}
}

void MissionManager::handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEMISSIONACCEPT__MISSIONTERMINAL_MISSIONOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleMissionAccept(missionTerminal, mission, player);
	}
}

void MissionManager::handleMissionAbort(MissionObject* mission, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEMISSIONABORT__MISSIONOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleMissionAbort(mission, player);
	}
}

void MissionManager::removeMission(MissionObject* mission, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMISSION__MISSIONOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeMission(mission, player);
	}
}

NpcSpawnPoint* MissionManager::getFreeNpcSpawnPoint(unsigned const int planetCRC, const float x, const float y, const int spawnType) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getFreeNpcSpawnPoint(planetCRC, x, y, spawnType);
	}
}

void MissionManager::createSpawnPoint(CreatureObject* player, const String& spawnTypes) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATESPAWNPOINT__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(spawnTypes);

		method.executeWithVoidReturn();
	} else {
		_implementation->createSpawnPoint(player, spawnTypes);
	}
}

Vector3 MissionManager::getRandomBountyTargetPosition(CreatureObject* player, const String& planet) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getRandomBountyTargetPosition(player, planet);
	}
}

Reference<MissionObject* > MissionManager::getBountyHunterMission(CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBOUNTYHUNTERMISSION__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<MissionObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getBountyHunterMission(player);
	}
}

void MissionManager::addPlayerToBountyList(unsigned long long targetId, int reward) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPLAYERTOBOUNTYLIST__LONG_INT_);
		method.addUnsignedLongParameter(targetId);
		method.addSignedIntParameter(reward);

		method.executeWithVoidReturn();
	} else {
		_implementation->addPlayerToBountyList(targetId, reward);
	}
}

void MissionManager::removePlayerFromBountyList(unsigned long long targetId) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPLAYERFROMBOUNTYLIST__LONG_);
		method.addUnsignedLongParameter(targetId);

		method.executeWithVoidReturn();
	} else {
		_implementation->removePlayerFromBountyList(targetId);
	}
}

void MissionManager::updatePlayerBountyReward(unsigned long long targetId, int reward) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEPLAYERBOUNTYREWARD__LONG_INT_);
		method.addUnsignedLongParameter(targetId);
		method.addSignedIntParameter(reward);

		method.executeWithVoidReturn();
	} else {
		_implementation->updatePlayerBountyReward(targetId, reward);
	}
}

void MissionManager::updatePlayerBountyOnlineStatus(unsigned long long targetId, bool status) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEPLAYERBOUNTYONLINESTATUS__LONG_BOOL_);
		method.addUnsignedLongParameter(targetId);
		method.addBooleanParameter(status);

		method.executeWithVoidReturn();
	} else {
		_implementation->updatePlayerBountyOnlineStatus(targetId, status);
	}
}

void MissionManager::completePlayerBounty(unsigned long long targetId, unsigned long long bountyHunter) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPLETEPLAYERBOUNTY__LONG_LONG_);
		method.addUnsignedLongParameter(targetId);
		method.addUnsignedLongParameter(bountyHunter);

		method.executeWithVoidReturn();
	} else {
		_implementation->completePlayerBounty(targetId, bountyHunter);
	}
}

void MissionManager::failPlayerBountyMission(unsigned long long bountyHunter) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FAILPLAYERBOUNTYMISSION__LONG_);
		method.addUnsignedLongParameter(bountyHunter);

		method.executeWithVoidReturn();
	} else {
		_implementation->failPlayerBountyMission(bountyHunter);
	}
}

bool MissionManager::hasPlayerBountyTargetInList(unsigned long long targetId) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPLAYERBOUNTYTARGETINLIST__LONG_);
		method.addUnsignedLongParameter(targetId);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasPlayerBountyTargetInList(targetId);
	}
}

bool MissionManager::hasBountyHunterInPlayerBounty(unsigned long long targetId, unsigned long long bhId) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASBOUNTYHUNTERINPLAYERBOUNTY__LONG_LONG_);
		method.addUnsignedLongParameter(targetId);
		method.addUnsignedLongParameter(bhId);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasBountyHunterInPlayerBounty(targetId, bhId);
	}
}

Vector<unsigned long long>* MissionManager::getHuntersHuntingTarget(unsigned long long targetId) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getHuntersHuntingTarget(targetId);
	}
}

void MissionManager::allocateMissionNpcs(NpcSpawnPoint* target, NpcSpawnPoint* destination, TerrainManager* terrainManager, CreatureManager* creatureManager) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->allocateMissionNpcs(target, destination, terrainManager, creatureManager);
	}
}

void MissionManager::freeMissionNpc(AiAgent* npc) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->freeMissionNpc(npc);
	}
}

void MissionManager::despawnMissionNpc(NpcSpawnPoint* npc) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->despawnMissionNpc(npc);
	}
}

void MissionManager::deactivateMissions(CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATEMISSIONS__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->deactivateMissions(player);
	}
}

String MissionManager::getRandomBountyPlanet() {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANDOMBOUNTYPLANET__);

		String _return_getRandomBountyPlanet;
		method.executeWithAsciiReturn(_return_getRandomBountyPlanet);
		return _return_getRandomBountyPlanet;
	} else {
		return _implementation->getRandomBountyPlanet();
	}
}

DistributedObjectServant* MissionManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* MissionManager::_getImplementationForRead() const {
	return _impl;
}

void MissionManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	MissionManagerImplementation
 */

unsigned const int MissionManagerImplementation::UNKNOWN_TARGET = 0xB911DA26;

MissionManagerImplementation::MissionManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


MissionManagerImplementation::~MissionManagerImplementation() {
}


void MissionManagerImplementation::finalize() {
}

void MissionManagerImplementation::_initializeImplementation() {
	_setClassHelper(MissionManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void MissionManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<MissionManager*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* MissionManagerImplementation::_getStub() {
	return _this.get();
}

MissionManagerImplementation::operator const MissionManager*() {
	return _this.get();
}

void MissionManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void MissionManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void MissionManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void MissionManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void MissionManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void MissionManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void MissionManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void MissionManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("MissionManager");

}

void MissionManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(MissionManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x89a45126: //MissionManager.server
		TypeInfo<ManagedReference<ZoneServer* > >::parseFromBinaryStream(&server, stream);
		return true;

	case 0x6c6177f: //MissionManager.missionNpcSpawnMap
		TypeInfo<MissionNpcSpawnMap >::parseFromBinaryStream(&missionNpcSpawnMap, stream);
		return true;

	case 0xcb0e49a5: //MissionManager.craftingMissionItems
		TypeInfo<Vector<String> >::parseFromBinaryStream(&craftingMissionItems, stream);
		return true;

	case 0x625beb46: //MissionManager.bhTargetZones
		TypeInfo<Vector<String> >::parseFromBinaryStream(&bhTargetZones, stream);
		return true;

	case 0x558d02f7: //MissionManager.bhTargetsAtMissionLevel
		TypeInfo<VectorMap<unsigned int, Vector<String> > >::parseFromBinaryStream(&bhTargetsAtMissionLevel, stream);
		return true;

	case 0xe9a8cdb8: //MissionManager.playerBountyList
		TypeInfo<VectorMap<unsigned long long, ManagedReference<PlayerBounty* > > >::parseFromBinaryStream(&playerBountyList, stream);
		return true;

	case 0x33edf8be: //MissionManager.enableFactionalCraftingMissions
		TypeInfo<bool >::parseFromBinaryStream(&enableFactionalCraftingMissions, stream);
		return true;

	case 0xdfc47e45: //MissionManager.enableFactionalReconMissions
		TypeInfo<bool >::parseFromBinaryStream(&enableFactionalReconMissions, stream);
		return true;

	case 0x180a28fd: //MissionManager.enableFactionalEntertainerMissions
		TypeInfo<bool >::parseFromBinaryStream(&enableFactionalEntertainerMissions, stream);
		return true;

	case 0xd301b806: //MissionManager.enableSameAccountBountyMissions
		TypeInfo<bool >::parseFromBinaryStream(&enableSameAccountBountyMissions, stream);
		return true;

	}

	return false;
}

void MissionManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x89a45126; //MissionManager.server
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ZoneServer* > >::toBinaryStream(&server, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6c6177f; //MissionManager.missionNpcSpawnMap
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<MissionNpcSpawnMap >::toBinaryStream(&missionNpcSpawnMap, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcb0e49a5; //MissionManager.craftingMissionItems
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&craftingMissionItems, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x625beb46; //MissionManager.bhTargetZones
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&bhTargetZones, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x558d02f7; //MissionManager.bhTargetsAtMissionLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned int, Vector<String> > >::toBinaryStream(&bhTargetsAtMissionLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe9a8cdb8; //MissionManager.playerBountyList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<PlayerBounty* > > >::toBinaryStream(&playerBountyList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x33edf8be; //MissionManager.enableFactionalCraftingMissions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&enableFactionalCraftingMissions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xdfc47e45; //MissionManager.enableFactionalReconMissions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&enableFactionalReconMissions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x180a28fd; //MissionManager.enableFactionalEntertainerMissions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&enableFactionalEntertainerMissions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd301b806; //MissionManager.enableSameAccountBountyMissions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&enableSameAccountBountyMissions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 10;
}

MissionManagerImplementation::MissionManagerImplementation(ZoneServer* srv, ZoneProcessServer* impl) {
	_initializeImplementation();
	// server/zone/managers/mission/MissionManager.idl():  		server = srv;
	server = srv;
	// server/zone/managers/mission/MissionManager.idl():  		processor = impl;
	processor = impl;
	// server/zone/managers/mission/MissionManager.idl():  		playerBountyList.setNoDuplicateInsertPlan();
	(&playerBountyList)->setNoDuplicateInsertPlan();
	// server/zone/managers/mission/MissionManager.idl():  		enableFactionalCraftingMissions = false;
	enableFactionalCraftingMissions = false;
	// server/zone/managers/mission/MissionManager.idl():  		enableFactionalReconMissions = false;
	enableFactionalReconMissions = false;
	// server/zone/managers/mission/MissionManager.idl():  		enableFactionalEntertainerMissions = false;
	enableFactionalEntertainerMissions = false;
	// server/zone/managers/mission/MissionManager.idl():  		enableSameAccountBountyMissions = false;
	enableSameAccountBountyMissions = false;
	// server/zone/managers/mission/MissionManager.idl():  		Logger.setLoggingName("MissionManager");
	Logger::setLoggingName("MissionManager");
	// server/zone/managers/mission/MissionManager.idl():  		missionNpcSpawnMap.loadSpawnPointsFromLua();
	(&missionNpcSpawnMap)->loadSpawnPointsFromLua();
	// server/zone/managers/mission/MissionManager.idl():  		loadLuaSettings();
	loadLuaSettings();
	// server/zone/managers/mission/MissionManager.idl():  		loadPlayerBounties();
	loadPlayerBounties();
}

bool MissionManagerImplementation::hasPlayerBountyTargetInList(unsigned long long targetId) {
	// server/zone/managers/mission/MissionManager.idl():  		return playerBountyList.contains(targetId);
	return (&playerBountyList)->contains(targetId);
}

bool MissionManagerImplementation::hasBountyHunterInPlayerBounty(unsigned long long targetId, unsigned long long bhId) {
	// server/zone/managers/mission/MissionManager.idl():  		return playerBountyList.contains(targetId) && playerBountyList.get(targetId).hasBountyHunter(bhId);
	return (&playerBountyList)->contains(targetId) && (&playerBountyList)->get(targetId)->hasBountyHunter(bhId);
}

/*
 *	MissionManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


MissionManagerAdapter::MissionManagerAdapter(MissionManager* obj) : ObserverAdapter(obj) {
}

void MissionManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_HANDLEMISSIONLISTREQUEST__MISSIONTERMINAL_CREATUREOBJECT_INT_:
		{
			MissionTerminal* missionTerminal = static_cast<MissionTerminal*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int counter = inv->getSignedIntParameter();
			
			handleMissionListRequest(missionTerminal, player, counter);
			
		}
		break;
	case RPC_HANDLEMISSIONACCEPT__MISSIONTERMINAL_MISSIONOBJECT_CREATUREOBJECT_:
		{
			MissionTerminal* missionTerminal = static_cast<MissionTerminal*>(inv->getObjectParameter());
			MissionObject* mission = static_cast<MissionObject*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			handleMissionAccept(missionTerminal, mission, player);
			
		}
		break;
	case RPC_HANDLEMISSIONABORT__MISSIONOBJECT_CREATUREOBJECT_:
		{
			MissionObject* mission = static_cast<MissionObject*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			handleMissionAbort(mission, player);
			
		}
		break;
	case RPC_REMOVEMISSION__MISSIONOBJECT_CREATUREOBJECT_:
		{
			MissionObject* mission = static_cast<MissionObject*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeMission(mission, player);
			
		}
		break;
	case RPC_CREATESPAWNPOINT__CREATUREOBJECT_STRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String spawnTypes; inv->getAsciiParameter(spawnTypes);
			
			createSpawnPoint(player, spawnTypes);
			
		}
		break;
	case RPC_GETBOUNTYHUNTERMISSION__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = getBountyHunterMission(player);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ADDPLAYERTOBOUNTYLIST__LONG_INT_:
		{
			unsigned long long targetId = inv->getUnsignedLongParameter();
			int reward = inv->getSignedIntParameter();
			
			addPlayerToBountyList(targetId, reward);
			
		}
		break;
	case RPC_REMOVEPLAYERFROMBOUNTYLIST__LONG_:
		{
			unsigned long long targetId = inv->getUnsignedLongParameter();
			
			removePlayerFromBountyList(targetId);
			
		}
		break;
	case RPC_UPDATEPLAYERBOUNTYREWARD__LONG_INT_:
		{
			unsigned long long targetId = inv->getUnsignedLongParameter();
			int reward = inv->getSignedIntParameter();
			
			updatePlayerBountyReward(targetId, reward);
			
		}
		break;
	case RPC_UPDATEPLAYERBOUNTYONLINESTATUS__LONG_BOOL_:
		{
			unsigned long long targetId = inv->getUnsignedLongParameter();
			bool status = inv->getBooleanParameter();
			
			updatePlayerBountyOnlineStatus(targetId, status);
			
		}
		break;
	case RPC_COMPLETEPLAYERBOUNTY__LONG_LONG_:
		{
			unsigned long long targetId = inv->getUnsignedLongParameter();
			unsigned long long bountyHunter = inv->getUnsignedLongParameter();
			
			completePlayerBounty(targetId, bountyHunter);
			
		}
		break;
	case RPC_FAILPLAYERBOUNTYMISSION__LONG_:
		{
			unsigned long long bountyHunter = inv->getUnsignedLongParameter();
			
			failPlayerBountyMission(bountyHunter);
			
		}
		break;
	case RPC_HASPLAYERBOUNTYTARGETINLIST__LONG_:
		{
			unsigned long long targetId = inv->getUnsignedLongParameter();
			
			bool _m_res = hasPlayerBountyTargetInList(targetId);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASBOUNTYHUNTERINPLAYERBOUNTY__LONG_LONG_:
		{
			unsigned long long targetId = inv->getUnsignedLongParameter();
			unsigned long long bhId = inv->getUnsignedLongParameter();
			
			bool _m_res = hasBountyHunterInPlayerBounty(targetId, bhId);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_DEACTIVATEMISSIONS__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			deactivateMissions(player);
			
		}
		break;
	case RPC_GETRANDOMBOUNTYPLANET__:
		{
			
			String _m_res = getRandomBountyPlanet();
			resp->insertAscii(_m_res);
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

void MissionManagerAdapter::handleMissionListRequest(MissionTerminal* missionTerminal, CreatureObject* player, int counter) {
	(static_cast<MissionManager*>(stub))->handleMissionListRequest(missionTerminal, player, counter);
}

void MissionManagerAdapter::handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->handleMissionAccept(missionTerminal, mission, player);
}

void MissionManagerAdapter::handleMissionAbort(MissionObject* mission, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->handleMissionAbort(mission, player);
}

void MissionManagerAdapter::removeMission(MissionObject* mission, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->removeMission(mission, player);
}

void MissionManagerAdapter::createSpawnPoint(CreatureObject* player, const String& spawnTypes) {
	(static_cast<MissionManager*>(stub))->createSpawnPoint(player, spawnTypes);
}

Reference<MissionObject* > MissionManagerAdapter::getBountyHunterMission(CreatureObject* player) {
	return (static_cast<MissionManager*>(stub))->getBountyHunterMission(player);
}

void MissionManagerAdapter::addPlayerToBountyList(unsigned long long targetId, int reward) {
	(static_cast<MissionManager*>(stub))->addPlayerToBountyList(targetId, reward);
}

void MissionManagerAdapter::removePlayerFromBountyList(unsigned long long targetId) {
	(static_cast<MissionManager*>(stub))->removePlayerFromBountyList(targetId);
}

void MissionManagerAdapter::updatePlayerBountyReward(unsigned long long targetId, int reward) {
	(static_cast<MissionManager*>(stub))->updatePlayerBountyReward(targetId, reward);
}

void MissionManagerAdapter::updatePlayerBountyOnlineStatus(unsigned long long targetId, bool status) {
	(static_cast<MissionManager*>(stub))->updatePlayerBountyOnlineStatus(targetId, status);
}

void MissionManagerAdapter::completePlayerBounty(unsigned long long targetId, unsigned long long bountyHunter) {
	(static_cast<MissionManager*>(stub))->completePlayerBounty(targetId, bountyHunter);
}

void MissionManagerAdapter::failPlayerBountyMission(unsigned long long bountyHunter) {
	(static_cast<MissionManager*>(stub))->failPlayerBountyMission(bountyHunter);
}

bool MissionManagerAdapter::hasPlayerBountyTargetInList(unsigned long long targetId) {
	return (static_cast<MissionManager*>(stub))->hasPlayerBountyTargetInList(targetId);
}

bool MissionManagerAdapter::hasBountyHunterInPlayerBounty(unsigned long long targetId, unsigned long long bhId) {
	return (static_cast<MissionManager*>(stub))->hasBountyHunterInPlayerBounty(targetId, bhId);
}

void MissionManagerAdapter::deactivateMissions(CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->deactivateMissions(player);
}

String MissionManagerAdapter::getRandomBountyPlanet() {
	return (static_cast<MissionManager*>(stub))->getRandomBountyPlanet();
}

/*
 *	MissionManagerHelper
 */

MissionManagerHelper* MissionManagerHelper::staticInitializer = MissionManagerHelper::instance();

MissionManagerHelper::MissionManagerHelper() {
	className = "MissionManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionManagerHelper::finalizeHelper() {
	MissionManagerHelper::finalize();
}

DistributedObject* MissionManagerHelper::instantiateObject() {
	return new MissionManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionManagerHelper::instantiateServant() {
	return new MissionManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionManagerAdapter(static_cast<MissionManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

