/*
 *	autogen/server/zone/managers/director/QuestStatus.h generated by engine3 IDL compiler 0.60
 */

#ifndef QUESTSTATUS_H_
#define QUESTSTATUS_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/core/ManagedObject.h"

#include "system/lang/String.h"

namespace server {
namespace zone {
namespace managers {
namespace director {

class QuestStatus : public ManagedObject {
public:
	QuestStatus();

	String getKey();

	void setKey(const String& k);

	String getStatus();

	void setStatus(const String& s);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	QuestStatus(DummyConstructorParameter* param);

	virtual ~QuestStatus();

	friend class QuestStatusHelper;
};

} // namespace director
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::director;

namespace server {
namespace zone {
namespace managers {
namespace director {

class QuestStatusImplementation : public ManagedObjectImplementation {
protected:
	String key;

	String status;

public:
	QuestStatusImplementation();

	QuestStatusImplementation(DummyConstructorParameter* param);

	String getKey();

	void setKey(const String& k);

	String getStatus();

	void setStatus(const String& s);

	WeakReference<QuestStatus*> _this;

	operator const QuestStatus*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~QuestStatusImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class QuestStatus;
};

class QuestStatusAdapter : public ManagedObjectAdapter {
public:
	QuestStatusAdapter(QuestStatus* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	String getKey();

	void setKey(const String& k);

	String getStatus();

	void setStatus(const String& s);

};

class QuestStatusHelper : public DistributedObjectClassHelper, public Singleton<QuestStatusHelper> {
	static QuestStatusHelper* staticInitializer;

public:
	QuestStatusHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<QuestStatusHelper>;
};

} // namespace director
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::director;

#endif /*QUESTSTATUS_H_*/
