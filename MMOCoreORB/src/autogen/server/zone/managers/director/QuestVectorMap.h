/*
 *	autogen/server/zone/managers/director/QuestVectorMap.h generated by engine3 IDL compiler 0.60
 */

#ifndef QUESTVECTORMAP_H_
#define QUESTVECTORMAP_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/lua/Luna.h"

#include "engine/lua/Lua.h"

#include "engine/core/ManagedObject.h"

#include "system/lang/String.h"

namespace server {
namespace zone {
namespace managers {
namespace director {

class QuestVectorMap : public ManagedObject {
public:
	QuestVectorMap();

	String getKey();

	void setKey(const String& k);

	String getMapRow(const String& mapKey);

	void addMapRow(const String& mapKey, const String& mapValue);

	void deleteMapRow(const String& mapKey);

	bool hasMapRow(const String& mapKey);

	int getMapSize();

	String getMapKeyAtIndex(int idx);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	QuestVectorMap(DummyConstructorParameter* param);

	virtual ~QuestVectorMap();

	friend class QuestVectorMapHelper;
};

} // namespace director
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::director;

namespace server {
namespace zone {
namespace managers {
namespace director {

class QuestVectorMapImplementation : public ManagedObjectImplementation {
protected:
	String key;

	VectorMap<String, String> questMap;

public:
	QuestVectorMapImplementation();

	QuestVectorMapImplementation(DummyConstructorParameter* param);

	String getKey();

	void setKey(const String& k);

	String getMapRow(const String& mapKey);

	void addMapRow(const String& mapKey, const String& mapValue);

	void deleteMapRow(const String& mapKey);

	bool hasMapRow(const String& mapKey);

	int getMapSize();

	String getMapKeyAtIndex(int idx);

	WeakReference<QuestVectorMap*> _this;

	operator const QuestVectorMap*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~QuestVectorMapImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class QuestVectorMap;
};

class QuestVectorMapAdapter : public ManagedObjectAdapter {
public:
	QuestVectorMapAdapter(QuestVectorMap* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	String getKey();

	void setKey(const String& k);

	String getMapRow(const String& mapKey);

	void addMapRow(const String& mapKey, const String& mapValue);

	void deleteMapRow(const String& mapKey);

	bool hasMapRow(const String& mapKey);

	int getMapSize();

	String getMapKeyAtIndex(int idx);

};

class QuestVectorMapHelper : public DistributedObjectClassHelper, public Singleton<QuestVectorMapHelper> {
	static QuestVectorMapHelper* staticInitializer;

public:
	QuestVectorMapHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<QuestVectorMapHelper>;
};

class LuaQuestVectorMap {
public:
	static const char className[];
	static Luna<LuaQuestVectorMap>::RegType Register[];

	LuaQuestVectorMap(lua_State *L);
	virtual ~LuaQuestVectorMap();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int getKey(lua_State *L);
	int setKey(lua_State *L);
	int getMapRow(lua_State *L);
	int addMapRow(lua_State *L);
	int deleteMapRow(lua_State *L);
	int hasMapRow(lua_State *L);
	int getMapSize(lua_State *L);
	int getMapKeyAtIndex(lua_State *L);

	Reference<QuestVectorMap*> realObject;
};

} // namespace director
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::director;

#endif /*QUESTVECTORMAP_H_*/
