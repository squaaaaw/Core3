/*
 *	autogen/server/zone/managers/director/QuestStatus.cpp generated by engine3 IDL compiler 0.60
 */

#include "QuestStatus.h"

/*
 *	QuestStatusStub
 */

enum {RPC_GETKEY__ = 3126513258,RPC_SETKEY__STRING_,RPC_GETSTATUS__,RPC_SETSTATUS__STRING_};

QuestStatus::QuestStatus() : ManagedObject(DummyConstructorParameter::instance()) {
	QuestStatusImplementation* _implementation = new QuestStatusImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("QuestStatus");
}

QuestStatus::QuestStatus(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("QuestStatus");
}

QuestStatus::~QuestStatus() {
}



String QuestStatus::getKey() {
	QuestStatusImplementation* _implementation = static_cast<QuestStatusImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETKEY__);

		String _return_getKey;
		method.executeWithAsciiReturn(_return_getKey);
		return _return_getKey;
	} else {
		return _implementation->getKey();
	}
}

void QuestStatus::setKey(const String& k) {
	QuestStatusImplementation* _implementation = static_cast<QuestStatusImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETKEY__STRING_);
		method.addAsciiParameter(k);

		method.executeWithVoidReturn();
	} else {
		_implementation->setKey(k);
	}
}

String QuestStatus::getStatus() {
	QuestStatusImplementation* _implementation = static_cast<QuestStatusImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTATUS__);

		String _return_getStatus;
		method.executeWithAsciiReturn(_return_getStatus);
		return _return_getStatus;
	} else {
		return _implementation->getStatus();
	}
}

void QuestStatus::setStatus(const String& s) {
	QuestStatusImplementation* _implementation = static_cast<QuestStatusImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTATUS__STRING_);
		method.addAsciiParameter(s);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStatus(s);
	}
}

DistributedObjectServant* QuestStatus::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* QuestStatus::_getImplementationForRead() const {
	return _impl;
}

void QuestStatus::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	QuestStatusImplementation
 */

QuestStatusImplementation::QuestStatusImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


QuestStatusImplementation::~QuestStatusImplementation() {
}


void QuestStatusImplementation::finalize() {
}

void QuestStatusImplementation::_initializeImplementation() {
	_setClassHelper(QuestStatusHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void QuestStatusImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<QuestStatus*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* QuestStatusImplementation::_getStub() {
	return _this.get();
}

QuestStatusImplementation::operator const QuestStatus*() {
	return _this.get();
}

void QuestStatusImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void QuestStatusImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void QuestStatusImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void QuestStatusImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void QuestStatusImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void QuestStatusImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void QuestStatusImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void QuestStatusImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("QuestStatus");

}

void QuestStatusImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(QuestStatusImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool QuestStatusImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x296585be: //QuestStatus.key
		TypeInfo<String >::parseFromBinaryStream(&key, stream);
		return true;

	case 0xbd0a479b: //QuestStatus.status
		TypeInfo<String >::parseFromBinaryStream(&status, stream);
		return true;

	}

	return false;
}

void QuestStatusImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = QuestStatusImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int QuestStatusImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x296585be; //QuestStatus.key
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&key, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbd0a479b; //QuestStatus.status
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&status, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

QuestStatusImplementation::QuestStatusImplementation() {
	_initializeImplementation();
	// server/zone/managers/director/QuestStatus.idl():  		key = "";
	key = "";
	// server/zone/managers/director/QuestStatus.idl():  		status = "";
	status = "";
}

String QuestStatusImplementation::getKey() {
	// server/zone/managers/director/QuestStatus.idl():  		return key;
	return key;
}

void QuestStatusImplementation::setKey(const String& k) {
	// server/zone/managers/director/QuestStatus.idl():  		key = k;
	key = k;
}

String QuestStatusImplementation::getStatus() {
	// server/zone/managers/director/QuestStatus.idl():  		return status;
	return status;
}

void QuestStatusImplementation::setStatus(const String& s) {
	// server/zone/managers/director/QuestStatus.idl():  		status = s;
	status = s;
}

/*
 *	QuestStatusAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


QuestStatusAdapter::QuestStatusAdapter(QuestStatus* obj) : ManagedObjectAdapter(obj) {
}

void QuestStatusAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETKEY__:
		{
			
			String _m_res = getKey();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETKEY__STRING_:
		{
			 String k; inv->getAsciiParameter(k);
			
			setKey(k);
			
		}
		break;
	case RPC_GETSTATUS__:
		{
			
			String _m_res = getStatus();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETSTATUS__STRING_:
		{
			 String s; inv->getAsciiParameter(s);
			
			setStatus(s);
			
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

String QuestStatusAdapter::getKey() {
	return (static_cast<QuestStatus*>(stub))->getKey();
}

void QuestStatusAdapter::setKey(const String& k) {
	(static_cast<QuestStatus*>(stub))->setKey(k);
}

String QuestStatusAdapter::getStatus() {
	return (static_cast<QuestStatus*>(stub))->getStatus();
}

void QuestStatusAdapter::setStatus(const String& s) {
	(static_cast<QuestStatus*>(stub))->setStatus(s);
}

/*
 *	QuestStatusHelper
 */

QuestStatusHelper* QuestStatusHelper::staticInitializer = QuestStatusHelper::instance();

QuestStatusHelper::QuestStatusHelper() {
	className = "QuestStatus";

	Core::getObjectBroker()->registerClass(className, this);
}

void QuestStatusHelper::finalizeHelper() {
	QuestStatusHelper::finalize();
}

DistributedObject* QuestStatusHelper::instantiateObject() {
	return new QuestStatus(DummyConstructorParameter::instance());
}

DistributedObjectServant* QuestStatusHelper::instantiateServant() {
	return new QuestStatusImplementation();
}

DistributedObjectAdapter* QuestStatusHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new QuestStatusAdapter(static_cast<QuestStatus*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

