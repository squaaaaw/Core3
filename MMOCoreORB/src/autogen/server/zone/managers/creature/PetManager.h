/*
 *	autogen/server/zone/managers/creature/PetManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef PETMANAGER_H_
#define PETMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiAgent;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

namespace server {
namespace zone {
namespace objects {
namespace intangible {

class PetControlDevice;

} // namespace intangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::intangible;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

#include "server/zone/managers/creature/ValidMountScaleRange.h"

#include "server/zone/managers/creature/MountSpeedData.h"

#include "system/util/Vector.h"

#include "system/lang/ref/Reference.h"

#include "engine/core/ManagedService.h"

namespace server {
namespace zone {
namespace managers {
namespace creature {

class PetManager : public ManagedService {
public:
	static const int FACTIONPET = 0;

	static const int CREATUREPET = 1;

	static const int DROIDPET = 2;

	static const short INVALIDCREATURE = 0x00;

	static const short TOOSMALL = 0x01;

	static const short TOOLARGE = 0x02;

	static const short CANBEMOUNTTRAINED = 0x03;

	unsigned static const int FOLLOW;

	unsigned static const int STORE;

	unsigned static const int ATTACK;

	unsigned static const int GUARD;

	unsigned static const int FRIEND;

	unsigned static const int FOLLOWOTHER;

	unsigned static const int TRICK1;

	unsigned static const int TRICK2;

	unsigned static const int PATROL;

	unsigned static const int FORMATION1;

	unsigned static const int FORMATION2;

	unsigned static const int SPECIAL_ATTACK1;

	unsigned static const int SPECIAL_ATTACK2;

	unsigned static const int RANGED_ATTACK;

	unsigned static const int GROUP;

	unsigned static const int STAY;

	unsigned static const int RECHARGEOTHER;

	unsigned static const int TRANSFER;

	unsigned static const int REPAIR;

	unsigned static const int THROWTRAP;

	unsigned static const int HARVEST;

	unsigned static const int GETPATROLPOINT;

	unsigned static const int CLEARPATROLPOINTS;

	PetManager(ZoneServer* server);

	void initialize();

	void loadLuaConfig();

	void loadValidMountScaleRanges();

	short isValidMountScale(const String& appearanceFilename, int saddleCapacity, float scale);

	short checkMountEligibility(PetControlDevice* petControlDevice, float height = -1);

	MountSpeedData* getMountSpeedData(const String& appearanceFilename);

	float getMountedRunSpeed(CreatureObject* mount);

	/**
	 * Handles chat messages to the pet
	 * @pre { }
	 * @post { }
	 * @param object player creature speaking
	 * @param object pet receiving chat
	 * @param string chat message
	 */
	void handleChat(CreatureObject* speaker, AiAgent* pet, const String& message);

	/**
	 * Enqueues a pet command
	 * @pre { }
	 * @post { }
	 * @param object player creature commanding
	 * @param unsigned long command CRC
	 * @param const string arguments
	 * @param boolean if true, uses player as target, if false uses player's target
	 */
	void enqueuePetCommand(CreatureObject* player, AiAgent* pet, unsigned int command, const String& args, bool selfTarget = false);

	/**
	 * Enqueues a pet command, player must be the pet's owner
	 * @pre { }
	 * @post { }
	 * @param object player creature commanding
	 * @param unsigned long command CRC
	 * @param const string arguments
	 */
	void enqueueOwnerOnlyPetCommand(CreatureObject* player, AiAgent* pet, unsigned int command, const String& args);

	/**
	 * Returns whether the pet has the given message trained for the command
	 */
	bool isTrainedCommand(PetControlDevice* petControlDevice, unsigned int command, const String& msg);

	/**
	 * @pre { destructor and destructedObject locked }
	 * @post { destructor and destructedObject locked }
	 */
	int notifyDestruction(TangibleObject* destructor, AiAgent* destructedObject, int condition, bool isCombatAction);

	/**
	 * Calculates the length of time that incapacitation should last. 2 minute minimum.
	 * \return Returns the number of seconds until the pet should recover from incapacitation.
	 */
	unsigned int calculateIncapacitationTimer(AiAgent* player, int condition);

	/**
	 * @pre { attacker and player locked }
	 * @post { attacker and player locked }
	 */
	void killPet(TangibleObject* attacker, AiAgent* pet, bool isCombatAction = false);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PetManager(DummyConstructorParameter* param);

	virtual ~PetManager();

	friend class PetManagerHelper;
};

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class PetManagerImplementation : public ManagedServiceImplementation, public Logger {
	ManagedReference<ZoneServer* > zoneServer;

protected:
	Vector<Reference<ValidMountScaleRange*> > validMountScaleRanges;

	Vector<Reference<MountSpeedData*> > mountSpeedData;

public:
	static const int FACTIONPET = 0;

	static const int CREATUREPET = 1;

	static const int DROIDPET = 2;

	static const short INVALIDCREATURE = 0x00;

	static const short TOOSMALL = 0x01;

	static const short TOOLARGE = 0x02;

	static const short CANBEMOUNTTRAINED = 0x03;

	unsigned static const int FOLLOW;

	unsigned static const int STORE;

	unsigned static const int ATTACK;

	unsigned static const int GUARD;

	unsigned static const int FRIEND;

	unsigned static const int FOLLOWOTHER;

	unsigned static const int TRICK1;

	unsigned static const int TRICK2;

	unsigned static const int PATROL;

	unsigned static const int FORMATION1;

	unsigned static const int FORMATION2;

	unsigned static const int SPECIAL_ATTACK1;

	unsigned static const int SPECIAL_ATTACK2;

	unsigned static const int RANGED_ATTACK;

	unsigned static const int GROUP;

	unsigned static const int STAY;

	unsigned static const int RECHARGEOTHER;

	unsigned static const int TRANSFER;

	unsigned static const int REPAIR;

	unsigned static const int THROWTRAP;

	unsigned static const int HARVEST;

	unsigned static const int GETPATROLPOINT;

	unsigned static const int CLEARPATROLPOINTS;

	PetManagerImplementation(ZoneServer* server);

	PetManagerImplementation(DummyConstructorParameter* param);

	void initialize();

	void loadLuaConfig();

	void loadValidMountScaleRanges();

	short isValidMountScale(const String& appearanceFilename, int saddleCapacity, float scale);

	short checkMountEligibility(PetControlDevice* petControlDevice, float height = -1);

	MountSpeedData* getMountSpeedData(const String& appearanceFilename);

	float getMountedRunSpeed(CreatureObject* mount);

	/**
	 * Handles chat messages to the pet
	 * @pre { }
	 * @post { }
	 * @param object player creature speaking
	 * @param object pet receiving chat
	 * @param string chat message
	 */
	void handleChat(CreatureObject* speaker, AiAgent* pet, const String& message);

protected:
	/**
	 * Handles command training
	 * @pre { }
	 * @post { }
	 * @param object player creature speaking
	 * @param object pet being trained
	 * @param string chat message
	 * @return returns true if chat came from pet's owner
	 */
	bool handleCommandTraining(CreatureObject* speaker, AiAgent* pet, const String& message);

public:
	/**
	 * Enqueues a pet command
	 * @pre { }
	 * @post { }
	 * @param object player creature commanding
	 * @param unsigned long command CRC
	 * @param const string arguments
	 * @param boolean if true, uses player as target, if false uses player's target
	 */
	void enqueuePetCommand(CreatureObject* player, AiAgent* pet, unsigned int command, const String& args, bool selfTarget = false);

	/**
	 * Enqueues a pet command, player must be the pet's owner
	 * @pre { }
	 * @post { }
	 * @param object player creature commanding
	 * @param unsigned long command CRC
	 * @param const string arguments
	 */
	void enqueueOwnerOnlyPetCommand(CreatureObject* player, AiAgent* pet, unsigned int command, const String& args);

	/**
	 * Returns whether the pet has the given message trained for the command
	 */
	bool isTrainedCommand(PetControlDevice* petControlDevice, unsigned int command, const String& msg);

	/**
	 * @pre { destructor and destructedObject locked }
	 * @post { destructor and destructedObject locked }
	 */
	int notifyDestruction(TangibleObject* destructor, AiAgent* destructedObject, int condition, bool isCombatAction);

	/**
	 * Calculates the length of time that incapacitation should last. 2 minute minimum.
	 * \return Returns the number of seconds until the pet should recover from incapacitation.
	 */
	unsigned int calculateIncapacitationTimer(AiAgent* player, int condition);

	/**
	 * @pre { attacker and player locked }
	 * @post { attacker and player locked }
	 */
	void killPet(TangibleObject* attacker, AiAgent* pet, bool isCombatAction = false);

	WeakReference<PetManager*> _this;

	operator const PetManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PetManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PetManager;
};

class PetManagerAdapter : public ManagedServiceAdapter {
public:
	PetManagerAdapter(PetManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize();

	void loadLuaConfig();

	void loadValidMountScaleRanges();

	short isValidMountScale(const String& appearanceFilename, int saddleCapacity, float scale);

	short checkMountEligibility(PetControlDevice* petControlDevice, float height);

	float getMountedRunSpeed(CreatureObject* mount);

	unsigned int calculateIncapacitationTimer(AiAgent* player, int condition);

	void killPet(TangibleObject* attacker, AiAgent* pet, bool isCombatAction);

};

class PetManagerHelper : public DistributedObjectClassHelper, public Singleton<PetManagerHelper> {
	static PetManagerHelper* staticInitializer;

public:
	PetManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PetManagerHelper>;
};

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

#endif /*PETMANAGER_H_*/
