/*
 *	autogen/server/zone/managers/creature/SpawnObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "SpawnObserver.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SpawnObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 3101886807,RPC_SETDIFFICULTY__INT_,RPC_SETSIZE__FLOAT_,RPC_GETLAIRTEMPLATENAME__,RPC_GETBABIESSPAWNED__,RPC_ISSPAWNOBSERVER__,RPC_ISLAIROBSERVER__,RPC_ISDESTROYMISSIONLAIROBSERVER__,RPC_ISTHEATERSPAWNOBSERVER__,RPC_ISDYNAMICSPAWNOBSERVER__,RPC_DESPAWNSPAWNS__};

SpawnObserver::SpawnObserver() : Observer(DummyConstructorParameter::instance()) {
	SpawnObserverImplementation* _implementation = new SpawnObserverImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SpawnObserver");
}

SpawnObserver::SpawnObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("SpawnObserver");
}

SpawnObserver::~SpawnObserver() {
}



int SpawnObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

void SpawnObserver::setLairTemplate(LairTemplate* tmpl) {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setLairTemplate(tmpl);
	}
}

void SpawnObserver::setDifficulty(int diff) {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDIFFICULTY__INT_);
		method.addSignedIntParameter(diff);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDifficulty(diff);
	}
}

void SpawnObserver::setSize(float siz) {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSIZE__FLOAT_);
		method.addFloatParameter(siz);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSize(siz);
	}
}

String SpawnObserver::getLairTemplateName() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLAIRTEMPLATENAME__);

		String _return_getLairTemplateName;
		method.executeWithAsciiReturn(_return_getLairTemplateName);
		return _return_getLairTemplateName;
	} else {
		return _implementation->getLairTemplateName();
	}
}

SynchronizedVector<ManagedReference<CreatureObject* > >* SpawnObserver::getSpawnedCreatures() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getSpawnedCreatures();
	}
}

int SpawnObserver::getBabiesSpawned() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBABIESSPAWNED__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getBabiesSpawned();
	}
}

bool SpawnObserver::isSpawnObserver() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSPAWNOBSERVER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSpawnObserver();
	}
}

bool SpawnObserver::isLairObserver() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLAIROBSERVER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isLairObserver();
	}
}

bool SpawnObserver::isDestroyMissionLairObserver() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDESTROYMISSIONLAIROBSERVER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDestroyMissionLairObserver();
	}
}

bool SpawnObserver::isTheaterSpawnObserver() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTHEATERSPAWNOBSERVER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTheaterSpawnObserver();
	}
}

bool SpawnObserver::isDynamicSpawnObserver() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDYNAMICSPAWNOBSERVER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDynamicSpawnObserver();
	}
}

void SpawnObserver::despawnSpawns() {
	SpawnObserverImplementation* _implementation = static_cast<SpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESPAWNSPAWNS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->despawnSpawns();
	}
}

DistributedObjectServant* SpawnObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SpawnObserver::_getImplementationForRead() const {
	return _impl;
}

void SpawnObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SpawnObserverImplementation
 */

SpawnObserverImplementation::SpawnObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


SpawnObserverImplementation::~SpawnObserverImplementation() {
}


void SpawnObserverImplementation::finalize() {
}

void SpawnObserverImplementation::_initializeImplementation() {
	_setClassHelper(SpawnObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SpawnObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SpawnObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* SpawnObserverImplementation::_getStub() {
	return _this.get();
}

SpawnObserverImplementation::operator const SpawnObserver*() {
	return _this.get();
}

void SpawnObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SpawnObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SpawnObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SpawnObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SpawnObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SpawnObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SpawnObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SpawnObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("SpawnObserver");

}

void SpawnObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SpawnObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SpawnObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xa10b7117: //SpawnObserver.spawnedCreatures
		TypeInfo<SynchronizedVector<ManagedReference<CreatureObject* > > >::parseFromBinaryStream(&spawnedCreatures, stream);
		return true;

	case 0x1e27adc: //SpawnObserver.difficulty
		TypeInfo<int >::parseFromBinaryStream(&difficulty, stream);
		return true;

	case 0x79d92741: //SpawnObserver.babiesSpawned
		TypeInfo<int >::parseFromBinaryStream(&babiesSpawned, stream);
		return true;

	case 0x1e3d9929: //SpawnObserver.size
		TypeInfo<float >::parseFromBinaryStream(&size, stream);
		return true;

	}

	return false;
}

void SpawnObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SpawnObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SpawnObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xa10b7117; //SpawnObserver.spawnedCreatures
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SynchronizedVector<ManagedReference<CreatureObject* > > >::toBinaryStream(&spawnedCreatures, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1e27adc; //SpawnObserver.difficulty
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&difficulty, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x79d92741; //SpawnObserver.babiesSpawned
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&babiesSpawned, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1e3d9929; //SpawnObserver.size
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&size, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 4;
}

SpawnObserverImplementation::SpawnObserverImplementation() : ObserverImplementation() {
	_initializeImplementation();
	// server/zone/managers/creature/SpawnObserver.idl():  		Logger.setLoggingName("SpawnObserver");
	Logger::setLoggingName("SpawnObserver");
	// server/zone/managers/creature/SpawnObserver.idl():  		lairTemplate = null;
	lairTemplate = NULL;
	// server/zone/managers/creature/SpawnObserver.idl():  		difficulty = 2;
	difficulty = 2;
	// server/zone/managers/creature/SpawnObserver.idl():  		babiesSpawned = 0;
	babiesSpawned = 0;
	// server/zone/managers/creature/SpawnObserver.idl():  		size = 20;
	size = 20;
}

int SpawnObserverImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/managers/creature/SpawnObserver.idl():  		return 1;
	return 1;
}

void SpawnObserverImplementation::setLairTemplate(LairTemplate* tmpl) {
	// server/zone/managers/creature/SpawnObserver.idl():  		lairTemplate = tmpl;
	lairTemplate = tmpl;
}

void SpawnObserverImplementation::setDifficulty(int diff) {
	// server/zone/managers/creature/SpawnObserver.idl():  		difficulty = diff;
	difficulty = diff;
}

void SpawnObserverImplementation::setSize(float siz) {
	// server/zone/managers/creature/SpawnObserver.idl():  		size = siz;
	size = siz;
}

String SpawnObserverImplementation::getLairTemplateName() {
	// server/zone/managers/creature/SpawnObserver.idl():  		return lairTemplate.getName();
	return lairTemplate->getName();
}

SynchronizedVector<ManagedReference<CreatureObject* > >* SpawnObserverImplementation::getSpawnedCreatures() {
	// server/zone/managers/creature/SpawnObserver.idl():  		return spawnedCreatures;
	return (&spawnedCreatures);
}

int SpawnObserverImplementation::getBabiesSpawned() {
	// server/zone/managers/creature/SpawnObserver.idl():  		return babiesSpawned;
	return babiesSpawned;
}

bool SpawnObserverImplementation::isSpawnObserver() {
	// server/zone/managers/creature/SpawnObserver.idl():  		return true;
	return true;
}

bool SpawnObserverImplementation::isLairObserver() {
	// server/zone/managers/creature/SpawnObserver.idl():  		return false;
	return false;
}

bool SpawnObserverImplementation::isDestroyMissionLairObserver() {
	// server/zone/managers/creature/SpawnObserver.idl():  		return false;
	return false;
}

bool SpawnObserverImplementation::isTheaterSpawnObserver() {
	// server/zone/managers/creature/SpawnObserver.idl():  		return false;
	return false;
}

bool SpawnObserverImplementation::isDynamicSpawnObserver() {
	// server/zone/managers/creature/SpawnObserver.idl():  		return false;
	return false;
}

/*
 *	SpawnObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SpawnObserverAdapter::SpawnObserverAdapter(SpawnObserver* obj) : ObserverAdapter(obj) {
}

void SpawnObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETDIFFICULTY__INT_:
		{
			int diff = inv->getSignedIntParameter();
			
			setDifficulty(diff);
			
		}
		break;
	case RPC_SETSIZE__FLOAT_:
		{
			float siz = inv->getFloatParameter();
			
			setSize(siz);
			
		}
		break;
	case RPC_GETLAIRTEMPLATENAME__:
		{
			
			String _m_res = getLairTemplateName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETBABIESSPAWNED__:
		{
			
			int _m_res = getBabiesSpawned();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISSPAWNOBSERVER__:
		{
			
			bool _m_res = isSpawnObserver();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISLAIROBSERVER__:
		{
			
			bool _m_res = isLairObserver();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDESTROYMISSIONLAIROBSERVER__:
		{
			
			bool _m_res = isDestroyMissionLairObserver();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTHEATERSPAWNOBSERVER__:
		{
			
			bool _m_res = isTheaterSpawnObserver();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDYNAMICSPAWNOBSERVER__:
		{
			
			bool _m_res = isDynamicSpawnObserver();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_DESPAWNSPAWNS__:
		{
			
			despawnSpawns();
			
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

int SpawnObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<SpawnObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void SpawnObserverAdapter::setDifficulty(int diff) {
	(static_cast<SpawnObserver*>(stub))->setDifficulty(diff);
}

void SpawnObserverAdapter::setSize(float siz) {
	(static_cast<SpawnObserver*>(stub))->setSize(siz);
}

String SpawnObserverAdapter::getLairTemplateName() {
	return (static_cast<SpawnObserver*>(stub))->getLairTemplateName();
}

int SpawnObserverAdapter::getBabiesSpawned() {
	return (static_cast<SpawnObserver*>(stub))->getBabiesSpawned();
}

bool SpawnObserverAdapter::isSpawnObserver() {
	return (static_cast<SpawnObserver*>(stub))->isSpawnObserver();
}

bool SpawnObserverAdapter::isLairObserver() {
	return (static_cast<SpawnObserver*>(stub))->isLairObserver();
}

bool SpawnObserverAdapter::isDestroyMissionLairObserver() {
	return (static_cast<SpawnObserver*>(stub))->isDestroyMissionLairObserver();
}

bool SpawnObserverAdapter::isTheaterSpawnObserver() {
	return (static_cast<SpawnObserver*>(stub))->isTheaterSpawnObserver();
}

bool SpawnObserverAdapter::isDynamicSpawnObserver() {
	return (static_cast<SpawnObserver*>(stub))->isDynamicSpawnObserver();
}

void SpawnObserverAdapter::despawnSpawns() {
	(static_cast<SpawnObserver*>(stub))->despawnSpawns();
}

/*
 *	SpawnObserverHelper
 */

SpawnObserverHelper* SpawnObserverHelper::staticInitializer = SpawnObserverHelper::instance();

SpawnObserverHelper::SpawnObserverHelper() {
	className = "SpawnObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void SpawnObserverHelper::finalizeHelper() {
	SpawnObserverHelper::finalize();
}

DistributedObject* SpawnObserverHelper::instantiateObject() {
	return new SpawnObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* SpawnObserverHelper::instantiateServant() {
	return new SpawnObserverImplementation();
}

DistributedObjectAdapter* SpawnObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SpawnObserverAdapter(static_cast<SpawnObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

