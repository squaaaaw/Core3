/*
 *	autogen/server/zone/managers/creature/PetManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "PetManager.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

#include "server/zone/objects/intangible/PetControlDevice.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

/*
 *	PetManagerStub
 */

unsigned const int PetManager::FOLLOW = 1;

unsigned const int PetManager::STORE = 2;

unsigned const int PetManager::ATTACK = 3;

unsigned const int PetManager::GUARD = 4;

unsigned const int PetManager::FRIEND = 5;

unsigned const int PetManager::FOLLOWOTHER = 6;

unsigned const int PetManager::TRICK1 = 7;

unsigned const int PetManager::TRICK2 = 8;

unsigned const int PetManager::PATROL = 9;

unsigned const int PetManager::FORMATION1 = 10;

unsigned const int PetManager::FORMATION2 = 11;

unsigned const int PetManager::SPECIAL_ATTACK1 = 12;

unsigned const int PetManager::SPECIAL_ATTACK2 = 13;

unsigned const int PetManager::RANGED_ATTACK = 14;

unsigned const int PetManager::GROUP = 15;

unsigned const int PetManager::STAY = 16;

unsigned const int PetManager::RECHARGEOTHER = 17;

unsigned const int PetManager::TRANSFER = 18;

unsigned const int PetManager::REPAIR = 19;

unsigned const int PetManager::THROWTRAP = 20;

unsigned const int PetManager::HARVEST = 21;

unsigned const int PetManager::GETPATROLPOINT = 22;

unsigned const int PetManager::CLEARPATROLPOINTS = 23;

enum {RPC_INITIALIZE__ = 3384801361,RPC_LOADLUACONFIG__,RPC_LOADVALIDMOUNTSCALERANGES__,RPC_ISVALIDMOUNTSCALE__STRING_INT_FLOAT_,RPC_CHECKMOUNTELIGIBILITY__PETCONTROLDEVICE_FLOAT_,RPC_GETMOUNTEDRUNSPEED__CREATUREOBJECT_,RPC_CALCULATEINCAPACITATIONTIMER__AIAGENT_INT_,RPC_KILLPET__TANGIBLEOBJECT_AIAGENT_BOOL_};

PetManager::PetManager(ZoneServer* server) : ManagedService(DummyConstructorParameter::instance()) {
	PetManagerImplementation* _implementation = new PetManagerImplementation(server);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PetManager");
}

PetManager::PetManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("PetManager");
}

PetManager::~PetManager() {
}



void PetManager::initialize() {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initialize();
	}
}

void PetManager::loadLuaConfig() {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLUACONFIG__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadLuaConfig();
	}
}

void PetManager::loadValidMountScaleRanges() {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADVALIDMOUNTSCALERANGES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadValidMountScaleRanges();
	}
}

short PetManager::isValidMountScale(const String& appearanceFilename, int saddleCapacity, float scale) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVALIDMOUNTSCALE__STRING_INT_FLOAT_);
		method.addAsciiParameter(appearanceFilename);
		method.addSignedIntParameter(saddleCapacity);
		method.addFloatParameter(scale);

		return method.executeWithSignedShortReturn();
	} else {
		return _implementation->isValidMountScale(appearanceFilename, saddleCapacity, scale);
	}
}

short PetManager::checkMountEligibility(PetControlDevice* petControlDevice, float height) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKMOUNTELIGIBILITY__PETCONTROLDEVICE_FLOAT_);
		method.addObjectParameter(petControlDevice);
		method.addFloatParameter(height);

		return method.executeWithSignedShortReturn();
	} else {
		return _implementation->checkMountEligibility(petControlDevice, height);
	}
}

MountSpeedData* PetManager::getMountSpeedData(const String& appearanceFilename) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getMountSpeedData(appearanceFilename);
	}
}

float PetManager::getMountedRunSpeed(CreatureObject* mount) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMOUNTEDRUNSPEED__CREATUREOBJECT_);
		method.addObjectParameter(mount);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getMountedRunSpeed(mount);
	}
}

void PetManager::handleChat(CreatureObject* speaker, AiAgent* pet, const String& message) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->handleChat(speaker, pet, message);
	}
}

void PetManager::enqueuePetCommand(CreatureObject* player, AiAgent* pet, unsigned int command, const String& args, bool selfTarget) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->enqueuePetCommand(player, pet, command, args, selfTarget);
	}
}

void PetManager::enqueueOwnerOnlyPetCommand(CreatureObject* player, AiAgent* pet, unsigned int command, const String& args) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->enqueueOwnerOnlyPetCommand(player, pet, command, args);
	}
}

bool PetManager::isTrainedCommand(PetControlDevice* petControlDevice, unsigned int command, const String& msg) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isTrainedCommand(petControlDevice, command, msg);
	}
}

int PetManager::notifyDestruction(TangibleObject* destructor, AiAgent* destructedObject, int condition, bool isCombatAction) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->notifyDestruction(destructor, destructedObject, condition, isCombatAction);
	}
}

unsigned int PetManager::calculateIncapacitationTimer(AiAgent* player, int condition) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEINCAPACITATIONTIMER__AIAGENT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(condition);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->calculateIncapacitationTimer(player, condition);
	}
}

void PetManager::killPet(TangibleObject* attacker, AiAgent* pet, bool isCombatAction) {
	PetManagerImplementation* _implementation = static_cast<PetManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_KILLPET__TANGIBLEOBJECT_AIAGENT_BOOL_);
		method.addObjectParameter(attacker);
		method.addObjectParameter(pet);
		method.addBooleanParameter(isCombatAction);

		method.executeWithVoidReturn();
	} else {
		_implementation->killPet(attacker, pet, isCombatAction);
	}
}

DistributedObjectServant* PetManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PetManager::_getImplementationForRead() const {
	return _impl;
}

void PetManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PetManagerImplementation
 */

unsigned const int PetManagerImplementation::FOLLOW = 1;

unsigned const int PetManagerImplementation::STORE = 2;

unsigned const int PetManagerImplementation::ATTACK = 3;

unsigned const int PetManagerImplementation::GUARD = 4;

unsigned const int PetManagerImplementation::FRIEND = 5;

unsigned const int PetManagerImplementation::FOLLOWOTHER = 6;

unsigned const int PetManagerImplementation::TRICK1 = 7;

unsigned const int PetManagerImplementation::TRICK2 = 8;

unsigned const int PetManagerImplementation::PATROL = 9;

unsigned const int PetManagerImplementation::FORMATION1 = 10;

unsigned const int PetManagerImplementation::FORMATION2 = 11;

unsigned const int PetManagerImplementation::SPECIAL_ATTACK1 = 12;

unsigned const int PetManagerImplementation::SPECIAL_ATTACK2 = 13;

unsigned const int PetManagerImplementation::RANGED_ATTACK = 14;

unsigned const int PetManagerImplementation::GROUP = 15;

unsigned const int PetManagerImplementation::STAY = 16;

unsigned const int PetManagerImplementation::RECHARGEOTHER = 17;

unsigned const int PetManagerImplementation::TRANSFER = 18;

unsigned const int PetManagerImplementation::REPAIR = 19;

unsigned const int PetManagerImplementation::THROWTRAP = 20;

unsigned const int PetManagerImplementation::HARVEST = 21;

unsigned const int PetManagerImplementation::GETPATROLPOINT = 22;

unsigned const int PetManagerImplementation::CLEARPATROLPOINTS = 23;

PetManagerImplementation::PetManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


PetManagerImplementation::~PetManagerImplementation() {
}


void PetManagerImplementation::finalize() {
}

void PetManagerImplementation::_initializeImplementation() {
	_setClassHelper(PetManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PetManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PetManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* PetManagerImplementation::_getStub() {
	return _this.get();
}

PetManagerImplementation::operator const PetManager*() {
	return _this.get();
}

void PetManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PetManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PetManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PetManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PetManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PetManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PetManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PetManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("PetManager");

}

void PetManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PetManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PetManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x45362426: //PetManager.validMountScaleRanges
		TypeInfo<Vector<Reference<ValidMountScaleRange*> > >::parseFromBinaryStream(&validMountScaleRanges, stream);
		return true;

	case 0xa88d8a62: //PetManager.mountSpeedData
		TypeInfo<Vector<Reference<MountSpeedData*> > >::parseFromBinaryStream(&mountSpeedData, stream);
		return true;

	}

	return false;
}

void PetManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PetManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PetManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x45362426; //PetManager.validMountScaleRanges
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<Reference<ValidMountScaleRange*> > >::toBinaryStream(&validMountScaleRanges, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa88d8a62; //PetManager.mountSpeedData
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<Reference<MountSpeedData*> > >::toBinaryStream(&mountSpeedData, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

PetManagerImplementation::PetManagerImplementation(ZoneServer* server) {
	_initializeImplementation();
	// server/zone/managers/creature/PetManager.idl():  		zoneServer = server;
	zoneServer = server;
	// server/zone/managers/creature/PetManager.idl():  		Logger.setLoggingName("PetManager");
	Logger::setLoggingName("PetManager");
}

void PetManagerImplementation::initialize() {
	// server/zone/managers/creature/PetManager.idl():  		loadLuaConfig();
	loadLuaConfig();
	// server/zone/managers/creature/PetManager.idl():  		loadValidMountScaleRanges();
	loadValidMountScaleRanges();
}

/*
 *	PetManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PetManagerAdapter::PetManagerAdapter(PetManager* obj) : ManagedServiceAdapter(obj) {
}

void PetManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			
			initialize();
			
		}
		break;
	case RPC_LOADLUACONFIG__:
		{
			
			loadLuaConfig();
			
		}
		break;
	case RPC_LOADVALIDMOUNTSCALERANGES__:
		{
			
			loadValidMountScaleRanges();
			
		}
		break;
	case RPC_ISVALIDMOUNTSCALE__STRING_INT_FLOAT_:
		{
			 String appearanceFilename; inv->getAsciiParameter(appearanceFilename);
			int saddleCapacity = inv->getSignedIntParameter();
			float scale = inv->getFloatParameter();
			
			short _m_res = isValidMountScale(appearanceFilename, saddleCapacity, scale);
			resp->insertSignedShort(_m_res);
		}
		break;
	case RPC_CHECKMOUNTELIGIBILITY__PETCONTROLDEVICE_FLOAT_:
		{
			PetControlDevice* petControlDevice = static_cast<PetControlDevice*>(inv->getObjectParameter());
			float height = inv->getFloatParameter();
			
			short _m_res = checkMountEligibility(petControlDevice, height);
			resp->insertSignedShort(_m_res);
		}
		break;
	case RPC_GETMOUNTEDRUNSPEED__CREATUREOBJECT_:
		{
			CreatureObject* mount = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			float _m_res = getMountedRunSpeed(mount);
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_CALCULATEINCAPACITATIONTIMER__AIAGENT_INT_:
		{
			AiAgent* player = static_cast<AiAgent*>(inv->getObjectParameter());
			int condition = inv->getSignedIntParameter();
			
			unsigned int _m_res = calculateIncapacitationTimer(player, condition);
			resp->insertInt(_m_res);
		}
		break;
	case RPC_KILLPET__TANGIBLEOBJECT_AIAGENT_BOOL_:
		{
			TangibleObject* attacker = static_cast<TangibleObject*>(inv->getObjectParameter());
			AiAgent* pet = static_cast<AiAgent*>(inv->getObjectParameter());
			bool isCombatAction = inv->getBooleanParameter();
			
			killPet(attacker, pet, isCombatAction);
			
		}
		break;
	default:
		ManagedServiceAdapter::invokeMethod(methid, inv);
	}
}

void PetManagerAdapter::initialize() {
	(static_cast<PetManager*>(stub))->initialize();
}

void PetManagerAdapter::loadLuaConfig() {
	(static_cast<PetManager*>(stub))->loadLuaConfig();
}

void PetManagerAdapter::loadValidMountScaleRanges() {
	(static_cast<PetManager*>(stub))->loadValidMountScaleRanges();
}

short PetManagerAdapter::isValidMountScale(const String& appearanceFilename, int saddleCapacity, float scale) {
	return (static_cast<PetManager*>(stub))->isValidMountScale(appearanceFilename, saddleCapacity, scale);
}

short PetManagerAdapter::checkMountEligibility(PetControlDevice* petControlDevice, float height) {
	return (static_cast<PetManager*>(stub))->checkMountEligibility(petControlDevice, height);
}

float PetManagerAdapter::getMountedRunSpeed(CreatureObject* mount) {
	return (static_cast<PetManager*>(stub))->getMountedRunSpeed(mount);
}

unsigned int PetManagerAdapter::calculateIncapacitationTimer(AiAgent* player, int condition) {
	return (static_cast<PetManager*>(stub))->calculateIncapacitationTimer(player, condition);
}

void PetManagerAdapter::killPet(TangibleObject* attacker, AiAgent* pet, bool isCombatAction) {
	(static_cast<PetManager*>(stub))->killPet(attacker, pet, isCombatAction);
}

/*
 *	PetManagerHelper
 */

PetManagerHelper* PetManagerHelper::staticInitializer = PetManagerHelper::instance();

PetManagerHelper::PetManagerHelper() {
	className = "PetManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void PetManagerHelper::finalizeHelper() {
	PetManagerHelper::finalize();
}

DistributedObject* PetManagerHelper::instantiateObject() {
	return new PetManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* PetManagerHelper::instantiateServant() {
	return new PetManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PetManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PetManagerAdapter(static_cast<PetManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

