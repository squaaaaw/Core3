/*
 *	autogen/server/zone/managers/creature/DynamicSpawnObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "DynamicSpawnObserver.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	DynamicSpawnObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 606947208,RPC_SPAWNINITIALMOBILES__SCENEOBJECT_,RPC_ISTHEATERSPAWNOBSERVER__,RPC_ISDYNAMICSPAWNOBSERVER__};

DynamicSpawnObserver::DynamicSpawnObserver() : SpawnObserver(DummyConstructorParameter::instance()) {
	DynamicSpawnObserverImplementation* _implementation = new DynamicSpawnObserverImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DynamicSpawnObserver");
}

DynamicSpawnObserver::DynamicSpawnObserver(DummyConstructorParameter* param) : SpawnObserver(param) {
	_setClassName("DynamicSpawnObserver");
}

DynamicSpawnObserver::~DynamicSpawnObserver() {
}



int DynamicSpawnObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	DynamicSpawnObserverImplementation* _implementation = static_cast<DynamicSpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

void DynamicSpawnObserver::spawnInitialMobiles(SceneObject* building) {
	DynamicSpawnObserverImplementation* _implementation = static_cast<DynamicSpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SPAWNINITIALMOBILES__SCENEOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else {
		assert((building == NULL) || building->isLockedByCurrentThread());
		_implementation->spawnInitialMobiles(building);
	}
}

bool DynamicSpawnObserver::isTheaterSpawnObserver() {
	DynamicSpawnObserverImplementation* _implementation = static_cast<DynamicSpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTHEATERSPAWNOBSERVER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTheaterSpawnObserver();
	}
}

bool DynamicSpawnObserver::isDynamicSpawnObserver() {
	DynamicSpawnObserverImplementation* _implementation = static_cast<DynamicSpawnObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDYNAMICSPAWNOBSERVER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDynamicSpawnObserver();
	}
}

DistributedObjectServant* DynamicSpawnObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* DynamicSpawnObserver::_getImplementationForRead() const {
	return _impl;
}

void DynamicSpawnObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DynamicSpawnObserverImplementation
 */

DynamicSpawnObserverImplementation::DynamicSpawnObserverImplementation(DummyConstructorParameter* param) : SpawnObserverImplementation(param) {
	_initializeImplementation();
}


DynamicSpawnObserverImplementation::~DynamicSpawnObserverImplementation() {
}


void DynamicSpawnObserverImplementation::finalize() {
}

void DynamicSpawnObserverImplementation::_initializeImplementation() {
	_setClassHelper(DynamicSpawnObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DynamicSpawnObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DynamicSpawnObserver*>(stub);
	SpawnObserverImplementation::_setStub(stub);
}

DistributedObjectStub* DynamicSpawnObserverImplementation::_getStub() {
	return _this.get();
}

DynamicSpawnObserverImplementation::operator const DynamicSpawnObserver*() {
	return _this.get();
}

void DynamicSpawnObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void DynamicSpawnObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void DynamicSpawnObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void DynamicSpawnObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void DynamicSpawnObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void DynamicSpawnObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void DynamicSpawnObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void DynamicSpawnObserverImplementation::_serializationHelperMethod() {
	SpawnObserverImplementation::_serializationHelperMethod();

	_setClassName("DynamicSpawnObserver");

}

void DynamicSpawnObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DynamicSpawnObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DynamicSpawnObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SpawnObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void DynamicSpawnObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DynamicSpawnObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DynamicSpawnObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SpawnObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

DynamicSpawnObserverImplementation::DynamicSpawnObserverImplementation() : SpawnObserverImplementation() {
	_initializeImplementation();
	// server/zone/managers/creature/DynamicSpawnObserver.idl():  		Logger.setLoggingName("DynamicSpawnObserver");
	Logger::setLoggingName("DynamicSpawnObserver");
}

bool DynamicSpawnObserverImplementation::isTheaterSpawnObserver() {
	// server/zone/managers/creature/DynamicSpawnObserver.idl():  		return super.lairTemplate.getBuildingType() == LairTemplate.THEATER;
	return SpawnObserverImplementation::lairTemplate->getBuildingType() == LairTemplate::THEATER;
}

bool DynamicSpawnObserverImplementation::isDynamicSpawnObserver() {
	// server/zone/managers/creature/DynamicSpawnObserver.idl():  		return super.lairTemplate.getBuildingType() == LairTemplate.NONE;
	return SpawnObserverImplementation::lairTemplate->getBuildingType() == LairTemplate::NONE;
}

/*
 *	DynamicSpawnObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DynamicSpawnObserverAdapter::DynamicSpawnObserverAdapter(DynamicSpawnObserver* obj) : SpawnObserverAdapter(obj) {
}

void DynamicSpawnObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SPAWNINITIALMOBILES__SCENEOBJECT_:
		{
			SceneObject* building = static_cast<SceneObject*>(inv->getObjectParameter());
			
			spawnInitialMobiles(building);
			
		}
		break;
	case RPC_ISTHEATERSPAWNOBSERVER__:
		{
			
			bool _m_res = isTheaterSpawnObserver();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDYNAMICSPAWNOBSERVER__:
		{
			
			bool _m_res = isDynamicSpawnObserver();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		SpawnObserverAdapter::invokeMethod(methid, inv);
	}
}

int DynamicSpawnObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<DynamicSpawnObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void DynamicSpawnObserverAdapter::spawnInitialMobiles(SceneObject* building) {
	(static_cast<DynamicSpawnObserver*>(stub))->spawnInitialMobiles(building);
}

bool DynamicSpawnObserverAdapter::isTheaterSpawnObserver() {
	return (static_cast<DynamicSpawnObserver*>(stub))->isTheaterSpawnObserver();
}

bool DynamicSpawnObserverAdapter::isDynamicSpawnObserver() {
	return (static_cast<DynamicSpawnObserver*>(stub))->isDynamicSpawnObserver();
}

/*
 *	DynamicSpawnObserverHelper
 */

DynamicSpawnObserverHelper* DynamicSpawnObserverHelper::staticInitializer = DynamicSpawnObserverHelper::instance();

DynamicSpawnObserverHelper::DynamicSpawnObserverHelper() {
	className = "DynamicSpawnObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void DynamicSpawnObserverHelper::finalizeHelper() {
	DynamicSpawnObserverHelper::finalize();
}

DistributedObject* DynamicSpawnObserverHelper::instantiateObject() {
	return new DynamicSpawnObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* DynamicSpawnObserverHelper::instantiateServant() {
	return new DynamicSpawnObserverImplementation();
}

DistributedObjectAdapter* DynamicSpawnObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DynamicSpawnObserverAdapter(static_cast<DynamicSpawnObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

