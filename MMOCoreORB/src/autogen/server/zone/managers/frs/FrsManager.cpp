/*
 *	autogen/server/zone/managers/frs/FrsManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "FrsManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/frs/RankMaintenanceTask.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	FrsManagerStub
 */

enum {RPC_INITIALIZE__ = 2717747282,RPC_LOADLUACONFIG__,RPC_SETUPENCLAVES__,RPC_SETUPENCLAVEROOMS__BUILDINGOBJECT_STRING_,RPC_SETPLAYERRANK__CREATUREOBJECT_INT_,RPC_UPDATEPLAYERSKILLS__CREATUREOBJECT_,RPC_DEMOTEPLAYER__CREATUREOBJECT_,RPC_PROMOTEPLAYER__CREATUREOBJECT_,RPC_ADJUSTFRSEXPERIENCE__CREATUREOBJECT_INT_,RPC_DEDUCTMAINTENANCEXP__CREATUREOBJECT_,RPC_ADDEXPERIENCEDEBT__CREATUREOBJECT_INT_,RPC_ISVALIDFRSBATTLE__CREATUREOBJECT_CREATUREOBJECT_,RPC_CALCULATEPVPEXPERIENCECHANGE__CREATUREOBJECT_CREATUREOBJECT_FLOAT_BOOL_,RPC_GETBASEEXPERIENCEGAIN__PLAYEROBJECT_PLAYEROBJECT_BOOL_,RPC_DEDUCTDEBTEXPERIENCE__CREATUREOBJECT_,RPC_GETROOMREQUIREMENT__LONG_,RPC_GETMAINTENANCEINTERVAL__,RPC_GETZONESERVER__,RPC_UPDATELASTMAINTENANCE__,RPC_ISFRSENABLED__};

FrsManager::FrsManager(ZoneServer* zserv) : ManagedService(DummyConstructorParameter::instance()) {
	FrsManagerImplementation* _implementation = new FrsManagerImplementation(zserv);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FrsManager");
}

FrsManager::FrsManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("FrsManager");
}

FrsManager::~FrsManager() {
}



void FrsManager::initialize() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initialize();
	}
}

void FrsManager::loadLuaConfig() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLUACONFIG__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadLuaConfig();
	}
}

void FrsManager::setupEnclaves() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUPENCLAVES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setupEnclaves();
	}
}

void FrsManager::setupEnclaveRooms(BuildingObject* enclaveBuilding, const String& groupName) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUPENCLAVEROOMS__BUILDINGOBJECT_STRING_);
		method.addObjectParameter(enclaveBuilding);
		method.addAsciiParameter(groupName);

		method.executeWithVoidReturn();
	} else {
		_implementation->setupEnclaveRooms(enclaveBuilding, groupName);
	}
}

Vector<unsigned long long> FrsManager::getFullPlayerList() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getFullPlayerList();
	}
}

void FrsManager::setPlayerRank(CreatureObject* player, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPLAYERRANK__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->setPlayerRank(player, rank);
	}
}

void FrsManager::updatePlayerSkills(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEPLAYERSKILLS__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->updatePlayerSkills(player);
	}
}

void FrsManager::demotePlayer(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEMOTEPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->demotePlayer(player);
	}
}

void FrsManager::promotePlayer(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMOTEPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->promotePlayer(player);
	}
}

void FrsManager::adjustFrsExperience(CreatureObject* player, int amount) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADJUSTFRSEXPERIENCE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->adjustFrsExperience(player, amount);
	}
}

void FrsManager::deductMaintenanceXp(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEDUCTMAINTENANCEXP__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->deductMaintenanceXp(player);
	}
}

void FrsManager::addExperienceDebt(CreatureObject* player, int amount) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDEXPERIENCEDEBT__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else {
		_implementation->addExperienceDebt(player, amount);
	}
}

bool FrsManager::isValidFrsBattle(CreatureObject* attacker, CreatureObject* victim) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVALIDFRSBATTLE__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(attacker);
		method.addObjectParameter(victim);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isValidFrsBattle(attacker, victim);
	}
}

int FrsManager::calculatePvpExperienceChange(CreatureObject* attacker, CreatureObject* victim, float contribution, bool isVictim) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEPVPEXPERIENCECHANGE__CREATUREOBJECT_CREATUREOBJECT_FLOAT_BOOL_);
		method.addObjectParameter(attacker);
		method.addObjectParameter(victim);
		method.addFloatParameter(contribution);
		method.addBooleanParameter(isVictim);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->calculatePvpExperienceChange(attacker, victim, contribution, isVictim);
	}
}

int FrsManager::getBaseExperienceGain(PlayerObject* playerGhost, PlayerObject* opponentGhost, bool playerWon) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBASEEXPERIENCEGAIN__PLAYEROBJECT_PLAYEROBJECT_BOOL_);
		method.addObjectParameter(playerGhost);
		method.addObjectParameter(opponentGhost);
		method.addBooleanParameter(playerWon);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getBaseExperienceGain(playerGhost, opponentGhost, playerWon);
	}
}

void FrsManager::deductDebtExperience(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEDUCTDEBTEXPERIENCE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->deductDebtExperience(player);
	}
}

int FrsManager::getRoomRequirement(unsigned long long cellID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOMREQUIREMENT__LONG_);
		method.addUnsignedLongParameter(cellID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRoomRequirement(cellID);
	}
}

int FrsManager::getMaintenanceInterval() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAINTENANCEINTERVAL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMaintenanceInterval();
	}
}

ZoneServer* FrsManager::getZoneServer() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONESERVER__);

		return static_cast<ZoneServer*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getZoneServer();
	}
}

void FrsManager::updateLastMaintenance() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELASTMAINTENANCE__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateLastMaintenance();
	}
}

bool FrsManager::isFrsEnabled() const {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFRSENABLED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFrsEnabled();
	}
}

DistributedObjectServant* FrsManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FrsManager::_getImplementationForRead() const {
	return _impl;
}

void FrsManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FrsManagerImplementation
 */

FrsManagerImplementation::FrsManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


FrsManagerImplementation::~FrsManagerImplementation() {
}


void FrsManagerImplementation::finalize() {
}

void FrsManagerImplementation::_initializeImplementation() {
	_setClassHelper(FrsManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FrsManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FrsManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* FrsManagerImplementation::_getStub() {
	return _this.get();
}

FrsManagerImplementation::operator const FrsManager*() {
	return _this.get();
}

void FrsManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FrsManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FrsManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FrsManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FrsManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FrsManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FrsManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FrsManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("FrsManager");

}

void FrsManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FrsManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FrsManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xa3b00f8a: //FrsManager.lastMaintenanceTime
		TypeInfo<Time >::parseFromBinaryStream(&lastMaintenanceTime, stream);
		return true;

	case 0x46c5c52e: //FrsManager.lightEnclave
		TypeInfo<ManagedWeakReference<BuildingObject* > >::parseFromBinaryStream(&lightEnclave, stream);
		return true;

	case 0x99e5e6e4: //FrsManager.darkEnclave
		TypeInfo<ManagedWeakReference<BuildingObject* > >::parseFromBinaryStream(&darkEnclave, stream);
		return true;

	case 0xfe56eabb: //FrsManager.lightRankedMembers
		TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&lightRankedMembers, stream);
		return true;

	case 0xbb33ea03: //FrsManager.darkRankedMembers
		TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&darkRankedMembers, stream);
		return true;

	case 0x31d48235: //FrsManager.experienceDebt
		TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&experienceDebt, stream);
		return true;

	}

	return false;
}

void FrsManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FrsManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FrsManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xa3b00f8a; //FrsManager.lastMaintenanceTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastMaintenanceTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x46c5c52e; //FrsManager.lightEnclave
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<BuildingObject* > >::toBinaryStream(&lightEnclave, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x99e5e6e4; //FrsManager.darkEnclave
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<BuildingObject* > >::toBinaryStream(&darkEnclave, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfe56eabb; //FrsManager.lightRankedMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&lightRankedMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbb33ea03; //FrsManager.darkRankedMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&darkRankedMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x31d48235; //FrsManager.experienceDebt
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&experienceDebt, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 6;
}

FrsManagerImplementation::FrsManagerImplementation(ZoneServer* zserv) {
	_initializeImplementation();
	// server/zone/managers/frs/FrsManager.idl():  		Logger.setLoggingName("FrsManager");
	Logger::setLoggingName("FrsManager");
	// server/zone/managers/frs/FrsManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/frs/FrsManager.idl():  		zoneServer = zserv;
	zoneServer = zserv;
	// server/zone/managers/frs/FrsManager.idl():  		rankMaintenanceTask = null;
	rankMaintenanceTask = NULL;
	// server/zone/managers/frs/FrsManager.idl():  		frsEnabled = false;
	frsEnabled = false;
	// server/zone/managers/frs/FrsManager.idl():  		lightEnclave = null;
	lightEnclave = NULL;
	// server/zone/managers/frs/FrsManager.idl():  		darkEnclave = null;
	darkEnclave = NULL;
	// server/zone/managers/frs/FrsManager.idl():  		petitionInterval = 0;
	petitionInterval = 0;
	// server/zone/managers/frs/FrsManager.idl():  		votingInterval = 0;
	votingInterval = 0;
	// server/zone/managers/frs/FrsManager.idl():  		acceptanceInterval = 0;
	acceptanceInterval = 0;
	// server/zone/managers/frs/FrsManager.idl():  		maintenanceInterval = 0;
	maintenanceInterval = 0;
	// server/zone/managers/frs/FrsManager.idl():  		requestDemotionDuration = 0;
	requestDemotionDuration = 0;
	// server/zone/managers/frs/FrsManager.idl():  		voteChallengeDuration = 0;
	voteChallengeDuration = 0;
	// server/zone/managers/frs/FrsManager.idl():  		baseMaintCost = 0;
	baseMaintCost = 0;
	// server/zone/managers/frs/FrsManager.idl():  		requestDemotionCost = 0;
	requestDemotionCost = 0;
	// server/zone/managers/frs/FrsManager.idl():  		voteChallengeCost = 0;
	voteChallengeCost = 0;
	// server/zone/managers/frs/FrsManager.idl():  		maxPetitioners = 0;
	maxPetitioners = 0;
	// server/zone/managers/frs/FrsManager.idl():  		missedVotePenalty = 0;
	missedVotePenalty = 0;
	// server/zone/managers/frs/FrsManager.idl():  		experienceDebt.setNoDuplicateInsertPlan();
	(&experienceDebt)->setNoDuplicateInsertPlan();
}

int FrsManagerImplementation::getRoomRequirement(unsigned long long cellID) {
	// server/zone/managers/frs/FrsManager.idl():  		return 
	if ((&roomRequirements)->contains(cellID))	// server/zone/managers/frs/FrsManager.idl():  			return roomRequirements.get(cellID);
	return (&roomRequirements)->get(cellID);
	// server/zone/managers/frs/FrsManager.idl():  		return 0;
	return 0;
}

int FrsManagerImplementation::getMaintenanceInterval() {
	// server/zone/managers/frs/FrsManager.idl():  		return maintenanceInterval;
	return maintenanceInterval;
}

ZoneServer* FrsManagerImplementation::getZoneServer() {
	// server/zone/managers/frs/FrsManager.idl():  		return zoneServer;
	return zoneServer;
}

void FrsManagerImplementation::updateLastMaintenance() {
	// server/zone/managers/frs/FrsManager.idl():  		lastMaintenanceTime.updateToCurrentTime();
	(&lastMaintenanceTime)->updateToCurrentTime();
}

bool FrsManagerImplementation::isFrsEnabled() const{
	// server/zone/managers/frs/FrsManager.idl():  		return frsEnabled;
	return frsEnabled;
}

/*
 *	FrsManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FrsManagerAdapter::FrsManagerAdapter(FrsManager* obj) : ManagedServiceAdapter(obj) {
}

void FrsManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			
			initialize();
			
		}
		break;
	case RPC_LOADLUACONFIG__:
		{
			
			loadLuaConfig();
			
		}
		break;
	case RPC_SETUPENCLAVES__:
		{
			
			setupEnclaves();
			
		}
		break;
	case RPC_SETUPENCLAVEROOMS__BUILDINGOBJECT_STRING_:
		{
			BuildingObject* enclaveBuilding = static_cast<BuildingObject*>(inv->getObjectParameter());
			 String groupName; inv->getAsciiParameter(groupName);
			
			setupEnclaveRooms(enclaveBuilding, groupName);
			
		}
		break;
	case RPC_SETPLAYERRANK__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int rank = inv->getSignedIntParameter();
			
			setPlayerRank(player, rank);
			
		}
		break;
	case RPC_UPDATEPLAYERSKILLS__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			updatePlayerSkills(player);
			
		}
		break;
	case RPC_DEMOTEPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			demotePlayer(player);
			
		}
		break;
	case RPC_PROMOTEPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			promotePlayer(player);
			
		}
		break;
	case RPC_ADJUSTFRSEXPERIENCE__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int amount = inv->getSignedIntParameter();
			
			adjustFrsExperience(player, amount);
			
		}
		break;
	case RPC_DEDUCTMAINTENANCEXP__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			deductMaintenanceXp(player);
			
		}
		break;
	case RPC_ADDEXPERIENCEDEBT__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int amount = inv->getSignedIntParameter();
			
			addExperienceDebt(player, amount);
			
		}
		break;
	case RPC_ISVALIDFRSBATTLE__CREATUREOBJECT_CREATUREOBJECT_:
		{
			CreatureObject* attacker = static_cast<CreatureObject*>(inv->getObjectParameter());
			CreatureObject* victim = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isValidFrsBattle(attacker, victim);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CALCULATEPVPEXPERIENCECHANGE__CREATUREOBJECT_CREATUREOBJECT_FLOAT_BOOL_:
		{
			CreatureObject* attacker = static_cast<CreatureObject*>(inv->getObjectParameter());
			CreatureObject* victim = static_cast<CreatureObject*>(inv->getObjectParameter());
			float contribution = inv->getFloatParameter();
			bool isVictim = inv->getBooleanParameter();
			
			int _m_res = calculatePvpExperienceChange(attacker, victim, contribution, isVictim);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETBASEEXPERIENCEGAIN__PLAYEROBJECT_PLAYEROBJECT_BOOL_:
		{
			PlayerObject* playerGhost = static_cast<PlayerObject*>(inv->getObjectParameter());
			PlayerObject* opponentGhost = static_cast<PlayerObject*>(inv->getObjectParameter());
			bool playerWon = inv->getBooleanParameter();
			
			int _m_res = getBaseExperienceGain(playerGhost, opponentGhost, playerWon);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_DEDUCTDEBTEXPERIENCE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			deductDebtExperience(player);
			
		}
		break;
	case RPC_GETROOMREQUIREMENT__LONG_:
		{
			unsigned long long cellID = inv->getUnsignedLongParameter();
			
			int _m_res = getRoomRequirement(cellID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMAINTENANCEINTERVAL__:
		{
			
			int _m_res = getMaintenanceInterval();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETZONESERVER__:
		{
			
			DistributedObject* _m_res = getZoneServer();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_UPDATELASTMAINTENANCE__:
		{
			
			updateLastMaintenance();
			
		}
		break;
	case RPC_ISFRSENABLED__:
		{
			
			bool _m_res = isFrsEnabled();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		ManagedServiceAdapter::invokeMethod(methid, inv);
	}
}

void FrsManagerAdapter::initialize() {
	(static_cast<FrsManager*>(stub))->initialize();
}

void FrsManagerAdapter::loadLuaConfig() {
	(static_cast<FrsManager*>(stub))->loadLuaConfig();
}

void FrsManagerAdapter::setupEnclaves() {
	(static_cast<FrsManager*>(stub))->setupEnclaves();
}

void FrsManagerAdapter::setupEnclaveRooms(BuildingObject* enclaveBuilding, const String& groupName) {
	(static_cast<FrsManager*>(stub))->setupEnclaveRooms(enclaveBuilding, groupName);
}

void FrsManagerAdapter::setPlayerRank(CreatureObject* player, int rank) {
	(static_cast<FrsManager*>(stub))->setPlayerRank(player, rank);
}

void FrsManagerAdapter::updatePlayerSkills(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->updatePlayerSkills(player);
}

void FrsManagerAdapter::demotePlayer(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->demotePlayer(player);
}

void FrsManagerAdapter::promotePlayer(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->promotePlayer(player);
}

void FrsManagerAdapter::adjustFrsExperience(CreatureObject* player, int amount) {
	(static_cast<FrsManager*>(stub))->adjustFrsExperience(player, amount);
}

void FrsManagerAdapter::deductMaintenanceXp(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->deductMaintenanceXp(player);
}

void FrsManagerAdapter::addExperienceDebt(CreatureObject* player, int amount) {
	(static_cast<FrsManager*>(stub))->addExperienceDebt(player, amount);
}

bool FrsManagerAdapter::isValidFrsBattle(CreatureObject* attacker, CreatureObject* victim) {
	return (static_cast<FrsManager*>(stub))->isValidFrsBattle(attacker, victim);
}

int FrsManagerAdapter::calculatePvpExperienceChange(CreatureObject* attacker, CreatureObject* victim, float contribution, bool isVictim) {
	return (static_cast<FrsManager*>(stub))->calculatePvpExperienceChange(attacker, victim, contribution, isVictim);
}

int FrsManagerAdapter::getBaseExperienceGain(PlayerObject* playerGhost, PlayerObject* opponentGhost, bool playerWon) {
	return (static_cast<FrsManager*>(stub))->getBaseExperienceGain(playerGhost, opponentGhost, playerWon);
}

void FrsManagerAdapter::deductDebtExperience(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->deductDebtExperience(player);
}

int FrsManagerAdapter::getRoomRequirement(unsigned long long cellID) {
	return (static_cast<FrsManager*>(stub))->getRoomRequirement(cellID);
}

int FrsManagerAdapter::getMaintenanceInterval() {
	return (static_cast<FrsManager*>(stub))->getMaintenanceInterval();
}

ZoneServer* FrsManagerAdapter::getZoneServer() {
	return (static_cast<FrsManager*>(stub))->getZoneServer();
}

void FrsManagerAdapter::updateLastMaintenance() {
	(static_cast<FrsManager*>(stub))->updateLastMaintenance();
}

bool FrsManagerAdapter::isFrsEnabled() const {
	return (static_cast<FrsManager*>(stub))->isFrsEnabled();
}

/*
 *	FrsManagerHelper
 */

FrsManagerHelper* FrsManagerHelper::staticInitializer = FrsManagerHelper::instance();

FrsManagerHelper::FrsManagerHelper() {
	className = "FrsManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void FrsManagerHelper::finalizeHelper() {
	FrsManagerHelper::finalize();
}

DistributedObject* FrsManagerHelper::instantiateObject() {
	return new FrsManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* FrsManagerHelper::instantiateServant() {
	return new FrsManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FrsManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FrsManagerAdapter(static_cast<FrsManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

