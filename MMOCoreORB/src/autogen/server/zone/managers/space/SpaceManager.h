/*
 *	autogen/server/zone/managers/space/SpaceManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef SPACEMANAGER_H_
#define SPACEMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "server/zone/managers/planet/PlanetManager.h"

namespace server {
namespace zone {
namespace managers {
namespace space {

class SpaceManager : public PlanetManager {
public:
	SpaceManager(Zone* planet, ZoneProcessServer* srv);

	void initialize();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	SpaceManager(DummyConstructorParameter* param);

	virtual ~SpaceManager();

	friend class SpaceManagerHelper;
};

} // namespace space
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::space;

namespace server {
namespace zone {
namespace managers {
namespace space {

class SpaceManagerImplementation : public PlanetManagerImplementation {

public:
	SpaceManagerImplementation(Zone* planet, ZoneProcessServer* srv);

	SpaceManagerImplementation(DummyConstructorParameter* param);

	void initialize();

	WeakReference<SpaceManager*> _this;

	operator const SpaceManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~SpaceManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class SpaceManager;
};

class SpaceManagerAdapter : public PlanetManagerAdapter {
public:
	SpaceManagerAdapter(SpaceManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize();

};

class SpaceManagerHelper : public DistributedObjectClassHelper, public Singleton<SpaceManagerHelper> {
	static SpaceManagerHelper* staticInitializer;

public:
	SpaceManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SpaceManagerHelper>;
};

} // namespace space
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::space;

#endif /*SPACEMANAGER_H_*/
