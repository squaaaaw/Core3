/*
 *	autogen/server/zone/managers/space/SpaceManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "SpaceManager.h"

/*
 *	SpaceManagerStub
 */

enum {RPC_INITIALIZE__ = 2642248795};

SpaceManager::SpaceManager(Zone* planet, ZoneProcessServer* srv) : PlanetManager(DummyConstructorParameter::instance()) {
	SpaceManagerImplementation* _implementation = new SpaceManagerImplementation(planet, srv);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SpaceManager");
}

SpaceManager::SpaceManager(DummyConstructorParameter* param) : PlanetManager(param) {
	_setClassName("SpaceManager");
}

SpaceManager::~SpaceManager() {
}



void SpaceManager::initialize() {
	SpaceManagerImplementation* _implementation = static_cast<SpaceManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initialize();
	}
}

DistributedObjectServant* SpaceManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SpaceManager::_getImplementationForRead() const {
	return _impl;
}

void SpaceManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SpaceManagerImplementation
 */

SpaceManagerImplementation::SpaceManagerImplementation(DummyConstructorParameter* param) : PlanetManagerImplementation(param) {
	_initializeImplementation();
}


SpaceManagerImplementation::~SpaceManagerImplementation() {
}


void SpaceManagerImplementation::finalize() {
}

void SpaceManagerImplementation::_initializeImplementation() {
	_setClassHelper(SpaceManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SpaceManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SpaceManager*>(stub);
	PlanetManagerImplementation::_setStub(stub);
}

DistributedObjectStub* SpaceManagerImplementation::_getStub() {
	return _this.get();
}

SpaceManagerImplementation::operator const SpaceManager*() {
	return _this.get();
}

void SpaceManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SpaceManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SpaceManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SpaceManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SpaceManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SpaceManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SpaceManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SpaceManagerImplementation::_serializationHelperMethod() {
	PlanetManagerImplementation::_serializationHelperMethod();

	_setClassName("SpaceManager");

}

void SpaceManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SpaceManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SpaceManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (PlanetManagerImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void SpaceManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SpaceManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SpaceManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = PlanetManagerImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

SpaceManagerImplementation::SpaceManagerImplementation(Zone* planet, ZoneProcessServer* srv) : PlanetManagerImplementation(planet, srv) {
	_initializeImplementation();
	// server/zone/managers/space/SpaceManager.idl():  		Logger.setLoggingName("SpaceManager " + planet.getZoneName());
	Logger::setLoggingName("SpaceManager " + planet->getZoneName());
	// server/zone/managers/space/SpaceManager.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/managers/space/SpaceManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

void SpaceManagerImplementation::initialize() {
	// server/zone/managers/space/SpaceManager.idl():  		Logger.info("loading space manager " + super.zone.getZoneName());
	Logger::info("loading space manager " + PlanetManagerImplementation::zone.getForUpdate()->getZoneName());
}

/*
 *	SpaceManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SpaceManagerAdapter::SpaceManagerAdapter(SpaceManager* obj) : PlanetManagerAdapter(obj) {
}

void SpaceManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			
			initialize();
			
		}
		break;
	default:
		PlanetManagerAdapter::invokeMethod(methid, inv);
	}
}

void SpaceManagerAdapter::initialize() {
	(static_cast<SpaceManager*>(stub))->initialize();
}

/*
 *	SpaceManagerHelper
 */

SpaceManagerHelper* SpaceManagerHelper::staticInitializer = SpaceManagerHelper::instance();

SpaceManagerHelper::SpaceManagerHelper() {
	className = "SpaceManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void SpaceManagerHelper::finalizeHelper() {
	SpaceManagerHelper::finalize();
}

DistributedObject* SpaceManagerHelper::instantiateObject() {
	return new SpaceManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* SpaceManagerHelper::instantiateServant() {
	return new SpaceManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SpaceManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SpaceManagerAdapter(static_cast<SpaceManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

