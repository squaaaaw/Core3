/*
 *	autogen/server/zone/objects/installation/harvester/HarvesterObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "HarvesterObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

/*
 *	HarvesterObjectStub
 */

enum {RPC_SETSELFPOWERED__BOOL_ = 3970078830,RPC_ISSELFPOWERED__,RPC_GETBASEPOWERRATE__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_,RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_,RPC_UPDATEOPERATORS__,RPC_ISHARVESTEROBJECT__,RPC_GETREDEEDMESSAGE__,};

HarvesterObject::HarvesterObject() : InstallationObject(DummyConstructorParameter::instance()) {
	HarvesterObjectImplementation* _implementation = new HarvesterObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("HarvesterObject");
}

HarvesterObject::HarvesterObject(DummyConstructorParameter* param) : InstallationObject(param) {
	_setClassName("HarvesterObject");
}

HarvesterObject::~HarvesterObject() {
}



void HarvesterObject::setSelfPowered(bool isSelfPowered) {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSELFPOWERED__BOOL_);
		method.addBooleanParameter(isSelfPowered);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setSelfPowered(isSelfPowered);
	}
}

bool HarvesterObject::isSelfPowered() {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSELFPOWERED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSelfPowered();
	}
}

int HarvesterObject::getBasePowerRate() {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBASEPOWERRATE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getBasePowerRate();
	}
}

void HarvesterObject::loadTemplateData(SharedObjectTemplate* templateData) {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void HarvesterObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

int HarvesterObject::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void HarvesterObject::synchronizedUIListen(CreatureObject* player, int value) {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->synchronizedUIListen(player, value);
	}
}

void HarvesterObject::synchronizedUIStopListen(CreatureObject* player, int value) {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->synchronizedUIStopListen(player, value);
	}
}

void HarvesterObject::updateOperators() {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEOPERATORS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateOperators();
	}
}

bool HarvesterObject::isHarvesterObject() {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISHARVESTEROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isHarvesterObject();
	}
}

String HarvesterObject::getRedeedMessage() {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREDEEDMESSAGE__);

		String _return_getRedeedMessage;
		method.executeWithAsciiReturn(_return_getRedeedMessage);
		return _return_getRedeedMessage;
	} else {
		return _implementation->getRedeedMessage();
	}
}

void HarvesterObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	HarvesterObjectImplementation* _implementation = static_cast<HarvesterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

DistributedObjectServant* HarvesterObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* HarvesterObject::_getImplementationForRead() const {
	return _impl;
}

void HarvesterObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	HarvesterObjectImplementation
 */

HarvesterObjectImplementation::HarvesterObjectImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}


HarvesterObjectImplementation::~HarvesterObjectImplementation() {
}


void HarvesterObjectImplementation::finalize() {
}

void HarvesterObjectImplementation::_initializeImplementation() {
	_setClassHelper(HarvesterObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void HarvesterObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<HarvesterObject*>(stub);
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* HarvesterObjectImplementation::_getStub() {
	return _this.get();
}

HarvesterObjectImplementation::operator const HarvesterObject*() {
	return _this.get();
}

void HarvesterObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void HarvesterObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void HarvesterObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void HarvesterObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void HarvesterObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void HarvesterObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void HarvesterObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void HarvesterObjectImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("HarvesterObject");

}

void HarvesterObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(HarvesterObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool HarvesterObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (InstallationObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x72f310e8: //HarvesterObject.selfPowered
		TypeInfo<bool >::parseFromBinaryStream(&selfPowered, stream);
		return true;

	}

	return false;
}

void HarvesterObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = HarvesterObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int HarvesterObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = InstallationObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x72f310e8; //HarvesterObject.selfPowered
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&selfPowered, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

HarvesterObjectImplementation::HarvesterObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		Logger.setLoggingName("HarvesterObject");
	Logger::setLoggingName("HarvesterObject");
	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		selfPowered = false;
	selfPowered = false;
}

void HarvesterObjectImplementation::setSelfPowered(bool isSelfPowered) {
	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		selfPowered = isSelfPowered;
	selfPowered = isSelfPowered;
}

bool HarvesterObjectImplementation::isSelfPowered() {
	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		return selfPowered;
	return selfPowered;
}

int HarvesterObjectImplementation::getBasePowerRate() {
	// server/zone/objects/installation/harvester/HarvesterObject.idl():  			return super.getBasePowerRate();
	if (isSelfPowered())	// server/zone/objects/installation/harvester/HarvesterObject.idl():  			return 0;
	return 0;

	else 	// server/zone/objects/installation/harvester/HarvesterObject.idl():  			return super.getBasePowerRate();
	return InstallationObjectImplementation::getBasePowerRate();
}

void HarvesterObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		super.loadTemplateData(templateData);
	InstallationObjectImplementation::loadTemplateData(templateData);
}

bool HarvesterObjectImplementation::isHarvesterObject() {
	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		return true;
	return true;
}

/*
 *	HarvesterObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


HarvesterObjectAdapter::HarvesterObjectAdapter(HarvesterObject* obj) : InstallationObjectAdapter(obj) {
}

void HarvesterObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETSELFPOWERED__BOOL_:
		{
			bool isSelfPowered = inv->getBooleanParameter();
			
			setSelfPowered(isSelfPowered);
			
		}
		break;
	case RPC_ISSELFPOWERED__:
		{
			
			bool _m_res = isSelfPowered();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETBASEPOWERRATE__:
		{
			
			int _m_res = getBasePowerRate();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int value = inv->getSignedIntParameter();
			
			synchronizedUIListen(player, value);
			
		}
		break;
	case RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int value = inv->getSignedIntParameter();
			
			synchronizedUIStopListen(player, value);
			
		}
		break;
	case RPC_UPDATEOPERATORS__:
		{
			
			updateOperators();
			
		}
		break;
	case RPC_ISHARVESTEROBJECT__:
		{
			
			bool _m_res = isHarvesterObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETREDEEDMESSAGE__:
		{
			
			String _m_res = getRedeedMessage();
			resp->insertAscii(_m_res);
		}
		break;
	default:
		InstallationObjectAdapter::invokeMethod(methid, inv);
	}
}

void HarvesterObjectAdapter::setSelfPowered(bool isSelfPowered) {
	(static_cast<HarvesterObject*>(stub))->setSelfPowered(isSelfPowered);
}

bool HarvesterObjectAdapter::isSelfPowered() {
	return (static_cast<HarvesterObject*>(stub))->isSelfPowered();
}

int HarvesterObjectAdapter::getBasePowerRate() {
	return (static_cast<HarvesterObject*>(stub))->getBasePowerRate();
}

int HarvesterObjectAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<HarvesterObject*>(stub))->handleObjectMenuSelect(player, selectedID);
}

void HarvesterObjectAdapter::synchronizedUIListen(CreatureObject* player, int value) {
	(static_cast<HarvesterObject*>(stub))->synchronizedUIListen(player, value);
}

void HarvesterObjectAdapter::synchronizedUIStopListen(CreatureObject* player, int value) {
	(static_cast<HarvesterObject*>(stub))->synchronizedUIStopListen(player, value);
}

void HarvesterObjectAdapter::updateOperators() {
	(static_cast<HarvesterObject*>(stub))->updateOperators();
}

bool HarvesterObjectAdapter::isHarvesterObject() {
	return (static_cast<HarvesterObject*>(stub))->isHarvesterObject();
}

String HarvesterObjectAdapter::getRedeedMessage() {
	return (static_cast<HarvesterObject*>(stub))->getRedeedMessage();
}

/*
 *	HarvesterObjectHelper
 */

HarvesterObjectHelper* HarvesterObjectHelper::staticInitializer = HarvesterObjectHelper::instance();

HarvesterObjectHelper::HarvesterObjectHelper() {
	className = "HarvesterObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void HarvesterObjectHelper::finalizeHelper() {
	HarvesterObjectHelper::finalize();
}

DistributedObject* HarvesterObjectHelper::instantiateObject() {
	return new HarvesterObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* HarvesterObjectHelper::instantiateServant() {
	return new HarvesterObjectImplementation();
}

DistributedObjectAdapter* HarvesterObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HarvesterObjectAdapter(static_cast<HarvesterObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

