/*
 *	autogen/server/zone/objects/installation/shuttle/ShuttleInstallation.h generated by engine3 IDL compiler 0.60
 */

#ifndef SHUTTLEINSTALLATION_H_
#define SHUTTLEINSTALLATION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "server/zone/objects/installation/InstallationObject.h"

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace shuttle {

class ShuttleInstallation : public InstallationObject {
public:
	ShuttleInstallation();

	bool checkRequisitesForPlacement(CreatureObject* player);

	bool isShuttleInstallation();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ShuttleInstallation(DummyConstructorParameter* param);

	virtual ~ShuttleInstallation();

	friend class ShuttleInstallationHelper;
};

} // namespace shuttle
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::shuttle;

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace shuttle {

class ShuttleInstallationImplementation : public InstallationObjectImplementation {

public:
	ShuttleInstallationImplementation();

	ShuttleInstallationImplementation(DummyConstructorParameter* param);

	bool checkRequisitesForPlacement(CreatureObject* player);

	bool isShuttleInstallation();

	WeakReference<ShuttleInstallation*> _this;

	operator const ShuttleInstallation*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ShuttleInstallationImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ShuttleInstallation;
};

class ShuttleInstallationAdapter : public InstallationObjectAdapter {
public:
	ShuttleInstallationAdapter(ShuttleInstallation* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool checkRequisitesForPlacement(CreatureObject* player);

	bool isShuttleInstallation();

};

class ShuttleInstallationHelper : public DistributedObjectClassHelper, public Singleton<ShuttleInstallationHelper> {
	static ShuttleInstallationHelper* staticInitializer;

public:
	ShuttleInstallationHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ShuttleInstallationHelper>;
};

} // namespace shuttle
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::shuttle;

#endif /*SHUTTLEINSTALLATION_H_*/
