/*
 *	autogen/server/zone/objects/intangible/TheaterObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "TheaterObject.h"

#include "server/zone/objects/tangible/DespawnLairOnPlayerDisappear.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	TheaterObjectStub
 */

enum {RPC_GETNUMBEROFPLAYERSINRANGE__ = 1917931802,RPC_GETDESPAWNONNOPLAYERSINRANGE__,RPC_SETDESPAWNONNOPLAYERSINRANGE__BOOL_,RPC_SHOULDFLATTENTHEATER__,RPC_SETSHOULDFLATTEN__BOOL_,RPC_NOTIFYINSERT__QUADTREEENTRY_,RPC_NOTIFYDISSAPEAR__QUADTREEENTRY_,RPC_ACTIVATEDESPAWNEVENT__,RPC_CLEARDESPAWNEVENT__,RPC_ISTHEATEROBJECT__};

TheaterObject::TheaterObject() : IntangibleObject(DummyConstructorParameter::instance()) {
	TheaterObjectImplementation* _implementation = new TheaterObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("TheaterObject");
}

TheaterObject::TheaterObject(DummyConstructorParameter* param) : IntangibleObject(param) {
	_setClassName("TheaterObject");
}

TheaterObject::~TheaterObject() {
}



int TheaterObject::getNumberOfPlayersInRange() {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNUMBEROFPLAYERSINRANGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getNumberOfPlayersInRange();
	}
}

bool TheaterObject::getDespawnOnNoPlayersInRange() const {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDESPAWNONNOPLAYERSINRANGE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->getDespawnOnNoPlayersInRange();
	}
}

void TheaterObject::setDespawnOnNoPlayersInRange(bool b) {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDESPAWNONNOPLAYERSINRANGE__BOOL_);
		method.addBooleanParameter(b);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setDespawnOnNoPlayersInRange(b);
	}
}

bool TheaterObject::shouldFlattenTheater() const {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SHOULDFLATTENTHEATER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->shouldFlattenTheater();
	}
}

void TheaterObject::setShouldFlatten(bool b) {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSHOULDFLATTEN__BOOL_);
		method.addBooleanParameter(b);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setShouldFlatten(b);
	}
}

void TheaterObject::notifyInsert(QuadTreeEntry* entry) {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYINSERT__QUADTREEENTRY_);
		method.addObjectParameter(entry);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyInsert(entry);
	}
}

void TheaterObject::notifyDissapear(QuadTreeEntry* entry) {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYDISSAPEAR__QUADTREEENTRY_);
		method.addObjectParameter(entry);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyDissapear(entry);
	}
}

void TheaterObject::activateDespawnEvent() {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATEDESPAWNEVENT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->activateDespawnEvent();
	}
}

void TheaterObject::clearDespawnEvent() {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARDESPAWNEVENT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearDespawnEvent();
	}
}

bool TheaterObject::isTheaterObject() {
	TheaterObjectImplementation* _implementation = static_cast<TheaterObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTHEATEROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTheaterObject();
	}
}

DistributedObjectServant* TheaterObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* TheaterObject::_getImplementationForRead() const {
	return _impl;
}

void TheaterObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TheaterObjectImplementation
 */

TheaterObjectImplementation::TheaterObjectImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


TheaterObjectImplementation::~TheaterObjectImplementation() {
}


void TheaterObjectImplementation::finalize() {
}

void TheaterObjectImplementation::_initializeImplementation() {
	_setClassHelper(TheaterObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void TheaterObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<TheaterObject*>(stub);
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TheaterObjectImplementation::_getStub() {
	return _this.get();
}

TheaterObjectImplementation::operator const TheaterObject*() {
	return _this.get();
}

void TheaterObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void TheaterObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void TheaterObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void TheaterObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void TheaterObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void TheaterObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void TheaterObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void TheaterObjectImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("TheaterObject");

}

void TheaterObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(TheaterObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TheaterObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (IntangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xadb464c: //TheaterObject.despawnOnNoPlayersInRange
		TypeInfo<bool >::parseFromBinaryStream(&despawnOnNoPlayersInRange, stream);
		return true;

	case 0x44545d90: //TheaterObject.shouldFlatten
		TypeInfo<bool >::parseFromBinaryStream(&shouldFlatten, stream);
		return true;

	}

	return false;
}

void TheaterObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TheaterObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TheaterObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = IntangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xadb464c; //TheaterObject.despawnOnNoPlayersInRange
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&despawnOnNoPlayersInRange, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x44545d90; //TheaterObject.shouldFlatten
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&shouldFlatten, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

TheaterObjectImplementation::TheaterObjectImplementation() {
	_initializeImplementation();
	Reference<CloseObjectsVector*> _ref0;
	// server/zone/objects/intangible/TheaterObject.idl():  		Logger.setLoggingName("TheaterObject");
	Logger::setLoggingName("TheaterObject");
	// server/zone/objects/intangible/TheaterObject.idl():  		super.closeobjects = new CloseObjectsVector();
	IntangibleObjectImplementation::closeobjects = _ref0 = new CloseObjectsVector();
	// server/zone/objects/intangible/TheaterObject.idl():  		super.closeobjects.setNoDuplicateInsertPlan();
	IntangibleObjectImplementation::closeobjects->setNoDuplicateInsertPlan();
	// server/zone/objects/intangible/TheaterObject.idl():  		despawnOnNoPlayersInRange = false;
	despawnOnNoPlayersInRange = false;
	// server/zone/objects/intangible/TheaterObject.idl():  		shouldFlatten = false;
	shouldFlatten = false;
}

int TheaterObjectImplementation::getNumberOfPlayersInRange() {
	// server/zone/objects/intangible/TheaterObject.idl():  		return numberOfPlayersInRange.get();
	return (&numberOfPlayersInRange)->get();
}

bool TheaterObjectImplementation::getDespawnOnNoPlayersInRange() const{
	// server/zone/objects/intangible/TheaterObject.idl():  		return despawnOnNoPlayersInRange;
	return despawnOnNoPlayersInRange;
}

void TheaterObjectImplementation::setDespawnOnNoPlayersInRange(bool b) {
	// server/zone/objects/intangible/TheaterObject.idl():  		despawnOnNoPlayersInRange = b;
	despawnOnNoPlayersInRange = b;
}

bool TheaterObjectImplementation::shouldFlattenTheater() const{
	// server/zone/objects/intangible/TheaterObject.idl():  		return shouldFlatten;
	return shouldFlatten;
}

void TheaterObjectImplementation::setShouldFlatten(bool b) {
	// server/zone/objects/intangible/TheaterObject.idl():  		shouldFlatten = b;
	shouldFlatten = b;
}

void TheaterObjectImplementation::notifyInsert(QuadTreeEntry* entry) {
	// server/zone/objects/intangible/TheaterObject.idl():  		SceneObject obj = (SceneObject) entry;
	ManagedReference<SceneObject* > obj = dynamic_cast<SceneObject*>(entry);
	// server/zone/objects/intangible/TheaterObject.idl():  		if 
	if (obj == _this.get())	// server/zone/objects/intangible/TheaterObject.idl():  			return;
	return;
	// server/zone/objects/intangible/TheaterObject.idl():  	}
	if (obj->isPlayerCreature()){
	// server/zone/objects/intangible/TheaterObject.idl():  			CreatureObject creo = (CreatureObject) obj;
	ManagedReference<CreatureObject* > creo = dynamic_cast<CreatureObject*>(obj.get());
	// server/zone/objects/intangible/TheaterObject.idl():  		}
	if (!creo->isInvisible()){
	// server/zone/objects/intangible/TheaterObject.idl():  				numberOfPlayersInRange.increment();
	(&numberOfPlayersInRange)->increment();
	// server/zone/objects/intangible/TheaterObject.idl():  				clearDespawnEvent();
	clearDespawnEvent();
}
}
}

void TheaterObjectImplementation::notifyDissapear(QuadTreeEntry* entry) {
	// server/zone/objects/intangible/TheaterObject.idl():  		SceneObject obj = (SceneObject) entry;
	ManagedReference<SceneObject* > obj = dynamic_cast<SceneObject*>(entry);
	// server/zone/objects/intangible/TheaterObject.idl():  		if 
	if (obj == _this.get())	// server/zone/objects/intangible/TheaterObject.idl():  			return;
	return;
	// server/zone/objects/intangible/TheaterObject.idl():  	}
	if (obj->isPlayerCreature()){
	// server/zone/objects/intangible/TheaterObject.idl():  			CreatureObject creo = (CreatureObject) obj;
	ManagedReference<CreatureObject* > creo = dynamic_cast<CreatureObject*>(obj.get());
	// server/zone/objects/intangible/TheaterObject.idl():  		}
	if (!creo->isInvisible()){
	// server/zone/objects/intangible/TheaterObject.idl():  				int val = numberOfPlayersInRange.decrement();
	int val = (&numberOfPlayersInRange)->decrement();
	// server/zone/objects/intangible/TheaterObject.idl():  			}
	if (val <= 0 && despawnOnNoPlayersInRange)	// server/zone/objects/intangible/TheaterObject.idl():  					activateDespawnEvent();
	activateDespawnEvent();
}
}
}

void TheaterObjectImplementation::activateDespawnEvent() {
	Reference<DespawnLairOnPlayerDisappear*> _ref0;
	// server/zone/objects/intangible/TheaterObject.idl():  		despawnEvent 
	if (despawnEvent != NULL)	// server/zone/objects/intangible/TheaterObject.idl():  			return;
	return;
	// server/zone/objects/intangible/TheaterObject.idl():  		despawnEvent = new DespawnLairOnPlayerDisappear(this);
	despawnEvent = _ref0 = new DespawnLairOnPlayerDisappear(_this.get());
	// server/zone/objects/intangible/TheaterObject.idl():  		despawnEvent.schedule(300000);
	despawnEvent->schedule(300000);
}

void TheaterObjectImplementation::clearDespawnEvent() {
	// server/zone/objects/intangible/TheaterObject.idl():  		despawnEvent.
	if (despawnEvent == NULL)	// server/zone/objects/intangible/TheaterObject.idl():  			return;
	return;
	// server/zone/objects/intangible/TheaterObject.idl():  		despawnEvent.cancel();
	despawnEvent->cancel();
	// server/zone/objects/intangible/TheaterObject.idl():  		despawnEvent = null;
	despawnEvent = NULL;
}

bool TheaterObjectImplementation::isTheaterObject() {
	// server/zone/objects/intangible/TheaterObject.idl():  		return true;
	return true;
}

/*
 *	TheaterObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


TheaterObjectAdapter::TheaterObjectAdapter(TheaterObject* obj) : IntangibleObjectAdapter(obj) {
}

void TheaterObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETNUMBEROFPLAYERSINRANGE__:
		{
			
			int _m_res = getNumberOfPlayersInRange();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDESPAWNONNOPLAYERSINRANGE__:
		{
			
			bool _m_res = getDespawnOnNoPlayersInRange();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETDESPAWNONNOPLAYERSINRANGE__BOOL_:
		{
			bool b = inv->getBooleanParameter();
			
			setDespawnOnNoPlayersInRange(b);
			
		}
		break;
	case RPC_SHOULDFLATTENTHEATER__:
		{
			
			bool _m_res = shouldFlattenTheater();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETSHOULDFLATTEN__BOOL_:
		{
			bool b = inv->getBooleanParameter();
			
			setShouldFlatten(b);
			
		}
		break;
	case RPC_NOTIFYINSERT__QUADTREEENTRY_:
		{
			QuadTreeEntry* entry = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			notifyInsert(entry);
			
		}
		break;
	case RPC_NOTIFYDISSAPEAR__QUADTREEENTRY_:
		{
			QuadTreeEntry* entry = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			notifyDissapear(entry);
			
		}
		break;
	case RPC_ACTIVATEDESPAWNEVENT__:
		{
			
			activateDespawnEvent();
			
		}
		break;
	case RPC_CLEARDESPAWNEVENT__:
		{
			
			clearDespawnEvent();
			
		}
		break;
	case RPC_ISTHEATEROBJECT__:
		{
			
			bool _m_res = isTheaterObject();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		IntangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

int TheaterObjectAdapter::getNumberOfPlayersInRange() {
	return (static_cast<TheaterObject*>(stub))->getNumberOfPlayersInRange();
}

bool TheaterObjectAdapter::getDespawnOnNoPlayersInRange() const {
	return (static_cast<TheaterObject*>(stub))->getDespawnOnNoPlayersInRange();
}

void TheaterObjectAdapter::setDespawnOnNoPlayersInRange(bool b) {
	(static_cast<TheaterObject*>(stub))->setDespawnOnNoPlayersInRange(b);
}

bool TheaterObjectAdapter::shouldFlattenTheater() const {
	return (static_cast<TheaterObject*>(stub))->shouldFlattenTheater();
}

void TheaterObjectAdapter::setShouldFlatten(bool b) {
	(static_cast<TheaterObject*>(stub))->setShouldFlatten(b);
}

void TheaterObjectAdapter::notifyInsert(QuadTreeEntry* entry) {
	(static_cast<TheaterObject*>(stub))->notifyInsert(entry);
}

void TheaterObjectAdapter::notifyDissapear(QuadTreeEntry* entry) {
	(static_cast<TheaterObject*>(stub))->notifyDissapear(entry);
}

void TheaterObjectAdapter::activateDespawnEvent() {
	(static_cast<TheaterObject*>(stub))->activateDespawnEvent();
}

void TheaterObjectAdapter::clearDespawnEvent() {
	(static_cast<TheaterObject*>(stub))->clearDespawnEvent();
}

bool TheaterObjectAdapter::isTheaterObject() {
	return (static_cast<TheaterObject*>(stub))->isTheaterObject();
}

/*
 *	TheaterObjectHelper
 */

TheaterObjectHelper* TheaterObjectHelper::staticInitializer = TheaterObjectHelper::instance();

TheaterObjectHelper::TheaterObjectHelper() {
	className = "TheaterObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void TheaterObjectHelper::finalizeHelper() {
	TheaterObjectHelper::finalize();
}

DistributedObject* TheaterObjectHelper::instantiateObject() {
	return new TheaterObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* TheaterObjectHelper::instantiateServant() {
	return new TheaterObjectImplementation();
}

DistributedObjectAdapter* TheaterObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TheaterObjectAdapter(static_cast<TheaterObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

