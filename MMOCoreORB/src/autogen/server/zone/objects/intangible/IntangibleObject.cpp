/*
 *	autogen/server/zone/objects/intangible/IntangibleObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "IntangibleObject.h"

/*
 *	IntangibleObjectStub
 */

enum {RPC_FINALIZE__ = 3178238000,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_ISINTANGIBLEOBJECT__,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_UPDATESTATUS__INT_BOOL_,RPC_GETSTATUS__,RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_};

IntangibleObject::IntangibleObject() : SceneObject(DummyConstructorParameter::instance()) {
	IntangibleObjectImplementation* _implementation = new IntangibleObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("IntangibleObject");
}

IntangibleObject::IntangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
	_setClassName("IntangibleObject");
}

IntangibleObject::~IntangibleObject() {
}



void IntangibleObject::initializeTransientMembers() {
	IntangibleObjectImplementation* _implementation = static_cast<IntangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void IntangibleObject::loadTemplateData(SharedObjectTemplate* templateData) {
	IntangibleObjectImplementation* _implementation = static_cast<IntangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

bool IntangibleObject::isIntangibleObject() {
	IntangibleObjectImplementation* _implementation = static_cast<IntangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINTANGIBLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isIntangibleObject();
	}
}

void IntangibleObject::sendBaselinesTo(SceneObject* player) {
	IntangibleObjectImplementation* _implementation = static_cast<IntangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBaselinesTo(player);
	}
}

void IntangibleObject::updateStatus(int newStatus, bool notifyClient) {
	IntangibleObjectImplementation* _implementation = static_cast<IntangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATESTATUS__INT_BOOL_);
		method.addSignedIntParameter(newStatus);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateStatus(newStatus, notifyClient);
	}
}

unsigned int IntangibleObject::getStatus() const {
	IntangibleObjectImplementation* _implementation = static_cast<IntangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTATUS__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getStatus();
	}
}

void IntangibleObject::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	IntangibleObjectImplementation* _implementation = static_cast<IntangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_);
		method.addUnicodeParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setCustomObjectName(name, notifyClient);
	}
}

DistributedObjectServant* IntangibleObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* IntangibleObject::_getImplementationForRead() const {
	return _impl;
}

void IntangibleObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	IntangibleObjectImplementation
 */

IntangibleObjectImplementation::IntangibleObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


IntangibleObjectImplementation::~IntangibleObjectImplementation() {
	IntangibleObjectImplementation::finalize();
}


void IntangibleObjectImplementation::_initializeImplementation() {
	_setClassHelper(IntangibleObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void IntangibleObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<IntangibleObject*>(stub);
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* IntangibleObjectImplementation::_getStub() {
	return _this.get();
}

IntangibleObjectImplementation::operator const IntangibleObject*() {
	return _this.get();
}

void IntangibleObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void IntangibleObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void IntangibleObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void IntangibleObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void IntangibleObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void IntangibleObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void IntangibleObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void IntangibleObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("IntangibleObject");

}

void IntangibleObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(IntangibleObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool IntangibleObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SceneObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xca41f7e6: //IntangibleObject.status
		TypeInfo<unsigned int >::parseFromBinaryStream(&status, stream);
		return true;

	}

	return false;
}

void IntangibleObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = IntangibleObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int IntangibleObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SceneObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xca41f7e6; //IntangibleObject.status
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&status, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

IntangibleObjectImplementation::IntangibleObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/intangible/IntangibleObject.idl():  		Logger.setLoggingName("IntangibleObject");
	Logger::setLoggingName("IntangibleObject");
	// server/zone/objects/intangible/IntangibleObject.idl():  		status = 0;
	status = 0;
	// server/zone/objects/intangible/IntangibleObject.idl():  		super.setContainerInheritPermissionsFromParent(false);
	SceneObjectImplementation::setContainerInheritPermissionsFromParent(false);
	// server/zone/objects/intangible/IntangibleObject.idl():  		super.setContainerDefaultDenyPermission(ContainerPermissions.MOVECONTAINER);
	SceneObjectImplementation::setContainerDefaultDenyPermission(ContainerPermissions::MOVECONTAINER);
	// server/zone/objects/intangible/IntangibleObject.idl():  		super.setContainerDenyPermission("owner", ContainerPermissions.MOVECONTAINER);
	SceneObjectImplementation::setContainerDenyPermission("owner", ContainerPermissions::MOVECONTAINER);
}

void IntangibleObjectImplementation::finalize() {
}

void IntangibleObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/intangible/IntangibleObject.idl():  		super.loadTemplateData(templateData);
	SceneObjectImplementation::loadTemplateData(templateData);
}

bool IntangibleObjectImplementation::isIntangibleObject() {
	// server/zone/objects/intangible/IntangibleObject.idl():  		return true;
	return true;
}

unsigned int IntangibleObjectImplementation::getStatus() const{
	// server/zone/objects/intangible/IntangibleObject.idl():  		return status;
	return status;
}

/*
 *	IntangibleObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


IntangibleObjectAdapter::IntangibleObjectAdapter(IntangibleObject* obj) : SceneObjectAdapter(obj) {
}

void IntangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_FINALIZE__:
		{
			
			finalize();
			
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_ISINTANGIBLEOBJECT__:
		{
			
			bool _m_res = isIntangibleObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendBaselinesTo(player);
			
		}
		break;
	case RPC_UPDATESTATUS__INT_BOOL_:
		{
			int newStatus = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			updateStatus(newStatus, notifyClient);
			
		}
		break;
	case RPC_GETSTATUS__:
		{
			
			unsigned int _m_res = getStatus();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_:
		{
			 UnicodeString name; inv->getUnicodeParameter(name);
			bool notifyClient = inv->getBooleanParameter();
			
			setCustomObjectName(name, notifyClient);
			
		}
		break;
	default:
		SceneObjectAdapter::invokeMethod(methid, inv);
	}
}

void IntangibleObjectAdapter::finalize() {
	(static_cast<IntangibleObject*>(stub))->finalize();
}

void IntangibleObjectAdapter::initializeTransientMembers() {
	(static_cast<IntangibleObject*>(stub))->initializeTransientMembers();
}

bool IntangibleObjectAdapter::isIntangibleObject() {
	return (static_cast<IntangibleObject*>(stub))->isIntangibleObject();
}

void IntangibleObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<IntangibleObject*>(stub))->sendBaselinesTo(player);
}

void IntangibleObjectAdapter::updateStatus(int newStatus, bool notifyClient) {
	(static_cast<IntangibleObject*>(stub))->updateStatus(newStatus, notifyClient);
}

unsigned int IntangibleObjectAdapter::getStatus() const {
	return (static_cast<IntangibleObject*>(stub))->getStatus();
}

void IntangibleObjectAdapter::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	(static_cast<IntangibleObject*>(stub))->setCustomObjectName(name, notifyClient);
}

/*
 *	IntangibleObjectHelper
 */

IntangibleObjectHelper* IntangibleObjectHelper::staticInitializer = IntangibleObjectHelper::instance();

IntangibleObjectHelper::IntangibleObjectHelper() {
	className = "IntangibleObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void IntangibleObjectHelper::finalizeHelper() {
	IntangibleObjectHelper::finalize();
}

DistributedObject* IntangibleObjectHelper::instantiateObject() {
	return new IntangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* IntangibleObjectHelper::instantiateServant() {
	return new IntangibleObjectImplementation();
}

DistributedObjectAdapter* IntangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new IntangibleObjectAdapter(static_cast<IntangibleObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

