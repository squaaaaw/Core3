/*
 *	autogen/server/zone/objects/draftschematic/DraftSchematic.cpp generated by engine3 IDL compiler 0.60
 */

#include "DraftSchematic.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	DraftSchematicStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 237642605,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SENDDRAFTSLOTSTO__CREATUREOBJECT_,RPC_SENDRESOURCEWEIGHTSTO__CREATUREOBJECT_,RPC_CREATEMANUFACTURESCHEMATIC__SCENEOBJECT_,RPC_SETGROUPNAME__STRING_,RPC_GETGROUPNAME__,RPC_GETDRAFTSLOTCOUNT__,RPC_ISVALIDDRAFTSCHEMATIC__,RPC_GETRESOURCEWEIGHTCOUNT__,RPC_GETCOMPLEXITY__,RPC_GETTOOLTAB__,RPC_GETSIZE__,RPC_GETXPTYPE__,RPC_GETXPAMOUNT__,RPC_GETISMAGIC__,RPC_GETASSEMBLYSKILL__,RPC_GETEXPERIMENTATIONSKILL__,RPC_GETCUSTOMIZATIONSKILL__,RPC_GETCUSTOMNAME__,RPC_GETTANOCRC__,RPC_GETTEMPLATELISTSIZE__,RPC_GETTEMPLATE__INT_,RPC_GETAPPEARANCE__INT_,RPC_GETLABRATORY__,RPC_GETFACTORYCRATESIZE__};

DraftSchematic::DraftSchematic() : IntangibleObject(DummyConstructorParameter::instance()) {
	DraftSchematicImplementation* _implementation = new DraftSchematicImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DraftSchematic");
}

DraftSchematic::DraftSchematic(DummyConstructorParameter* param) : IntangibleObject(param) {
	_setClassName("DraftSchematic");
}

DraftSchematic::~DraftSchematic() {
}



void DraftSchematic::initializeTransientMembers() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void DraftSchematic::loadTemplateData(SharedObjectTemplate* templateData) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->loadTemplateData(templateData);
	}
}

void DraftSchematic::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void DraftSchematic::sendBaselinesTo(SceneObject* player) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBaselinesTo(player);
	}
}

void DraftSchematic::sendDraftSlotsTo(CreatureObject* player) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDRAFTSLOTSTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendDraftSlotsTo(player);
	}
}

void DraftSchematic::sendResourceWeightsTo(CreatureObject* player) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDRESOURCEWEIGHTSTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendResourceWeightsTo(player);
	}
}

Reference<SceneObject* > DraftSchematic::createManufactureSchematic(SceneObject* craftingTool) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEMANUFACTURESCHEMATIC__SCENEOBJECT_);
		method.addObjectParameter(craftingTool);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->createManufactureSchematic(craftingTool);
	}
}

void DraftSchematic::setGroupName(const String& name) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGROUPNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGroupName(name);
	}
}

String DraftSchematic::getGroupName() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPNAME__);

		String _return_getGroupName;
		method.executeWithAsciiReturn(_return_getGroupName);
		return _return_getGroupName;
	} else {
		return _implementation->getGroupName();
	}
}

int DraftSchematic::getDraftSlotCount() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDRAFTSLOTCOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDraftSlotCount();
	}
}

bool DraftSchematic::isValidDraftSchematic() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVALIDDRAFTSCHEMATIC__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isValidDraftSchematic();
	}
}

DraftSlot* DraftSchematic::getDraftSlot(int i) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getDraftSlot(i);
	}
}

int DraftSchematic::getResourceWeightCount() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRESOURCEWEIGHTCOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getResourceWeightCount();
	}
}

ResourceWeight* DraftSchematic::getResourceWeight(int i) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getResourceWeight(i);
	}
}

float DraftSchematic::getComplexity() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOMPLEXITY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getComplexity();
	}
}

unsigned int DraftSchematic::getToolTab() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOOLTAB__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getToolTab();
	}
}

float DraftSchematic::getSize() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSIZE__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getSize();
	}
}

String DraftSchematic::getXpType() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETXPTYPE__);

		String _return_getXpType;
		method.executeWithAsciiReturn(_return_getXpType);
		return _return_getXpType;
	} else {
		return _implementation->getXpType();
	}
}

int DraftSchematic::getXpAmount() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETXPAMOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getXpAmount();
	}
}

bool DraftSchematic::getIsMagic() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETISMAGIC__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->getIsMagic();
	}
}

String DraftSchematic::getAssemblySkill() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETASSEMBLYSKILL__);

		String _return_getAssemblySkill;
		method.executeWithAsciiReturn(_return_getAssemblySkill);
		return _return_getAssemblySkill;
	} else {
		return _implementation->getAssemblySkill();
	}
}

String DraftSchematic::getExperimentationSkill() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETEXPERIMENTATIONSKILL__);

		String _return_getExperimentationSkill;
		method.executeWithAsciiReturn(_return_getExperimentationSkill);
		return _return_getExperimentationSkill;
	} else {
		return _implementation->getExperimentationSkill();
	}
}

String DraftSchematic::getCustomizationSkill() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCUSTOMIZATIONSKILL__);

		String _return_getCustomizationSkill;
		method.executeWithAsciiReturn(_return_getCustomizationSkill);
		return _return_getCustomizationSkill;
	} else {
		return _implementation->getCustomizationSkill();
	}
}

String DraftSchematic::getCustomName() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCUSTOMNAME__);

		String _return_getCustomName;
		method.executeWithAsciiReturn(_return_getCustomName);
		return _return_getCustomName;
	} else {
		return _implementation->getCustomName();
	}
}

unsigned int DraftSchematic::getTanoCRC() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTANOCRC__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getTanoCRC();
	}
}

int DraftSchematic::getTemplateListSize() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTEMPLATELISTSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTemplateListSize();
	}
}

String DraftSchematic::getTemplate(int i) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTEMPLATE__INT_);
		method.addSignedIntParameter(i);

		String _return_getTemplate;
		method.executeWithAsciiReturn(_return_getTemplate);
		return _return_getTemplate;
	} else {
		return _implementation->getTemplate(i);
	}
}

String DraftSchematic::getAppearance(int i) {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAPPEARANCE__INT_);
		method.addSignedIntParameter(i);

		String _return_getAppearance;
		method.executeWithAsciiReturn(_return_getAppearance);
		return _return_getAppearance;
	} else {
		return _implementation->getAppearance(i);
	}
}

DraftSchematicObjectTemplate* DraftSchematic::getDraftSchematicTemplate() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getDraftSchematicTemplate();
	}
}

int DraftSchematic::getLabratory() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLABRATORY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getLabratory();
	}
}

int DraftSchematic::getFactoryCrateSize() {
	DraftSchematicImplementation* _implementation = static_cast<DraftSchematicImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTORYCRATESIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFactoryCrateSize();
	}
}

DistributedObjectServant* DraftSchematic::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* DraftSchematic::_getImplementationForRead() const {
	return _impl;
}

void DraftSchematic::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DraftSchematicImplementation
 */

DraftSchematicImplementation::DraftSchematicImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


DraftSchematicImplementation::~DraftSchematicImplementation() {
}


void DraftSchematicImplementation::finalize() {
}

void DraftSchematicImplementation::_initializeImplementation() {
	_setClassHelper(DraftSchematicHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DraftSchematicImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DraftSchematic*>(stub);
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* DraftSchematicImplementation::_getStub() {
	return _this.get();
}

DraftSchematicImplementation::operator const DraftSchematic*() {
	return _this.get();
}

void DraftSchematicImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void DraftSchematicImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void DraftSchematicImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void DraftSchematicImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void DraftSchematicImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void DraftSchematicImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void DraftSchematicImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void DraftSchematicImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("DraftSchematic");

}

void DraftSchematicImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DraftSchematicImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DraftSchematicImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (IntangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void DraftSchematicImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DraftSchematicImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DraftSchematicImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = IntangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

DraftSchematicImplementation::DraftSchematicImplementation() {
	_initializeImplementation();
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		schematicTemplate = null;
	schematicTemplate = NULL;
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		groupName = "";
	groupName = "";
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		Logger.setLoggingName("DraftSchematic");
	Logger::setLoggingName("DraftSchematic");
}

void DraftSchematicImplementation::setGroupName(const String& name) {
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		groupName = name;
	groupName = name;
}

String DraftSchematicImplementation::getGroupName() {
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		return groupName;
	return groupName;
}

bool DraftSchematicImplementation::isValidDraftSchematic() {
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		return schematicTemplate != null;
	return schematicTemplate != NULL;
}

int DraftSchematicImplementation::getTemplateListSize() {
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		return schematicTemplate.getTemplateListSize();
	return schematicTemplate->getTemplateListSize();
}

String DraftSchematicImplementation::getTemplate(int i) {
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		return schematicTemplate.getTemplate(i);
	return schematicTemplate->getTemplate(i);
}

String DraftSchematicImplementation::getAppearance(int i) {
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		return schematicTemplate.getIngredientAppearance(i);
	return schematicTemplate->getIngredientAppearance(i);
}

DraftSchematicObjectTemplate* DraftSchematicImplementation::getDraftSchematicTemplate() {
	// server/zone/objects/draftschematic/DraftSchematic.idl():  		return schematicTemplate;
	return schematicTemplate;
}

/*
 *	DraftSchematicAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DraftSchematicAdapter::DraftSchematicAdapter(DraftSchematic* obj) : IntangibleObjectAdapter(obj) {
}

void DraftSchematicAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendBaselinesTo(player);
			
		}
		break;
	case RPC_SENDDRAFTSLOTSTO__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendDraftSlotsTo(player);
			
		}
		break;
	case RPC_SENDRESOURCEWEIGHTSTO__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendResourceWeightsTo(player);
			
		}
		break;
	case RPC_CREATEMANUFACTURESCHEMATIC__SCENEOBJECT_:
		{
			SceneObject* craftingTool = static_cast<SceneObject*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = createManufactureSchematic(craftingTool);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SETGROUPNAME__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			setGroupName(name);
			
		}
		break;
	case RPC_GETGROUPNAME__:
		{
			
			String _m_res = getGroupName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETDRAFTSLOTCOUNT__:
		{
			
			int _m_res = getDraftSlotCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISVALIDDRAFTSCHEMATIC__:
		{
			
			bool _m_res = isValidDraftSchematic();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETRESOURCEWEIGHTCOUNT__:
		{
			
			int _m_res = getResourceWeightCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCOMPLEXITY__:
		{
			
			float _m_res = getComplexity();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETTOOLTAB__:
		{
			
			unsigned int _m_res = getToolTab();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETSIZE__:
		{
			
			float _m_res = getSize();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETXPTYPE__:
		{
			
			String _m_res = getXpType();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETXPAMOUNT__:
		{
			
			int _m_res = getXpAmount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETISMAGIC__:
		{
			
			bool _m_res = getIsMagic();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETASSEMBLYSKILL__:
		{
			
			String _m_res = getAssemblySkill();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETEXPERIMENTATIONSKILL__:
		{
			
			String _m_res = getExperimentationSkill();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETCUSTOMIZATIONSKILL__:
		{
			
			String _m_res = getCustomizationSkill();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETCUSTOMNAME__:
		{
			
			String _m_res = getCustomName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETTANOCRC__:
		{
			
			unsigned int _m_res = getTanoCRC();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETTEMPLATELISTSIZE__:
		{
			
			int _m_res = getTemplateListSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETTEMPLATE__INT_:
		{
			int i = inv->getSignedIntParameter();
			
			String _m_res = getTemplate(i);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETAPPEARANCE__INT_:
		{
			int i = inv->getSignedIntParameter();
			
			String _m_res = getAppearance(i);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETLABRATORY__:
		{
			
			int _m_res = getLabratory();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETFACTORYCRATESIZE__:
		{
			
			int _m_res = getFactoryCrateSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	default:
		IntangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

void DraftSchematicAdapter::initializeTransientMembers() {
	(static_cast<DraftSchematic*>(stub))->initializeTransientMembers();
}

void DraftSchematicAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<DraftSchematic*>(stub))->sendBaselinesTo(player);
}

void DraftSchematicAdapter::sendDraftSlotsTo(CreatureObject* player) {
	(static_cast<DraftSchematic*>(stub))->sendDraftSlotsTo(player);
}

void DraftSchematicAdapter::sendResourceWeightsTo(CreatureObject* player) {
	(static_cast<DraftSchematic*>(stub))->sendResourceWeightsTo(player);
}

Reference<SceneObject* > DraftSchematicAdapter::createManufactureSchematic(SceneObject* craftingTool) {
	return (static_cast<DraftSchematic*>(stub))->createManufactureSchematic(craftingTool);
}

void DraftSchematicAdapter::setGroupName(const String& name) {
	(static_cast<DraftSchematic*>(stub))->setGroupName(name);
}

String DraftSchematicAdapter::getGroupName() {
	return (static_cast<DraftSchematic*>(stub))->getGroupName();
}

int DraftSchematicAdapter::getDraftSlotCount() {
	return (static_cast<DraftSchematic*>(stub))->getDraftSlotCount();
}

bool DraftSchematicAdapter::isValidDraftSchematic() {
	return (static_cast<DraftSchematic*>(stub))->isValidDraftSchematic();
}

int DraftSchematicAdapter::getResourceWeightCount() {
	return (static_cast<DraftSchematic*>(stub))->getResourceWeightCount();
}

float DraftSchematicAdapter::getComplexity() {
	return (static_cast<DraftSchematic*>(stub))->getComplexity();
}

unsigned int DraftSchematicAdapter::getToolTab() {
	return (static_cast<DraftSchematic*>(stub))->getToolTab();
}

float DraftSchematicAdapter::getSize() {
	return (static_cast<DraftSchematic*>(stub))->getSize();
}

String DraftSchematicAdapter::getXpType() {
	return (static_cast<DraftSchematic*>(stub))->getXpType();
}

int DraftSchematicAdapter::getXpAmount() {
	return (static_cast<DraftSchematic*>(stub))->getXpAmount();
}

bool DraftSchematicAdapter::getIsMagic() {
	return (static_cast<DraftSchematic*>(stub))->getIsMagic();
}

String DraftSchematicAdapter::getAssemblySkill() {
	return (static_cast<DraftSchematic*>(stub))->getAssemblySkill();
}

String DraftSchematicAdapter::getExperimentationSkill() {
	return (static_cast<DraftSchematic*>(stub))->getExperimentationSkill();
}

String DraftSchematicAdapter::getCustomizationSkill() {
	return (static_cast<DraftSchematic*>(stub))->getCustomizationSkill();
}

String DraftSchematicAdapter::getCustomName() {
	return (static_cast<DraftSchematic*>(stub))->getCustomName();
}

unsigned int DraftSchematicAdapter::getTanoCRC() {
	return (static_cast<DraftSchematic*>(stub))->getTanoCRC();
}

int DraftSchematicAdapter::getTemplateListSize() {
	return (static_cast<DraftSchematic*>(stub))->getTemplateListSize();
}

String DraftSchematicAdapter::getTemplate(int i) {
	return (static_cast<DraftSchematic*>(stub))->getTemplate(i);
}

String DraftSchematicAdapter::getAppearance(int i) {
	return (static_cast<DraftSchematic*>(stub))->getAppearance(i);
}

int DraftSchematicAdapter::getLabratory() {
	return (static_cast<DraftSchematic*>(stub))->getLabratory();
}

int DraftSchematicAdapter::getFactoryCrateSize() {
	return (static_cast<DraftSchematic*>(stub))->getFactoryCrateSize();
}

/*
 *	DraftSchematicHelper
 */

DraftSchematicHelper* DraftSchematicHelper::staticInitializer = DraftSchematicHelper::instance();

DraftSchematicHelper::DraftSchematicHelper() {
	className = "DraftSchematic";

	Core::getObjectBroker()->registerClass(className, this);
}

void DraftSchematicHelper::finalizeHelper() {
	DraftSchematicHelper::finalize();
}

DistributedObject* DraftSchematicHelper::instantiateObject() {
	return new DraftSchematic(DummyConstructorParameter::instance());
}

DistributedObjectServant* DraftSchematicHelper::instantiateServant() {
	return new DraftSchematicImplementation();
}

DistributedObjectAdapter* DraftSchematicHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicAdapter(static_cast<DraftSchematic*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

