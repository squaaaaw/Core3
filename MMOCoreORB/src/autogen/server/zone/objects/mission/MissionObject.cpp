/*
 *	autogen/server/zone/objects/mission/MissionObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionObject.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/mission/MissionObjective.h"

#include "server/zone/managers/mission/spawnmaps/NpcSpawnPoint.h"

/*
 *	MissionObjectStub
 */

enum {RPC_CREATEWAYPOINT__,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_UPDATETODATABASEALLOBJECTS__BOOL_,RPC_SETREFRESHCOUNTER__INT_BOOL_,RPC_SETTYPECRC__INT_BOOL_,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SETMISSIONDESCRIPTION__STRING_STRING_BOOL_,RPC_SETMISSIONTITLE__STRING_STRING_BOOL_,RPC_SETMISSIONTARGETNAME__STRING_BOOL_,RPC_SETMISSIONDIFFICULTY__INT_BOOL_,RPC_SETMISSIONDIFFICULTY__INT_INT_INT_BOOL_,RPC_SETREWARDCREDITS__INT_BOOL_,RPC_SETSTARTPOSITION__FLOAT_FLOAT_STRING_BOOL_,RPC_SETSTARTPOSITION__FLOAT_FLOAT_BOOL_,RPC_SETENDPOSITION__FLOAT_FLOAT_STRING_BOOL_,RPC_SETCREATORNAME__STRING_BOOL_,RPC_GETSTARTPLANETCRC__,RPC_UPDATEMISSIONLOCATION__,RPC_ABORT__,RPC_SETFACTION__INT_,RPC_SETMISSIONOBJECTIVE__MISSIONOBJECTIVE_,RPC_SETREWARDFACTIONPOINTSREBEL__INT_,RPC_SETREWARDFACTIONPOINTSIMPERIAL__INT_,RPC_SETMISSIONNUMBER__INT_,RPC_SETTARGETOPTIONALTEMPLATE__STRING_,RPC_SETTEMPLATESTRINGS__STRING_STRING_,RPC_GETMISSIONOBJECTIVE__,RPC_GETFACTION__,RPC_GETREWARDFACTIONPOINTSREBEL__,RPC_GETREWARDFACTIONPOINTSIMPERIAL__,RPC_GETSTARTPOSITIONX__,RPC_GETSTARTPOSITIONY__,RPC_GETTARGETOPTIONALTEMPLATE__,RPC_GETSTARTPLANET__,RPC_GETENDPOSITIONX__,RPC_GETENDPOSITIONY__,RPC_GETENDPLANET__,RPC_SETENDPLANET__STRING_,RPC_GETWAYPOINTTOMISSION__,RPC_GETTYPECRC__,RPC_GETREWARDCREDITS__,RPC_GETREWARDCREDITSDIVISOR__,RPC_GETCREATORNAME__,RPC_GETDIFFICULTYLEVEL__,RPC_GETDIFFICULTYDISPLAY__,RPC_GETDIFFICULTY__,RPC_GETTARGETNAME__,RPC_GETREFRESHCOUNTER__,RPC_GETMISSIONNUMBER__,RPC_ISSURVEYMISSION__,RPC_ISMISSIONOBJECT__,RPC_GETTEMPLATESTRING1__,RPC_GETTEMPLATESTRING2__,RPC_GETTARGETOBJECTID__,RPC_SETTARGETOBJECTID__LONG_,RPC_SETMISSIONLEVEL__INT_,RPC_GETMISSIONLEVEL__,RPC_SETSIZE__FLOAT_,RPC_GETSIZE__};

MissionObject::MissionObject() : IntangibleObject(DummyConstructorParameter::instance()) {
	MissionObjectImplementation* _implementation = new MissionObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("MissionObject");
}

MissionObject::MissionObject(DummyConstructorParameter* param) : IntangibleObject(param) {
	_setClassName("MissionObject");
}

MissionObject::~MissionObject() {
}



void MissionObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

WaypointObject* MissionObject::createWaypoint() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEWAYPOINT__);

		return static_cast<WaypointObject*>(method.executeWithObjectReturn());
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->createWaypoint();
	}
}

void MissionObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
	}
}

void MissionObject::updateToDatabaseAllObjects(bool startTask) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEALLOBJECTS__BOOL_);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateToDatabaseAllObjects(startTask);
	}
}

void MissionObject::setRefreshCounter(int ctr, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREFRESHCOUNTER__INT_BOOL_);
		method.addSignedIntParameter(ctr);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setRefreshCounter(ctr, notifyClient);
	}
}

void MissionObject::setTypeCRC(unsigned int crc, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTYPECRC__INT_BOOL_);
		method.addUnsignedIntParameter(crc);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setTypeCRC(crc, notifyClient);
	}
}

void MissionObject::initializeTransientMembers() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void MissionObject::sendBaselinesTo(SceneObject* player) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBaselinesTo(player);
	}
}

void MissionObject::setMissionDescription(const String& file, const String& id, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONDESCRIPTION__STRING_STRING_BOOL_);
		method.addAsciiParameter(file);
		method.addAsciiParameter(id);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMissionDescription(file, id, notifyClient);
	}
}

void MissionObject::setMissionTitle(const String& file, const String& id, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONTITLE__STRING_STRING_BOOL_);
		method.addAsciiParameter(file);
		method.addAsciiParameter(id);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMissionTitle(file, id, notifyClient);
	}
}

void MissionObject::setMissionTargetName(const String& target, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONTARGETNAME__STRING_BOOL_);
		method.addAsciiParameter(target);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMissionTargetName(target, notifyClient);
	}
}

void MissionObject::setMissionDifficulty(int diffLevel, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONDIFFICULTY__INT_BOOL_);
		method.addSignedIntParameter(diffLevel);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->setMissionDifficulty(diffLevel, notifyClient);
	}
}

void MissionObject::setMissionDifficulty(int diffLevel, int display, int diff, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONDIFFICULTY__INT_INT_INT_BOOL_);
		method.addSignedIntParameter(diffLevel);
		method.addSignedIntParameter(display);
		method.addSignedIntParameter(diff);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMissionDifficulty(diffLevel, display, diff, notifyClient);
	}
}

void MissionObject::setRewardCredits(int creds, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREWARDCREDITS__INT_BOOL_);
		method.addSignedIntParameter(creds);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setRewardCredits(creds, notifyClient);
	}
}

void MissionObject::setTargetTemplate(SharedObjectTemplate* templ, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setTargetTemplate(templ, notifyClient);
	}
}

void MissionObject::setStartPosition(float posX, float posY, const String& planet, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTARTPOSITION__FLOAT_FLOAT_STRING_BOOL_);
		method.addFloatParameter(posX);
		method.addFloatParameter(posY);
		method.addAsciiParameter(planet);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setStartPosition(posX, posY, planet, notifyClient);
	}
}

void MissionObject::setStartPosition(float posX, float posY, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTARTPOSITION__FLOAT_FLOAT_BOOL_);
		method.addFloatParameter(posX);
		method.addFloatParameter(posY);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStartPosition(posX, posY, notifyClient);
	}
}

void MissionObject::setEndPosition(float posX, float posY, const String& planet, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENDPOSITION__FLOAT_FLOAT_STRING_BOOL_);
		method.addFloatParameter(posX);
		method.addFloatParameter(posY);
		method.addAsciiParameter(planet);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setEndPosition(posX, posY, planet, notifyClient);
	}
}

void MissionObject::setCreatorName(const String& name, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCREATORNAME__STRING_BOOL_);
		method.addAsciiParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setCreatorName(name, notifyClient);
	}
}

unsigned int MissionObject::getStartPlanetCRC() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTARTPLANETCRC__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getStartPlanetCRC();
	}
}

void MissionObject::updateMissionLocation() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEMISSIONLOCATION__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateMissionLocation();
	}
}

void MissionObject::abort() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ABORT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->abort();
	}
}

void MissionObject::setFaction(const int missionFaction) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFACTION__INT_);
		method.addSignedIntParameter(missionFaction);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setFaction(missionFaction);
	}
}

void MissionObject::setMissionObjective(MissionObjective* obj) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONOBJECTIVE__MISSIONOBJECTIVE_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMissionObjective(obj);
	}
}

void MissionObject::setRewardFactionPointsRebel(int points) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREWARDFACTIONPOINTSREBEL__INT_);
		method.addSignedIntParameter(points);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setRewardFactionPointsRebel(points);
	}
}

void MissionObject::setRewardFactionPointsImperial(int points) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREWARDFACTIONPOINTSIMPERIAL__INT_);
		method.addSignedIntParameter(points);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setRewardFactionPointsImperial(points);
	}
}

void MissionObject::setMissionNumber(int num) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONNUMBER__INT_);
		method.addSignedIntParameter(num);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMissionNumber(num);
	}
}

void MissionObject::setTargetOptionalTemplate(const String& tml) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTARGETOPTIONALTEMPLATE__STRING_);
		method.addAsciiParameter(tml);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setTargetOptionalTemplate(tml);
	}
}

void MissionObject::setTemplateStrings(const String& temp1, const String& temp2) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTEMPLATESTRINGS__STRING_STRING_);
		method.addAsciiParameter(temp1);
		method.addAsciiParameter(temp2);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setTemplateStrings(temp1, temp2);
	}
}

MissionObjective* MissionObject::getMissionObjective() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONOBJECTIVE__);

		return static_cast<MissionObjective*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getMissionObjective();
	}
}

unsigned int MissionObject::getFaction() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTION__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getFaction();
	}
}

int MissionObject::getRewardFactionPointsRebel() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREWARDFACTIONPOINTSREBEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRewardFactionPointsRebel();
	}
}

int MissionObject::getRewardFactionPointsImperial() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREWARDFACTIONPOINTSIMPERIAL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRewardFactionPointsImperial();
	}
}

float MissionObject::getStartPositionX() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTARTPOSITIONX__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getStartPositionX();
	}
}

float MissionObject::getStartPositionY() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTARTPOSITIONY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getStartPositionY();
	}
}

String MissionObject::getTargetOptionalTemplate() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTARGETOPTIONALTEMPLATE__);

		String _return_getTargetOptionalTemplate;
		method.executeWithAsciiReturn(_return_getTargetOptionalTemplate);
		return _return_getTargetOptionalTemplate;
	} else {
		return _implementation->getTargetOptionalTemplate();
	}
}

String MissionObject::getStartPlanet() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTARTPLANET__);

		String _return_getStartPlanet;
		method.executeWithAsciiReturn(_return_getStartPlanet);
		return _return_getStartPlanet;
	} else {
		return _implementation->getStartPlanet();
	}
}

float MissionObject::getEndPositionX() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDPOSITIONX__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getEndPositionX();
	}
}

float MissionObject::getEndPositionY() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDPOSITIONY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getEndPositionY();
	}
}

String MissionObject::getEndPlanet() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDPLANET__);

		String _return_getEndPlanet;
		method.executeWithAsciiReturn(_return_getEndPlanet);
		return _return_getEndPlanet;
	} else {
		return _implementation->getEndPlanet();
	}
}

void MissionObject::setEndPlanet(const String& newEndPlanet) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENDPLANET__STRING_);
		method.addAsciiParameter(newEndPlanet);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setEndPlanet(newEndPlanet);
	}
}

WaypointObject* MissionObject::getWaypointToMission() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWAYPOINTTOMISSION__);

		return static_cast<WaypointObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getWaypointToMission();
	}
}

unsigned int MissionObject::getTypeCRC() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTYPECRC__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getTypeCRC();
	}
}

int MissionObject::getRewardCredits() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREWARDCREDITS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRewardCredits();
	}
}

int MissionObject::getRewardCreditsDivisor() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREWARDCREDITSDIVISOR__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRewardCreditsDivisor();
	}
}

UnicodeString MissionObject::getCreatorName() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCREATORNAME__);

		UnicodeString _return_getCreatorName;
		method.executeWithUnicodeReturn(_return_getCreatorName);
		return _return_getCreatorName;
	} else {
		return _implementation->getCreatorName();
	}
}

int MissionObject::getDifficultyLevel() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIFFICULTYLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDifficultyLevel();
	}
}

int MissionObject::getDifficultyDisplay() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIFFICULTYDISPLAY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDifficultyDisplay();
	}
}

int MissionObject::getDifficulty() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIFFICULTY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDifficulty();
	}
}

StringId* MissionObject::getMissionDescription() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getMissionDescription();
	}
}

StringId* MissionObject::getMissionTitle() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getMissionTitle();
	}
}

String MissionObject::getTargetName() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTARGETNAME__);

		String _return_getTargetName;
		method.executeWithAsciiReturn(_return_getTargetName);
		return _return_getTargetName;
	} else {
		return _implementation->getTargetName();
	}
}

int MissionObject::getRefreshCounter() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREFRESHCOUNTER__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRefreshCounter();
	}
}

int MissionObject::getMissionNumber() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONNUMBER__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMissionNumber();
	}
}

SharedObjectTemplate* MissionObject::getTargetTemplate() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getTargetTemplate();
	}
}

bool MissionObject::isSurveyMission() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSURVEYMISSION__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSurveyMission();
	}
}

bool MissionObject::isMissionObject() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMISSIONOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isMissionObject();
	}
}

String MissionObject::getTemplateString1() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTEMPLATESTRING1__);

		String _return_getTemplateString1;
		method.executeWithAsciiReturn(_return_getTemplateString1);
		return _return_getTemplateString1;
	} else {
		return _implementation->getTemplateString1();
	}
}

String MissionObject::getTemplateString2() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTEMPLATESTRING2__);

		String _return_getTemplateString2;
		method.executeWithAsciiReturn(_return_getTemplateString2);
		return _return_getTemplateString2;
	} else {
		return _implementation->getTemplateString2();
	}
}

unsigned long long MissionObject::getTargetObjectId() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTARGETOBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getTargetObjectId();
	}
}

void MissionObject::setTargetObjectId(unsigned long long id) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTARGETOBJECTID__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setTargetObjectId(id);
	}
}

void MissionObject::setMissionLevel(int level) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONLEVEL__INT_);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMissionLevel(level);
	}
}

int MissionObject::getMissionLevel() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMissionLevel();
	}
}

void MissionObject::setSize(float siz) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSIZE__FLOAT_);
		method.addFloatParameter(siz);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setSize(siz);
	}
}

float MissionObject::getSize() const {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSIZE__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getSize();
	}
}

DistributedObjectServant* MissionObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* MissionObject::_getImplementationForRead() const {
	return _impl;
}

void MissionObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	MissionObjectImplementation
 */

MissionObjectImplementation::MissionObjectImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


MissionObjectImplementation::~MissionObjectImplementation() {
}


void MissionObjectImplementation::finalize() {
}

void MissionObjectImplementation::_initializeImplementation() {
	_setClassHelper(MissionObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void MissionObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<MissionObject*>(stub);
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* MissionObjectImplementation::_getStub() {
	return _this.get();
}

MissionObjectImplementation::operator const MissionObject*() {
	return _this.get();
}

void MissionObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void MissionObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void MissionObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void MissionObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void MissionObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void MissionObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void MissionObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void MissionObjectImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("MissionObject");

}

void MissionObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(MissionObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (IntangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6d931577: //MissionObject.waypointToMission
		TypeInfo<ManagedReference<WaypointObject* > >::parseFromBinaryStream(&waypointToMission, stream);
		return true;

	case 0xe51f6ba1: //MissionObject.missionObjective
		TypeInfo<ManagedReference<MissionObjective* > >::parseFromBinaryStream(&missionObjective, stream);
		return true;

	case 0x5102d7c: //MissionObject.typeCRC
		TypeInfo<unsigned int >::parseFromBinaryStream(&typeCRC, stream);
		return true;

	case 0x67bd2214: //MissionObject.difficultyLevel
		TypeInfo<int >::parseFromBinaryStream(&difficultyLevel, stream);
		return true;

	case 0x8ea8f8b8: //MissionObject.difficultyDisplay
		TypeInfo<int >::parseFromBinaryStream(&difficultyDisplay, stream);
		return true;

	case 0x3c73fad7: //MissionObject.difficulty
		TypeInfo<int >::parseFromBinaryStream(&difficulty, stream);
		return true;

	case 0xe134c5cc: //MissionObject.creatorName
		TypeInfo<UnicodeString >::parseFromBinaryStream(&creatorName, stream);
		return true;

	case 0x6da29f69: //MissionObject.rewardCredits
		TypeInfo<int >::parseFromBinaryStream(&rewardCredits, stream);
		return true;

	case 0x6c912b9c: //MissionObject.rewardCreditsDivisor
		TypeInfo<int >::parseFromBinaryStream(&rewardCreditsDivisor, stream);
		return true;

	case 0x284a0cca: //MissionObject.rewardFactionPointsRebel
		TypeInfo<int >::parseFromBinaryStream(&rewardFactionPointsRebel, stream);
		return true;

	case 0x29428677: //MissionObject.rewardFactionPointsImperial
		TypeInfo<int >::parseFromBinaryStream(&rewardFactionPointsImperial, stream);
		return true;

	case 0x8560e59b: //MissionObject.missionNumber
		TypeInfo<int >::parseFromBinaryStream(&missionNumber, stream);
		return true;

	case 0xd379291d: //MissionObject.faction
		TypeInfo<unsigned int >::parseFromBinaryStream(&faction, stream);
		return true;

	case 0xe09e5973: //MissionObject.missionLevel
		TypeInfo<int >::parseFromBinaryStream(&missionLevel, stream);
		return true;

	case 0xdddb0ee4: //MissionObject.size
		TypeInfo<float >::parseFromBinaryStream(&size, stream);
		return true;

	case 0x6d9fa767: //MissionObject.startPositionX
		TypeInfo<float >::parseFromBinaryStream(&startPositionX, stream);
		return true;

	case 0x695ebad0: //MissionObject.startPositionY
		TypeInfo<float >::parseFromBinaryStream(&startPositionY, stream);
		return true;

	case 0x397165b3: //MissionObject.startPlanet
		TypeInfo<String >::parseFromBinaryStream(&startPlanet, stream);
		return true;

	case 0xe05d8a36: //MissionObject.endPositionX
		TypeInfo<float >::parseFromBinaryStream(&endPositionX, stream);
		return true;

	case 0xe49c9781: //MissionObject.endPositionY
		TypeInfo<float >::parseFromBinaryStream(&endPositionY, stream);
		return true;

	case 0x4ca34399: //MissionObject.endPlanet
		TypeInfo<String >::parseFromBinaryStream(&endPlanet, stream);
		return true;

	case 0x61a445a6: //MissionObject.targetObjectId
		TypeInfo<unsigned long long >::parseFromBinaryStream(&targetObjectId, stream);
		return true;

	case 0xbd28d046: //MissionObject.missionDescription
		TypeInfo<StringId >::parseFromBinaryStream(&missionDescription, stream);
		return true;

	case 0xde93aff9: //MissionObject.missionTitle
		TypeInfo<StringId >::parseFromBinaryStream(&missionTitle, stream);
		return true;

	case 0x17be5441: //MissionObject.refreshCounter
		TypeInfo<unsigned int >::parseFromBinaryStream(&refreshCounter, stream);
		return true;

	case 0x6529aa4b: //MissionObject.targetName
		TypeInfo<String >::parseFromBinaryStream(&targetName, stream);
		return true;

	case 0x4aedc6a0: //MissionObject.templateString1
		TypeInfo<String >::parseFromBinaryStream(&templateString1, stream);
		return true;

	case 0x47aee079: //MissionObject.templateString2
		TypeInfo<String >::parseFromBinaryStream(&templateString2, stream);
		return true;

	case 0x609a3488: //MissionObject.targetTemplate
		TypeInfo<TemplateReference<SharedObjectTemplate*> >::parseFromBinaryStream(&targetTemplate, stream);
		return true;

	case 0x5151bc3b: //MissionObject.targetOptionalTemplate
		TypeInfo<String >::parseFromBinaryStream(&targetOptionalTemplate, stream);
		return true;

	}

	return false;
}

void MissionObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = IntangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x6d931577; //MissionObject.waypointToMission
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<WaypointObject* > >::toBinaryStream(&waypointToMission, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe51f6ba1; //MissionObject.missionObjective
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<MissionObjective* > >::toBinaryStream(&missionObjective, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5102d7c; //MissionObject.typeCRC
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&typeCRC, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x67bd2214; //MissionObject.difficultyLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&difficultyLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8ea8f8b8; //MissionObject.difficultyDisplay
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&difficultyDisplay, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3c73fad7; //MissionObject.difficulty
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&difficulty, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe134c5cc; //MissionObject.creatorName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<UnicodeString >::toBinaryStream(&creatorName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6da29f69; //MissionObject.rewardCredits
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&rewardCredits, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6c912b9c; //MissionObject.rewardCreditsDivisor
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&rewardCreditsDivisor, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x284a0cca; //MissionObject.rewardFactionPointsRebel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&rewardFactionPointsRebel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x29428677; //MissionObject.rewardFactionPointsImperial
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&rewardFactionPointsImperial, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8560e59b; //MissionObject.missionNumber
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&missionNumber, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd379291d; //MissionObject.faction
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&faction, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe09e5973; //MissionObject.missionLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&missionLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xdddb0ee4; //MissionObject.size
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&size, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6d9fa767; //MissionObject.startPositionX
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&startPositionX, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x695ebad0; //MissionObject.startPositionY
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&startPositionY, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x397165b3; //MissionObject.startPlanet
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&startPlanet, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe05d8a36; //MissionObject.endPositionX
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&endPositionX, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe49c9781; //MissionObject.endPositionY
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&endPositionY, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4ca34399; //MissionObject.endPlanet
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&endPlanet, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x61a445a6; //MissionObject.targetObjectId
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&targetObjectId, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbd28d046; //MissionObject.missionDescription
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<StringId >::toBinaryStream(&missionDescription, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xde93aff9; //MissionObject.missionTitle
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<StringId >::toBinaryStream(&missionTitle, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x17be5441; //MissionObject.refreshCounter
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&refreshCounter, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6529aa4b; //MissionObject.targetName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&targetName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4aedc6a0; //MissionObject.templateString1
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&templateString1, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x47aee079; //MissionObject.templateString2
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&templateString2, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x609a3488; //MissionObject.targetTemplate
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<TemplateReference<SharedObjectTemplate*> >::toBinaryStream(&targetTemplate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5151bc3b; //MissionObject.targetOptionalTemplate
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&targetOptionalTemplate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 30;
}

MissionObjectImplementation::MissionObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/mission/MissionObject.idl():  		typeCRC = MissionTypes.SURVEY;
	typeCRC = MissionTypes::SURVEY;
	// server/zone/objects/mission/MissionObject.idl():  		refreshCounter = 0;
	refreshCounter = 0;
	// server/zone/objects/mission/MissionObject.idl():  		missionDescription.setStringId("mission/mission_npc_survey_neutral_easy", "m1o");
	(&missionDescription)->setStringId("mission/mission_npc_survey_neutral_easy", "m1o");
	// server/zone/objects/mission/MissionObject.idl():  		missionTitle.setStringId("mission/mission_npc_survey_neutral_easy", "m1t");
	(&missionTitle)->setStringId("mission/mission_npc_survey_neutral_easy", "m1t");
	// server/zone/objects/mission/MissionObject.idl():  		targetName = "Testing target name";
	targetName = "Testing target name";
	// server/zone/objects/mission/MissionObject.idl():  		difficultyLevel = 50;
	difficultyLevel = 50;
	// server/zone/objects/mission/MissionObject.idl():  		difficultyDisplay = 80;
	difficultyDisplay = 80;
	// server/zone/objects/mission/MissionObject.idl():  		difficulty = 2;
	difficulty = 2;
	// server/zone/objects/mission/MissionObject.idl():  		rewardCredits = 100;
	rewardCredits = 100;
	// server/zone/objects/mission/MissionObject.idl():  		rewardCreditsDivisor = 1;
	rewardCreditsDivisor = 1;
	// server/zone/objects/mission/MissionObject.idl():  		rewardFactionPointsRebel = 0;
	rewardFactionPointsRebel = 0;
	// server/zone/objects/mission/MissionObject.idl():  		rewardFactionPointsImperial = 0;
	rewardFactionPointsImperial = 0;
	// server/zone/objects/mission/MissionObject.idl():  		size = 20;
	size = 20;
	// server/zone/objects/mission/MissionObject.idl():  		startPositionX = 0;
	startPositionX = 0;
	// server/zone/objects/mission/MissionObject.idl():  		startPositionY = 0;
	startPositionY = 0;
	// server/zone/objects/mission/MissionObject.idl():  		endPositionX = 0;
	endPositionX = 0;
	// server/zone/objects/mission/MissionObject.idl():  		endPositionY = 0;
	endPositionY = 0;
	// server/zone/objects/mission/MissionObject.idl():  		targetObjectId = 0;
	targetObjectId = 0;
	// server/zone/objects/mission/MissionObject.idl():  		faction = Factions.FACTIONNEUTRAL;
	faction = Factions::FACTIONNEUTRAL;
	// server/zone/objects/mission/MissionObject.idl():  		missionNumber = 0;
	missionNumber = 0;
	// server/zone/objects/mission/MissionObject.idl():  		missionLevel = 0;
	missionLevel = 0;
	// server/zone/objects/mission/MissionObject.idl():  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
}

void MissionObjectImplementation::abort() {
	// server/zone/objects/mission/MissionObject.idl():  	}
	if (missionObjective != NULL)	// server/zone/objects/mission/MissionObject.idl():  			missionObjective.abort();
	missionObjective->abort();
}

void MissionObjectImplementation::setFaction(const int missionFaction) {
	// server/zone/objects/mission/MissionObject.idl():  		faction = missionFaction;
	faction = missionFaction;
}

void MissionObjectImplementation::setMissionObjective(MissionObjective* obj) {
	// server/zone/objects/mission/MissionObject.idl():  		missionObjective = obj;
	missionObjective = obj;
}

void MissionObjectImplementation::setRewardFactionPointsRebel(int points) {
	// server/zone/objects/mission/MissionObject.idl():  		rewardFactionPointsRebel = points;
	rewardFactionPointsRebel = points;
}

void MissionObjectImplementation::setRewardFactionPointsImperial(int points) {
	// server/zone/objects/mission/MissionObject.idl():  		rewardFactionPointsImperial = points;
	rewardFactionPointsImperial = points;
}

void MissionObjectImplementation::setMissionNumber(int num) {
	// server/zone/objects/mission/MissionObject.idl():  		missionNumber = num;
	missionNumber = num;
}

void MissionObjectImplementation::setTargetOptionalTemplate(const String& tml) {
	// server/zone/objects/mission/MissionObject.idl():  		targetOptionalTemplate = tml;
	targetOptionalTemplate = tml;
}

void MissionObjectImplementation::setTemplateStrings(const String& temp1, const String& temp2) {
	// server/zone/objects/mission/MissionObject.idl():  		templateString1 = temp1;
	templateString1 = temp1;
	// server/zone/objects/mission/MissionObject.idl():  		templateString2 = temp2;
	templateString2 = temp2;
}

MissionObjective* MissionObjectImplementation::getMissionObjective() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionObjective;
	return missionObjective;
}

unsigned int MissionObjectImplementation::getFaction() const{
	// server/zone/objects/mission/MissionObject.idl():  		return faction;
	return faction;
}

int MissionObjectImplementation::getRewardFactionPointsRebel() const{
	// server/zone/objects/mission/MissionObject.idl():  		return rewardFactionPointsRebel;
	return rewardFactionPointsRebel;
}

int MissionObjectImplementation::getRewardFactionPointsImperial() const{
	// server/zone/objects/mission/MissionObject.idl():  		return rewardFactionPointsImperial;
	return rewardFactionPointsImperial;
}

float MissionObjectImplementation::getStartPositionX() const{
	// server/zone/objects/mission/MissionObject.idl():  		return startPositionX;
	return startPositionX;
}

float MissionObjectImplementation::getStartPositionY() const{
	// server/zone/objects/mission/MissionObject.idl():  		return startPositionY;
	return startPositionY;
}

String MissionObjectImplementation::getTargetOptionalTemplate() const{
	// server/zone/objects/mission/MissionObject.idl():  		return targetOptionalTemplate;
	return targetOptionalTemplate;
}

String MissionObjectImplementation::getStartPlanet() const{
	// server/zone/objects/mission/MissionObject.idl():  		return startPlanet;
	return startPlanet;
}

float MissionObjectImplementation::getEndPositionX() const{
	// server/zone/objects/mission/MissionObject.idl():  		return endPositionX;
	return endPositionX;
}

float MissionObjectImplementation::getEndPositionY() const{
	// server/zone/objects/mission/MissionObject.idl():  		return endPositionY;
	return endPositionY;
}

String MissionObjectImplementation::getEndPlanet() const{
	// server/zone/objects/mission/MissionObject.idl():  		return endPlanet;
	return endPlanet;
}

void MissionObjectImplementation::setEndPlanet(const String& newEndPlanet) {
	// server/zone/objects/mission/MissionObject.idl():  		endPlanet = newEndPlanet;
	endPlanet = newEndPlanet;
}

WaypointObject* MissionObjectImplementation::getWaypointToMission() {
	// server/zone/objects/mission/MissionObject.idl():  		return waypointToMission;
	return waypointToMission;
}

unsigned int MissionObjectImplementation::getTypeCRC() const{
	// server/zone/objects/mission/MissionObject.idl():  		return typeCRC;
	return typeCRC;
}

int MissionObjectImplementation::getRewardCredits() const{
	// server/zone/objects/mission/MissionObject.idl():  		return rewardCredits;
	return rewardCredits;
}

int MissionObjectImplementation::getRewardCreditsDivisor() const{
	// server/zone/objects/mission/MissionObject.idl():  		return rewardCreditsDivisor;
	return rewardCreditsDivisor;
}

UnicodeString MissionObjectImplementation::getCreatorName() const{
	// server/zone/objects/mission/MissionObject.idl():  		return creatorName;
	return creatorName;
}

int MissionObjectImplementation::getDifficultyLevel() const{
	// server/zone/objects/mission/MissionObject.idl():  		return difficultyLevel;
	return difficultyLevel;
}

int MissionObjectImplementation::getDifficultyDisplay() const{
	// server/zone/objects/mission/MissionObject.idl():  		return difficultyDisplay;
	return difficultyDisplay;
}

int MissionObjectImplementation::getDifficulty() const{
	// server/zone/objects/mission/MissionObject.idl():  		return difficulty;
	return difficulty;
}

StringId* MissionObjectImplementation::getMissionDescription() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionDescription;
	return (&missionDescription);
}

StringId* MissionObjectImplementation::getMissionTitle() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionTitle;
	return (&missionTitle);
}

String MissionObjectImplementation::getTargetName() const{
	// server/zone/objects/mission/MissionObject.idl():  		return targetName;
	return targetName;
}

int MissionObjectImplementation::getRefreshCounter() const{
	// server/zone/objects/mission/MissionObject.idl():  		return refreshCounter;
	return refreshCounter;
}

int MissionObjectImplementation::getMissionNumber() const{
	// server/zone/objects/mission/MissionObject.idl():  		return missionNumber;
	return missionNumber;
}

bool MissionObjectImplementation::isSurveyMission() {
	// server/zone/objects/mission/MissionObject.idl():  		return typeCRC == MissionTypes.SURVEY;
	return typeCRC == MissionTypes::SURVEY;
}

bool MissionObjectImplementation::isMissionObject() {
	// server/zone/objects/mission/MissionObject.idl():  		return true;
	return true;
}

String MissionObjectImplementation::getTemplateString1() const{
	// server/zone/objects/mission/MissionObject.idl():  		return templateString1;
	return templateString1;
}

String MissionObjectImplementation::getTemplateString2() const{
	// server/zone/objects/mission/MissionObject.idl():  		return templateString2;
	return templateString2;
}

unsigned long long MissionObjectImplementation::getTargetObjectId() const{
	// server/zone/objects/mission/MissionObject.idl():  		return targetObjectId;
	return targetObjectId;
}

void MissionObjectImplementation::setTargetObjectId(unsigned long long id) {
	// server/zone/objects/mission/MissionObject.idl():  		targetObjectId = id;
	targetObjectId = id;
}

void MissionObjectImplementation::setMissionLevel(int level) {
	// server/zone/objects/mission/MissionObject.idl():  		missionLevel = level;
	missionLevel = level;
}

int MissionObjectImplementation::getMissionLevel() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionLevel;
	return missionLevel;
}

void MissionObjectImplementation::setSize(float siz) {
	// server/zone/objects/mission/MissionObject.idl():  		size = siz;
	size = siz;
}

float MissionObjectImplementation::getSize() const{
	// server/zone/objects/mission/MissionObject.idl():  		return size;
	return size;
}

/*
 *	MissionObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


MissionObjectAdapter::MissionObjectAdapter(MissionObject* obj) : IntangibleObjectAdapter(obj) {
}

void MissionObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_CREATEWAYPOINT__:
		{
			
			DistributedObject* _m_res = createWaypoint();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		{
			bool destroyContainedObjects = inv->getBooleanParameter();
			
			destroyObjectFromDatabase(destroyContainedObjects);
			
		}
		break;
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		{
			bool startTask = inv->getBooleanParameter();
			
			updateToDatabaseAllObjects(startTask);
			
		}
		break;
	case RPC_SETREFRESHCOUNTER__INT_BOOL_:
		{
			int ctr = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setRefreshCounter(ctr, notifyClient);
			
		}
		break;
	case RPC_SETTYPECRC__INT_BOOL_:
		{
			unsigned int crc = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setTypeCRC(crc, notifyClient);
			
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendBaselinesTo(player);
			
		}
		break;
	case RPC_SETMISSIONDESCRIPTION__STRING_STRING_BOOL_:
		{
			 String file; inv->getAsciiParameter(file);
			 String id; inv->getAsciiParameter(id);
			bool notifyClient = inv->getBooleanParameter();
			
			setMissionDescription(file, id, notifyClient);
			
		}
		break;
	case RPC_SETMISSIONTITLE__STRING_STRING_BOOL_:
		{
			 String file; inv->getAsciiParameter(file);
			 String id; inv->getAsciiParameter(id);
			bool notifyClient = inv->getBooleanParameter();
			
			setMissionTitle(file, id, notifyClient);
			
		}
		break;
	case RPC_SETMISSIONTARGETNAME__STRING_BOOL_:
		{
			 String target; inv->getAsciiParameter(target);
			bool notifyClient = inv->getBooleanParameter();
			
			setMissionTargetName(target, notifyClient);
			
		}
		break;
	case RPC_SETMISSIONDIFFICULTY__INT_BOOL_:
		{
			int diffLevel = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setMissionDifficulty(diffLevel, notifyClient);
			
		}
		break;
	case RPC_SETMISSIONDIFFICULTY__INT_INT_INT_BOOL_:
		{
			int diffLevel = inv->getSignedIntParameter();
			int display = inv->getSignedIntParameter();
			int diff = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setMissionDifficulty(diffLevel, display, diff, notifyClient);
			
		}
		break;
	case RPC_SETREWARDCREDITS__INT_BOOL_:
		{
			int creds = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setRewardCredits(creds, notifyClient);
			
		}
		break;
	case RPC_SETSTARTPOSITION__FLOAT_FLOAT_STRING_BOOL_:
		{
			float posX = inv->getFloatParameter();
			float posY = inv->getFloatParameter();
			 String planet; inv->getAsciiParameter(planet);
			bool notifyClient = inv->getBooleanParameter();
			
			setStartPosition(posX, posY, planet, notifyClient);
			
		}
		break;
	case RPC_SETSTARTPOSITION__FLOAT_FLOAT_BOOL_:
		{
			float posX = inv->getFloatParameter();
			float posY = inv->getFloatParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setStartPosition(posX, posY, notifyClient);
			
		}
		break;
	case RPC_SETENDPOSITION__FLOAT_FLOAT_STRING_BOOL_:
		{
			float posX = inv->getFloatParameter();
			float posY = inv->getFloatParameter();
			 String planet; inv->getAsciiParameter(planet);
			bool notifyClient = inv->getBooleanParameter();
			
			setEndPosition(posX, posY, planet, notifyClient);
			
		}
		break;
	case RPC_SETCREATORNAME__STRING_BOOL_:
		{
			 String name; inv->getAsciiParameter(name);
			bool notifyClient = inv->getBooleanParameter();
			
			setCreatorName(name, notifyClient);
			
		}
		break;
	case RPC_GETSTARTPLANETCRC__:
		{
			
			unsigned int _m_res = getStartPlanetCRC();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_UPDATEMISSIONLOCATION__:
		{
			
			updateMissionLocation();
			
		}
		break;
	case RPC_ABORT__:
		{
			
			abort();
			
		}
		break;
	case RPC_SETFACTION__INT_:
		{
			 int missionFaction = inv->getSignedIntParameter();
			
			setFaction(missionFaction);
			
		}
		break;
	case RPC_SETMISSIONOBJECTIVE__MISSIONOBJECTIVE_:
		{
			MissionObjective* obj = static_cast<MissionObjective*>(inv->getObjectParameter());
			
			setMissionObjective(obj);
			
		}
		break;
	case RPC_SETREWARDFACTIONPOINTSREBEL__INT_:
		{
			int points = inv->getSignedIntParameter();
			
			setRewardFactionPointsRebel(points);
			
		}
		break;
	case RPC_SETREWARDFACTIONPOINTSIMPERIAL__INT_:
		{
			int points = inv->getSignedIntParameter();
			
			setRewardFactionPointsImperial(points);
			
		}
		break;
	case RPC_SETMISSIONNUMBER__INT_:
		{
			int num = inv->getSignedIntParameter();
			
			setMissionNumber(num);
			
		}
		break;
	case RPC_SETTARGETOPTIONALTEMPLATE__STRING_:
		{
			 String tml; inv->getAsciiParameter(tml);
			
			setTargetOptionalTemplate(tml);
			
		}
		break;
	case RPC_SETTEMPLATESTRINGS__STRING_STRING_:
		{
			 String temp1; inv->getAsciiParameter(temp1);
			 String temp2; inv->getAsciiParameter(temp2);
			
			setTemplateStrings(temp1, temp2);
			
		}
		break;
	case RPC_GETMISSIONOBJECTIVE__:
		{
			
			DistributedObject* _m_res = getMissionObjective();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETFACTION__:
		{
			
			unsigned int _m_res = getFaction();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETREWARDFACTIONPOINTSREBEL__:
		{
			
			int _m_res = getRewardFactionPointsRebel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETREWARDFACTIONPOINTSIMPERIAL__:
		{
			
			int _m_res = getRewardFactionPointsImperial();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSTARTPOSITIONX__:
		{
			
			float _m_res = getStartPositionX();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSTARTPOSITIONY__:
		{
			
			float _m_res = getStartPositionY();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETTARGETOPTIONALTEMPLATE__:
		{
			
			String _m_res = getTargetOptionalTemplate();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETSTARTPLANET__:
		{
			
			String _m_res = getStartPlanet();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETENDPOSITIONX__:
		{
			
			float _m_res = getEndPositionX();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETENDPOSITIONY__:
		{
			
			float _m_res = getEndPositionY();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETENDPLANET__:
		{
			
			String _m_res = getEndPlanet();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETENDPLANET__STRING_:
		{
			 String newEndPlanet; inv->getAsciiParameter(newEndPlanet);
			
			setEndPlanet(newEndPlanet);
			
		}
		break;
	case RPC_GETWAYPOINTTOMISSION__:
		{
			
			DistributedObject* _m_res = getWaypointToMission();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETTYPECRC__:
		{
			
			unsigned int _m_res = getTypeCRC();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETREWARDCREDITS__:
		{
			
			int _m_res = getRewardCredits();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETREWARDCREDITSDIVISOR__:
		{
			
			int _m_res = getRewardCreditsDivisor();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCREATORNAME__:
		{
			
			UnicodeString _m_res = getCreatorName();
			resp->insertUnicode(_m_res);
		}
		break;
	case RPC_GETDIFFICULTYLEVEL__:
		{
			
			int _m_res = getDifficultyLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDIFFICULTYDISPLAY__:
		{
			
			int _m_res = getDifficultyDisplay();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDIFFICULTY__:
		{
			
			int _m_res = getDifficulty();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETTARGETNAME__:
		{
			
			String _m_res = getTargetName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETREFRESHCOUNTER__:
		{
			
			int _m_res = getRefreshCounter();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMISSIONNUMBER__:
		{
			
			int _m_res = getMissionNumber();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISSURVEYMISSION__:
		{
			
			bool _m_res = isSurveyMission();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISMISSIONOBJECT__:
		{
			
			bool _m_res = isMissionObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETTEMPLATESTRING1__:
		{
			
			String _m_res = getTemplateString1();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETTEMPLATESTRING2__:
		{
			
			String _m_res = getTemplateString2();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETTARGETOBJECTID__:
		{
			
			unsigned long long _m_res = getTargetObjectId();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_SETTARGETOBJECTID__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			setTargetObjectId(id);
			
		}
		break;
	case RPC_SETMISSIONLEVEL__INT_:
		{
			int level = inv->getSignedIntParameter();
			
			setMissionLevel(level);
			
		}
		break;
	case RPC_GETMISSIONLEVEL__:
		{
			
			int _m_res = getMissionLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETSIZE__FLOAT_:
		{
			float siz = inv->getFloatParameter();
			
			setSize(siz);
			
		}
		break;
	case RPC_GETSIZE__:
		{
			
			float _m_res = getSize();
			resp->insertFloat(_m_res);
		}
		break;
	default:
		IntangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

WaypointObject* MissionObjectAdapter::createWaypoint() {
	return (static_cast<MissionObject*>(stub))->createWaypoint();
}

void MissionObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<MissionObject*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

void MissionObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	(static_cast<MissionObject*>(stub))->updateToDatabaseAllObjects(startTask);
}

void MissionObjectAdapter::setRefreshCounter(int ctr, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setRefreshCounter(ctr, notifyClient);
}

void MissionObjectAdapter::setTypeCRC(unsigned int crc, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setTypeCRC(crc, notifyClient);
}

void MissionObjectAdapter::initializeTransientMembers() {
	(static_cast<MissionObject*>(stub))->initializeTransientMembers();
}

void MissionObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<MissionObject*>(stub))->sendBaselinesTo(player);
}

void MissionObjectAdapter::setMissionDescription(const String& file, const String& id, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionDescription(file, id, notifyClient);
}

void MissionObjectAdapter::setMissionTitle(const String& file, const String& id, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionTitle(file, id, notifyClient);
}

void MissionObjectAdapter::setMissionTargetName(const String& target, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionTargetName(target, notifyClient);
}

void MissionObjectAdapter::setMissionDifficulty(int diffLevel, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionDifficulty(diffLevel, notifyClient);
}

void MissionObjectAdapter::setMissionDifficulty(int diffLevel, int display, int diff, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionDifficulty(diffLevel, display, diff, notifyClient);
}

void MissionObjectAdapter::setRewardCredits(int creds, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setRewardCredits(creds, notifyClient);
}

void MissionObjectAdapter::setStartPosition(float posX, float posY, const String& planet, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setStartPosition(posX, posY, planet, notifyClient);
}

void MissionObjectAdapter::setStartPosition(float posX, float posY, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setStartPosition(posX, posY, notifyClient);
}

void MissionObjectAdapter::setEndPosition(float posX, float posY, const String& planet, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setEndPosition(posX, posY, planet, notifyClient);
}

void MissionObjectAdapter::setCreatorName(const String& name, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setCreatorName(name, notifyClient);
}

unsigned int MissionObjectAdapter::getStartPlanetCRC() {
	return (static_cast<MissionObject*>(stub))->getStartPlanetCRC();
}

void MissionObjectAdapter::updateMissionLocation() {
	(static_cast<MissionObject*>(stub))->updateMissionLocation();
}

void MissionObjectAdapter::abort() {
	(static_cast<MissionObject*>(stub))->abort();
}

void MissionObjectAdapter::setFaction(const int missionFaction) {
	(static_cast<MissionObject*>(stub))->setFaction(missionFaction);
}

void MissionObjectAdapter::setMissionObjective(MissionObjective* obj) {
	(static_cast<MissionObject*>(stub))->setMissionObjective(obj);
}

void MissionObjectAdapter::setRewardFactionPointsRebel(int points) {
	(static_cast<MissionObject*>(stub))->setRewardFactionPointsRebel(points);
}

void MissionObjectAdapter::setRewardFactionPointsImperial(int points) {
	(static_cast<MissionObject*>(stub))->setRewardFactionPointsImperial(points);
}

void MissionObjectAdapter::setMissionNumber(int num) {
	(static_cast<MissionObject*>(stub))->setMissionNumber(num);
}

void MissionObjectAdapter::setTargetOptionalTemplate(const String& tml) {
	(static_cast<MissionObject*>(stub))->setTargetOptionalTemplate(tml);
}

void MissionObjectAdapter::setTemplateStrings(const String& temp1, const String& temp2) {
	(static_cast<MissionObject*>(stub))->setTemplateStrings(temp1, temp2);
}

MissionObjective* MissionObjectAdapter::getMissionObjective() {
	return (static_cast<MissionObject*>(stub))->getMissionObjective();
}

unsigned int MissionObjectAdapter::getFaction() const {
	return (static_cast<MissionObject*>(stub))->getFaction();
}

int MissionObjectAdapter::getRewardFactionPointsRebel() const {
	return (static_cast<MissionObject*>(stub))->getRewardFactionPointsRebel();
}

int MissionObjectAdapter::getRewardFactionPointsImperial() const {
	return (static_cast<MissionObject*>(stub))->getRewardFactionPointsImperial();
}

float MissionObjectAdapter::getStartPositionX() const {
	return (static_cast<MissionObject*>(stub))->getStartPositionX();
}

float MissionObjectAdapter::getStartPositionY() const {
	return (static_cast<MissionObject*>(stub))->getStartPositionY();
}

String MissionObjectAdapter::getTargetOptionalTemplate() const {
	return (static_cast<MissionObject*>(stub))->getTargetOptionalTemplate();
}

String MissionObjectAdapter::getStartPlanet() const {
	return (static_cast<MissionObject*>(stub))->getStartPlanet();
}

float MissionObjectAdapter::getEndPositionX() const {
	return (static_cast<MissionObject*>(stub))->getEndPositionX();
}

float MissionObjectAdapter::getEndPositionY() const {
	return (static_cast<MissionObject*>(stub))->getEndPositionY();
}

String MissionObjectAdapter::getEndPlanet() const {
	return (static_cast<MissionObject*>(stub))->getEndPlanet();
}

void MissionObjectAdapter::setEndPlanet(const String& newEndPlanet) {
	(static_cast<MissionObject*>(stub))->setEndPlanet(newEndPlanet);
}

WaypointObject* MissionObjectAdapter::getWaypointToMission() {
	return (static_cast<MissionObject*>(stub))->getWaypointToMission();
}

unsigned int MissionObjectAdapter::getTypeCRC() const {
	return (static_cast<MissionObject*>(stub))->getTypeCRC();
}

int MissionObjectAdapter::getRewardCredits() const {
	return (static_cast<MissionObject*>(stub))->getRewardCredits();
}

int MissionObjectAdapter::getRewardCreditsDivisor() const {
	return (static_cast<MissionObject*>(stub))->getRewardCreditsDivisor();
}

UnicodeString MissionObjectAdapter::getCreatorName() const {
	return (static_cast<MissionObject*>(stub))->getCreatorName();
}

int MissionObjectAdapter::getDifficultyLevel() const {
	return (static_cast<MissionObject*>(stub))->getDifficultyLevel();
}

int MissionObjectAdapter::getDifficultyDisplay() const {
	return (static_cast<MissionObject*>(stub))->getDifficultyDisplay();
}

int MissionObjectAdapter::getDifficulty() const {
	return (static_cast<MissionObject*>(stub))->getDifficulty();
}

String MissionObjectAdapter::getTargetName() const {
	return (static_cast<MissionObject*>(stub))->getTargetName();
}

int MissionObjectAdapter::getRefreshCounter() const {
	return (static_cast<MissionObject*>(stub))->getRefreshCounter();
}

int MissionObjectAdapter::getMissionNumber() const {
	return (static_cast<MissionObject*>(stub))->getMissionNumber();
}

bool MissionObjectAdapter::isSurveyMission() {
	return (static_cast<MissionObject*>(stub))->isSurveyMission();
}

bool MissionObjectAdapter::isMissionObject() {
	return (static_cast<MissionObject*>(stub))->isMissionObject();
}

String MissionObjectAdapter::getTemplateString1() const {
	return (static_cast<MissionObject*>(stub))->getTemplateString1();
}

String MissionObjectAdapter::getTemplateString2() const {
	return (static_cast<MissionObject*>(stub))->getTemplateString2();
}

unsigned long long MissionObjectAdapter::getTargetObjectId() const {
	return (static_cast<MissionObject*>(stub))->getTargetObjectId();
}

void MissionObjectAdapter::setTargetObjectId(unsigned long long id) {
	(static_cast<MissionObject*>(stub))->setTargetObjectId(id);
}

void MissionObjectAdapter::setMissionLevel(int level) {
	(static_cast<MissionObject*>(stub))->setMissionLevel(level);
}

int MissionObjectAdapter::getMissionLevel() {
	return (static_cast<MissionObject*>(stub))->getMissionLevel();
}

void MissionObjectAdapter::setSize(float siz) {
	(static_cast<MissionObject*>(stub))->setSize(siz);
}

float MissionObjectAdapter::getSize() const {
	return (static_cast<MissionObject*>(stub))->getSize();
}

/*
 *	MissionObjectHelper
 */

MissionObjectHelper* MissionObjectHelper::staticInitializer = MissionObjectHelper::instance();

MissionObjectHelper::MissionObjectHelper() {
	className = "MissionObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionObjectHelper::finalizeHelper() {
	MissionObjectHelper::finalize();
}

DistributedObject* MissionObjectHelper::instantiateObject() {
	return new MissionObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionObjectHelper::instantiateServant() {
	return new MissionObjectImplementation();
}

DistributedObjectAdapter* MissionObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionObjectAdapter(static_cast<MissionObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

