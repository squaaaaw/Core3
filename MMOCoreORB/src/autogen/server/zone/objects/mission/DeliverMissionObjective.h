/*
 *	autogen/server/zone/objects/mission/DeliverMissionObjective.h generated by engine3 IDL compiler 0.60
 */

#ifndef DELIVERMISSIONOBJECTIVE_H_
#define DELIVERMISSIONOBJECTIVE_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObject;

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiAgent;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

#include "server/zone/objects/mission/MissionObjective.h"

namespace server {
namespace zone {
namespace objects {
namespace mission {

class DeliverMissionObjective : public MissionObjective {
public:
	static const int INITSTATUS = 0;

	static const int PICKEDUPSTATUS = 1;

	static const int DELIVEREDSTATUS = 2;

	DeliverMissionObjective(MissionObject* mission);

	void initializeTransientMembers();

	TangibleObject* getItem();

	int getObjectiveStatus() const;

	void activate();

	void deactivate();

	bool activateWithResult();

	void abort();

	void complete();

	void despawnNpcs();

	void updateMissionStatus(CreatureObject* player);

	bool updateMissionTarget(CreatureObject* player);

	ManagedWeakReference<AiAgent* > getTargetSpawn();

	ManagedWeakReference<AiAgent* > getDestinationSpawn();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	DeliverMissionObjective(DummyConstructorParameter* param);

	virtual ~DeliverMissionObjective();

	friend class DeliverMissionObjectiveHelper;
};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class DeliverMissionObjectiveImplementation : public MissionObjectiveImplementation {
protected:
	ManagedReference<TangibleObject* > item;

	ManagedWeakReference<AiAgent* > targetSpawn;

	ManagedWeakReference<AiAgent* > destinationSpawn;

	int objectiveStatus;

public:
	static const int INITSTATUS = 0;

	static const int PICKEDUPSTATUS = 1;

	static const int DELIVEREDSTATUS = 2;

	DeliverMissionObjectiveImplementation(MissionObject* mission);

	DeliverMissionObjectiveImplementation(DummyConstructorParameter* param);

	void finalize();

	void initializeTransientMembers();

	TangibleObject* getItem();

	int getObjectiveStatus() const;

	virtual void activate();

	virtual void deactivate();

	bool activateWithResult();

	virtual void abort();

	virtual void complete();

	void despawnNpcs();

	virtual void updateMissionStatus(CreatureObject* player);

	virtual bool updateMissionTarget(CreatureObject* player);

	ManagedWeakReference<AiAgent* > getTargetSpawn();

	ManagedWeakReference<AiAgent* > getDestinationSpawn();

	WeakReference<DeliverMissionObjective*> _this;

	operator const DeliverMissionObjective*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~DeliverMissionObjectiveImplementation();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class DeliverMissionObjective;
};

class DeliverMissionObjectiveAdapter : public MissionObjectiveAdapter {
public:
	DeliverMissionObjectiveAdapter(DeliverMissionObjective* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void finalize();

	void initializeTransientMembers();

	TangibleObject* getItem();

	int getObjectiveStatus() const;

	void activate();

	void deactivate();

	bool activateWithResult();

	void abort();

	void complete();

	void despawnNpcs();

	void updateMissionStatus(CreatureObject* player);

	bool updateMissionTarget(CreatureObject* player);

	ManagedWeakReference<AiAgent* > getTargetSpawn();

	ManagedWeakReference<AiAgent* > getDestinationSpawn();

};

class DeliverMissionObjectiveHelper : public DistributedObjectClassHelper, public Singleton<DeliverMissionObjectiveHelper> {
	static DeliverMissionObjectiveHelper* staticInitializer;

public:
	DeliverMissionObjectiveHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<DeliverMissionObjectiveHelper>;
};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

#endif /*DELIVERMISSIONOBJECTIVE_H_*/
