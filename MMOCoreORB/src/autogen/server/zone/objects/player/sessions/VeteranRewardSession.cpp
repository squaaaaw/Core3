/*
 *	autogen/server/zone/objects/player/sessions/VeteranRewardSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "VeteranRewardSession.h"

/*
 *	VeteranRewardSessionStub
 */

enum {RPC_GETMILESTONE__ = 1973033673,RPC_GETSELECTEDREWARDINDEX__,RPC_SETSELECTEDREWARDINDEX__INT_};

VeteranRewardSession::VeteranRewardSession(unsigned int days) : Facade(DummyConstructorParameter::instance()) {
	VeteranRewardSessionImplementation* _implementation = new VeteranRewardSessionImplementation(days);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("VeteranRewardSession");
}

VeteranRewardSession::VeteranRewardSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("VeteranRewardSession");
}

VeteranRewardSession::~VeteranRewardSession() {
}



unsigned int VeteranRewardSession::getMilestone() {
	VeteranRewardSessionImplementation* _implementation = static_cast<VeteranRewardSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMILESTONE__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getMilestone();
	}
}

int VeteranRewardSession::getSelectedRewardIndex() {
	VeteranRewardSessionImplementation* _implementation = static_cast<VeteranRewardSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSELECTEDREWARDINDEX__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSelectedRewardIndex();
	}
}

void VeteranRewardSession::setSelectedRewardIndex(int idx) {
	VeteranRewardSessionImplementation* _implementation = static_cast<VeteranRewardSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSELECTEDREWARDINDEX__INT_);
		method.addSignedIntParameter(idx);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSelectedRewardIndex(idx);
	}
}

DistributedObjectServant* VeteranRewardSession::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* VeteranRewardSession::_getImplementationForRead() const {
	return _impl;
}

void VeteranRewardSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	VeteranRewardSessionImplementation
 */

VeteranRewardSessionImplementation::VeteranRewardSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


VeteranRewardSessionImplementation::~VeteranRewardSessionImplementation() {
}


void VeteranRewardSessionImplementation::finalize() {
}

void VeteranRewardSessionImplementation::_initializeImplementation() {
	_setClassHelper(VeteranRewardSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void VeteranRewardSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<VeteranRewardSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* VeteranRewardSessionImplementation::_getStub() {
	return _this.get();
}

VeteranRewardSessionImplementation::operator const VeteranRewardSession*() {
	return _this.get();
}

void VeteranRewardSessionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void VeteranRewardSessionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void VeteranRewardSessionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void VeteranRewardSessionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void VeteranRewardSessionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void VeteranRewardSessionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void VeteranRewardSessionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void VeteranRewardSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("VeteranRewardSession");

}

void VeteranRewardSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(VeteranRewardSessionImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool VeteranRewardSessionImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadeImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xd1dcb958: //VeteranRewardSession.milestone
		TypeInfo<unsigned int >::parseFromBinaryStream(&milestone, stream);
		return true;

	case 0xbfbd5b74: //VeteranRewardSession.selectedRewardIndex
		TypeInfo<int >::parseFromBinaryStream(&selectedRewardIndex, stream);
		return true;

	}

	return false;
}

void VeteranRewardSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = VeteranRewardSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int VeteranRewardSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xd1dcb958; //VeteranRewardSession.milestone
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&milestone, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbfbd5b74; //VeteranRewardSession.selectedRewardIndex
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&selectedRewardIndex, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

VeteranRewardSessionImplementation::VeteranRewardSessionImplementation(unsigned int days) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/VeteranRewardSession.idl():  		milestone = days;
	milestone = days;
}

unsigned int VeteranRewardSessionImplementation::getMilestone() {
	// server/zone/objects/player/sessions/VeteranRewardSession.idl():  		return milestone;
	return milestone;
}

int VeteranRewardSessionImplementation::getSelectedRewardIndex() {
	// server/zone/objects/player/sessions/VeteranRewardSession.idl():  		return selectedRewardIndex;
	return selectedRewardIndex;
}

void VeteranRewardSessionImplementation::setSelectedRewardIndex(int idx) {
	// server/zone/objects/player/sessions/VeteranRewardSession.idl():  		selectedRewardIndex = idx;
	selectedRewardIndex = idx;
}

/*
 *	VeteranRewardSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


VeteranRewardSessionAdapter::VeteranRewardSessionAdapter(VeteranRewardSession* obj) : FacadeAdapter(obj) {
}

void VeteranRewardSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETMILESTONE__:
		{
			
			unsigned int _m_res = getMilestone();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETSELECTEDREWARDINDEX__:
		{
			
			int _m_res = getSelectedRewardIndex();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETSELECTEDREWARDINDEX__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			setSelectedRewardIndex(idx);
			
		}
		break;
	default:
		FacadeAdapter::invokeMethod(methid, inv);
	}
}

unsigned int VeteranRewardSessionAdapter::getMilestone() {
	return (static_cast<VeteranRewardSession*>(stub))->getMilestone();
}

int VeteranRewardSessionAdapter::getSelectedRewardIndex() {
	return (static_cast<VeteranRewardSession*>(stub))->getSelectedRewardIndex();
}

void VeteranRewardSessionAdapter::setSelectedRewardIndex(int idx) {
	(static_cast<VeteranRewardSession*>(stub))->setSelectedRewardIndex(idx);
}

/*
 *	VeteranRewardSessionHelper
 */

VeteranRewardSessionHelper* VeteranRewardSessionHelper::staticInitializer = VeteranRewardSessionHelper::instance();

VeteranRewardSessionHelper::VeteranRewardSessionHelper() {
	className = "VeteranRewardSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void VeteranRewardSessionHelper::finalizeHelper() {
	VeteranRewardSessionHelper::finalize();
}

DistributedObject* VeteranRewardSessionHelper::instantiateObject() {
	return new VeteranRewardSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* VeteranRewardSessionHelper::instantiateServant() {
	return new VeteranRewardSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* VeteranRewardSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VeteranRewardSessionAdapter(static_cast<VeteranRewardSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

