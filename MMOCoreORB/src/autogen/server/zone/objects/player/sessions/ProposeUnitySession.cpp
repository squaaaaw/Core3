/*
 *	autogen/server/zone/objects/player/sessions/ProposeUnitySession.cpp generated by engine3 IDL compiler 0.60
 */

#include "ProposeUnitySession.h"

/*
 *	ProposeUnitySessionStub
 */

enum {RPC_GETASKINGPLAYER__ = 4219049739,RPC_GETRESPONDINGPLAYER__,RPC_GETASKINGPLAYERRING__};

ProposeUnitySession::ProposeUnitySession(unsigned long long p1, unsigned long long p2, unsigned long long sceno) : Facade(DummyConstructorParameter::instance()) {
	ProposeUnitySessionImplementation* _implementation = new ProposeUnitySessionImplementation(p1, p2, sceno);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ProposeUnitySession");
}

ProposeUnitySession::ProposeUnitySession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("ProposeUnitySession");
}

ProposeUnitySession::~ProposeUnitySession() {
}



unsigned long long ProposeUnitySession::getAskingPlayer() {
	ProposeUnitySessionImplementation* _implementation = static_cast<ProposeUnitySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETASKINGPLAYER__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getAskingPlayer();
	}
}

unsigned long long ProposeUnitySession::getRespondingPlayer() {
	ProposeUnitySessionImplementation* _implementation = static_cast<ProposeUnitySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRESPONDINGPLAYER__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getRespondingPlayer();
	}
}

unsigned long long ProposeUnitySession::getAskingPlayerRing() {
	ProposeUnitySessionImplementation* _implementation = static_cast<ProposeUnitySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETASKINGPLAYERRING__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getAskingPlayerRing();
	}
}

DistributedObjectServant* ProposeUnitySession::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ProposeUnitySession::_getImplementationForRead() const {
	return _impl;
}

void ProposeUnitySession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ProposeUnitySessionImplementation
 */

ProposeUnitySessionImplementation::ProposeUnitySessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


ProposeUnitySessionImplementation::~ProposeUnitySessionImplementation() {
}


void ProposeUnitySessionImplementation::finalize() {
}

void ProposeUnitySessionImplementation::_initializeImplementation() {
	_setClassHelper(ProposeUnitySessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ProposeUnitySessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ProposeUnitySession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* ProposeUnitySessionImplementation::_getStub() {
	return _this.get();
}

ProposeUnitySessionImplementation::operator const ProposeUnitySession*() {
	return _this.get();
}

void ProposeUnitySessionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ProposeUnitySessionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ProposeUnitySessionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ProposeUnitySessionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ProposeUnitySessionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ProposeUnitySessionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ProposeUnitySessionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ProposeUnitySessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("ProposeUnitySession");

}

void ProposeUnitySessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ProposeUnitySessionImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ProposeUnitySessionImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadeImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x9fcd1d9c: //ProposeUnitySession.askingPlayer
		TypeInfo<unsigned long long >::parseFromBinaryStream(&askingPlayer, stream);
		return true;

	case 0x86885104: //ProposeUnitySession.respondingPlayer
		TypeInfo<unsigned long long >::parseFromBinaryStream(&respondingPlayer, stream);
		return true;

	case 0x67f108ca: //ProposeUnitySession.askingPlayerRing
		TypeInfo<unsigned long long >::parseFromBinaryStream(&askingPlayerRing, stream);
		return true;

	}

	return false;
}

void ProposeUnitySessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ProposeUnitySessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ProposeUnitySessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x9fcd1d9c; //ProposeUnitySession.askingPlayer
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&askingPlayer, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x86885104; //ProposeUnitySession.respondingPlayer
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&respondingPlayer, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x67f108ca; //ProposeUnitySession.askingPlayerRing
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&askingPlayerRing, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 3;
}

ProposeUnitySessionImplementation::ProposeUnitySessionImplementation(unsigned long long p1, unsigned long long p2, unsigned long long sceno) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/ProposeUnitySession.idl():  		askingPlayer = p1;
	askingPlayer = p1;
	// server/zone/objects/player/sessions/ProposeUnitySession.idl():  		respondingPlayer = p2;
	respondingPlayer = p2;
	// server/zone/objects/player/sessions/ProposeUnitySession.idl():  		askingPlayerRing = sceno;
	askingPlayerRing = sceno;
}

unsigned long long ProposeUnitySessionImplementation::getAskingPlayer() {
	// server/zone/objects/player/sessions/ProposeUnitySession.idl():  		return askingPlayer;
	return askingPlayer;
}

unsigned long long ProposeUnitySessionImplementation::getRespondingPlayer() {
	// server/zone/objects/player/sessions/ProposeUnitySession.idl():  		return respondingPlayer;
	return respondingPlayer;
}

unsigned long long ProposeUnitySessionImplementation::getAskingPlayerRing() {
	// server/zone/objects/player/sessions/ProposeUnitySession.idl():  		return askingPlayerRing;
	return askingPlayerRing;
}

/*
 *	ProposeUnitySessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ProposeUnitySessionAdapter::ProposeUnitySessionAdapter(ProposeUnitySession* obj) : FacadeAdapter(obj) {
}

void ProposeUnitySessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETASKINGPLAYER__:
		{
			
			unsigned long long _m_res = getAskingPlayer();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETRESPONDINGPLAYER__:
		{
			
			unsigned long long _m_res = getRespondingPlayer();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETASKINGPLAYERRING__:
		{
			
			unsigned long long _m_res = getAskingPlayerRing();
			resp->insertLong(_m_res);
		}
		break;
	default:
		FacadeAdapter::invokeMethod(methid, inv);
	}
}

unsigned long long ProposeUnitySessionAdapter::getAskingPlayer() {
	return (static_cast<ProposeUnitySession*>(stub))->getAskingPlayer();
}

unsigned long long ProposeUnitySessionAdapter::getRespondingPlayer() {
	return (static_cast<ProposeUnitySession*>(stub))->getRespondingPlayer();
}

unsigned long long ProposeUnitySessionAdapter::getAskingPlayerRing() {
	return (static_cast<ProposeUnitySession*>(stub))->getAskingPlayerRing();
}

/*
 *	ProposeUnitySessionHelper
 */

ProposeUnitySessionHelper* ProposeUnitySessionHelper::staticInitializer = ProposeUnitySessionHelper::instance();

ProposeUnitySessionHelper::ProposeUnitySessionHelper() {
	className = "ProposeUnitySession";

	Core::getObjectBroker()->registerClass(className, this);
}

void ProposeUnitySessionHelper::finalizeHelper() {
	ProposeUnitySessionHelper::finalize();
}

DistributedObject* ProposeUnitySessionHelper::instantiateObject() {
	return new ProposeUnitySession(DummyConstructorParameter::instance());
}

DistributedObjectServant* ProposeUnitySessionHelper::instantiateServant() {
	return new ProposeUnitySessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ProposeUnitySessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ProposeUnitySessionAdapter(static_cast<ProposeUnitySession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

