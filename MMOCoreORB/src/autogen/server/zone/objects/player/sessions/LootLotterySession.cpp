/*
 *	autogen/server/zone/objects/player/sessions/LootLotterySession.cpp generated by engine3 IDL compiler 0.60
 */

#include "LootLotterySession.h"

/*
 *	LootLotterySessionStub
 */

enum {RPC_INITIALIZESESSION__ = 2137486503,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_ADDELIGIBLEPLAYER__CREATUREOBJECT_,RPC_REMOVEELIGIBLEPLAYER__CREATUREOBJECT_,RPC_CONTAINSELIGIBLEPLAYER__CREATUREOBJECT_,RPC_ISLOTTERYFINISHED__,RPC_SETLOTTERYFINISHED__BOOL_,RPC_GETCORPSE__,RPC_DOLOTTERYDRAW__};

LootLotterySession::LootLotterySession(unsigned long long id, AiAgent* ai) : Facade(DummyConstructorParameter::instance()) {
	LootLotterySessionImplementation* _implementation = new LootLotterySessionImplementation(id, ai);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("LootLotterySession");
}

LootLotterySession::LootLotterySession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("LootLotterySession");
}

LootLotterySession::~LootLotterySession() {
}



int LootLotterySession::initializeSession() {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->initializeSession();
	}
}

int LootLotterySession::cancelSession() {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->cancelSession();
	}
}

int LootLotterySession::clearSession() {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->clearSession();
	}
}

void LootLotterySession::addEligiblePlayer(CreatureObject* player) {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDELIGIBLEPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->addEligiblePlayer(player);
	}
}

void LootLotterySession::removeEligiblePlayer(CreatureObject* player) {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEELIGIBLEPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeEligiblePlayer(player);
	}
}

bool LootLotterySession::containsEligiblePlayer(CreatureObject* player) {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSELIGIBLEPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->containsEligiblePlayer(player);
	}
}

bool LootLotterySession::isLotteryFinished() {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLOTTERYFINISHED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isLotteryFinished();
	}
}

void LootLotterySession::setLotteryFinished(bool value) {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLOTTERYFINISHED__BOOL_);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setLotteryFinished(value);
	}
}

AiAgent* LootLotterySession::getCorpse() {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCORPSE__);

		return static_cast<AiAgent*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getCorpse();
	}
}

void LootLotterySession::addPlayerSelections(CreatureObject* player, LootLotteryBallot* ballot) {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->addPlayerSelections(player, ballot);
	}
}

void LootLotterySession::doLotteryDraw() {
	LootLotterySessionImplementation* _implementation = static_cast<LootLotterySessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOLOTTERYDRAW__);

		method.executeWithVoidReturn();
	} else {
		_implementation->doLotteryDraw();
	}
}

DistributedObjectServant* LootLotterySession::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* LootLotterySession::_getImplementationForRead() const {
	return _impl;
}

void LootLotterySession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	LootLotterySessionImplementation
 */

LootLotterySessionImplementation::LootLotterySessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


LootLotterySessionImplementation::~LootLotterySessionImplementation() {
}


void LootLotterySessionImplementation::finalize() {
}

void LootLotterySessionImplementation::_initializeImplementation() {
	_setClassHelper(LootLotterySessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void LootLotterySessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<LootLotterySession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* LootLotterySessionImplementation::_getStub() {
	return _this.get();
}

LootLotterySessionImplementation::operator const LootLotterySession*() {
	return _this.get();
}

void LootLotterySessionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void LootLotterySessionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void LootLotterySessionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void LootLotterySessionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void LootLotterySessionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void LootLotterySessionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void LootLotterySessionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void LootLotterySessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("LootLotterySession");

}

void LootLotterySessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(LootLotterySessionImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LootLotterySessionImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadeImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xfe28d8af: //LootLotterySession.corpse
		TypeInfo<ManagedReference<AiAgent* > >::parseFromBinaryStream(&corpse, stream);
		return true;

	case 0x93f7515d: //LootLotterySession.lotteryFinished
		TypeInfo<bool >::parseFromBinaryStream(&lotteryFinished, stream);
		return true;

	case 0xcc720a9d: //LootLotterySession.groupID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&groupID, stream);
		return true;

	case 0x7f34a34c: //LootLotterySession.eligiblePlayers
		TypeInfo<SortedVector<ManagedReference<CreatureObject* > > >::parseFromBinaryStream(&eligiblePlayers, stream);
		return true;

	case 0xeb5e15db: //LootLotterySession.playerSelections
		TypeInfo<SortedVector<LootLotteryBallot*> >::parseFromBinaryStream(&playerSelections, stream);
		return true;

	}

	return false;
}

void LootLotterySessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LootLotterySessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LootLotterySessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xfe28d8af; //LootLotterySession.corpse
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<AiAgent* > >::toBinaryStream(&corpse, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x93f7515d; //LootLotterySession.lotteryFinished
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&lotteryFinished, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcc720a9d; //LootLotterySession.groupID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&groupID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7f34a34c; //LootLotterySession.eligiblePlayers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<CreatureObject* > > >::toBinaryStream(&eligiblePlayers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xeb5e15db; //LootLotterySession.playerSelections
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<LootLotteryBallot*> >::toBinaryStream(&playerSelections, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 5;
}

LootLotterySessionImplementation::LootLotterySessionImplementation(unsigned long long id, AiAgent* ai) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		groupID = id;
	groupID = id;
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		corpse = ai;
	corpse = ai;
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		lotteryFinished = false;
	lotteryFinished = false;
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		eligiblePlayers.removeAll();
	(&eligiblePlayers)->removeAll();
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		playerSelections.removeAll();
	(&playerSelections)->removeAll();
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		Logger.setLoggingName("LootLotterySession");
	Logger::setLoggingName("LootLotterySession");
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
}

int LootLotterySessionImplementation::cancelSession() {
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		return 0;
	return 0;
}

int LootLotterySessionImplementation::clearSession() {
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		return 0;
	return 0;
}

void LootLotterySessionImplementation::addEligiblePlayer(CreatureObject* player) {
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		eligiblePlayers.put(player);
	(&eligiblePlayers)->put(player);
}

void LootLotterySessionImplementation::removeEligiblePlayer(CreatureObject* player) {
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		eligiblePlayers.drop(player);
	(&eligiblePlayers)->drop(player);
	// server/zone/objects/player/sessions/LootLotterySession.idl():  	}
	if ((&eligiblePlayers)->size() < 1)	// server/zone/objects/player/sessions/LootLotterySession.idl():  			doLotteryDraw();
	doLotteryDraw();
}

bool LootLotterySessionImplementation::containsEligiblePlayer(CreatureObject* player) {
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		return eligiblePlayers.contains(player);
	return (&eligiblePlayers)->contains(player);
}

bool LootLotterySessionImplementation::isLotteryFinished() {
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		return lotteryFinished;
	return lotteryFinished;
}

void LootLotterySessionImplementation::setLotteryFinished(bool value) {
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		lotteryFinished = value;
	lotteryFinished = value;
}

AiAgent* LootLotterySessionImplementation::getCorpse() {
	// server/zone/objects/player/sessions/LootLotterySession.idl():  		return corpse;
	return corpse;
}

/*
 *	LootLotterySessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


LootLotterySessionAdapter::LootLotterySessionAdapter(LootLotterySession* obj) : FacadeAdapter(obj) {
}

void LootLotterySessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		{
			
			int _m_res = initializeSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CANCELSESSION__:
		{
			
			int _m_res = cancelSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CLEARSESSION__:
		{
			
			int _m_res = clearSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ADDELIGIBLEPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			addEligiblePlayer(player);
			
		}
		break;
	case RPC_REMOVEELIGIBLEPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeEligiblePlayer(player);
			
		}
		break;
	case RPC_CONTAINSELIGIBLEPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = containsEligiblePlayer(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISLOTTERYFINISHED__:
		{
			
			bool _m_res = isLotteryFinished();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETLOTTERYFINISHED__BOOL_:
		{
			bool value = inv->getBooleanParameter();
			
			setLotteryFinished(value);
			
		}
		break;
	case RPC_GETCORPSE__:
		{
			
			DistributedObject* _m_res = getCorpse();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_DOLOTTERYDRAW__:
		{
			
			doLotteryDraw();
			
		}
		break;
	default:
		FacadeAdapter::invokeMethod(methid, inv);
	}
}

int LootLotterySessionAdapter::initializeSession() {
	return (static_cast<LootLotterySession*>(stub))->initializeSession();
}

int LootLotterySessionAdapter::cancelSession() {
	return (static_cast<LootLotterySession*>(stub))->cancelSession();
}

int LootLotterySessionAdapter::clearSession() {
	return (static_cast<LootLotterySession*>(stub))->clearSession();
}

void LootLotterySessionAdapter::addEligiblePlayer(CreatureObject* player) {
	(static_cast<LootLotterySession*>(stub))->addEligiblePlayer(player);
}

void LootLotterySessionAdapter::removeEligiblePlayer(CreatureObject* player) {
	(static_cast<LootLotterySession*>(stub))->removeEligiblePlayer(player);
}

bool LootLotterySessionAdapter::containsEligiblePlayer(CreatureObject* player) {
	return (static_cast<LootLotterySession*>(stub))->containsEligiblePlayer(player);
}

bool LootLotterySessionAdapter::isLotteryFinished() {
	return (static_cast<LootLotterySession*>(stub))->isLotteryFinished();
}

void LootLotterySessionAdapter::setLotteryFinished(bool value) {
	(static_cast<LootLotterySession*>(stub))->setLotteryFinished(value);
}

AiAgent* LootLotterySessionAdapter::getCorpse() {
	return (static_cast<LootLotterySession*>(stub))->getCorpse();
}

void LootLotterySessionAdapter::doLotteryDraw() {
	(static_cast<LootLotterySession*>(stub))->doLotteryDraw();
}

/*
 *	LootLotterySessionHelper
 */

LootLotterySessionHelper* LootLotterySessionHelper::staticInitializer = LootLotterySessionHelper::instance();

LootLotterySessionHelper::LootLotterySessionHelper() {
	className = "LootLotterySession";

	Core::getObjectBroker()->registerClass(className, this);
}

void LootLotterySessionHelper::finalizeHelper() {
	LootLotterySessionHelper::finalize();
}

DistributedObject* LootLotterySessionHelper::instantiateObject() {
	return new LootLotterySession(DummyConstructorParameter::instance());
}

DistributedObjectServant* LootLotterySessionHelper::instantiateServant() {
	return new LootLotterySessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LootLotterySessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LootLotterySessionAdapter(static_cast<LootLotterySession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

