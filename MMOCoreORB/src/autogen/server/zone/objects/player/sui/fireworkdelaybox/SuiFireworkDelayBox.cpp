/*
 *	autogen/server/zone/objects/player/sui/fireworkdelaybox/SuiFireworkDelayBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiFireworkDelayBox.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SuiFireworkDelayBoxStub
 */

enum {RPC_GETFIREWORKINDEX__ = 4057308607,RPC_ISFIREWORKDELAYBOX__};

SuiFireworkDelayBox::SuiFireworkDelayBox(CreatureObject* player, unsigned int windowType, unsigned int index) : SuiTransferBox(DummyConstructorParameter::instance()) {
	SuiFireworkDelayBoxImplementation* _implementation = new SuiFireworkDelayBoxImplementation(player, windowType, index);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SuiFireworkDelayBox");
}

SuiFireworkDelayBox::SuiFireworkDelayBox(DummyConstructorParameter* param) : SuiTransferBox(param) {
	_setClassName("SuiFireworkDelayBox");
}

SuiFireworkDelayBox::~SuiFireworkDelayBox() {
}



unsigned int SuiFireworkDelayBox::getFireworkIndex() {
	SuiFireworkDelayBoxImplementation* _implementation = static_cast<SuiFireworkDelayBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFIREWORKINDEX__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getFireworkIndex();
	}
}

bool SuiFireworkDelayBox::isFireworkDelayBox() {
	SuiFireworkDelayBoxImplementation* _implementation = static_cast<SuiFireworkDelayBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFIREWORKDELAYBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFireworkDelayBox();
	}
}

DistributedObjectServant* SuiFireworkDelayBox::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SuiFireworkDelayBox::_getImplementationForRead() const {
	return _impl;
}

void SuiFireworkDelayBox::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SuiFireworkDelayBoxImplementation
 */

SuiFireworkDelayBoxImplementation::SuiFireworkDelayBoxImplementation(DummyConstructorParameter* param) : SuiTransferBoxImplementation(param) {
	_initializeImplementation();
}


SuiFireworkDelayBoxImplementation::~SuiFireworkDelayBoxImplementation() {
}


void SuiFireworkDelayBoxImplementation::finalize() {
}

void SuiFireworkDelayBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiFireworkDelayBoxHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SuiFireworkDelayBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SuiFireworkDelayBox*>(stub);
	SuiTransferBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiFireworkDelayBoxImplementation::_getStub() {
	return _this.get();
}

SuiFireworkDelayBoxImplementation::operator const SuiFireworkDelayBox*() {
	return _this.get();
}

void SuiFireworkDelayBoxImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SuiFireworkDelayBoxImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SuiFireworkDelayBoxImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SuiFireworkDelayBoxImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SuiFireworkDelayBoxImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SuiFireworkDelayBoxImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SuiFireworkDelayBoxImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SuiFireworkDelayBoxImplementation::_serializationHelperMethod() {
	SuiTransferBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiFireworkDelayBox");

}

void SuiFireworkDelayBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiFireworkDelayBoxImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiFireworkDelayBoxImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SuiTransferBoxImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x78b3bea6: //SuiFireworkDelayBox.fireworkIndex
		TypeInfo<unsigned int >::parseFromBinaryStream(&fireworkIndex, stream);
		return true;

	}

	return false;
}

void SuiFireworkDelayBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiFireworkDelayBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiFireworkDelayBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SuiTransferBoxImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x78b3bea6; //SuiFireworkDelayBox.fireworkIndex
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&fireworkIndex, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

SuiFireworkDelayBoxImplementation::SuiFireworkDelayBoxImplementation(CreatureObject* player, unsigned int windowType, unsigned int index) : SuiTransferBoxImplementation(player, windowType) {
	_initializeImplementation();
	// server/zone/objects/player/sui/fireworkdelaybox/SuiFireworkDelayBox.idl():  		fireworkIndex = index;
	fireworkIndex = index;
}

unsigned int SuiFireworkDelayBoxImplementation::getFireworkIndex() {
	// server/zone/objects/player/sui/fireworkdelaybox/SuiFireworkDelayBox.idl():  		return fireworkIndex;
	return fireworkIndex;
}

bool SuiFireworkDelayBoxImplementation::isFireworkDelayBox() {
	// server/zone/objects/player/sui/fireworkdelaybox/SuiFireworkDelayBox.idl():  		return true;
	return true;
}

/*
 *	SuiFireworkDelayBoxAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SuiFireworkDelayBoxAdapter::SuiFireworkDelayBoxAdapter(SuiFireworkDelayBox* obj) : SuiTransferBoxAdapter(obj) {
}

void SuiFireworkDelayBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETFIREWORKINDEX__:
		{
			
			unsigned int _m_res = getFireworkIndex();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_ISFIREWORKDELAYBOX__:
		{
			
			bool _m_res = isFireworkDelayBox();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		SuiTransferBoxAdapter::invokeMethod(methid, inv);
	}
}

unsigned int SuiFireworkDelayBoxAdapter::getFireworkIndex() {
	return (static_cast<SuiFireworkDelayBox*>(stub))->getFireworkIndex();
}

bool SuiFireworkDelayBoxAdapter::isFireworkDelayBox() {
	return (static_cast<SuiFireworkDelayBox*>(stub))->isFireworkDelayBox();
}

/*
 *	SuiFireworkDelayBoxHelper
 */

SuiFireworkDelayBoxHelper* SuiFireworkDelayBoxHelper::staticInitializer = SuiFireworkDelayBoxHelper::instance();

SuiFireworkDelayBoxHelper::SuiFireworkDelayBoxHelper() {
	className = "SuiFireworkDelayBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiFireworkDelayBoxHelper::finalizeHelper() {
	SuiFireworkDelayBoxHelper::finalize();
}

DistributedObject* SuiFireworkDelayBoxHelper::instantiateObject() {
	return new SuiFireworkDelayBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiFireworkDelayBoxHelper::instantiateServant() {
	return new SuiFireworkDelayBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiFireworkDelayBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiFireworkDelayBoxAdapter(static_cast<SuiFireworkDelayBox*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

