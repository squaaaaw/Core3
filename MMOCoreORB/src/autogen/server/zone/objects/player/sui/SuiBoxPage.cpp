/*
 *	autogen/server/zone/objects/player/sui/SuiBoxPage.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiBoxPage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SuiBoxPageStub
 */

enum {RPC_GENERATEMESSAGE__ = 34513372,RPC_ISSUIBOXPAGE__,};

SuiBoxPage::SuiBoxPage(CreatureObject* player, SuiPageData* data, unsigned int windowType) : SuiBox(DummyConstructorParameter::instance()) {
	SuiBoxPageImplementation* _implementation = new SuiBoxPageImplementation(player, data, windowType);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SuiBoxPage");
}

SuiBoxPage::SuiBoxPage(DummyConstructorParameter* param) : SuiBox(param) {
	_setClassName("SuiBoxPage");
}

SuiBoxPage::~SuiBoxPage() {
}



BaseMessage* SuiBoxPage::generateMessage() {
	SuiBoxPageImplementation* _implementation = static_cast<SuiBoxPageImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEMESSAGE__);

		return static_cast<BaseMessage*>(method.executeWithObjectReturn());
	} else {
		return _implementation->generateMessage();
	}
}

bool SuiBoxPage::isSuiBoxPage() {
	SuiBoxPageImplementation* _implementation = static_cast<SuiBoxPageImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSUIBOXPAGE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSuiBoxPage();
	}
}

SuiPageData* SuiBoxPage::getSuiPageData() {
	SuiBoxPageImplementation* _implementation = static_cast<SuiBoxPageImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getSuiPageData();
	}
}

DistributedObjectServant* SuiBoxPage::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SuiBoxPage::_getImplementationForRead() const {
	return _impl;
}

void SuiBoxPage::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SuiBoxPageImplementation
 */

SuiBoxPageImplementation::SuiBoxPageImplementation(DummyConstructorParameter* param) : SuiBoxImplementation(param) {
	_initializeImplementation();
}


SuiBoxPageImplementation::~SuiBoxPageImplementation() {
}


void SuiBoxPageImplementation::finalize() {
}

void SuiBoxPageImplementation::_initializeImplementation() {
	_setClassHelper(SuiBoxPageHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SuiBoxPageImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SuiBoxPage*>(stub);
	SuiBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiBoxPageImplementation::_getStub() {
	return _this.get();
}

SuiBoxPageImplementation::operator const SuiBoxPage*() {
	return _this.get();
}

void SuiBoxPageImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SuiBoxPageImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SuiBoxPageImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SuiBoxPageImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SuiBoxPageImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SuiBoxPageImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SuiBoxPageImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SuiBoxPageImplementation::_serializationHelperMethod() {
	SuiBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiBoxPage");

}

void SuiBoxPageImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiBoxPageImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiBoxPageImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SuiBoxImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6c6a7e35: //SuiBoxPage.pageData
		TypeInfo<Reference<SuiPageData* > >::parseFromBinaryStream(&pageData, stream);
		return true;

	}

	return false;
}

void SuiBoxPageImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiBoxPageImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiBoxPageImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SuiBoxImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x6c6a7e35; //SuiBoxPage.pageData
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Reference<SuiPageData* > >::toBinaryStream(&pageData, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

SuiBoxPageImplementation::SuiBoxPageImplementation(CreatureObject* player, SuiPageData* data, unsigned int windowType) : SuiBoxImplementation(player, windowType, 0x00) {
	_initializeImplementation();
	// server/zone/objects/player/sui/SuiBoxPage.idl():  		pageData = data;
	pageData = data;
	// server/zone/objects/player/sui/SuiBoxPage.idl():  		pageData.setPageId(super.boxID);
	pageData->setPageId(SuiBoxImplementation::boxID);
}

bool SuiBoxPageImplementation::isSuiBoxPage() {
	// server/zone/objects/player/sui/SuiBoxPage.idl():  		return true;
	return true;
}

SuiPageData* SuiBoxPageImplementation::getSuiPageData() {
	// server/zone/objects/player/sui/SuiBoxPage.idl():  		return pageData;
	return pageData;
}

/*
 *	SuiBoxPageAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SuiBoxPageAdapter::SuiBoxPageAdapter(SuiBoxPage* obj) : SuiBoxAdapter(obj) {
}

void SuiBoxPageAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GENERATEMESSAGE__:
		{
			
			DistributedObject* _m_res = generateMessage();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ISSUIBOXPAGE__:
		{
			
			bool _m_res = isSuiBoxPage();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		SuiBoxAdapter::invokeMethod(methid, inv);
	}
}

BaseMessage* SuiBoxPageAdapter::generateMessage() {
	return (static_cast<SuiBoxPage*>(stub))->generateMessage();
}

bool SuiBoxPageAdapter::isSuiBoxPage() {
	return (static_cast<SuiBoxPage*>(stub))->isSuiBoxPage();
}

/*
 *	SuiBoxPageHelper
 */

SuiBoxPageHelper* SuiBoxPageHelper::staticInitializer = SuiBoxPageHelper::instance();

SuiBoxPageHelper::SuiBoxPageHelper() {
	className = "SuiBoxPage";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiBoxPageHelper::finalizeHelper() {
	SuiBoxPageHelper::finalize();
}

DistributedObject* SuiBoxPageHelper::instantiateObject() {
	return new SuiBoxPage(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiBoxPageHelper::instantiateServant() {
	return new SuiBoxPageImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiBoxPageHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiBoxPageAdapter(static_cast<SuiBoxPage*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaSuiBoxPage::className[] = "LuaSuiBoxPage";

Luna<LuaSuiBoxPage>::RegType LuaSuiBoxPage::Register[] = {
	{ "_setObject", &LuaSuiBoxPage::_setObject },
	{ "_getObject", &LuaSuiBoxPage::_getObject },
	{ "generateMessage", &LuaSuiBoxPage::generateMessage },
	{ "isSuiBoxPage", &LuaSuiBoxPage::isSuiBoxPage },
	{ "getSuiPageData", &LuaSuiBoxPage::getSuiPageData },
	{ 0, 0 }
};

LuaSuiBoxPage::LuaSuiBoxPage(lua_State *L) {
	realObject = static_cast<SuiBoxPage*>(lua_touserdata(L, 1));
}

LuaSuiBoxPage::~LuaSuiBoxPage() {
}

int LuaSuiBoxPage::_setObject(lua_State* L) {
	realObject = static_cast<SuiBoxPage*>(lua_touserdata(L, -1));

	return 0;
}

int LuaSuiBoxPage::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaSuiBoxPage::generateMessage(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		BaseMessage* result = realObject->generateMessage();

		if (result != NULL)
			lua_pushlightuserdata(L, result);
		else
			lua_pushnil(L);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'SuiBoxPage:generateMessage()'");
	}
	return 0;
}

int LuaSuiBoxPage::isSuiBoxPage(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isSuiBoxPage();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'SuiBoxPage:isSuiBoxPage()'");
	}
	return 0;
}

int LuaSuiBoxPage::getSuiPageData(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		SuiPageData* result = realObject->getSuiPageData();

		if (result != NULL)
			lua_pushlightuserdata(L, result);
		else
			lua_pushnil(L);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'SuiBoxPage:getSuiPageData()'");
	}
	return 0;
}

