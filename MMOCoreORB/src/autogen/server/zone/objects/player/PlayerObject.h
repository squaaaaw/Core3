/*
 *	autogen/server/zone/objects/player/PlayerObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef PLAYEROBJECT_H_
#define PLAYEROBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace building {

class BuildingObject;

} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiAgent;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class PlayerDisconnectEvent;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class PlayerRecoveryEvent;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class ForceRegenerationEvent;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class PvpTefRemovalTask;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObject;

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

namespace server {
namespace zone {
namespace objects {
namespace waypoint {

class WaypointObject;

} // namespace waypoint
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::waypoint;

namespace server {
namespace zone {

class ZoneClientSession;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace login {
namespace account {

class Account;

} // namespace account
} // namespace login
} // namespace server

using namespace server::login::account;

#include "templates/SharedObjectTemplate.h"

#include "system/lang/ref/Reference.h"

#include "server/login/account/GalaxyAccountInfo.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/variables/Ability.h"

#include "server/zone/objects/player/variables/AbilityList.h"

#include "server/zone/objects/player/variables/FactionStandingList.h"

#include "server/zone/objects/player/variables/FriendList.h"

#include "server/zone/objects/player/variables/FrsData.h"

#include "server/zone/objects/player/variables/IgnoreList.h"

#include "server/zone/objects/player/variables/SchematicList.h"

#include "server/zone/objects/player/variables/WaypointList.h"

#include "server/zone/objects/player/variables/PlayerQuestData.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/scene/variables/DeltaBitArray.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/util/u3d/Vector3.h"

#include "server/zone/objects/intangible/IntangibleObject.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

#include "system/util/SynchronizedSortedVector.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject : public IntangibleObject {
public:
	static const int LFG = 1;

	static const int NEWBIEHELPER = 2;

	static const int ROLEPLAYER = 4;

	static const int AFK = 0x80;

	static const int LD = 0x100;

	static const int FACTIONRANK = 0x200;

	static const int ANONYMOUS = 0x80000000;

	static const int ONLINE = 1;

	static const int OFFLINE = 2;

	static const int LINKDEAD = 3;

	static const int LOGGINGIN = 4;

	static const int LOGGINGOUT = 5;

	static const int LOADING = 6;

	static const int PVP_RATING_FLOOR = 500;

	unsigned static const long long PVP_RESET_TIME;

	PlayerObject();

	void setClientPathWaypoint(SceneObject* obj);

	void initializeAccount();

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	void unload();

	int calculateBhReward();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void sendMessage(BasePacket* msg);

	void addOwnedStructure(StructureObject* obj);

	void removeOwnedStructure(StructureObject* obj);

	int getTotalOwnedStructureCount();

	bool isOwnedStructure(StructureObject* obj);

	unsigned long long getOwnedStructure(int i);

	int getLotsRemaining();

	bool hasLotsRemaining(int lots);

	void notifySceneReady();

	void checkPendingMessages();

	/**
	 * Adds experience of a type to the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to add.
	 * @param xp The value of experience to add.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience gain.
	 * @return returns total experience awarded
	 */
	int addExperience(const String& xpType, int xp, bool notifyClient = true);

	/**
	 * Removes experience of a type from the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to remove.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience loss.
	 */
	void removeExperience(const String& xpType, bool notifyClient = true);

	/**
	 * Checks if the player has capped the experience type.
	 * @param xpType The string value for the type of experience to check.
	 * @return true if experience is capped, false otherwise.
	 */
	bool hasCappedExperience(const String& xpType);

	/**
	 * Adds waypoint object to waypointList
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param waypoint waypoint object to add
	 * @param checkName determines whether to remove existing Waypoint with equal customName
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addWaypoint(WaypointObject* waypoint, bool checkName, bool notifyClient = true);

	void setWaypoint(WaypointObject* waypoint, bool notifyClient = true);

	/** 
	 * Adds a new waypoint with the specified coordinates
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param planet planet where waypoint will be created
	 * @param positionX waypoint position X
	 * @param positionY waypoint position Y
	 * @param notifyClient determines whether to update the client with the changes
	 */
	WaypointObject* addWaypoint(const String& planet, float positionX, float positionY, bool notifyClient = true);

	/**
	 * Removes a waypoint from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain the specified waypoint }
	 * @param waypointID waypoint object id to remove
	 * @param notifyClient determines whether to update the client with the changes
	 * @param destroy determines whether to remove the waypoint from the database
	 */
	void removeWaypoint(unsigned long long waypointID, bool notifyClient = true, bool destroy = true);

	/**
	 * Updates the client with a waypoint change
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param waypointID waypoint object id to update
	 */
	void updateWaypoint(unsigned long long waypointID);

	/**
	 * Removes a waypoint of a special type from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain a waypoint of the special type }
	 * @param specialTypeID id of special type to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeWaypointBySpecialType(int specialTypeID, bool notifyClient = true);

	/**
	 * Gets the first waypoint of a special type from this player
	 * @param specialTypeID id of special type to find
	 */
	WaypointObject* getWaypointBySpecialType(int specialTypeID);

	WaypointObject* getSurveyWaypoint();

	bool hasWaypoint(unsigned long long objectID);

	WaypointObject* getWaypointAt(float x, float y, String& planet);

	void insertWaypointListToMessage(BaseMessage* msg);

	int getWaypointListSize();

	WaypointObject* getWaypoint(int index);

	/**
	 * Adds new abilities commands to player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param abilities Vector of abilities to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addAbilities(Vector<Ability*>& abilities, bool notifyClient = true);

	void addAbility(Ability* ability, bool notifyClient = true);

	/**
	 * Removes certifications from player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param skills Vector of skills to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeAbilities(Vector<Ability*>& abilities, bool notifyClient = true);

	void removeAbility(Ability* ability, bool notifyClient = true);

	bool addSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient = true);

	void removeSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient = true);

	bool addRewardedSchematic(DraftSchematic* schematic, short type, int quantity = 1, bool notifyClient = true);

	void removeRewardedSchematic(DraftSchematic* schematic, bool notifyClient = true);

	void decreaseSchematicUseCount(DraftSchematic* schematic);

	/**
	 * Sets the specified language id
	 * @pre { }
	 * @post { }
	 * @param language language id to set
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void setLanguageID(byte language, bool notifyClient = true);

	/**
	 * Adds a friend to the friend list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name friends name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addFriend(const String& name, bool notifyClient = true);

	/**
	 * Removes the specified friend from the friend list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name friend name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeFriend(const String& name, bool notifyClient = true);

	void removeAllReverseFriends(const String& oldName);

	/**
	 * Adds a player to the ignore list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name player name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addIgnore(const String& name, bool notifyClient = true);

	/**
	 * Removes the specified player from the ignore list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name player name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeIgnore(const String& name, bool notifyClient = true);

	void setTitle(const String& characterTitle, bool notifyClient = true);

	void setFoodFilling(int newValue, bool notifyClient = true);

	void setDrinkFilling(int newValue, bool notifyClient = true);

	/**
	 * Adds the amount of faction points to the faction point list.
	 * @pre { this locked }
	 * @post { this locked }
	 * @param factionName The string key for the faction the faction points are to be added.
	 * @param amount The float amount of faction points to add. 
	 */
	void increaseFactionStanding(const String& factionName, float amount);

	void decreaseFactionStanding(const String& factionName, float amount);

	void setFactionStanding(const String& factionName, float amount);

	float getFactionStanding(const String& factionName);

	void setScreenPlayData(const String& screenPlay, const String& variable, const String& data);

	void deleteScreenPlayData(const String& screenPlay, const String& variable);

	String getScreenPlayData(const String& screenPlay, const String& variable);

	void clearScreenPlayData(const String& screenPlay);

	void activateRecovery();

	void activateForcePowerRegen();

	void doRecovery(int latency);

	void disconnect(bool closeClient, bool doLock);

	void reload(ZoneClientSession* client);

	void setOffline();

	void setLinkDead(bool isSafeLogout = false);

	void setOnline();

	void setLoggingOut();

	/**
	 * Sends a badges response message
	 * @pre { }
	 * @post { }
	 * @param player CreatureObject to receive badges response message
	 */
	void sendBadgesResponseTo(CreatureObject* player);

	void logout(bool doLock);

	void setJediState(int state, bool notifyClient = true);

	void setActiveQuestsBit(int bitIndex, byte value, bool notifyClient = true);

	void clearActiveQuestsBit(int bitIndex, bool notifyClient = true);

	bool canActivateQuest(int questID);

	void activateQuest(int questID);

	bool hasActiveQuestBitSet(int bitIndex);

	bool hasCompletedQuestsBitSet(int bitIndex);

	void setCompletedQuestsBit(int bitIndex, byte value, bool notifyClient = true);

	void clearCompletedQuestsBit(int bitIndex, bool notifyClient = true);

	void completeQuest(int questID);

	PlayerQuestData getQuestData(unsigned int questHashCode);

	bool hasQuestData(unsigned int questHashCode);

	void setPlayerQuestData(unsigned int questHashCode, PlayerQuestData& data, bool notifyClient = true);

	/**
	 * Gets the faction point list.
	 */
	FactionStandingList* getFactionStandingList();

	void setLastNpcConvStr(const String& conv);

	void setLastNpcConvMessStr(const String& mess);

	String getLastNpcConvStr();

	String getLastNpcConvMessStr();

	String getLastNpcConvOption(int idx);

	void addLastNpcConvOptions(const String& option);

	int countLastNpcConvOptions();

	void clearLastNpcConvOptions();

	void setConversatingCreature(CreatureObject* creature);

	unsigned long long getConversatingCreature();

	void setTrainerCoordinates(const Vector3& trainer);

	Vector3 getTrainerCoordinates();

	void setTrainerZoneName(String& zoneName);

	String getTrainerZoneName();

	SortedVector<unsigned long long>* getPersistentMessages();

	void addPersistentMessage(unsigned long long id);

	void dropPersistentMessage(unsigned long long id);

	/**
	 * Unloads all the spawned creatures from the datapad control devices
	 */
	void unloadSpawnedChildren();

	void addToConsentList(const String& name);

	bool hasInConsentList(const String& name);

	void removeFromConsentList(const String& name);

	String getConsentName(int i);

	int getConsentListSize();

	int getReactionFines();

	String getFactionRank();

	void setFactionRank(const String& rank);

	void setCommandMessageString(unsigned int actionCRC, String& message);

	void removeCommandMessageString(unsigned int actionCRC);

	unsigned long long getDeclaredResidence() const;

	void setDeclaredResidence(BuildingObject* residence);

	void setCloningFacility(BuildingObject* cloningfac);

	unsigned long long getCloningFacility() const;

	/**
	 * Notifies all reverse friends online status
	 * @pre { }
	 * @post { }
	 */
	void notifyOnline();

	void doDigest(int fillingReduction);

	bool isDigesting();

	String getSavedTerrainName() const;

	void setSavedParentID(unsigned long long id);

	void setSavedTerrainName(const String& name);

	void setForcePower(int fp, bool notifyClient = true);

	void setForcePowerMax(int newValue, bool notifyClient = true);

	void doForceRegen();

	int getForcePowerRegen();

	unsigned long long getSavedParentID() const;

	unsigned int getNewSuiBoxID(unsigned int type);

	bool hasSuiBox(unsigned int boxID);

	Reference<SuiBox* > getSuiBox(unsigned int boxID);

	/**
	 * Removes the specified box id and optionally closes the client sui
	 */
	void removeSuiBox(unsigned int boxID, bool closeWindowToClient = false);

	void removeSuiBoxType(unsigned int windowType);

	bool hasSuiBoxWindowType(unsigned int windowType);

	void closeSuiWindowType(unsigned int windowType);

	Reference<SuiBox* > getSuiBoxFromWindowType(unsigned int windowType);

	void addSuiBox(SuiBox* sui);

	void addPermissionGroup(const String& group, bool updatePermissions = false);

	void removePermissionGroup(const String& group, bool updatePermissions = false);

	void updateInRangeBuildingPermissions();

	bool hasPermissionGroup(const String& group);

	SortedVector<String>* getPermissionGroups();

	void addIncapacitationTime();

	byte getIncapacitationCounter() const;

	void resetIncapacitationTimes();

	void addToDuelList(CreatureObject* targetPlayer);

	void removeFromDuelList(CreatureObject* targetPlayer);

	Reference<CreatureObject* > getDuelListObject(int index);

	bool requestedDuelTo(CreatureObject* targetPlayer);

	bool isDuelListEmpty();

	int getDuelListSize();

	void addToActivePets(AiAgent* pet);

	void removeFromActivePets(AiAgent* pet);

	AiAgent* getActivePet(int index);

	bool hasActivePet(AiAgent* pet);

	int getActivePetsSize();

	UnicodeString getBiography() const;

	/**
	 * Notifies all reverse friends offline status
	 * @pre { }
	 * @post { }
	 */
	void notifyOffline();

	void setBadge(unsigned int badge);

	void awardBadge(unsigned int badge);

	void setTeleporting(bool val);

	void setOnLoadScreen(bool val);

	int getNumBadges();

	int getBadgeTypeCount(unsigned int type);

	bool hasFriend(const String& name);

	int getFriendListSize();

	bool isIgnoring(const String& name);

	void addReverseFriend(const String& name);

	void removeReverseFriend(const String& name);

	void sendFriendLists();

	/**
	 * Checks to see if this player object has the specified ability.
	 * @param ability The ability to search for.
	 * @return True if the player has the ability.
	 */
	bool hasAbility(const String& ability);

	bool hasCommandMessageString(unsigned int actionCRC);

	unsigned int getCharacterBitmask() const;

	String getTitle() const;

	unsigned int getAdminLevel() const;

	void setAdminLevel(unsigned int adminlvl);

	int getPriviledgeFlag() const;

	void setPriviledgeFlag(int flag);

	void setBiography(const UnicodeString& bio);

	bool hasGodMode();

	bool isPrivileged();

	bool isStaff();

	bool isAdmin();

	void setCharacterBitmask(unsigned int bitmask);

	bool setCharacterBit(unsigned int bit, bool notifyClient = false);

	bool clearCharacterBit(unsigned int bit, bool notifyClient = false);

	void toggleCharacterBit(unsigned int bit);

	/**
	 * is the player AFK
	 */
	bool isLFG();

	bool isAFK();

	bool isAnonymous();

	bool isRoleplayer();

	bool isNewbieHelper();

	VectorMap<String, int>* getXpTypeCapList();

	DeltaVectorMap<String, int>* getExperienceList();

	DeltaVectorMap<uint32, PlayerQuestData >* getPlayerQuestsData();

	DeltaBitArray* getActiveQuests();

	DeltaBitArray* getCompletedQuests();

	int getForcePower() const;

	int getForcePowerMax() const;

	AbilityList* getAbilityList();

	FrsData* getFrsData();

	SchematicList* getSchematics();

	DraftSchematic* getSchematic(int i);

	Vector<ManagedReference<DraftSchematic* > > filterSchematicList(CreatureObject* player, Vector<unsigned int>* enabledTabs, int complexityLevel);

	int getFoodFilling() const;

	int getFoodFillingMax() const;

	int getDrinkFilling() const;

	int getDrinkFillingMax() const;

	int getJediState() const;

	byte getLanguageID() const;

	DeltaVector<String>* getFriendList();

	bool isTeleporting() const;

	bool isOnLoadScreen() const;

	void addChatRoom(unsigned int roomID);

	void removeChatRoom(unsigned int roomID);

	void addOwnedChatRoom(unsigned int roomID);

	void removeOwnedChatRoom(unsigned int roomID);

	int getOwnedChatRoomCount();

	void setBankLocation(const String& location);

	String getBankLocation() const;

	DeltaVector<String>* getIgnoreList();

	int getExperience(const String& xp);

	/**
	 * Maximizes all types of experience for the player.
	 */
	void maximizeExperience();

	void activateMissions();

	String getCommandMessageString(unsigned int actionCRC);

	bool hasBadge(unsigned int badge);

	void clearDisconnectEvent();

	bool isOnline() const;

	bool isOffline() const;

	bool isLoading() const;

	bool isLinkDead() const;

	bool isLoggingIn() const;

	bool isLoggingOut() const;

	Time* getLastLogout();

	int getDaysSinceLastLogout();

	void setSkillPoints(int points);

	void addSkillPoints(int points);

	int getSkillPoints() const;

	ValidatedPosition* getLastValidatedPosition();

	void updateLastValidatedPosition();

	unsigned int getAccountID() const;

	GalaxyAccountInfo* getGalaxyAccountInfo() const;

	unsigned long long getServerMovementTimeDelta();

	Time* getServerMovementTimeStamp();

	void setClientLastMovementStamp(unsigned int stamp);

	void updateServerLastMovementStamp();

	void setAccountID(unsigned int id);

	unsigned int getClientLastMovementStamp() const;

	void addHologrindProfession(byte prof);

	Vector<byte>* getHologrindProfessions();

	void setMaximumLots(byte lots);

	byte getMaximumLots() const;

	String getStarterProfession() const;

	void setStarterProfession(String& profession);

	unsigned long long getPerformanceBuffTarget() const;

	void setPerformanceBuffTarget(unsigned long long target);

	void setDebug(bool value);

	bool getDebug() const;

	float getVisibility() const;

	void setVisibility(float value);

	Time getLastVisibilityUpdateTimestamp();

	Time getLastBhPvpCombatActionTimestamp();

	Time getLastGcwPvpCombatActionTimestamp();

	void updateLastPvpCombatActionTimestamp(bool updateGcwAction, bool updateBhAction);

	void updateLastBhPvpCombatActionTimestamp();

	void updateLastGcwPvpCombatActionTimestamp();

	bool hasPvpTef();

	bool hasBhTef();

	void schedulePvpTefRemovalTask(bool removeGcwTefNow, bool removeBhTefNow);

	void schedulePvpTefRemovalTask(bool removeNow = false);

	void addVendor(SceneObject* vendor);

	void removeVendor(SceneObject* vendor);

	int getVendorCount();

	SortedVector<unsigned long long>* getOwnedVendors();

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	void deleteAllPersistentMessages();

	bool isJedi() const;

	bool isJediLight();

	bool isJediDark();

	bool isMuted() const;

	void setMutedState(bool mute);

	String getMutedReason() const;

	void setMutedReason(String& reason);

	String getInstalledHoloEmote() const;

	void setInstalledHoloEmote(String& holoEmote);

	void removeInstalledHoloEmote();

	int getHoloEmoteUseCount() const;

	void decreaseHoloEmoteUseCount();

	bool isMarried() const;

	String getSpouseName() const;

	void setSpouseName(String& firstName);

	void removeSpouse();

	Account* getAccount();

	String getChosenVeteranReward(unsigned int milestone);

	bool hasChosenVeteranReward(const String& rewardTemplate);

	void clearVeteranReward(unsigned int milestone);

	void addEventPerk(SceneObject* deed);

	void removeEventPerk(SceneObject* deed);

	int getEventPerkCount();

	int getCharacterAgeInDays();

	void addToReactionFines(int fine);

	void setReactionFines(int amount);

	void subtractFromReactionFines(int amount);

	void updateReactionFineTimestamp();

	void updateReactionFineMailTimestamp();

	Time* getReactionFineTimestamp();

	Time* getReactionFineMailTimestamp();

	int getXpCap(const String& type);

	int getSpentJediSkillPoints();

	bool hasSchematic(DraftSchematic* schematic);

	bool hasEventPerk(const String& templatePath);

	void doFieldFactionChange(int newStatus);

	void addToKillerList(unsigned int playerID);

	bool hasOnKillerList(unsigned int playerID);

	int getPvpRating() const;

	void setPvpRating(int rating);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlayerObject(DummyConstructorParameter* param);

	virtual ~PlayerObject();

	friend class PlayerObjectHelper;
};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObjectImplementation : public IntangibleObjectImplementation {
protected:
	unsigned int characterBitmask;

	String title;

	String savedTerrainName;

	unsigned long long savedParentID;

	Badges badges;

	int forcePower;

	int forcePowerMax;

	int foodFilling;

	int foodFillingMax;

	int drinkFilling;

	int drinkFillingMax;

	int reactionFines;

	Reference<GalaxyAccountInfo* > galaxyAccountInfo;

	ManagedReference<Account* > account;

	Time reactionFineTimestamp;

	Time reactionFineMailTimestamp;

	String starterProfession;

	String bankLocation;

	bool teleporting;

	bool onLoadScreen;

	bool muted;

	String mutedReason;

	SortedVector<unsigned long long> ownedStructures;

	SortedVector<unsigned long long> ownedVendors;

	byte maximumLots;

	int jediState;

	unsigned int adminLevel;

	int priviledgeFlag;

	byte languageID;

	VectorMap<String, int> xpTypeCapList;

	VectorMap<unsigned int, String> commandMessageStrings;

	DeltaVectorMap<String, int> experienceList;

	FrsData frsData;

	WaypointList waypointList;

	AbilityList abilityList;

	FriendList friendList;

	IgnoreList ignoreList;

	FactionStandingList factionStandingList;

	SchematicList schematicList;

	Vector<unsigned int> incapacitationTimes;

	unsigned int suiBoxNextID;

	VectorMap<unsigned int, ManagedReference<SuiBox* > > suiBoxes;

	SortedVector<unsigned int> chatRooms;

	SortedVector<unsigned int> ownedChatRooms;

	SynchronizedSortedVector<ManagedReference<CreatureObject* > > duelList;

	Vector<unsigned long long> newKillerList;

	unsigned long long declaredResidence;

	unsigned long long cloningFacility;

	SortedVector<unsigned long long> persistentMessages;

	UnicodeString biography;

	SortedVector<String> consentList;

	String lastNpcConvoMessage;

	String lastNpcConvo;

	Vector<String> lastNpcConvoOptions;

	unsigned long long conversatingCreature;

	Vector3 trainerCoordinates;

	String trainerZoneName;

	Reference<PlayerDisconnectEvent*> disconnectEvent;

	Reference<PlayerRecoveryEvent*> recoveryEvent;

	Reference<ForceRegenerationEvent*> forceRegenerationEvent;

	Time logoutTimeStamp;

	int onlineStatus;

	int skillPoints;

	int pvpRating;

	Time lastPvpRatingUpdate;

	Vector<byte> hologrindProfessions;

	unsigned int clientLastMovementStamp;

	Time serverLastMovementStamp;

	ValidatedPosition lastValidatedPosition;

	unsigned int accountID;

	VectorMap<String, String> screenPlayData;

	SortedVector<String> permissionGroups;

	unsigned long long performanceBuffTarget;

	bool debugOutput;

	float visibility;

	Time lastVisibilityUpdateTimestamp;

	Time lastBhPvpCombatActionTimestamp;

	Time lastGcwPvpCombatActionTimestamp;

	Reference<PvpTefRemovalTask*> pvpTefTask;

	Time lastDigestion;

	SortedVector<ManagedReference<AiAgent* > > activePets;

	DeltaBitArray activeQuests;

	DeltaBitArray completedQuests;

	String installedHoloEmote;

	int holoEmoteUseCount;

	String spouseName;

	VectorMap<unsigned int, String> chosenVeteranRewards;

	SortedVector<unsigned long long> currentEventPerks;

	ManagedWeakReference<SceneObject* > currentClientPathWaypoint;

	/**
	 * the key is the quest.hashCode()
	 */
	DeltaVectorMap<uint32, PlayerQuestData > playerQuestsData;

public:
	static const int LFG = 1;

	static const int NEWBIEHELPER = 2;

	static const int ROLEPLAYER = 4;

	static const int AFK = 0x80;

	static const int LD = 0x100;

	static const int FACTIONRANK = 0x200;

	static const int ANONYMOUS = 0x80000000;

	static const int ONLINE = 1;

	static const int OFFLINE = 2;

	static const int LINKDEAD = 3;

	static const int LOGGINGIN = 4;

	static const int LOGGINGOUT = 5;

	static const int LOADING = 6;

	static const int PVP_RATING_FLOOR = 500;

	unsigned static const long long PVP_RESET_TIME;

	PlayerObjectImplementation();

	PlayerObjectImplementation(DummyConstructorParameter* param);

	void finalize();

	void setClientPathWaypoint(SceneObject* obj);

	void initializeAccount();

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	void unload();

	int calculateBhReward();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void sendMessage(BasePacket* msg);

	void addOwnedStructure(StructureObject* obj);

	void removeOwnedStructure(StructureObject* obj);

	int getTotalOwnedStructureCount();

	bool isOwnedStructure(StructureObject* obj);

	unsigned long long getOwnedStructure(int i);

	int getLotsRemaining();

	bool hasLotsRemaining(int lots);

	void notifySceneReady();

	void checkPendingMessages();

	/**
	 * Adds experience of a type to the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to add.
	 * @param xp The value of experience to add.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience gain.
	 * @return returns total experience awarded
	 */
	int addExperience(const String& xpType, int xp, bool notifyClient = true);

	/**
	 * Removes experience of a type from the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to remove.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience loss.
	 */
	void removeExperience(const String& xpType, bool notifyClient = true);

	/**
	 * Checks if the player has capped the experience type.
	 * @param xpType The string value for the type of experience to check.
	 * @return true if experience is capped, false otherwise.
	 */
	bool hasCappedExperience(const String& xpType);

	/**
	 * Adds waypoint object to waypointList
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param waypoint waypoint object to add
	 * @param checkName determines whether to remove existing Waypoint with equal customName
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addWaypoint(WaypointObject* waypoint, bool checkName, bool notifyClient = true);

	void setWaypoint(WaypointObject* waypoint, bool notifyClient = true);

	/** 
	 * Adds a new waypoint with the specified coordinates
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param planet planet where waypoint will be created
	 * @param positionX waypoint position X
	 * @param positionY waypoint position Y
	 * @param notifyClient determines whether to update the client with the changes
	 */
	WaypointObject* addWaypoint(const String& planet, float positionX, float positionY, bool notifyClient = true);

	/**
	 * Removes a waypoint from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain the specified waypoint }
	 * @param waypointID waypoint object id to remove
	 * @param notifyClient determines whether to update the client with the changes
	 * @param destroy determines whether to remove the waypoint from the database
	 */
	void removeWaypoint(unsigned long long waypointID, bool notifyClient = true, bool destroy = true);

	/**
	 * Updates the client with a waypoint change
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param waypointID waypoint object id to update
	 */
	void updateWaypoint(unsigned long long waypointID);

	/**
	 * Removes a waypoint of a special type from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain a waypoint of the special type }
	 * @param specialTypeID id of special type to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeWaypointBySpecialType(int specialTypeID, bool notifyClient = true);

	/**
	 * Gets the first waypoint of a special type from this player
	 * @param specialTypeID id of special type to find
	 */
	WaypointObject* getWaypointBySpecialType(int specialTypeID);

	WaypointObject* getSurveyWaypoint();

	bool hasWaypoint(unsigned long long objectID);

	WaypointObject* getWaypointAt(float x, float y, String& planet);

	void insertWaypointListToMessage(BaseMessage* msg);

	int getWaypointListSize();

	WaypointObject* getWaypoint(int index);

	/**
	 * Adds new abilities commands to player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param abilities Vector of abilities to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addAbilities(Vector<Ability*>& abilities, bool notifyClient = true);

	void addAbility(Ability* ability, bool notifyClient = true);

	/**
	 * Removes certifications from player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param skills Vector of skills to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeAbilities(Vector<Ability*>& abilities, bool notifyClient = true);

	void removeAbility(Ability* ability, bool notifyClient = true);

	bool addSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient = true);

	void removeSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient = true);

	bool addRewardedSchematic(DraftSchematic* schematic, short type, int quantity = 1, bool notifyClient = true);

	void removeRewardedSchematic(DraftSchematic* schematic, bool notifyClient = true);

	void decreaseSchematicUseCount(DraftSchematic* schematic);

	/**
	 * Sets the specified language id
	 * @pre { }
	 * @post { }
	 * @param language language id to set
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void setLanguageID(byte language, bool notifyClient = true);

	/**
	 * Adds a friend to the friend list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name friends name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addFriend(const String& name, bool notifyClient = true);

	/**
	 * Removes the specified friend from the friend list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name friend name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeFriend(const String& name, bool notifyClient = true);

	void removeAllReverseFriends(const String& oldName);

	/**
	 * Adds a player to the ignore list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name player name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addIgnore(const String& name, bool notifyClient = true);

	/**
	 * Removes the specified player from the ignore list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name player name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeIgnore(const String& name, bool notifyClient = true);

	void setTitle(const String& characterTitle, bool notifyClient = true);

	void setFoodFilling(int newValue, bool notifyClient = true);

	void setDrinkFilling(int newValue, bool notifyClient = true);

	/**
	 * Adds the amount of faction points to the faction point list.
	 * @pre { this locked }
	 * @post { this locked }
	 * @param factionName The string key for the faction the faction points are to be added.
	 * @param amount The float amount of faction points to add. 
	 */
	void increaseFactionStanding(const String& factionName, float amount);

	void decreaseFactionStanding(const String& factionName, float amount);

	void setFactionStanding(const String& factionName, float amount);

	float getFactionStanding(const String& factionName);

	void setScreenPlayData(const String& screenPlay, const String& variable, const String& data);

	void deleteScreenPlayData(const String& screenPlay, const String& variable);

	String getScreenPlayData(const String& screenPlay, const String& variable);

	void clearScreenPlayData(const String& screenPlay);

	void activateRecovery();

	void activateForcePowerRegen();

	void doRecovery(int latency);

private:
	void checkForNewSpawns();

public:
	void disconnect(bool closeClient, bool doLock);

	void reload(ZoneClientSession* client);

	void setOffline();

	void setLinkDead(bool isSafeLogout = false);

	void setOnline();

	void setLoggingOut();

	/**
	 * Sends a badges response message
	 * @pre { }
	 * @post { }
	 * @param player CreatureObject to receive badges response message
	 */
	void sendBadgesResponseTo(CreatureObject* player);

	void logout(bool doLock);

	void setJediState(int state, bool notifyClient = true);

	void setActiveQuestsBit(int bitIndex, byte value, bool notifyClient = true);

	void clearActiveQuestsBit(int bitIndex, bool notifyClient = true);

	bool canActivateQuest(int questID);

	void activateQuest(int questID);

	bool hasActiveQuestBitSet(int bitIndex);

	bool hasCompletedQuestsBitSet(int bitIndex);

	void setCompletedQuestsBit(int bitIndex, byte value, bool notifyClient = true);

	void clearCompletedQuestsBit(int bitIndex, bool notifyClient = true);

	void completeQuest(int questID);

	PlayerQuestData getQuestData(unsigned int questHashCode);

	bool hasQuestData(unsigned int questHashCode);

	void setPlayerQuestData(unsigned int questHashCode, PlayerQuestData& data, bool notifyClient = true);

	/**
	 * Gets the faction point list.
	 */
	FactionStandingList* getFactionStandingList();

	void setLastNpcConvStr(const String& conv);

	void setLastNpcConvMessStr(const String& mess);

	String getLastNpcConvStr();

	String getLastNpcConvMessStr();

	String getLastNpcConvOption(int idx);

	void addLastNpcConvOptions(const String& option);

	int countLastNpcConvOptions();

	void clearLastNpcConvOptions();

	void setConversatingCreature(CreatureObject* creature);

	unsigned long long getConversatingCreature();

	void setTrainerCoordinates(const Vector3& trainer);

	Vector3 getTrainerCoordinates();

	void setTrainerZoneName(String& zoneName);

	String getTrainerZoneName();

	SortedVector<unsigned long long>* getPersistentMessages();

	void addPersistentMessage(unsigned long long id);

	void dropPersistentMessage(unsigned long long id);

	/**
	 * Unloads all the spawned creatures from the datapad control devices
	 */
	void unloadSpawnedChildren();

	void addToConsentList(const String& name);

	bool hasInConsentList(const String& name);

	void removeFromConsentList(const String& name);

	String getConsentName(int i);

	int getConsentListSize();

	int getReactionFines();

	String getFactionRank();

	void setFactionRank(const String& rank);

	void setCommandMessageString(unsigned int actionCRC, String& message);

	void removeCommandMessageString(unsigned int actionCRC);

	unsigned long long getDeclaredResidence() const;

	void setDeclaredResidence(BuildingObject* residence);

	void setCloningFacility(BuildingObject* cloningfac);

	unsigned long long getCloningFacility() const;

	/**
	 * Notifies all reverse friends online status
	 * @pre { }
	 * @post { }
	 */
	void notifyOnline();

	void doDigest(int fillingReduction);

	bool isDigesting();

	String getSavedTerrainName() const;

	void setSavedParentID(unsigned long long id);

	void setSavedTerrainName(const String& name);

	void setForcePower(int fp, bool notifyClient = true);

	void setForcePowerMax(int newValue, bool notifyClient = true);

	void doForceRegen();

	int getForcePowerRegen();

	unsigned long long getSavedParentID() const;

	unsigned int getNewSuiBoxID(unsigned int type);

	bool hasSuiBox(unsigned int boxID);

	Reference<SuiBox* > getSuiBox(unsigned int boxID);

	/**
	 * Removes the specified box id and optionally closes the client sui
	 */
	void removeSuiBox(unsigned int boxID, bool closeWindowToClient = false);

	void removeSuiBoxType(unsigned int windowType);

	bool hasSuiBoxWindowType(unsigned int windowType);

	void closeSuiWindowType(unsigned int windowType);

	Reference<SuiBox* > getSuiBoxFromWindowType(unsigned int windowType);

	void addSuiBox(SuiBox* sui);

	void addPermissionGroup(const String& group, bool updatePermissions = false);

	void removePermissionGroup(const String& group, bool updatePermissions = false);

	void updateInRangeBuildingPermissions();

	bool hasPermissionGroup(const String& group);

	SortedVector<String>* getPermissionGroups();

	void addIncapacitationTime();

	byte getIncapacitationCounter() const;

	void resetIncapacitationTimes();

	void addToDuelList(CreatureObject* targetPlayer);

	void removeFromDuelList(CreatureObject* targetPlayer);

	Reference<CreatureObject* > getDuelListObject(int index);

	bool requestedDuelTo(CreatureObject* targetPlayer);

	bool isDuelListEmpty();

	int getDuelListSize();

	void addToActivePets(AiAgent* pet);

	void removeFromActivePets(AiAgent* pet);

	AiAgent* getActivePet(int index);

	bool hasActivePet(AiAgent* pet);

	int getActivePetsSize();

	UnicodeString getBiography() const;

	/**
	 * Notifies all reverse friends offline status
	 * @pre { }
	 * @post { }
	 */
	void notifyOffline();

	void setBadge(unsigned int badge);

	void awardBadge(unsigned int badge);

	void setTeleporting(bool val);

	void setOnLoadScreen(bool val);

	int getNumBadges();

	int getBadgeTypeCount(unsigned int type);

	bool hasFriend(const String& name);

	int getFriendListSize();

	bool isIgnoring(const String& name);

	void addReverseFriend(const String& name);

	void removeReverseFriend(const String& name);

	void sendFriendLists();

	/**
	 * Checks to see if this player object has the specified ability.
	 * @param ability The ability to search for.
	 * @return True if the player has the ability.
	 */
	bool hasAbility(const String& ability);

	bool hasCommandMessageString(unsigned int actionCRC);

	unsigned int getCharacterBitmask() const;

	String getTitle() const;

	unsigned int getAdminLevel() const;

	void setAdminLevel(unsigned int adminlvl);

	int getPriviledgeFlag() const;

	void setPriviledgeFlag(int flag);

	void setBiography(const UnicodeString& bio);

	bool hasGodMode();

	bool isPrivileged();

	bool isStaff();

	bool isAdmin();

	void setCharacterBitmask(unsigned int bitmask);

	bool setCharacterBit(unsigned int bit, bool notifyClient = false);

	bool clearCharacterBit(unsigned int bit, bool notifyClient = false);

	void toggleCharacterBit(unsigned int bit);

	/**
	 * is the player AFK
	 */
	bool isLFG();

	bool isAFK();

	bool isAnonymous();

	bool isRoleplayer();

	bool isNewbieHelper();

	VectorMap<String, int>* getXpTypeCapList();

	DeltaVectorMap<String, int>* getExperienceList();

	DeltaVectorMap<uint32, PlayerQuestData >* getPlayerQuestsData();

	DeltaBitArray* getActiveQuests();

	DeltaBitArray* getCompletedQuests();

	int getForcePower() const;

	int getForcePowerMax() const;

	AbilityList* getAbilityList();

	FrsData* getFrsData();

	SchematicList* getSchematics();

	DraftSchematic* getSchematic(int i);

	Vector<ManagedReference<DraftSchematic* > > filterSchematicList(CreatureObject* player, Vector<unsigned int>* enabledTabs, int complexityLevel);

	int getFoodFilling() const;

	int getFoodFillingMax() const;

	int getDrinkFilling() const;

	int getDrinkFillingMax() const;

	int getJediState() const;

	byte getLanguageID() const;

	DeltaVector<String>* getFriendList();

	bool isTeleporting() const;

	bool isOnLoadScreen() const;

	void addChatRoom(unsigned int roomID);

	void removeChatRoom(unsigned int roomID);

	void addOwnedChatRoom(unsigned int roomID);

	void removeOwnedChatRoom(unsigned int roomID);

	int getOwnedChatRoomCount();

	void setBankLocation(const String& location);

	String getBankLocation() const;

	DeltaVector<String>* getIgnoreList();

	int getExperience(const String& xp);

	/**
	 * Maximizes all types of experience for the player.
	 */
	void maximizeExperience();

	void activateMissions();

	String getCommandMessageString(unsigned int actionCRC);

	bool hasBadge(unsigned int badge);

	void clearDisconnectEvent();

	bool isOnline() const;

	bool isOffline() const;

	bool isLoading() const;

	bool isLinkDead() const;

	bool isLoggingIn() const;

	bool isLoggingOut() const;

	Time* getLastLogout();

	int getDaysSinceLastLogout();

	void setSkillPoints(int points);

	void addSkillPoints(int points);

	int getSkillPoints() const;

	ValidatedPosition* getLastValidatedPosition();

	void updateLastValidatedPosition();

	unsigned int getAccountID() const;

	GalaxyAccountInfo* getGalaxyAccountInfo() const;

	unsigned long long getServerMovementTimeDelta();

	Time* getServerMovementTimeStamp();

	void setClientLastMovementStamp(unsigned int stamp);

	void updateServerLastMovementStamp();

	void setAccountID(unsigned int id);

	unsigned int getClientLastMovementStamp() const;

	void addHologrindProfession(byte prof);

	Vector<byte>* getHologrindProfessions();

	void setMaximumLots(byte lots);

	byte getMaximumLots() const;

	String getStarterProfession() const;

	void setStarterProfession(String& profession);

	unsigned long long getPerformanceBuffTarget() const;

	void setPerformanceBuffTarget(unsigned long long target);

	void setDebug(bool value);

	bool getDebug() const;

	float getVisibility() const;

	void setVisibility(float value);

	Time getLastVisibilityUpdateTimestamp();

	Time getLastBhPvpCombatActionTimestamp();

	Time getLastGcwPvpCombatActionTimestamp();

	void updateLastPvpCombatActionTimestamp(bool updateGcwAction, bool updateBhAction);

	void updateLastBhPvpCombatActionTimestamp();

	void updateLastGcwPvpCombatActionTimestamp();

	bool hasPvpTef();

	bool hasBhTef();

	void schedulePvpTefRemovalTask(bool removeGcwTefNow, bool removeBhTefNow);

	void schedulePvpTefRemovalTask(bool removeNow = false);

	void addVendor(SceneObject* vendor);

	void removeVendor(SceneObject* vendor);

	int getVendorCount();

	SortedVector<unsigned long long>* getOwnedVendors();

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

private:
	void removeAllFriends();

public:
	void deleteAllPersistentMessages();

private:
	void deleteAllWaypoints();

public:
	bool isJedi() const;

	bool isJediLight();

	bool isJediDark();

	bool isMuted() const;

	void setMutedState(bool mute);

	String getMutedReason() const;

	void setMutedReason(String& reason);

	String getInstalledHoloEmote() const;

	void setInstalledHoloEmote(String& holoEmote);

	void removeInstalledHoloEmote();

	int getHoloEmoteUseCount() const;

	void decreaseHoloEmoteUseCount();

	bool isMarried() const;

	String getSpouseName() const;

	void setSpouseName(String& firstName);

	void removeSpouse();

	Account* getAccount();

	String getChosenVeteranReward(unsigned int milestone);

	bool hasChosenVeteranReward(const String& rewardTemplate);

	void clearVeteranReward(unsigned int milestone);

	void addEventPerk(SceneObject* deed);

	void removeEventPerk(SceneObject* deed);

	int getEventPerkCount();

	int getCharacterAgeInDays();

	void addToReactionFines(int fine);

	void setReactionFines(int amount);

	void subtractFromReactionFines(int amount);

	void updateReactionFineTimestamp();

	void updateReactionFineMailTimestamp();

	Time* getReactionFineTimestamp();

	Time* getReactionFineMailTimestamp();

	int getXpCap(const String& type);

	int getSpentJediSkillPoints();

	bool hasSchematic(DraftSchematic* schematic);

	bool hasEventPerk(const String& templatePath);

	void doFieldFactionChange(int newStatus);

	void addToKillerList(unsigned int playerID);

	bool hasOnKillerList(unsigned int playerID);

	int getPvpRating() const;

	void setPvpRating(int rating);

	WeakReference<PlayerObject*> _this;

	operator const PlayerObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PlayerObjectImplementation();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlayerObject;
};

class PlayerObjectAdapter : public IntangibleObjectAdapter {
public:
	PlayerObjectAdapter(PlayerObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void finalize();

	void setClientPathWaypoint(SceneObject* obj);

	void initializeAccount();

	void notifyLoadFromDatabase();

	void unload();

	int calculateBhReward();

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void sendMessage(BasePacket* msg);

	void addOwnedStructure(StructureObject* obj);

	void removeOwnedStructure(StructureObject* obj);

	int getTotalOwnedStructureCount();

	bool isOwnedStructure(StructureObject* obj);

	unsigned long long getOwnedStructure(int i);

	int getLotsRemaining();

	bool hasLotsRemaining(int lots);

	void notifySceneReady();

	void checkPendingMessages();

	int addExperience(const String& xpType, int xp, bool notifyClient);

	void removeExperience(const String& xpType, bool notifyClient);

	bool hasCappedExperience(const String& xpType);

	void addWaypoint(WaypointObject* waypoint, bool checkName, bool notifyClient);

	void setWaypoint(WaypointObject* waypoint, bool notifyClient);

	void removeWaypoint(unsigned long long waypointID, bool notifyClient, bool destroy);

	void updateWaypoint(unsigned long long waypointID);

	void removeWaypointBySpecialType(int specialTypeID, bool notifyClient);

	WaypointObject* getWaypointBySpecialType(int specialTypeID);

	WaypointObject* getSurveyWaypoint();

	bool hasWaypoint(unsigned long long objectID);

	WaypointObject* getWaypointAt(float x, float y, String& planet);

	void insertWaypointListToMessage(BaseMessage* msg);

	int getWaypointListSize();

	WaypointObject* getWaypoint(int index);

	void setLanguageID(byte language, bool notifyClient);

	void addFriend(const String& name, bool notifyClient);

	void removeFriend(const String& name, bool notifyClient);

	void removeAllReverseFriends(const String& oldName);

	void addIgnore(const String& name, bool notifyClient);

	void removeIgnore(const String& name, bool notifyClient);

	void setTitle(const String& characterTitle, bool notifyClient);

	void setFoodFilling(int newValue, bool notifyClient);

	void setDrinkFilling(int newValue, bool notifyClient);

	void increaseFactionStanding(const String& factionName, float amount);

	void decreaseFactionStanding(const String& factionName, float amount);

	void setFactionStanding(const String& factionName, float amount);

	float getFactionStanding(const String& factionName);

	void setScreenPlayData(const String& screenPlay, const String& variable, const String& data);

	void deleteScreenPlayData(const String& screenPlay, const String& variable);

	String getScreenPlayData(const String& screenPlay, const String& variable);

	void clearScreenPlayData(const String& screenPlay);

	void activateRecovery();

	void activateForcePowerRegen();

	void doRecovery(int latency);

	void disconnect(bool closeClient, bool doLock);

	void reload(ZoneClientSession* client);

	void setOffline();

	void setLinkDead(bool isSafeLogout);

	void setOnline();

	void setLoggingOut();

	void sendBadgesResponseTo(CreatureObject* player);

	void logout(bool doLock);

	void setJediState(int state, bool notifyClient);

	void setActiveQuestsBit(int bitIndex, byte value, bool notifyClient);

	void clearActiveQuestsBit(int bitIndex, bool notifyClient);

	bool canActivateQuest(int questID);

	void activateQuest(int questID);

	bool hasActiveQuestBitSet(int bitIndex);

	bool hasCompletedQuestsBitSet(int bitIndex);

	void setCompletedQuestsBit(int bitIndex, byte value, bool notifyClient);

	void clearCompletedQuestsBit(int bitIndex, bool notifyClient);

	void completeQuest(int questID);

	bool hasQuestData(unsigned int questHashCode);

	void setLastNpcConvStr(const String& conv);

	void setLastNpcConvMessStr(const String& mess);

	String getLastNpcConvStr();

	String getLastNpcConvMessStr();

	String getLastNpcConvOption(int idx);

	void addLastNpcConvOptions(const String& option);

	int countLastNpcConvOptions();

	void clearLastNpcConvOptions();

	void setConversatingCreature(CreatureObject* creature);

	unsigned long long getConversatingCreature();

	void setTrainerZoneName(String& zoneName);

	String getTrainerZoneName();

	void addPersistentMessage(unsigned long long id);

	void dropPersistentMessage(unsigned long long id);

	void unloadSpawnedChildren();

	void addToConsentList(const String& name);

	bool hasInConsentList(const String& name);

	void removeFromConsentList(const String& name);

	String getConsentName(int i);

	int getConsentListSize();

	int getReactionFines();

	void setCommandMessageString(unsigned int actionCRC, String& message);

	void removeCommandMessageString(unsigned int actionCRC);

	unsigned long long getDeclaredResidence() const;

	void setDeclaredResidence(BuildingObject* residence);

	void setCloningFacility(BuildingObject* cloningfac);

	unsigned long long getCloningFacility() const;

	void notifyOnline();

	void doDigest(int fillingReduction);

	bool isDigesting();

	String getSavedTerrainName() const;

	void setSavedParentID(unsigned long long id);

	void setSavedTerrainName(const String& name);

	void setForcePower(int fp, bool notifyClient);

	void setForcePowerMax(int newValue, bool notifyClient);

	void doForceRegen();

	int getForcePowerRegen();

	unsigned long long getSavedParentID() const;

	unsigned int getNewSuiBoxID(unsigned int type);

	bool hasSuiBox(unsigned int boxID);

	Reference<SuiBox* > getSuiBox(unsigned int boxID);

	void removeSuiBox(unsigned int boxID, bool closeWindowToClient);

	void removeSuiBoxType(unsigned int windowType);

	bool hasSuiBoxWindowType(unsigned int windowType);

	void closeSuiWindowType(unsigned int windowType);

	Reference<SuiBox* > getSuiBoxFromWindowType(unsigned int windowType);

	void addSuiBox(SuiBox* sui);

	void addPermissionGroup(const String& group, bool updatePermissions);

	void removePermissionGroup(const String& group, bool updatePermissions);

	void updateInRangeBuildingPermissions();

	bool hasPermissionGroup(const String& group);

	void addIncapacitationTime();

	byte getIncapacitationCounter() const;

	void resetIncapacitationTimes();

	void addToDuelList(CreatureObject* targetPlayer);

	void removeFromDuelList(CreatureObject* targetPlayer);

	Reference<CreatureObject* > getDuelListObject(int index);

	bool requestedDuelTo(CreatureObject* targetPlayer);

	bool isDuelListEmpty();

	int getDuelListSize();

	void addToActivePets(AiAgent* pet);

	void removeFromActivePets(AiAgent* pet);

	AiAgent* getActivePet(int index);

	bool hasActivePet(AiAgent* pet);

	int getActivePetsSize();

	UnicodeString getBiography() const;

	void notifyOffline();

	void setBadge(unsigned int badge);

	void awardBadge(unsigned int badge);

	void setTeleporting(bool val);

	void setOnLoadScreen(bool val);

	int getNumBadges();

	int getBadgeTypeCount(unsigned int type);

	bool hasFriend(const String& name);

	int getFriendListSize();

	bool isIgnoring(const String& name);

	void addReverseFriend(const String& name);

	void removeReverseFriend(const String& name);

	void sendFriendLists();

	bool hasCommandMessageString(unsigned int actionCRC);

	unsigned int getCharacterBitmask() const;

	String getTitle() const;

	unsigned int getAdminLevel() const;

	void setAdminLevel(unsigned int adminlvl);

	int getPriviledgeFlag() const;

	void setPriviledgeFlag(int flag);

	void setBiography(const UnicodeString& bio);

	bool hasGodMode();

	bool isPrivileged();

	bool isStaff();

	bool isAdmin();

	void setCharacterBitmask(unsigned int bitmask);

	bool setCharacterBit(unsigned int bit, bool notifyClient);

	bool clearCharacterBit(unsigned int bit, bool notifyClient);

	void toggleCharacterBit(unsigned int bit);

	bool isLFG();

	bool isAFK();

	bool isAnonymous();

	bool isRoleplayer();

	bool isNewbieHelper();

	int getForcePower() const;

	int getForcePowerMax() const;

	DraftSchematic* getSchematic(int i);

	int getFoodFilling() const;

	int getFoodFillingMax() const;

	int getDrinkFilling() const;

	int getDrinkFillingMax() const;

	int getJediState() const;

	byte getLanguageID() const;

	bool isTeleporting() const;

	bool isOnLoadScreen() const;

	void addChatRoom(unsigned int roomID);

	void removeChatRoom(unsigned int roomID);

	void addOwnedChatRoom(unsigned int roomID);

	void removeOwnedChatRoom(unsigned int roomID);

	int getOwnedChatRoomCount();

	void setBankLocation(const String& location);

	String getBankLocation() const;

	int getExperience(const String& xp);

	void maximizeExperience();

	void activateMissions();

	String getCommandMessageString(unsigned int actionCRC);

	bool hasBadge(unsigned int badge);

	void clearDisconnectEvent();

	bool isOnline() const;

	bool isOffline() const;

	bool isLoading() const;

	bool isLinkDead() const;

	bool isLoggingIn() const;

	bool isLoggingOut() const;

	void setSkillPoints(int points);

	void addSkillPoints(int points);

	int getSkillPoints() const;

	void updateLastValidatedPosition();

	unsigned int getAccountID() const;

	unsigned long long getServerMovementTimeDelta();

	void setClientLastMovementStamp(unsigned int stamp);

	void updateServerLastMovementStamp();

	void setAccountID(unsigned int id);

	unsigned int getClientLastMovementStamp() const;

	void addHologrindProfession(byte prof);

	void setMaximumLots(byte lots);

	byte getMaximumLots() const;

	String getStarterProfession() const;

	void setStarterProfession(String& profession);

	unsigned long long getPerformanceBuffTarget() const;

	void setPerformanceBuffTarget(unsigned long long target);

	void setDebug(bool value);

	bool getDebug() const;

	float getVisibility() const;

	void setVisibility(float value);

	void updateLastPvpCombatActionTimestamp(bool updateGcwAction, bool updateBhAction);

	void updateLastBhPvpCombatActionTimestamp();

	void updateLastGcwPvpCombatActionTimestamp();

	bool hasPvpTef();

	bool hasBhTef();

	void schedulePvpTefRemovalTask(bool removeGcwTefNow, bool removeBhTefNow);

	void schedulePvpTefRemovalTask(bool removeNow);

	void addVendor(SceneObject* vendor);

	void removeVendor(SceneObject* vendor);

	int getVendorCount();

	void destroyObjectFromDatabase(bool destroyContainedObjects);

	void deleteAllPersistentMessages();

	bool isJedi() const;

	bool isJediLight();

	bool isJediDark();

	bool isMuted() const;

	void setMutedState(bool mute);

	String getMutedReason() const;

	void setMutedReason(String& reason);

	String getInstalledHoloEmote() const;

	void setInstalledHoloEmote(String& holoEmote);

	void removeInstalledHoloEmote();

	int getHoloEmoteUseCount() const;

	void decreaseHoloEmoteUseCount();

	bool isMarried() const;

	String getSpouseName() const;

	void setSpouseName(String& firstName);

	void removeSpouse();

	Account* getAccount();

	String getChosenVeteranReward(unsigned int milestone);

	bool hasChosenVeteranReward(const String& rewardTemplate);

	void clearVeteranReward(unsigned int milestone);

	void addEventPerk(SceneObject* deed);

	void removeEventPerk(SceneObject* deed);

	int getEventPerkCount();

	int getCharacterAgeInDays();

	void addToReactionFines(int fine);

	void setReactionFines(int amount);

	void subtractFromReactionFines(int amount);

	void updateReactionFineTimestamp();

	void updateReactionFineMailTimestamp();

	int getXpCap(const String& type);

	int getSpentJediSkillPoints();

	bool hasSchematic(DraftSchematic* schematic);

	bool hasEventPerk(const String& templatePath);

	void doFieldFactionChange(int newStatus);

	void addToKillerList(unsigned int playerID);

	bool hasOnKillerList(unsigned int playerID);

	int getPvpRating() const;

	void setPvpRating(int rating);

};

class PlayerObjectHelper : public DistributedObjectClassHelper, public Singleton<PlayerObjectHelper> {
	static PlayerObjectHelper* staticInitializer;

public:
	PlayerObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerObjectHelper>;
};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#endif /*PLAYEROBJECT_H_*/
