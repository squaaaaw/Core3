/*
 *	autogen/server/zone/objects/tangible/Instrument.h generated by engine3 IDL compiler 0.60
 */

#ifndef INSTRUMENT_H_
#define INSTRUMENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "templates/SharedObjectTemplate.h"

#include "templates/tangible/InstrumentObjectTemplate.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class Instrument : public TangibleObject {
public:
	static const int TRAZ = 1;

	static const int SLITHERHORN = 2;

	static const int FANFAR = 3;

	static const int FLUTEDROOPY = 4;

	static const int KLOOHORN = 5;

	static const int FIZZ = 6;

	static const int BANDFILL = 7;

	static const int OMNIBOX = 8;

	static const int NALARGON = 9;

	static const int MANDOVIOL = 10;

	Instrument();

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void spawnInAdminCell(CreatureObject* spawner);

	void spawnNonAdmin(CreatureObject* spawner);

	bool canDropInstrument();

	int getInstrumentType();

	ManagedWeakReference<CreatureObject* > getSpawnerPlayer();

	void setSpawnerPlayer(CreatureObject* pla);

	bool isBeingUsed() const;

	void setBeingUsed(bool val);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	Instrument(DummyConstructorParameter* param);

	virtual ~Instrument();

	friend class InstrumentHelper;
};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class InstrumentImplementation : public TangibleObjectImplementation {
protected:
	int instrumentType;

	bool beingUsed;

	ManagedReference<SceneObject* > spawnedObject;

	ManagedWeakReference<CreatureObject* > spawnerPlayer;

public:
	static const int TRAZ = 1;

	static const int SLITHERHORN = 2;

	static const int FANFAR = 3;

	static const int FLUTEDROOPY = 4;

	static const int KLOOHORN = 5;

	static const int FIZZ = 6;

	static const int BANDFILL = 7;

	static const int OMNIBOX = 8;

	static const int NALARGON = 9;

	static const int MANDOVIOL = 10;

	InstrumentImplementation();

	InstrumentImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void spawnInAdminCell(CreatureObject* spawner);

	void spawnNonAdmin(CreatureObject* spawner);

	bool canDropInstrument();

	int getInstrumentType();

	ManagedWeakReference<CreatureObject* > getSpawnerPlayer();

	void setSpawnerPlayer(CreatureObject* pla);

	bool isBeingUsed() const;

	void setBeingUsed(bool val);

	WeakReference<Instrument*> _this;

	operator const Instrument*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~InstrumentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class Instrument;
};

class InstrumentAdapter : public TangibleObjectAdapter {
public:
	InstrumentAdapter(Instrument* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void spawnInAdminCell(CreatureObject* spawner);

	void spawnNonAdmin(CreatureObject* spawner);

	bool canDropInstrument();

	int getInstrumentType();

	ManagedWeakReference<CreatureObject* > getSpawnerPlayer();

	void setSpawnerPlayer(CreatureObject* pla);

	bool isBeingUsed() const;

	void setBeingUsed(bool val);

};

class InstrumentHelper : public DistributedObjectClassHelper, public Singleton<InstrumentHelper> {
	static InstrumentHelper* staticInitializer;

public:
	InstrumentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<InstrumentHelper>;
};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

#endif /*INSTRUMENT_H_*/
