/*
 *	autogen/server/zone/objects/tangible/consumable/Consumable.h generated by engine3 IDL compiler 0.60
 */

#ifndef CONSUMABLE_H_
#define CONSUMABLE_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace buffs {

class Buff;

} // namespace buffs
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::buffs;

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "templates/SharedObjectTemplate.h"

#include "system/util/Vector.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/util/VectorMap.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace consumable {

class Consumable : public TangibleObject {
public:
	static const int EFFECT_INSTANT = 0x00;

	static const int EFFECT_ATTRIBUTE = 0x01;

	static const int EFFECT_DURATION = 0x02;

	static const int EFFECT_DELAYED = 0x03;

	static const int EFFECT_SKILL = 0x04;

	static const int EFFECT_SPICE = 0x05;

	static const int EFFECT_HEALING = 0x06;

	static const int FOOD = 0x01;

	static const int DRINK = 0x10;

	Consumable();

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void setModifiers(Buff* buff, bool skillModifiers = false);

	bool isSpiceEffect() const;

	bool isAttributeEffect() const;

	bool isDrink();

	bool isFood();

	bool isForagedFood();

	bool isSpice();

	bool isConsumable();

	int getDuration();

	String getSpeciesRestriction();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	Consumable(DummyConstructorParameter* param);

	virtual ~Consumable();

	friend class ConsumableHelper;
};

} // namespace consumable
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::consumable;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace consumable {

class ConsumableImplementation : public TangibleObjectImplementation {
protected:
	int duration;

	int filling;

	int nutrition;

	int effectType;

	Vector<int> eventTypes;

	int fillingMin;

	int fillingMax;

	int flavorMin;

	int flavorMax;

	int nutritionMin;

	int nutritionMax;

	int quantityMin;

	int quantityMax;

	VectorMap<String, float> modifiers;

	String buffName;

	unsigned int buffCRC;

	int consumableType;

	int foragedFood;

	String speciesRestriction;

public:
	static const int EFFECT_INSTANT = 0x00;

	static const int EFFECT_ATTRIBUTE = 0x01;

	static const int EFFECT_DURATION = 0x02;

	static const int EFFECT_DELAYED = 0x03;

	static const int EFFECT_SKILL = 0x04;

	static const int EFFECT_SPICE = 0x05;

	static const int EFFECT_HEALING = 0x06;

	static const int FOOD = 0x01;

	static const int DRINK = 0x10;

	ConsumableImplementation();

	ConsumableImplementation(DummyConstructorParameter* param);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void setModifiers(Buff* buff, bool skillModifiers = false);

	bool isSpiceEffect() const;

	bool isAttributeEffect() const;

	bool isDrink();

	bool isFood();

	bool isForagedFood();

	bool isSpice();

	bool isConsumable();

	int getDuration();

	String getSpeciesRestriction();

	WeakReference<Consumable*> _this;

	operator const Consumable*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ConsumableImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class Consumable;
};

class ConsumableAdapter : public TangibleObjectAdapter {
public:
	ConsumableAdapter(Consumable* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void setModifiers(Buff* buff, bool skillModifiers);

	bool isSpiceEffect() const;

	bool isAttributeEffect() const;

	bool isDrink();

	bool isFood();

	bool isForagedFood();

	bool isSpice();

	bool isConsumable();

	int getDuration();

	String getSpeciesRestriction();

};

class ConsumableHelper : public DistributedObjectClassHelper, public Singleton<ConsumableHelper> {
	static ConsumableHelper* staticInitializer;

public:
	ConsumableHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ConsumableHelper>;
};

} // namespace consumable
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::consumable;

#endif /*CONSUMABLE_H_*/
