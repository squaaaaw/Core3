/*
 *	autogen/server/zone/objects/tangible/pharmaceutical/VitalityPack.cpp generated by engine3 IDL compiler 0.60
 */

#include "VitalityPack.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

/*
 *	VitalityPackStub
 */

enum {RPC_GETEFFECTIVENESS__,RPC_ISVITALITYPACK__,};

VitalityPack::VitalityPack() : PharmaceuticalObject(DummyConstructorParameter::instance()) {
	VitalityPackImplementation* _implementation = new VitalityPackImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("VitalityPack");
}

VitalityPack::VitalityPack(DummyConstructorParameter* param) : PharmaceuticalObject(param) {
	_setClassName("VitalityPack");
}

VitalityPack::~VitalityPack() {
}



void VitalityPack::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	VitalityPackImplementation* _implementation = static_cast<VitalityPackImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

int VitalityPack::getEffectiveness() {
	VitalityPackImplementation* _implementation = static_cast<VitalityPackImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETEFFECTIVENESS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getEffectiveness();
	}
}

bool VitalityPack::isVitalityPack() {
	VitalityPackImplementation* _implementation = static_cast<VitalityPackImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVITALITYPACK__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isVitalityPack();
	}
}

int VitalityPack::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	VitalityPackImplementation* _implementation = static_cast<VitalityPackImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void VitalityPack::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	VitalityPackImplementation* _implementation = static_cast<VitalityPackImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

DistributedObjectServant* VitalityPack::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* VitalityPack::_getImplementationForRead() const {
	return _impl;
}

void VitalityPack::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	VitalityPackImplementation
 */

VitalityPackImplementation::VitalityPackImplementation(DummyConstructorParameter* param) : PharmaceuticalObjectImplementation(param) {
	_initializeImplementation();
}


VitalityPackImplementation::~VitalityPackImplementation() {
}


void VitalityPackImplementation::finalize() {
}

void VitalityPackImplementation::_initializeImplementation() {
	_setClassHelper(VitalityPackHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void VitalityPackImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<VitalityPack*>(stub);
	PharmaceuticalObjectImplementation::_setStub(stub);
}

DistributedObjectStub* VitalityPackImplementation::_getStub() {
	return _this.get();
}

VitalityPackImplementation::operator const VitalityPack*() {
	return _this.get();
}

void VitalityPackImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void VitalityPackImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void VitalityPackImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void VitalityPackImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void VitalityPackImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void VitalityPackImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void VitalityPackImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void VitalityPackImplementation::_serializationHelperMethod() {
	PharmaceuticalObjectImplementation::_serializationHelperMethod();

	_setClassName("VitalityPack");

}

void VitalityPackImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(VitalityPackImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool VitalityPackImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (PharmaceuticalObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x76354890: //VitalityPack.effectiveness
		TypeInfo<int >::parseFromBinaryStream(&effectiveness, stream);
		return true;

	}

	return false;
}

void VitalityPackImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = VitalityPackImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int VitalityPackImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = PharmaceuticalObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x76354890; //VitalityPack.effectiveness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&effectiveness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

VitalityPackImplementation::VitalityPackImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/pharmaceutical/VitalityPack.idl():  		setLoggingName("VitalityPack");
	setLoggingName("VitalityPack");
	// server/zone/objects/tangible/pharmaceutical/VitalityPack.idl():  		effectiveness = 0;
	effectiveness = 0;
}

void VitalityPackImplementation::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	// server/zone/objects/tangible/pharmaceutical/VitalityPack.idl():  		effectiveness = values.getCurrentValue("strength");
	effectiveness = values->getCurrentValue("strength");
	// server/zone/objects/tangible/pharmaceutical/VitalityPack.idl():  		setUseCount(1);
	setUseCount(1);
}

int VitalityPackImplementation::getEffectiveness() {
	// server/zone/objects/tangible/pharmaceutical/VitalityPack.idl():  		return effectiveness;
	return effectiveness;
}

bool VitalityPackImplementation::isVitalityPack() {
	// server/zone/objects/tangible/pharmaceutical/VitalityPack.idl():  		return true;
	return true;
}

/*
 *	VitalityPackAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


VitalityPackAdapter::VitalityPackAdapter(VitalityPack* obj) : PharmaceuticalObjectAdapter(obj) {
}

void VitalityPackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETEFFECTIVENESS__:
		{
			
			int _m_res = getEffectiveness();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISVITALITYPACK__:
		{
			
			bool _m_res = isVitalityPack();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		PharmaceuticalObjectAdapter::invokeMethod(methid, inv);
	}
}

int VitalityPackAdapter::getEffectiveness() {
	return (static_cast<VitalityPack*>(stub))->getEffectiveness();
}

bool VitalityPackAdapter::isVitalityPack() {
	return (static_cast<VitalityPack*>(stub))->isVitalityPack();
}

/*
 *	VitalityPackHelper
 */

VitalityPackHelper* VitalityPackHelper::staticInitializer = VitalityPackHelper::instance();

VitalityPackHelper::VitalityPackHelper() {
	className = "VitalityPack";

	Core::getObjectBroker()->registerClass(className, this);
}

void VitalityPackHelper::finalizeHelper() {
	VitalityPackHelper::finalize();
}

DistributedObject* VitalityPackHelper::instantiateObject() {
	return new VitalityPack(DummyConstructorParameter::instance());
}

DistributedObjectServant* VitalityPackHelper::instantiateServant() {
	return new VitalityPackImplementation();
}

DistributedObjectAdapter* VitalityPackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VitalityPackAdapter(static_cast<VitalityPack*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

