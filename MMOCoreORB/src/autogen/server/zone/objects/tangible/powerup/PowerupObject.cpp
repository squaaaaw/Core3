/*
 *	autogen/server/zone/objects/tangible/powerup/PowerupObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "PowerupObject.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

/*
 *	PowerupObjectStub
 */

enum {RPC_ISRANGED__ = 2188074194,RPC_ISMELEE__,RPC_ISTHROWN__,RPC_ISMINE__,RPC_DECREASEUSES__,RPC_GETUSES__,RPC_SETUSES__INT_,RPC_SETTYPE__STRING_,RPC_GETPOWERUPSTAT__STRING_,RPC_ADDPOWERUPSTAT__STRING_STRING_STRING_FLOAT_,};

PowerupObject::PowerupObject() : TangibleObject(DummyConstructorParameter::instance()) {
	PowerupObjectImplementation* _implementation = new PowerupObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PowerupObject");
}

PowerupObject::PowerupObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("PowerupObject");
}

PowerupObject::~PowerupObject() {
}



bool PowerupObject::isRanged() {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRANGED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRanged();
	}
}

bool PowerupObject::isMelee() {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMELEE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isMelee();
	}
}

bool PowerupObject::isThrown() {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTHROWN__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isThrown();
	}
}

bool PowerupObject::isMine() {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMINE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isMine();
	}
}

void PowerupObject::decreaseUses() {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECREASEUSES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->decreaseUses();
	}
}

int PowerupObject::getUses() {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETUSES__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getUses();
	}
}

void PowerupObject::setUses(int i) {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUSES__INT_);
		method.addSignedIntParameter(i);

		method.executeWithVoidReturn();
	} else {
		_implementation->setUses(i);
	}
}

void PowerupObject::setType(const String& t) {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTYPE__STRING_);
		method.addAsciiParameter(t);

		method.executeWithVoidReturn();
	} else {
		_implementation->setType(t);
	}
}

float PowerupObject::getPowerupStat(const String& stat) {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOWERUPSTAT__STRING_);
		method.addAsciiParameter(stat);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getPowerupStat(stat);
	}
}

void PowerupObject::addPowerupStat(const String& attributeToMod, const String& name, const String& pupAttrib, float value) {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPOWERUPSTAT__STRING_STRING_STRING_FLOAT_);
		method.addAsciiParameter(attributeToMod);
		method.addAsciiParameter(name);
		method.addAsciiParameter(pupAttrib);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->addPowerupStat(attributeToMod, name, pupAttrib, value);
	}
}

void PowerupObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void PowerupObject::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

void PowerupObject::fillWeaponAttributeList(AttributeListMessage* alm, WeaponObject* weapon) {
	PowerupObjectImplementation* _implementation = static_cast<PowerupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillWeaponAttributeList(alm, weapon);
	}
}

DistributedObjectServant* PowerupObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PowerupObject::_getImplementationForRead() const {
	return _impl;
}

void PowerupObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PowerupObjectImplementation
 */

PowerupObjectImplementation::PowerupObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


PowerupObjectImplementation::~PowerupObjectImplementation() {
}


void PowerupObjectImplementation::finalize() {
}

void PowerupObjectImplementation::_initializeImplementation() {
	_setClassHelper(PowerupObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PowerupObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PowerupObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PowerupObjectImplementation::_getStub() {
	return _this.get();
}

PowerupObjectImplementation::operator const PowerupObject*() {
	return _this.get();
}

void PowerupObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PowerupObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PowerupObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PowerupObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PowerupObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PowerupObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PowerupObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PowerupObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("PowerupObject");

}

void PowerupObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PowerupObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PowerupObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6b5d773e: //PowerupObject.modifiers
		TypeInfo<PowerupStatVector >::parseFromBinaryStream(&modifiers, stream);
		return true;

	case 0x418f9524: //PowerupObject.uses
		TypeInfo<int >::parseFromBinaryStream(&uses, stream);
		return true;

	case 0x416ddf01: //PowerupObject.type
		TypeInfo<String >::parseFromBinaryStream(&type, stream);
		return true;

	}

	return false;
}

void PowerupObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PowerupObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PowerupObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x6b5d773e; //PowerupObject.modifiers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<PowerupStatVector >::toBinaryStream(&modifiers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x418f9524; //PowerupObject.uses
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&uses, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x416ddf01; //PowerupObject.type
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&type, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 3;
}

PowerupObjectImplementation::PowerupObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		uses = 0;
	uses = 0;
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		Logger.setLoggingName("PowerupObject");
	Logger::setLoggingName("PowerupObject");
}

bool PowerupObjectImplementation::isRanged() {
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		return type == "ranged";
	return type == "ranged";
}

bool PowerupObjectImplementation::isMelee() {
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		return type == "melee";
	return type == "melee";
}

bool PowerupObjectImplementation::isThrown() {
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		return type == "thrown";
	return type == "thrown";
}

bool PowerupObjectImplementation::isMine() {
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		return type == "mine";
	return type == "mine";
}

void PowerupObjectImplementation::decreaseUses() {
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		uses = uses - 1;
	uses = uses - 1;
}

int PowerupObjectImplementation::getUses() {
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		return uses;
	return uses;
}

void PowerupObjectImplementation::setUses(int i) {
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		uses = i;
	uses = i;
}

void PowerupObjectImplementation::setType(const String& t) {
	// server/zone/objects/tangible/powerup/PowerupObject.idl():  		type = t;
	type = t;
}

/*
 *	PowerupObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PowerupObjectAdapter::PowerupObjectAdapter(PowerupObject* obj) : TangibleObjectAdapter(obj) {
}

void PowerupObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ISRANGED__:
		{
			
			bool _m_res = isRanged();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISMELEE__:
		{
			
			bool _m_res = isMelee();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTHROWN__:
		{
			
			bool _m_res = isThrown();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISMINE__:
		{
			
			bool _m_res = isMine();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_DECREASEUSES__:
		{
			
			decreaseUses();
			
		}
		break;
	case RPC_GETUSES__:
		{
			
			int _m_res = getUses();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETUSES__INT_:
		{
			int i = inv->getSignedIntParameter();
			
			setUses(i);
			
		}
		break;
	case RPC_SETTYPE__STRING_:
		{
			 String t; inv->getAsciiParameter(t);
			
			setType(t);
			
		}
		break;
	case RPC_GETPOWERUPSTAT__STRING_:
		{
			 String stat; inv->getAsciiParameter(stat);
			
			float _m_res = getPowerupStat(stat);
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_ADDPOWERUPSTAT__STRING_STRING_STRING_FLOAT_:
		{
			 String attributeToMod; inv->getAsciiParameter(attributeToMod);
			 String name; inv->getAsciiParameter(name);
			 String pupAttrib; inv->getAsciiParameter(pupAttrib);
			float value = inv->getFloatParameter();
			
			addPowerupStat(attributeToMod, name, pupAttrib, value);
			
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

bool PowerupObjectAdapter::isRanged() {
	return (static_cast<PowerupObject*>(stub))->isRanged();
}

bool PowerupObjectAdapter::isMelee() {
	return (static_cast<PowerupObject*>(stub))->isMelee();
}

bool PowerupObjectAdapter::isThrown() {
	return (static_cast<PowerupObject*>(stub))->isThrown();
}

bool PowerupObjectAdapter::isMine() {
	return (static_cast<PowerupObject*>(stub))->isMine();
}

void PowerupObjectAdapter::decreaseUses() {
	(static_cast<PowerupObject*>(stub))->decreaseUses();
}

int PowerupObjectAdapter::getUses() {
	return (static_cast<PowerupObject*>(stub))->getUses();
}

void PowerupObjectAdapter::setUses(int i) {
	(static_cast<PowerupObject*>(stub))->setUses(i);
}

void PowerupObjectAdapter::setType(const String& t) {
	(static_cast<PowerupObject*>(stub))->setType(t);
}

float PowerupObjectAdapter::getPowerupStat(const String& stat) {
	return (static_cast<PowerupObject*>(stub))->getPowerupStat(stat);
}

void PowerupObjectAdapter::addPowerupStat(const String& attributeToMod, const String& name, const String& pupAttrib, float value) {
	(static_cast<PowerupObject*>(stub))->addPowerupStat(attributeToMod, name, pupAttrib, value);
}

/*
 *	PowerupObjectHelper
 */

PowerupObjectHelper* PowerupObjectHelper::staticInitializer = PowerupObjectHelper::instance();

PowerupObjectHelper::PowerupObjectHelper() {
	className = "PowerupObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void PowerupObjectHelper::finalizeHelper() {
	PowerupObjectHelper::finalize();
}

DistributedObject* PowerupObjectHelper::instantiateObject() {
	return new PowerupObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* PowerupObjectHelper::instantiateServant() {
	return new PowerupObjectImplementation();
}

DistributedObjectAdapter* PowerupObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PowerupObjectAdapter(static_cast<PowerupObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaPowerupObject::className[] = "LuaPowerupObject";

Luna<LuaPowerupObject>::RegType LuaPowerupObject::Register[] = {
	{ "_setObject", &LuaPowerupObject::_setObject },
	{ "_getObject", &LuaPowerupObject::_getObject },
	{ "isRanged", &LuaPowerupObject::isRanged },
	{ "isMelee", &LuaPowerupObject::isMelee },
	{ "isThrown", &LuaPowerupObject::isThrown },
	{ "isMine", &LuaPowerupObject::isMine },
	{ "decreaseUses", &LuaPowerupObject::decreaseUses },
	{ "getUses", &LuaPowerupObject::getUses },
	{ "setUses", &LuaPowerupObject::setUses },
	{ "setType", &LuaPowerupObject::setType },
	{ "getPowerupStat", &LuaPowerupObject::getPowerupStat },
	{ "addPowerupStat", &LuaPowerupObject::addPowerupStat },
	{ "fillAttributeList", &LuaPowerupObject::fillAttributeList },
	{ "updateCraftingValues", &LuaPowerupObject::updateCraftingValues },
	{ "fillWeaponAttributeList", &LuaPowerupObject::fillWeaponAttributeList },
	{ 0, 0 }
};

LuaPowerupObject::LuaPowerupObject(lua_State *L) {
	realObject = static_cast<PowerupObject*>(lua_touserdata(L, 1));
}

LuaPowerupObject::~LuaPowerupObject() {
}

int LuaPowerupObject::_setObject(lua_State* L) {
	realObject = static_cast<PowerupObject*>(lua_touserdata(L, -1));

	return 0;
}

int LuaPowerupObject::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaPowerupObject::isRanged(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isRanged();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:isRanged()'");
	}
	return 0;
}

int LuaPowerupObject::isMelee(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isMelee();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:isMelee()'");
	}
	return 0;
}

int LuaPowerupObject::isThrown(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isThrown();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:isThrown()'");
	}
	return 0;
}

int LuaPowerupObject::isMine(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isMine();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:isMine()'");
	}
	return 0;
}

int LuaPowerupObject::decreaseUses(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		realObject->decreaseUses();

		return 0;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:decreaseUses()'");
	}
	return 0;
}

int LuaPowerupObject::getUses(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getUses();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:getUses()'");
	}
	return 0;
}

int LuaPowerupObject::setUses(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int i = lua_tointeger(L, -1);

			realObject->setUses(i);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:setUses(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'PowerupObject:setUses(integer)'");
	}
	return 0;
}

int LuaPowerupObject::setType(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isstring(L, -1)) {
		if (parameterCount == 1) {
			const String t = lua_tostring(L, -1);

			realObject->setType(t);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:setType(string)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'PowerupObject:setType(string)'");
	}
	return 0;
}

int LuaPowerupObject::getPowerupStat(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isstring(L, -1)) {
		if (parameterCount == 1) {
			const String stat = lua_tostring(L, -1);

			float result = realObject->getPowerupStat(stat);

			lua_pushnumber(L, result);
			return 1;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:getPowerupStat(string)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'PowerupObject:getPowerupStat(string)'");
	}
	return 0;
}

int LuaPowerupObject::addPowerupStat(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (lua_isstring(L, -2)) {
			if (lua_isstring(L, -3)) {
				if (lua_isstring(L, -4)) {
					if (parameterCount == 4) {
						const String attributeToMod = lua_tostring(L, -4);
						const String name = lua_tostring(L, -3);
						const String pupAttrib = lua_tostring(L, -2);
						float value = lua_tonumber(L, -1);

						realObject->addPowerupStat(attributeToMod, name, pupAttrib, value);

						return 0;
					} else {
						throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:addPowerupStat(string, string, string, number)'");
					}
				} else {
					throw LuaCallbackException(L, "invalid argument at 3 for lua method 'PowerupObject:addPowerupStat(string, string, string, number)'");
				}
			} else {
				throw LuaCallbackException(L, "invalid argument at 2 for lua method 'PowerupObject:addPowerupStat(string, string, string, number)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'PowerupObject:addPowerupStat(string, string, string, number)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'PowerupObject:addPowerupStat(string, string, string, number)'");
	}
	return 0;
}

int LuaPowerupObject::fillAttributeList(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				AttributeListMessage* msg = static_cast<AttributeListMessage*>(lua_touserdata(L, -2));
				CreatureObject* object = static_cast<CreatureObject*>(lua_touserdata(L, -1));

				realObject->fillAttributeList(msg, object);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:fillAttributeList(userdata, userdata)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'PowerupObject:fillAttributeList(userdata, userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'PowerupObject:fillAttributeList(userdata, userdata)'");
	}
	return 0;
}

int LuaPowerupObject::updateCraftingValues(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isboolean(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				CraftingValues* values = static_cast<CraftingValues*>(lua_touserdata(L, -2));
				bool firstUpdate = lua_toboolean(L, -1);

				realObject->updateCraftingValues(values, firstUpdate);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:updateCraftingValues(userdata, boolean)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'PowerupObject:updateCraftingValues(userdata, boolean)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'PowerupObject:updateCraftingValues(userdata, boolean)'");
	}
	return 0;
}

int LuaPowerupObject::fillWeaponAttributeList(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				AttributeListMessage* alm = static_cast<AttributeListMessage*>(lua_touserdata(L, -2));
				WeaponObject* weapon = static_cast<WeaponObject*>(lua_touserdata(L, -1));

				realObject->fillWeaponAttributeList(alm, weapon);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'PowerupObject:fillWeaponAttributeList(userdata, userdata)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'PowerupObject:fillWeaponAttributeList(userdata, userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'PowerupObject:fillWeaponAttributeList(userdata, userdata)'");
	}
	return 0;
}

