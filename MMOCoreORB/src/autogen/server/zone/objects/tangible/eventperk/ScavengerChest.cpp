/*
 *	autogen/server/zone/objects/tangible/eventperk/ScavengerChest.cpp generated by engine3 IDL compiler 0.60
 */

#include "ScavengerChest.h"

/*
 *	ScavengerChestStub
 */

enum {RPC_ISEVENTPERKITEM__ = 1254428940,RPC_ADDTOLOOTEDLIST__LONG_,RPC_ISONLOOTEDLIST__LONG_};

ScavengerChest::ScavengerChest() : Container(DummyConstructorParameter::instance()) {
	ScavengerChestImplementation* _implementation = new ScavengerChestImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ScavengerChest");
}

ScavengerChest::ScavengerChest(DummyConstructorParameter* param) : Container(param) {
	_setClassName("ScavengerChest");
}

ScavengerChest::~ScavengerChest() {
}



bool ScavengerChest::isEventPerkItem() {
	ScavengerChestImplementation* _implementation = static_cast<ScavengerChestImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISEVENTPERKITEM__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isEventPerkItem();
	}
}

void ScavengerChest::addtoLootedList(unsigned long long playerID) {
	ScavengerChestImplementation* _implementation = static_cast<ScavengerChestImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOLOOTEDLIST__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addtoLootedList(playerID);
	}
}

bool ScavengerChest::isOnLootedList(unsigned long long playerID) {
	ScavengerChestImplementation* _implementation = static_cast<ScavengerChestImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONLOOTEDLIST__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnLootedList(playerID);
	}
}

DistributedObjectServant* ScavengerChest::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ScavengerChest::_getImplementationForRead() const {
	return _impl;
}

void ScavengerChest::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ScavengerChestImplementation
 */

ScavengerChestImplementation::ScavengerChestImplementation(DummyConstructorParameter* param) : ContainerImplementation(param) {
	_initializeImplementation();
}


ScavengerChestImplementation::~ScavengerChestImplementation() {
}


void ScavengerChestImplementation::finalize() {
}

void ScavengerChestImplementation::_initializeImplementation() {
	_setClassHelper(ScavengerChestHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ScavengerChestImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ScavengerChest*>(stub);
	ContainerImplementation::_setStub(stub);
}

DistributedObjectStub* ScavengerChestImplementation::_getStub() {
	return _this.get();
}

ScavengerChestImplementation::operator const ScavengerChest*() {
	return _this.get();
}

void ScavengerChestImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ScavengerChestImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ScavengerChestImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ScavengerChestImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ScavengerChestImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ScavengerChestImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ScavengerChestImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ScavengerChestImplementation::_serializationHelperMethod() {
	ContainerImplementation::_serializationHelperMethod();

	_setClassName("ScavengerChest");

}

void ScavengerChestImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ScavengerChestImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ScavengerChestImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ContainerImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xcb118b49: //ScavengerChest.lootedList
		TypeInfo<Vector<unsigned long long> >::parseFromBinaryStream(&lootedList, stream);
		return true;

	}

	return false;
}

void ScavengerChestImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ScavengerChestImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ScavengerChestImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ContainerImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xcb118b49; //ScavengerChest.lootedList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&lootedList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

ScavengerChestImplementation::ScavengerChestImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/eventperk/ScavengerChest.idl():  		Logger.setLoggingName("ScavengerChest");
	Logger::setLoggingName("ScavengerChest");
}

bool ScavengerChestImplementation::isEventPerkItem() {
	// server/zone/objects/tangible/eventperk/ScavengerChest.idl():  		return true;
	return true;
}

void ScavengerChestImplementation::addtoLootedList(unsigned long long playerID) {
	// server/zone/objects/tangible/eventperk/ScavengerChest.idl():  		lootedList.add(playerID);
	(&lootedList)->add(playerID);
}

bool ScavengerChestImplementation::isOnLootedList(unsigned long long playerID) {
	// server/zone/objects/tangible/eventperk/ScavengerChest.idl():  		return lootedList.contains(playerID);
	return (&lootedList)->contains(playerID);
}

/*
 *	ScavengerChestAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ScavengerChestAdapter::ScavengerChestAdapter(ScavengerChest* obj) : ContainerAdapter(obj) {
}

void ScavengerChestAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ISEVENTPERKITEM__:
		{
			
			bool _m_res = isEventPerkItem();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDTOLOOTEDLIST__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			addtoLootedList(playerID);
			
		}
		break;
	case RPC_ISONLOOTEDLIST__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnLootedList(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		ContainerAdapter::invokeMethod(methid, inv);
	}
}

bool ScavengerChestAdapter::isEventPerkItem() {
	return (static_cast<ScavengerChest*>(stub))->isEventPerkItem();
}

void ScavengerChestAdapter::addtoLootedList(unsigned long long playerID) {
	(static_cast<ScavengerChest*>(stub))->addtoLootedList(playerID);
}

bool ScavengerChestAdapter::isOnLootedList(unsigned long long playerID) {
	return (static_cast<ScavengerChest*>(stub))->isOnLootedList(playerID);
}

/*
 *	ScavengerChestHelper
 */

ScavengerChestHelper* ScavengerChestHelper::staticInitializer = ScavengerChestHelper::instance();

ScavengerChestHelper::ScavengerChestHelper() {
	className = "ScavengerChest";

	Core::getObjectBroker()->registerClass(className, this);
}

void ScavengerChestHelper::finalizeHelper() {
	ScavengerChestHelper::finalize();
}

DistributedObject* ScavengerChestHelper::instantiateObject() {
	return new ScavengerChest(DummyConstructorParameter::instance());
}

DistributedObjectServant* ScavengerChestHelper::instantiateServant() {
	return new ScavengerChestImplementation();
}

DistributedObjectAdapter* ScavengerChestHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ScavengerChestAdapter(static_cast<ScavengerChest*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

