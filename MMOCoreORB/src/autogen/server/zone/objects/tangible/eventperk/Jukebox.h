/*
 *	autogen/server/zone/objects/tangible/eventperk/Jukebox.h generated by engine3 IDL compiler 0.60
 */

#ifndef JUKEBOX_H_
#define JUKEBOX_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace tasks {

class RemoveEventPerkItemTask;

} // namespace tasks
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::tasks;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/tangible/terminal/Terminal.h"

#include "system/lang/ref/Reference.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class Jukebox : public Terminal {
public:
	Jukebox();

	void initializeTransientMembers();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	void createChildObjects();

	void setRadius(float radius);

	void notifyInsertToZone(Zone* zone);

	void doMusicSelection(CreatureObject* player);

	void playMusicToPlayer(CreatureObject* player, const String& song);

	void changeMusic(const String& song);

	void startPlaying(const String& song);

	void stopPlaying();

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	void activateRemoveEvent(bool immediate = false);

	bool isSongPlaying() const;

	String getCurSong() const;

	bool isEventPerkItem();

	void setOwner(CreatureObject* player);

	Time* getPurchaseTime();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	Jukebox(DummyConstructorParameter* param);

	virtual ~Jukebox();

	friend class JukeboxHelper;
};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class JukeboxImplementation : public TerminalImplementation {
protected:
	ManagedWeakReference<CreatureObject* > owner;

	float radius;

	String curSong;

	bool isPlaying;

	Time purchaseTime;

	Reference<RemoveEventPerkItemTask*> removeEventPerkItemTask;

public:
	JukeboxImplementation();

	JukeboxImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	void createChildObjects();

	void setRadius(float radius);

	void notifyInsertToZone(Zone* zone);

	void doMusicSelection(CreatureObject* player);

	void playMusicToPlayer(CreatureObject* player, const String& song);

	void changeMusic(const String& song);

	void startPlaying(const String& song);

	void stopPlaying();

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	void activateRemoveEvent(bool immediate = false);

	bool isSongPlaying() const;

	String getCurSong() const;

	bool isEventPerkItem();

	void setOwner(CreatureObject* player);

	Time* getPurchaseTime();

	WeakReference<Jukebox*> _this;

	operator const Jukebox*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~JukeboxImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class Jukebox;
};

class JukeboxAdapter : public TerminalAdapter {
public:
	JukeboxAdapter(Jukebox* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void createChildObjects();

	void setRadius(float radius);

	void notifyInsertToZone(Zone* zone);

	void doMusicSelection(CreatureObject* player);

	void playMusicToPlayer(CreatureObject* player, const String& song);

	void changeMusic(const String& song);

	void startPlaying(const String& song);

	void stopPlaying();

	void destroyObjectFromDatabase(bool destroyContainedObjects);

	void activateRemoveEvent(bool immediate);

	bool isSongPlaying() const;

	String getCurSong() const;

	bool isEventPerkItem();

	void setOwner(CreatureObject* player);

};

class JukeboxHelper : public DistributedObjectClassHelper, public Singleton<JukeboxHelper> {
	static JukeboxHelper* staticInitializer;

public:
	JukeboxHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<JukeboxHelper>;
};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

#endif /*JUKEBOX_H_*/
