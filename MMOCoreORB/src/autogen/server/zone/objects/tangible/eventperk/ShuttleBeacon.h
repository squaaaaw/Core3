/*
 *	autogen/server/zone/objects/tangible/eventperk/ShuttleBeacon.h generated by engine3 IDL compiler 0.60
 */

#ifndef SHUTTLEBEACON_H_
#define SHUTTLEBEACON_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace tasks {

class RemoveEventPerkItemTask;

} // namespace tasks
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::tasks;

#include "system/lang/ref/Reference.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class ShuttleBeacon : public TangibleObject {
public:
	ShuttleBeacon();

	void initializeTransientMembers();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillAttributeList(AttributeListMessage* alm, CreatureObject* object);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	void activateRemoveEvent(bool immediate = false);

	void callShuttle(CreatureObject* player);

	void spawnShuttle(CreatureObject* player, int type);

	void landShuttle(CreatureObject* player);

	void dismissShuttle(CreatureObject* player);

	void destroyShuttle(CreatureObject* player);

	bool canSpawnShuttle(CreatureObject* player);

	String getDurationString();

	void setOwner(CreatureObject* player);

	Time* getPurchaseTime();

	void setReadyToTakeOff(bool status);

	bool isEventPerkItem();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ShuttleBeacon(DummyConstructorParameter* param);

	virtual ~ShuttleBeacon();

	friend class ShuttleBeaconHelper;
};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class ShuttleBeaconImplementation : public TangibleObjectImplementation {
protected:
	ManagedWeakReference<CreatureObject* > owner;

	Time purchaseTime;

	ManagedWeakReference<CreatureObject* > shuttle;

	int shuttleStatus;

	int shuttleType;

	bool readyToTakeOff;

	Reference<RemoveEventPerkItemTask*> removeEventPerkItemTask;

public:
	ShuttleBeaconImplementation();

	ShuttleBeaconImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillAttributeList(AttributeListMessage* alm, CreatureObject* object);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	void activateRemoveEvent(bool immediate = false);

	void callShuttle(CreatureObject* player);

	void spawnShuttle(CreatureObject* player, int type);

	void landShuttle(CreatureObject* player);

	void dismissShuttle(CreatureObject* player);

	void destroyShuttle(CreatureObject* player);

	bool canSpawnShuttle(CreatureObject* player);

	String getDurationString();

	void setOwner(CreatureObject* player);

	Time* getPurchaseTime();

	void setReadyToTakeOff(bool status);

	bool isEventPerkItem();

	WeakReference<ShuttleBeacon*> _this;

	operator const ShuttleBeacon*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ShuttleBeaconImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ShuttleBeacon;
};

class ShuttleBeaconAdapter : public TangibleObjectAdapter {
public:
	ShuttleBeaconAdapter(ShuttleBeacon* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void destroyObjectFromDatabase(bool destroyContainedObjects);

	void activateRemoveEvent(bool immediate);

	void callShuttle(CreatureObject* player);

	void spawnShuttle(CreatureObject* player, int type);

	void landShuttle(CreatureObject* player);

	void dismissShuttle(CreatureObject* player);

	void destroyShuttle(CreatureObject* player);

	bool canSpawnShuttle(CreatureObject* player);

	String getDurationString();

	void setOwner(CreatureObject* player);

	void setReadyToTakeOff(bool status);

	bool isEventPerkItem();

};

class ShuttleBeaconHelper : public DistributedObjectClassHelper, public Singleton<ShuttleBeaconHelper> {
	static ShuttleBeaconHelper* staticInitializer;

public:
	ShuttleBeaconHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ShuttleBeaconHelper>;
};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

#endif /*SHUTTLEBEACON_H_*/
