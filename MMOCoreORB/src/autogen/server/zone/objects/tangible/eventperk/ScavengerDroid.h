/*
 *	autogen/server/zone/objects/tangible/eventperk/ScavengerDroid.h generated by engine3 IDL compiler 0.60
 */

#ifndef SCAVENGERDROID_H_
#define SCAVENGERDROID_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "system/util/Vector.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "system/util/VectorMap.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class ScavengerDroid : public CreatureObject {
public:
	static const int GAMESETUP = 0;

	static const int GAMESTARTED = 1;

	static const int GAMEENDED = 2;

	ScavengerDroid();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	CreatureObject* getDeedOwner();

	void startGame(CreatureObject* player);

	void updatePlayerScore(CreatureObject* player);

	void sendItemListSUI(CreatureObject* player);

	void sendSetupInstructionsSUI(CreatureObject* player);

	void sendGameInstructionsSUI(CreatureObject* player);

	int getGameStatus() const;

	int getItemListSize() const;

	void addToItemList(String& item);

	bool hasItemInItemList(String& item);

	void clearItemList();

	bool hasItemInPlayerItemList(unsigned long long playerID, const String& item);

	void addToPlayerItemList(unsigned long long playerID, const String& item);

	void announceToPlayers(const String& msg);

	int getTurnedInItemListSize(unsigned long long playerID);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ScavengerDroid(DummyConstructorParameter* param);

	virtual ~ScavengerDroid();

	friend class ScavengerDroidHelper;
};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class ScavengerDroidImplementation : public CreatureObjectImplementation {
protected:
	Time gameStartTime;

	Time gameEndTime;

	int gameStatus;

	ManagedWeakReference<CreatureObject* > currentWinner;

public:
	static const int GAMESETUP = 0;

	static const int GAMESTARTED = 1;

	static const int GAMEENDED = 2;

protected:
	VectorMap<uint64, Vector<String> > turnedInItemList;

	Vector<String> itemList;

public:
	ScavengerDroidImplementation();

	ScavengerDroidImplementation(DummyConstructorParameter* param);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	CreatureObject* getDeedOwner();

	void startGame(CreatureObject* player);

	void updatePlayerScore(CreatureObject* player);

	void sendItemListSUI(CreatureObject* player);

	void sendSetupInstructionsSUI(CreatureObject* player);

	void sendGameInstructionsSUI(CreatureObject* player);

	int getGameStatus() const;

	int getItemListSize() const;

	void addToItemList(String& item);

	bool hasItemInItemList(String& item);

	void clearItemList();

	bool hasItemInPlayerItemList(unsigned long long playerID, const String& item);

	void addToPlayerItemList(unsigned long long playerID, const String& item);

	void announceToPlayers(const String& msg);

	int getTurnedInItemListSize(unsigned long long playerID);

	WeakReference<ScavengerDroid*> _this;

	operator const ScavengerDroid*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ScavengerDroidImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ScavengerDroid;
};

class ScavengerDroidAdapter : public CreatureObjectAdapter {
public:
	ScavengerDroidAdapter(ScavengerDroid* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	CreatureObject* getDeedOwner();

	void startGame(CreatureObject* player);

	void updatePlayerScore(CreatureObject* player);

	void sendItemListSUI(CreatureObject* player);

	void sendSetupInstructionsSUI(CreatureObject* player);

	void sendGameInstructionsSUI(CreatureObject* player);

	int getGameStatus() const;

	int getItemListSize() const;

	void addToItemList(String& item);

	bool hasItemInItemList(String& item);

	void clearItemList();

	bool hasItemInPlayerItemList(unsigned long long playerID, const String& item);

	void addToPlayerItemList(unsigned long long playerID, const String& item);

	void announceToPlayers(const String& msg);

	int getTurnedInItemListSize(unsigned long long playerID);

};

class ScavengerDroidHelper : public DistributedObjectClassHelper, public Singleton<ScavengerDroidHelper> {
	static ScavengerDroidHelper* staticInitializer;

public:
	ScavengerDroidHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ScavengerDroidHelper>;
};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

#endif /*SCAVENGERDROID_H_*/
