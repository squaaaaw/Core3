/*
 *	autogen/server/zone/objects/tangible/eventperk/LotteryDroid.cpp generated by engine3 IDL compiler 0.60
 */

#include "LotteryDroid.h"

#include "server/zone/objects/tangible/tasks/RemoveEventPerkItemTask.h"

#include "server/zone/objects/tangible/tasks/LotteryDroidPulseTask.h"

/*
 *	LotteryDroidStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 1062444868,RPC_NOTIFYLOADFROMDATABASE__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_ENDGAME__,RPC_STARTLOTTERY__CREATUREOBJECT_,RPC_SENDDURATIONSUI__CREATUREOBJECT_,RPC_SENDPAYOUTSUI__CREATUREOBJECT_,RPC_SENDTICKETCOSTSUI__CREATUREOBJECT_,RPC_SENDADDCREDITSSUI__CREATUREOBJECT_,RPC_SENDLOTTERYINSTRUCTIONSSUI__CREATUREOBJECT_,RPC_SENDREGISTRATIONSUI__CREATUREOBJECT_,RPC_SENDLOTTERYINFOSUI__CREATUREOBJECT_,RPC_GETTIMELEFT__LONG_,RPC_GETDEEDOWNER__,RPC_ACTIVATEGAMEPULSE__,RPC_ISEVENTPERKITEM__,RPC_GETGAMESTATUS__,RPC_GETGAMEDURATION__,RPC_GETTICKETPRICE__,RPC_GETPAYOUTPERCENT__,RPC_SETGAMEDURATION__INT_,RPC_SETPAYOUTPERCENT__INT_,RPC_SETTICKETPRICE__INT_,RPC_ADDTOCREDITPOOL__INT_,RPC_GETNUMPLAYERS__,RPC_ADDNEWPLAYER__LONG_,RPC_ISCURRENTPLAYER__LONG_};

LotteryDroid::LotteryDroid() : CreatureObject(DummyConstructorParameter::instance()) {
	LotteryDroidImplementation* _implementation = new LotteryDroidImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("LotteryDroid");
}

LotteryDroid::LotteryDroid(DummyConstructorParameter* param) : CreatureObject(param) {
	_setClassName("LotteryDroid");
}

LotteryDroid::~LotteryDroid() {
}



void LotteryDroid::initializeTransientMembers() {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void LotteryDroid::notifyLoadFromDatabase() {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyLoadFromDatabase();
	}
}

int LotteryDroid::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void LotteryDroid::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

void LotteryDroid::endGame() {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ENDGAME__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->endGame();
	}
}

void LotteryDroid::startLottery(CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTLOTTERY__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->startLottery(player);
	}
}

void LotteryDroid::sendDurationSUI(CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDURATIONSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendDurationSUI(player);
	}
}

void LotteryDroid::sendPayoutSUI(CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDPAYOUTSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendPayoutSUI(player);
	}
}

void LotteryDroid::sendTicketCostSUI(CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTICKETCOSTSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendTicketCostSUI(player);
	}
}

void LotteryDroid::sendAddCreditsSUI(CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDADDCREDITSSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendAddCreditsSUI(player);
	}
}

void LotteryDroid::sendLotteryInstructionsSUI(CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDLOTTERYINSTRUCTIONSSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendLotteryInstructionsSUI(player);
	}
}

void LotteryDroid::sendRegistrationSUI(CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDREGISTRATIONSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendRegistrationSUI(player);
	}
}

void LotteryDroid::sendLotteryInfoSUI(CreatureObject* player) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDLOTTERYINFOSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendLotteryInfoSUI(player);
	}
}

String LotteryDroid::getTimeLeft(unsigned long long timeLeft) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMELEFT__LONG_);
		method.addUnsignedLongParameter(timeLeft);

		String _return_getTimeLeft;
		method.executeWithAsciiReturn(_return_getTimeLeft);
		return _return_getTimeLeft;
	} else {
		return _implementation->getTimeLeft(timeLeft);
	}
}

CreatureObject* LotteryDroid::getDeedOwner() {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEEDOWNER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getDeedOwner();
	}
}

void LotteryDroid::activateGamePulse() {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATEGAMEPULSE__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->activateGamePulse();
	}
}

bool LotteryDroid::isEventPerkItem() {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISEVENTPERKITEM__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isEventPerkItem();
	}
}

Time* LotteryDroid::getPurchaseTime() {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPurchaseTime();
	}
}

int LotteryDroid::getGameStatus() const {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGAMESTATUS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getGameStatus();
	}
}

int LotteryDroid::getGameDuration() const {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGAMEDURATION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getGameDuration();
	}
}

int LotteryDroid::getTicketPrice() const {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTICKETPRICE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTicketPrice();
	}
}

float LotteryDroid::getPayoutPercent() const {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPAYOUTPERCENT__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getPayoutPercent();
	}
}

Time* LotteryDroid::getGameStartTime() {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getGameStartTime();
	}
}

void LotteryDroid::setGameDuration(int i) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGAMEDURATION__INT_);
		method.addSignedIntParameter(i);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGameDuration(i);
	}
}

void LotteryDroid::setPayoutPercent(int i) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPAYOUTPERCENT__INT_);
		method.addSignedIntParameter(i);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setPayoutPercent(i);
	}
}

void LotteryDroid::setTicketPrice(int price) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTICKETPRICE__INT_);
		method.addSignedIntParameter(price);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setTicketPrice(price);
	}
}

void LotteryDroid::addToCreditPool(int amount) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOCREDITPOOL__INT_);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addToCreditPool(amount);
	}
}

int LotteryDroid::getNumPlayers() const {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNUMPLAYERS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getNumPlayers();
	}
}

void LotteryDroid::addNewPlayer(unsigned long long playerID) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDNEWPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addNewPlayer(playerID);
	}
}

bool LotteryDroid::isCurrentPlayer(unsigned long long playerID) {
	LotteryDroidImplementation* _implementation = static_cast<LotteryDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCURRENTPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCurrentPlayer(playerID);
	}
}

DistributedObjectServant* LotteryDroid::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* LotteryDroid::_getImplementationForRead() const {
	return _impl;
}

void LotteryDroid::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	LotteryDroidImplementation
 */

LotteryDroidImplementation::LotteryDroidImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}


LotteryDroidImplementation::~LotteryDroidImplementation() {
}


void LotteryDroidImplementation::finalize() {
}

void LotteryDroidImplementation::_initializeImplementation() {
	_setClassHelper(LotteryDroidHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void LotteryDroidImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<LotteryDroid*>(stub);
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* LotteryDroidImplementation::_getStub() {
	return _this.get();
}

LotteryDroidImplementation::operator const LotteryDroid*() {
	return _this.get();
}

void LotteryDroidImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void LotteryDroidImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void LotteryDroidImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void LotteryDroidImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void LotteryDroidImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void LotteryDroidImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void LotteryDroidImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void LotteryDroidImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("LotteryDroid");

}

void LotteryDroidImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(LotteryDroidImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LotteryDroidImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (CreatureObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x86ce0993: //LotteryDroid.purchaseTime
		TypeInfo<Time >::parseFromBinaryStream(&purchaseTime, stream);
		return true;

	case 0x4231290: //LotteryDroid.gameStartTime
		TypeInfo<Time >::parseFromBinaryStream(&gameStartTime, stream);
		return true;

	case 0x9a612ad4: //LotteryDroid.gameStatus
		TypeInfo<int >::parseFromBinaryStream(&gameStatus, stream);
		return true;

	case 0xfc1fd97e: //LotteryDroid.ticketPrice
		TypeInfo<int >::parseFromBinaryStream(&ticketPrice, stream);
		return true;

	case 0x789e7ba3: //LotteryDroid.payoutPercent
		TypeInfo<float >::parseFromBinaryStream(&payoutPercent, stream);
		return true;

	case 0x507c43fc: //LotteryDroid.gameDuration
		TypeInfo<int >::parseFromBinaryStream(&gameDuration, stream);
		return true;

	case 0xafef67b0: //LotteryDroid.creditPool
		TypeInfo<int >::parseFromBinaryStream(&creditPool, stream);
		return true;

	case 0x1d6f1b7a: //LotteryDroid.winnerID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&winnerID, stream);
		return true;

	case 0xfb2f57c4: //LotteryDroid.playerList
		TypeInfo<Vector<unsigned long long> >::parseFromBinaryStream(&playerList, stream);
		return true;

	case 0x3e06807e: //LotteryDroid.gamePulse
		TypeInfo<Reference<LotteryDroidPulseTask*> >::parseFromBinaryStream(&gamePulse, stream);
		return true;

	}

	return false;
}

void LotteryDroidImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LotteryDroidImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LotteryDroidImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = CreatureObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x86ce0993; //LotteryDroid.purchaseTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&purchaseTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4231290; //LotteryDroid.gameStartTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&gameStartTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9a612ad4; //LotteryDroid.gameStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&gameStatus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfc1fd97e; //LotteryDroid.ticketPrice
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&ticketPrice, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x789e7ba3; //LotteryDroid.payoutPercent
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&payoutPercent, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x507c43fc; //LotteryDroid.gameDuration
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&gameDuration, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xafef67b0; //LotteryDroid.creditPool
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&creditPool, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1d6f1b7a; //LotteryDroid.winnerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&winnerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfb2f57c4; //LotteryDroid.playerList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&playerList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3e06807e; //LotteryDroid.gamePulse
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Reference<LotteryDroidPulseTask*> >::toBinaryStream(&gamePulse, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 10;
}

LotteryDroidImplementation::LotteryDroidImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		Logger.setLoggingName("LotteryDroid");
	Logger::setLoggingName("LotteryDroid");
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		purchaseTime.updateToCurrentTime();
	(&purchaseTime)->updateToCurrentTime();
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		gameStatus = 0;
	gameStatus = 0;
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		ticketPrice = 0;
	ticketPrice = 0;
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		payoutPercent = 0.0f;
	payoutPercent = 0.0f;
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		gameDuration = 0;
	gameDuration = 0;
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		creditPool = 0;
	creditPool = 0;
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		winnerID = 0;
	winnerID = 0;
}

void LotteryDroidImplementation::notifyLoadFromDatabase() {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		super.notifyLoadFromDatabase();
	CreatureObjectImplementation::notifyLoadFromDatabase();
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  	}
	if (gameStatus == GAMESTARTED || gameStatus == GAMEENDED){
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  			activateGamePulse();
	activateGamePulse();
}
}

bool LotteryDroidImplementation::isEventPerkItem() {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return true;
	return true;
}

Time* LotteryDroidImplementation::getPurchaseTime() {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return purchaseTime;
	return (&purchaseTime);
}

int LotteryDroidImplementation::getGameStatus() const{
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return gameStatus;
	return gameStatus;
}

int LotteryDroidImplementation::getGameDuration() const{
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return gameDuration;
	return gameDuration;
}

int LotteryDroidImplementation::getTicketPrice() const{
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return ticketPrice;
	return ticketPrice;
}

float LotteryDroidImplementation::getPayoutPercent() const{
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return payoutPercent;
	return payoutPercent;
}

Time* LotteryDroidImplementation::getGameStartTime() {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return gameStartTime;
	return (&gameStartTime);
}

void LotteryDroidImplementation::setGameDuration(int i) {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		gameDuration = gameDurationChoices.get(i);
	gameDuration = (&gameDurationChoices)->get(i);
}

void LotteryDroidImplementation::setPayoutPercent(int i) {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		payoutPercent = (float) payoutPercentChoices.get(i) / 100;
	payoutPercent = (float) (&payoutPercentChoices)->get(i) / 100;
}

void LotteryDroidImplementation::setTicketPrice(int price) {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		ticketPrice = price;
	ticketPrice = price;
}

void LotteryDroidImplementation::addToCreditPool(int amount) {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		creditPool = creditPool + amount;
	creditPool = creditPool + amount;
}

int LotteryDroidImplementation::getNumPlayers() const{
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return playerList.size();
	return (&playerList)->size();
}

void LotteryDroidImplementation::addNewPlayer(unsigned long long playerID) {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		playerList.add(playerID);
	(&playerList)->add(playerID);
}

bool LotteryDroidImplementation::isCurrentPlayer(unsigned long long playerID) {
	// server/zone/objects/tangible/eventperk/LotteryDroid.idl():  		return playerList.contains(playerID);
	return (&playerList)->contains(playerID);
}

/*
 *	LotteryDroidAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


LotteryDroidAdapter::LotteryDroidAdapter(LotteryDroid* obj) : CreatureObjectAdapter(obj) {
}

void LotteryDroidAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			
			notifyLoadFromDatabase();
			
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ENDGAME__:
		{
			
			endGame();
			
		}
		break;
	case RPC_STARTLOTTERY__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			startLottery(player);
			
		}
		break;
	case RPC_SENDDURATIONSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendDurationSUI(player);
			
		}
		break;
	case RPC_SENDPAYOUTSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendPayoutSUI(player);
			
		}
		break;
	case RPC_SENDTICKETCOSTSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendTicketCostSUI(player);
			
		}
		break;
	case RPC_SENDADDCREDITSSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendAddCreditsSUI(player);
			
		}
		break;
	case RPC_SENDLOTTERYINSTRUCTIONSSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendLotteryInstructionsSUI(player);
			
		}
		break;
	case RPC_SENDREGISTRATIONSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendRegistrationSUI(player);
			
		}
		break;
	case RPC_SENDLOTTERYINFOSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendLotteryInfoSUI(player);
			
		}
		break;
	case RPC_GETTIMELEFT__LONG_:
		{
			unsigned long long timeLeft = inv->getUnsignedLongParameter();
			
			String _m_res = getTimeLeft(timeLeft);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETDEEDOWNER__:
		{
			
			DistributedObject* _m_res = getDeedOwner();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ACTIVATEGAMEPULSE__:
		{
			
			activateGamePulse();
			
		}
		break;
	case RPC_ISEVENTPERKITEM__:
		{
			
			bool _m_res = isEventPerkItem();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETGAMESTATUS__:
		{
			
			int _m_res = getGameStatus();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETGAMEDURATION__:
		{
			
			int _m_res = getGameDuration();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETTICKETPRICE__:
		{
			
			int _m_res = getTicketPrice();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPAYOUTPERCENT__:
		{
			
			float _m_res = getPayoutPercent();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_SETGAMEDURATION__INT_:
		{
			int i = inv->getSignedIntParameter();
			
			setGameDuration(i);
			
		}
		break;
	case RPC_SETPAYOUTPERCENT__INT_:
		{
			int i = inv->getSignedIntParameter();
			
			setPayoutPercent(i);
			
		}
		break;
	case RPC_SETTICKETPRICE__INT_:
		{
			int price = inv->getSignedIntParameter();
			
			setTicketPrice(price);
			
		}
		break;
	case RPC_ADDTOCREDITPOOL__INT_:
		{
			int amount = inv->getSignedIntParameter();
			
			addToCreditPool(amount);
			
		}
		break;
	case RPC_GETNUMPLAYERS__:
		{
			
			int _m_res = getNumPlayers();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ADDNEWPLAYER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			addNewPlayer(playerID);
			
		}
		break;
	case RPC_ISCURRENTPLAYER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = isCurrentPlayer(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		CreatureObjectAdapter::invokeMethod(methid, inv);
	}
}

void LotteryDroidAdapter::initializeTransientMembers() {
	(static_cast<LotteryDroid*>(stub))->initializeTransientMembers();
}

void LotteryDroidAdapter::notifyLoadFromDatabase() {
	(static_cast<LotteryDroid*>(stub))->notifyLoadFromDatabase();
}

int LotteryDroidAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<LotteryDroid*>(stub))->handleObjectMenuSelect(player, selectedID);
}

void LotteryDroidAdapter::endGame() {
	(static_cast<LotteryDroid*>(stub))->endGame();
}

void LotteryDroidAdapter::startLottery(CreatureObject* player) {
	(static_cast<LotteryDroid*>(stub))->startLottery(player);
}

void LotteryDroidAdapter::sendDurationSUI(CreatureObject* player) {
	(static_cast<LotteryDroid*>(stub))->sendDurationSUI(player);
}

void LotteryDroidAdapter::sendPayoutSUI(CreatureObject* player) {
	(static_cast<LotteryDroid*>(stub))->sendPayoutSUI(player);
}

void LotteryDroidAdapter::sendTicketCostSUI(CreatureObject* player) {
	(static_cast<LotteryDroid*>(stub))->sendTicketCostSUI(player);
}

void LotteryDroidAdapter::sendAddCreditsSUI(CreatureObject* player) {
	(static_cast<LotteryDroid*>(stub))->sendAddCreditsSUI(player);
}

void LotteryDroidAdapter::sendLotteryInstructionsSUI(CreatureObject* player) {
	(static_cast<LotteryDroid*>(stub))->sendLotteryInstructionsSUI(player);
}

void LotteryDroidAdapter::sendRegistrationSUI(CreatureObject* player) {
	(static_cast<LotteryDroid*>(stub))->sendRegistrationSUI(player);
}

void LotteryDroidAdapter::sendLotteryInfoSUI(CreatureObject* player) {
	(static_cast<LotteryDroid*>(stub))->sendLotteryInfoSUI(player);
}

String LotteryDroidAdapter::getTimeLeft(unsigned long long timeLeft) {
	return (static_cast<LotteryDroid*>(stub))->getTimeLeft(timeLeft);
}

CreatureObject* LotteryDroidAdapter::getDeedOwner() {
	return (static_cast<LotteryDroid*>(stub))->getDeedOwner();
}

void LotteryDroidAdapter::activateGamePulse() {
	(static_cast<LotteryDroid*>(stub))->activateGamePulse();
}

bool LotteryDroidAdapter::isEventPerkItem() {
	return (static_cast<LotteryDroid*>(stub))->isEventPerkItem();
}

int LotteryDroidAdapter::getGameStatus() const {
	return (static_cast<LotteryDroid*>(stub))->getGameStatus();
}

int LotteryDroidAdapter::getGameDuration() const {
	return (static_cast<LotteryDroid*>(stub))->getGameDuration();
}

int LotteryDroidAdapter::getTicketPrice() const {
	return (static_cast<LotteryDroid*>(stub))->getTicketPrice();
}

float LotteryDroidAdapter::getPayoutPercent() const {
	return (static_cast<LotteryDroid*>(stub))->getPayoutPercent();
}

void LotteryDroidAdapter::setGameDuration(int i) {
	(static_cast<LotteryDroid*>(stub))->setGameDuration(i);
}

void LotteryDroidAdapter::setPayoutPercent(int i) {
	(static_cast<LotteryDroid*>(stub))->setPayoutPercent(i);
}

void LotteryDroidAdapter::setTicketPrice(int price) {
	(static_cast<LotteryDroid*>(stub))->setTicketPrice(price);
}

void LotteryDroidAdapter::addToCreditPool(int amount) {
	(static_cast<LotteryDroid*>(stub))->addToCreditPool(amount);
}

int LotteryDroidAdapter::getNumPlayers() const {
	return (static_cast<LotteryDroid*>(stub))->getNumPlayers();
}

void LotteryDroidAdapter::addNewPlayer(unsigned long long playerID) {
	(static_cast<LotteryDroid*>(stub))->addNewPlayer(playerID);
}

bool LotteryDroidAdapter::isCurrentPlayer(unsigned long long playerID) {
	return (static_cast<LotteryDroid*>(stub))->isCurrentPlayer(playerID);
}

/*
 *	LotteryDroidHelper
 */

LotteryDroidHelper* LotteryDroidHelper::staticInitializer = LotteryDroidHelper::instance();

LotteryDroidHelper::LotteryDroidHelper() {
	className = "LotteryDroid";

	Core::getObjectBroker()->registerClass(className, this);
}

void LotteryDroidHelper::finalizeHelper() {
	LotteryDroidHelper::finalize();
}

DistributedObject* LotteryDroidHelper::instantiateObject() {
	return new LotteryDroid(DummyConstructorParameter::instance());
}

DistributedObjectServant* LotteryDroidHelper::instantiateServant() {
	return new LotteryDroidImplementation();
}

DistributedObjectAdapter* LotteryDroidHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LotteryDroidAdapter(static_cast<LotteryDroid*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

