/*
 *	autogen/server/zone/objects/tangible/eventperk/ScavengerDroid.cpp generated by engine3 IDL compiler 0.60
 */

#include "ScavengerDroid.h"

/*
 *	ScavengerDroidStub
 */

enum {RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_ = 2018248544,RPC_GETDEEDOWNER__,RPC_STARTGAME__CREATUREOBJECT_,RPC_UPDATEPLAYERSCORE__CREATUREOBJECT_,RPC_SENDITEMLISTSUI__CREATUREOBJECT_,RPC_SENDSETUPINSTRUCTIONSSUI__CREATUREOBJECT_,RPC_SENDGAMEINSTRUCTIONSSUI__CREATUREOBJECT_,RPC_GETGAMESTATUS__,RPC_GETITEMLISTSIZE__,RPC_ADDTOITEMLIST__STRING_,RPC_HASITEMINITEMLIST__STRING_,RPC_CLEARITEMLIST__,RPC_HASITEMINPLAYERITEMLIST__LONG_STRING_,RPC_ADDTOPLAYERITEMLIST__LONG_STRING_,RPC_ANNOUNCETOPLAYERS__STRING_,RPC_GETTURNEDINITEMLISTSIZE__LONG_};

ScavengerDroid::ScavengerDroid() : CreatureObject(DummyConstructorParameter::instance()) {
	ScavengerDroidImplementation* _implementation = new ScavengerDroidImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ScavengerDroid");
}

ScavengerDroid::ScavengerDroid(DummyConstructorParameter* param) : CreatureObject(param) {
	_setClassName("ScavengerDroid");
}

ScavengerDroid::~ScavengerDroid() {
}



int ScavengerDroid::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void ScavengerDroid::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

CreatureObject* ScavengerDroid::getDeedOwner() {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEEDOWNER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getDeedOwner();
	}
}

void ScavengerDroid::startGame(CreatureObject* player) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTGAME__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->startGame(player);
	}
}

void ScavengerDroid::updatePlayerScore(CreatureObject* player) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEPLAYERSCORE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->updatePlayerScore(player);
	}
}

void ScavengerDroid::sendItemListSUI(CreatureObject* player) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDITEMLISTSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendItemListSUI(player);
	}
}

void ScavengerDroid::sendSetupInstructionsSUI(CreatureObject* player) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSETUPINSTRUCTIONSSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendSetupInstructionsSUI(player);
	}
}

void ScavengerDroid::sendGameInstructionsSUI(CreatureObject* player) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGAMEINSTRUCTIONSSUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendGameInstructionsSUI(player);
	}
}

int ScavengerDroid::getGameStatus() const {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGAMESTATUS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getGameStatus();
	}
}

int ScavengerDroid::getItemListSize() const {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETITEMLISTSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getItemListSize();
	}
}

void ScavengerDroid::addToItemList(String& item) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOITEMLIST__STRING_);
		method.addAsciiParameter(item);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addToItemList(item);
	}
}

bool ScavengerDroid::hasItemInItemList(String& item) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASITEMINITEMLIST__STRING_);
		method.addAsciiParameter(item);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasItemInItemList(item);
	}
}

void ScavengerDroid::clearItemList() {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARITEMLIST__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->clearItemList();
	}
}

bool ScavengerDroid::hasItemInPlayerItemList(unsigned long long playerID, const String& item) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASITEMINPLAYERITEMLIST__LONG_STRING_);
		method.addUnsignedLongParameter(playerID);
		method.addAsciiParameter(item);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasItemInPlayerItemList(playerID, item);
	}
}

void ScavengerDroid::addToPlayerItemList(unsigned long long playerID, const String& item) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOPLAYERITEMLIST__LONG_STRING_);
		method.addUnsignedLongParameter(playerID);
		method.addAsciiParameter(item);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addToPlayerItemList(playerID, item);
	}
}

void ScavengerDroid::announceToPlayers(const String& msg) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ANNOUNCETOPLAYERS__STRING_);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->announceToPlayers(msg);
	}
}

int ScavengerDroid::getTurnedInItemListSize(unsigned long long playerID) {
	ScavengerDroidImplementation* _implementation = static_cast<ScavengerDroidImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTURNEDINITEMLISTSIZE__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTurnedInItemListSize(playerID);
	}
}

DistributedObjectServant* ScavengerDroid::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ScavengerDroid::_getImplementationForRead() const {
	return _impl;
}

void ScavengerDroid::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ScavengerDroidImplementation
 */

ScavengerDroidImplementation::ScavengerDroidImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}


ScavengerDroidImplementation::~ScavengerDroidImplementation() {
}


void ScavengerDroidImplementation::finalize() {
}

void ScavengerDroidImplementation::_initializeImplementation() {
	_setClassHelper(ScavengerDroidHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ScavengerDroidImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ScavengerDroid*>(stub);
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ScavengerDroidImplementation::_getStub() {
	return _this.get();
}

ScavengerDroidImplementation::operator const ScavengerDroid*() {
	return _this.get();
}

void ScavengerDroidImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ScavengerDroidImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ScavengerDroidImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ScavengerDroidImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ScavengerDroidImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ScavengerDroidImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ScavengerDroidImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ScavengerDroidImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("ScavengerDroid");

}

void ScavengerDroidImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ScavengerDroidImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ScavengerDroidImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (CreatureObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x1838700: //ScavengerDroid.gameStartTime
		TypeInfo<Time >::parseFromBinaryStream(&gameStartTime, stream);
		return true;

	case 0x5a8f3e60: //ScavengerDroid.gameEndTime
		TypeInfo<Time >::parseFromBinaryStream(&gameEndTime, stream);
		return true;

	case 0x2b139354: //ScavengerDroid.gameStatus
		TypeInfo<int >::parseFromBinaryStream(&gameStatus, stream);
		return true;

	case 0x99c7ea39: //ScavengerDroid.currentWinner
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&currentWinner, stream);
		return true;

	case 0x56f958d: //ScavengerDroid.turnedInItemList
		TypeInfo<VectorMap<uint64, Vector<String> > >::parseFromBinaryStream(&turnedInItemList, stream);
		return true;

	case 0x90bf978c: //ScavengerDroid.itemList
		TypeInfo<Vector<String> >::parseFromBinaryStream(&itemList, stream);
		return true;

	}

	return false;
}

void ScavengerDroidImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ScavengerDroidImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ScavengerDroidImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = CreatureObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x1838700; //ScavengerDroid.gameStartTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&gameStartTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5a8f3e60; //ScavengerDroid.gameEndTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&gameEndTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2b139354; //ScavengerDroid.gameStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&gameStatus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x99c7ea39; //ScavengerDroid.currentWinner
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&currentWinner, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x56f958d; //ScavengerDroid.turnedInItemList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<uint64, Vector<String> > >::toBinaryStream(&turnedInItemList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x90bf978c; //ScavengerDroid.itemList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&itemList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 6;
}

ScavengerDroidImplementation::ScavengerDroidImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/eventperk/ScavengerDroid.idl():  		Logger.setLoggingName("ScavengerDroid");
	Logger::setLoggingName("ScavengerDroid");
	// server/zone/objects/tangible/eventperk/ScavengerDroid.idl():  		gameStatus = 0;
	gameStatus = 0;
	// server/zone/objects/tangible/eventperk/ScavengerDroid.idl():  		currentWinner = null;
	currentWinner = NULL;
}

int ScavengerDroidImplementation::getGameStatus() const{
	// server/zone/objects/tangible/eventperk/ScavengerDroid.idl():  		return gameStatus;
	return gameStatus;
}

int ScavengerDroidImplementation::getItemListSize() const{
	// server/zone/objects/tangible/eventperk/ScavengerDroid.idl():  		return itemList.size();
	return (&itemList)->size();
}

void ScavengerDroidImplementation::addToItemList(String& item) {
	// server/zone/objects/tangible/eventperk/ScavengerDroid.idl():  		itemList.add(item);
	(&itemList)->add(item);
}

bool ScavengerDroidImplementation::hasItemInItemList(String& item) {
	// server/zone/objects/tangible/eventperk/ScavengerDroid.idl():  		return itemList.contains(item);
	return (&itemList)->contains(item);
}

void ScavengerDroidImplementation::clearItemList() {
	// server/zone/objects/tangible/eventperk/ScavengerDroid.idl():  		itemList.removeAll();
	(&itemList)->removeAll();
}

/*
 *	ScavengerDroidAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ScavengerDroidAdapter::ScavengerDroidAdapter(ScavengerDroid* obj) : CreatureObjectAdapter(obj) {
}

void ScavengerDroidAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDEEDOWNER__:
		{
			
			DistributedObject* _m_res = getDeedOwner();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_STARTGAME__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			startGame(player);
			
		}
		break;
	case RPC_UPDATEPLAYERSCORE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			updatePlayerScore(player);
			
		}
		break;
	case RPC_SENDITEMLISTSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendItemListSUI(player);
			
		}
		break;
	case RPC_SENDSETUPINSTRUCTIONSSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendSetupInstructionsSUI(player);
			
		}
		break;
	case RPC_SENDGAMEINSTRUCTIONSSUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendGameInstructionsSUI(player);
			
		}
		break;
	case RPC_GETGAMESTATUS__:
		{
			
			int _m_res = getGameStatus();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETITEMLISTSIZE__:
		{
			
			int _m_res = getItemListSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ADDTOITEMLIST__STRING_:
		{
			String item; inv->getAsciiParameter(item);
			
			addToItemList(item);
			
		}
		break;
	case RPC_HASITEMINITEMLIST__STRING_:
		{
			String item; inv->getAsciiParameter(item);
			
			bool _m_res = hasItemInItemList(item);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CLEARITEMLIST__:
		{
			
			clearItemList();
			
		}
		break;
	case RPC_HASITEMINPLAYERITEMLIST__LONG_STRING_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			 String item; inv->getAsciiParameter(item);
			
			bool _m_res = hasItemInPlayerItemList(playerID, item);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDTOPLAYERITEMLIST__LONG_STRING_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			 String item; inv->getAsciiParameter(item);
			
			addToPlayerItemList(playerID, item);
			
		}
		break;
	case RPC_ANNOUNCETOPLAYERS__STRING_:
		{
			 String msg; inv->getAsciiParameter(msg);
			
			announceToPlayers(msg);
			
		}
		break;
	case RPC_GETTURNEDINITEMLISTSIZE__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			int _m_res = getTurnedInItemListSize(playerID);
			resp->insertSignedInt(_m_res);
		}
		break;
	default:
		CreatureObjectAdapter::invokeMethod(methid, inv);
	}
}

int ScavengerDroidAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<ScavengerDroid*>(stub))->handleObjectMenuSelect(player, selectedID);
}

CreatureObject* ScavengerDroidAdapter::getDeedOwner() {
	return (static_cast<ScavengerDroid*>(stub))->getDeedOwner();
}

void ScavengerDroidAdapter::startGame(CreatureObject* player) {
	(static_cast<ScavengerDroid*>(stub))->startGame(player);
}

void ScavengerDroidAdapter::updatePlayerScore(CreatureObject* player) {
	(static_cast<ScavengerDroid*>(stub))->updatePlayerScore(player);
}

void ScavengerDroidAdapter::sendItemListSUI(CreatureObject* player) {
	(static_cast<ScavengerDroid*>(stub))->sendItemListSUI(player);
}

void ScavengerDroidAdapter::sendSetupInstructionsSUI(CreatureObject* player) {
	(static_cast<ScavengerDroid*>(stub))->sendSetupInstructionsSUI(player);
}

void ScavengerDroidAdapter::sendGameInstructionsSUI(CreatureObject* player) {
	(static_cast<ScavengerDroid*>(stub))->sendGameInstructionsSUI(player);
}

int ScavengerDroidAdapter::getGameStatus() const {
	return (static_cast<ScavengerDroid*>(stub))->getGameStatus();
}

int ScavengerDroidAdapter::getItemListSize() const {
	return (static_cast<ScavengerDroid*>(stub))->getItemListSize();
}

void ScavengerDroidAdapter::addToItemList(String& item) {
	(static_cast<ScavengerDroid*>(stub))->addToItemList(item);
}

bool ScavengerDroidAdapter::hasItemInItemList(String& item) {
	return (static_cast<ScavengerDroid*>(stub))->hasItemInItemList(item);
}

void ScavengerDroidAdapter::clearItemList() {
	(static_cast<ScavengerDroid*>(stub))->clearItemList();
}

bool ScavengerDroidAdapter::hasItemInPlayerItemList(unsigned long long playerID, const String& item) {
	return (static_cast<ScavengerDroid*>(stub))->hasItemInPlayerItemList(playerID, item);
}

void ScavengerDroidAdapter::addToPlayerItemList(unsigned long long playerID, const String& item) {
	(static_cast<ScavengerDroid*>(stub))->addToPlayerItemList(playerID, item);
}

void ScavengerDroidAdapter::announceToPlayers(const String& msg) {
	(static_cast<ScavengerDroid*>(stub))->announceToPlayers(msg);
}

int ScavengerDroidAdapter::getTurnedInItemListSize(unsigned long long playerID) {
	return (static_cast<ScavengerDroid*>(stub))->getTurnedInItemListSize(playerID);
}

/*
 *	ScavengerDroidHelper
 */

ScavengerDroidHelper* ScavengerDroidHelper::staticInitializer = ScavengerDroidHelper::instance();

ScavengerDroidHelper::ScavengerDroidHelper() {
	className = "ScavengerDroid";

	Core::getObjectBroker()->registerClass(className, this);
}

void ScavengerDroidHelper::finalizeHelper() {
	ScavengerDroidHelper::finalize();
}

DistributedObject* ScavengerDroidHelper::instantiateObject() {
	return new ScavengerDroid(DummyConstructorParameter::instance());
}

DistributedObjectServant* ScavengerDroidHelper::instantiateServant() {
	return new ScavengerDroidImplementation();
}

DistributedObjectAdapter* ScavengerDroidHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ScavengerDroidAdapter(static_cast<ScavengerDroid*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

