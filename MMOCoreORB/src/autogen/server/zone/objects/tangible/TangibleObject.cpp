/*
 *	autogen/server/zone/objects/tangible/TangibleObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "TangibleObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/factorycrate/FactoryCrate.h"

#include "server/zone/objects/tangible/threat/ThreatMap.h"

/*
 *	TangibleObjectStub
 */

enum {RPC_INITIALIZEMEMBERS__ = 3335659148,RPC_APPLYSKILLMODSTO__CREATUREOBJECT_,RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_,RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_,RPC_REMOVESKILLMOD__INT_STRING_INT_BOOL_,RPC_REMOVEALLSKILLMODSOFTYPE__INT_BOOL_,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_NOTIFYLOADFROMDATABASE__,RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SENDTO__SCENEOBJECT_BOOL_BOOL_,RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_,RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_,RPC_SETDEFENDER__SCENEOBJECT_,RPC_ADDDEFENDER__SCENEOBJECT_,RPC_REMOVEDEFENDER__SCENEOBJECT_,RPC_REMOVEDEFENDERS__,RPC_SETCOMBATSTATE__,RPC_SETUSECOUNT__INT_BOOL_,RPC_DECREASEUSECOUNT__INT_BOOL_,RPC_SETCOUNTDOWNTIMER__INT_BOOL_,RPC_CLEARCOMBATSTATE__BOOL_,RPC_HASDEFENDER__SCENEOBJECT_,RPC_ISATTACKABLEBY__CREATUREOBJECT_,RPC_ISATTACKABLEBY__TANGIBLEOBJECT_,RPC_ISAGGRESSIVETO__CREATUREOBJECT_,RPC_ISHEALABLEBY__CREATUREOBJECT_,RPC_SENDPVPSTATUSTO__CREATUREOBJECT_,RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_BOOL_,RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_STRING_BOOL_BOOL_,RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_,RPC_SETCONDITIONDAMAGE__FLOAT_BOOL_,RPC_ADDVISIBLECOMPONENT__INT_BOOL_,RPC_REMOVEVISIBLECOMPONENT__INT_BOOL_,RPC_REMOVEALLVISIBLECOMPONENTS__BOOL_,RPC_HASVISIBLECOMPONENT__INT_,RPC_SETCUSTOMIZATIONVARIABLE__BYTE_SHORT_BOOL_,RPC_SETCUSTOMIZATIONVARIABLE__STRING_SHORT_BOOL_,RPC_SETOPTIONSBITMASK__INT_BOOL_,RPC_SETOPTIONBIT__INT_BOOL_,RPC_CLEAROPTIONBIT__INT_BOOL_,RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_BOOL_,RPC_DROPFROMDEFENDERLISTS__,RPC_GETOBJECTVISIBLE__,RPC_ISKILLER__,RPC_ISTICKETCOLLECTOR__,RPC_ISTICKETOBJECT__,RPC_ISFSPUZZLEPACK__,RPC_ISPLANTOBJECT__,RPC_ISCONSUMABLE__,RPC_GETUSECOUNT__,RPC_GETMAXCONDITION__,RPC_SETMAXCONDITION__INT_BOOL_,RPC_GETCONDITIONDAMAGE__,RPC_GETVOLUME__,RPC_SETCOMPLEXITY__FLOAT_,RPC_GETCOMPLEXITY__,RPC_GETOPTIONSBITMASK__,RPC_ADDMAGICBIT__BOOL_,RPC_REMOVEMAGICBIT__BOOL_,RPC_GETLEVEL__,RPC_GETISCRAFTEDENHANCEDITEM__,RPC_GETPVPSTATUSBITMASK__,RPC_ISTANGIBLEOBJECT__,RPC_GETCUSTOMIZATIONSTRING__STRING_,RPC_GETMAINDEFENDER__,RPC_ISDESTROYED__,RPC_SETFACTION__INT_,RPC_GETFACTION__,RPC_ISREBEL__,RPC_ISIMPERIAL__,RPC_ISNEUTRAL__,RPC_GETFACTIONSTATUS__,RPC_SETFACTIONSTATUS__INT_,RPC_GETFUTUREFACTIONSTATUS__,RPC_SETFUTUREFACTIONSTATUS__INT_,RPC_ISSLICEABLE__,RPC_ISSLICED__,RPC_SETSLICEABLE__BOOL_,RPC_SETSLICED__BOOL_,RPC_SETCUSTOMIZATIONSTRING__STRING_,RPC_SETISCRAFTEDENHANCEDITEM__BOOL_,RPC_SETPVPSTATUSBITMASK__INT_BOOL_,RPC_SETPVPSTATUSBIT__INT_BOOL_,RPC_CLEARPVPSTATUSBIT__INT_BOOL_,RPC_SETCRAFTERSNAME__STRING_,RPC_GETCRAFTERSNAME__,RPC_SETJUNKDEALERNEEDED__INT_,RPC_GETJUNKDEALERNEEDED__,RPC_SETJUNKVALUE__INT_,RPC_GETJUNKVALUE__,RPC_SETSERIALNUMBER__STRING_,RPC_SETLEVEL__INT_BOOL_,RPC_GETSERIALNUMBER__,RPC_CREATEFACTORYCRATE__INT_BOOL_,RPC_CANREPAIR__CREATUREOBJECT_,RPC_REPAIR__CREATUREOBJECT_,RPC_REPAIRATTEMPT__INT_,RPC_ISBROKEN__,RPC_GETHITCHANCE__,RPC_BROADCASTPVPSTATUSBITMASK__,RPC_ADDACTIVEAREA__ACTIVEAREA_,RPC_DROPACTIVEAREA__ACTIVEAREA_,RPC_HASACTIVEAREA__ACTIVEAREA_,RPC_HASACTIVEAREA__LONG_,RPC_GETACTIVEAREASSIZE__,RPC_GETACTIVEREGION__,RPC_HASANTIDECAYKIT__,RPC_APPLYANTIDECAYKIT__CREATUREOBJECT_SCENEOBJECT_,RPC_REMOVEANTIDECAYKIT__,RPC_ISCITYSTREETLAMP__,RPC_ISCITYSTATUE__,RPC_ISCITYFOUNTAIN__,RPC_ISINVISIBLE__,RPC_SETINVISIBLE__BOOL_,RPC_ISCUSTOMINGREDIENT__,RPC_SETLUASTRINGDATA__STRING_STRING_,RPC_DELETELUASTRINGDATA__STRING_,RPC_GETLUASTRINGDATA__STRING_,RPC_SETDISABLED__BOOL_,RPC_ISDISABLED__,RPC_ISINNAVMESH__};

TangibleObject::TangibleObject() : SceneObject(DummyConstructorParameter::instance()) {
	TangibleObjectImplementation* _implementation = new TangibleObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("TangibleObject");
}

TangibleObject::TangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
	_setClassName("TangibleObject");
}

TangibleObject::~TangibleObject() {
}



void TangibleObject::initializeMembers() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeMembers();
	}
}

void TangibleObject::addTemplateSkillMods(TangibleObject* targetObject) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->addTemplateSkillMods(targetObject);
	}
}

void TangibleObject::applySkillModsTo(CreatureObject* creature) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYSKILLMODSTO__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else {
		_implementation->applySkillModsTo(creature);
	}
}

void TangibleObject::removeSkillModsFrom(CreatureObject* creature) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeSkillModsFrom(creature);
	}
}

void TangibleObject::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_);
		method.addSignedIntParameter(skillType);
		method.addAsciiParameter(skillMod);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->addSkillMod(skillType, skillMod, value, notifyClient);
	}
}

void TangibleObject::removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESKILLMOD__INT_STRING_INT_BOOL_);
		method.addSignedIntParameter(skillType);
		method.addAsciiParameter(skillMod);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeSkillMod(skillType, skillMod, value, notifyClient);
	}
}

void TangibleObject::removeAllSkillModsOfType(const int skillType, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLSKILLMODSOFTYPE__INT_BOOL_);
		method.addSignedIntParameter(skillType);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeAllSkillModsOfType(skillType, notifyClient);
	}
}

void TangibleObject::removeTemplateSkillMods(TangibleObject* tangibleObject) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->removeTemplateSkillMods(tangibleObject);
	}
}

VectorMap<String, int>* TangibleObject::getTemplateSkillMods() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getTemplateSkillMods();
	}
}

void TangibleObject::loadTemplateData(SharedObjectTemplate* templateData) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void TangibleObject::initializeTransientMembers() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void TangibleObject::notifyLoadFromDatabase() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyLoadFromDatabase();
	}
}

void TangibleObject::setObjectName(StringId& stringID, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setObjectName(stringID, notifyClient);
	}
}

void TangibleObject::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_);
		method.addUnicodeParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCustomObjectName(name, notifyClient);
	}
}

void TangibleObject::sendBaselinesTo(SceneObject* player) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBaselinesTo(player);
	}
}

void TangibleObject::sendTo(SceneObject* player, bool doClose, bool forceLoadContainer) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTO__SCENEOBJECT_BOOL_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);
		method.addBooleanParameter(forceLoadContainer);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendTo(player, doClose, forceLoadContainer);
	}
}

void TangibleObject::synchronizedUIListen(CreatureObject* player, int value) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->synchronizedUIListen(player, value);
	}
}

void TangibleObject::synchronizedUIStopListen(CreatureObject* player, int value) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->synchronizedUIStopListen(player, value);
	}
}

void TangibleObject::setDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEFENDER__SCENEOBJECT_);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setDefender(defender);
	}
}

void TangibleObject::addDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDDEFENDER__SCENEOBJECT_);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addDefender(defender);
	}
}

void TangibleObject::removeDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEDEFENDER__SCENEOBJECT_);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeDefender(defender);
	}
}

void TangibleObject::removeDefenders() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEDEFENDERS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeDefenders();
	}
}

void TangibleObject::setCombatState() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOMBATSTATE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCombatState();
	}
}

void TangibleObject::setUseCount(unsigned int newUseCount, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUSECOUNT__INT_BOOL_);
		method.addUnsignedIntParameter(newUseCount);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setUseCount(newUseCount, notifyClient);
	}
}

void TangibleObject::decreaseUseCount(unsigned int decrementAmount, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECREASEUSECOUNT__INT_BOOL_);
		method.addUnsignedIntParameter(decrementAmount);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->decreaseUseCount(decrementAmount, notifyClient);
	}
}

void TangibleObject::setCountdownTimer(unsigned int newCount, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOUNTDOWNTIMER__INT_BOOL_);
		method.addUnsignedIntParameter(newCount);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setCountdownTimer(newCount, notifyClient);
	}
}

void TangibleObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void TangibleObject::clearCombatState(bool clearDefenders) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARCOMBATSTATE__BOOL_);
		method.addBooleanParameter(clearDefenders);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->clearCombatState(clearDefenders);
	}
}

bool TangibleObject::hasDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASDEFENDER__SCENEOBJECT_);
		method.addObjectParameter(defender);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasDefender(defender);
	}
}

bool TangibleObject::isAttackableBy(CreatureObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISATTACKABLEBY__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isAttackableBy(object);
	}
}

bool TangibleObject::isAttackableBy(TangibleObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISATTACKABLEBY__TANGIBLEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isAttackableBy(object);
	}
}

bool TangibleObject::isAggressiveTo(CreatureObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISAGGRESSIVETO__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isAggressiveTo(object);
	}
}

bool TangibleObject::isHealableBy(CreatureObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISHEALABLEBY__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isHealableBy(object);
	}
}

void TangibleObject::sendPvpStatusTo(CreatureObject* player) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDPVPSTATUSTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendPvpStatusTo(player);
	}
}

int TangibleObject::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient, bool isCombatAction) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_BOOL_);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addFloatParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);
		method.addBooleanParameter(isCombatAction);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((attacker == NULL) || attacker->isLockedByCurrentThread());
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, notifyClient, isCombatAction);
	}
}

int TangibleObject::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, const String& xp, bool notifyClient, bool isCombatAction) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_STRING_BOOL_BOOL_);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addFloatParameter(damage);
		method.addBooleanParameter(destroy);
		method.addAsciiParameter(xp);
		method.addBooleanParameter(notifyClient);
		method.addBooleanParameter(isCombatAction);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((attacker == NULL) || attacker->isLockedByCurrentThread());
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, xp, notifyClient, isCombatAction);
	}
}

int TangibleObject::healDamage(TangibleObject* healer, int damageType, float damageToHeal, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_);
		method.addObjectParameter(healer);
		method.addSignedIntParameter(damageType);
		method.addFloatParameter(damageToHeal);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->healDamage(healer, damageType, damageToHeal, notifyClient);
	}
}

void TangibleObject::setConditionDamage(float condDamage, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONDITIONDAMAGE__FLOAT_BOOL_);
		method.addFloatParameter(condDamage);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setConditionDamage(condDamage, notifyClient);
	}
}

void TangibleObject::addVisibleComponent(int value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDVISIBLECOMPONENT__INT_BOOL_);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addVisibleComponent(value, notifyClient);
	}
}

void TangibleObject::removeVisibleComponent(int value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEVISIBLECOMPONENT__INT_BOOL_);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeVisibleComponent(value, notifyClient);
	}
}

void TangibleObject::removeAllVisibleComponents(bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLVISIBLECOMPONENTS__BOOL_);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeAllVisibleComponents(notifyClient);
	}
}

bool TangibleObject::hasVisibleComponent(int value) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASVISIBLECOMPONENT__INT_);
		method.addSignedIntParameter(value);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasVisibleComponent(value);
	}
}

void TangibleObject::setCustomizationVariable(byte type, short value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMIZATIONVARIABLE__BYTE_SHORT_BOOL_);
		method.addByteParameter(type);
		method.addSignedShortParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setCustomizationVariable(type, value, notifyClient);
	}
}

void TangibleObject::setCustomizationVariable(const String& type, short value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMIZATIONVARIABLE__STRING_SHORT_BOOL_);
		method.addAsciiParameter(type);
		method.addSignedShortParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setCustomizationVariable(type, value, notifyClient);
	}
}

void TangibleObject::setOptionsBitmask(unsigned int bitmask, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOPTIONSBITMASK__INT_BOOL_);
		method.addUnsignedIntParameter(bitmask);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setOptionsBitmask(bitmask, notifyClient);
	}
}

void TangibleObject::setOptionBit(unsigned int option, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOPTIONBIT__INT_BOOL_);
		method.addUnsignedIntParameter(option);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOptionBit(option, notifyClient);
	}
}

void TangibleObject::clearOptionBit(unsigned int option, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEAROPTIONBIT__INT_BOOL_);
		method.addUnsignedIntParameter(option);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearOptionBit(option, notifyClient);
	}
}

void TangibleObject::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

int TangibleObject::notifyObjectDestructionObservers(TangibleObject* attacker, int condition, bool isCombatAction) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_BOOL_);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);
		method.addBooleanParameter(isCombatAction);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObjectDestructionObservers(attacker, condition, isCombatAction);
	}
}

void TangibleObject::dropFromDefenderLists() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPFROMDEFENDERLISTS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->dropFromDefenderLists();
	}
}

byte TangibleObject::getObjectVisible() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTVISIBLE__);

		return method.executeWithByteReturn();
	} else {
		return _implementation->getObjectVisible();
	}
}

bool TangibleObject::isKiller() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISKILLER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isKiller();
	}
}

bool TangibleObject::isTicketCollector() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTICKETCOLLECTOR__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTicketCollector();
	}
}

bool TangibleObject::isTicketObject() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTICKETOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTicketObject();
	}
}

bool TangibleObject::isFsPuzzlePack() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFSPUZZLEPACK__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFsPuzzlePack();
	}
}

bool TangibleObject::isPlantObject() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLANTOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPlantObject();
	}
}

bool TangibleObject::isConsumable() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONSUMABLE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isConsumable();
	}
}

CustomizationVariables* TangibleObject::getCustomizationVariables() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCustomizationVariables();
	}
}

int TangibleObject::getUseCount() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETUSECOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getUseCount();
	}
}

int TangibleObject::getMaxCondition() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXCONDITION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMaxCondition();
	}
}

void TangibleObject::setMaxCondition(int maxCond, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXCONDITION__INT_BOOL_);
		method.addSignedIntParameter(maxCond);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->setMaxCondition(maxCond, notifyClient);
	}
}

int TangibleObject::getConditionDamage() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONDITIONDAMAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getConditionDamage();
	}
}

int TangibleObject::getVolume() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVOLUME__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getVolume();
	}
}

void TangibleObject::setComplexity(float value) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOMPLEXITY__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setComplexity(value);
	}
}

float TangibleObject::getComplexity() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOMPLEXITY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getComplexity();
	}
}

unsigned int TangibleObject::getOptionsBitmask() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOPTIONSBITMASK__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getOptionsBitmask();
	}
}

void TangibleObject::addMagicBit(bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMAGICBIT__BOOL_);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->addMagicBit(notifyClient);
	}
}

void TangibleObject::removeMagicBit(bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMAGICBIT__BOOL_);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeMagicBit(notifyClient);
	}
}

int TangibleObject::getLevel() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getLevel();
	}
}

bool TangibleObject::getIsCraftedEnhancedItem() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETISCRAFTEDENHANCEDITEM__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->getIsCraftedEnhancedItem();
	}
}

unsigned int TangibleObject::getPvpStatusBitmask() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPVPSTATUSBITMASK__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getPvpStatusBitmask();
	}
}

bool TangibleObject::isTangibleObject() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTANGIBLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTangibleObject();
	}
}

void TangibleObject::getCustomizationString(String& variables) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCUSTOMIZATIONSTRING__STRING_);
		method.addAsciiParameter(variables);

		method.executeWithVoidReturn();
	} else {
		_implementation->getCustomizationString(variables);
	}
}

DeltaVector<ManagedReference<SceneObject* > >* TangibleObject::getDefenderList() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getDefenderList();
	}
}

AutoDeltaSet<int>* TangibleObject::getVisibleComponents() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getVisibleComponents();
	}
}

SceneObject* TangibleObject::getMainDefender() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAINDEFENDER__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getMainDefender();
	}
}

bool TangibleObject::isDestroyed() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDESTROYED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDestroyed();
	}
}

void TangibleObject::setFaction(unsigned int crc) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFACTION__INT_);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFaction(crc);
	}
}

unsigned int TangibleObject::getFaction() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTION__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getFaction();
	}
}

bool TangibleObject::isRebel() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREBEL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRebel();
	}
}

bool TangibleObject::isImperial() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISIMPERIAL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isImperial();
	}
}

bool TangibleObject::isNeutral() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISNEUTRAL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isNeutral();
	}
}

int TangibleObject::getFactionStatus() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTIONSTATUS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFactionStatus();
	}
}

void TangibleObject::setFactionStatus(int status) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFACTIONSTATUS__INT_);
		method.addSignedIntParameter(status);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFactionStatus(status);
	}
}

int TangibleObject::getFutureFactionStatus() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFUTUREFACTIONSTATUS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFutureFactionStatus();
	}
}

void TangibleObject::setFutureFactionStatus(int status) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFUTUREFACTIONSTATUS__INT_);
		method.addSignedIntParameter(status);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFutureFactionStatus(status);
	}
}

TangibleObject* TangibleObject::__asTangibleObject() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->asTangibleObject();
	}
}

bool TangibleObject::isSliceable() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSLICEABLE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSliceable();
	}
}

bool TangibleObject::isSliced() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSLICED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSliced();
	}
}

void TangibleObject::setSliceable(bool val) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSLICEABLE__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSliceable(val);
	}
}

void TangibleObject::setSliced(bool slice) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSLICED__BOOL_);
		method.addBooleanParameter(slice);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSliced(slice);
	}
}

void TangibleObject::setCustomizationString(const String& vars) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMIZATIONSTRING__STRING_);
		method.addAsciiParameter(vars);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCustomizationString(vars);
	}
}

void TangibleObject::setIsCraftedEnhancedItem(bool value) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETISCRAFTEDENHANCEDITEM__BOOL_);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setIsCraftedEnhancedItem(value);
	}
}

void TangibleObject::setPvpStatusBitmask(unsigned int bitmask, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPVPSTATUSBITMASK__INT_BOOL_);
		method.addUnsignedIntParameter(bitmask);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPvpStatusBitmask(bitmask, notifyClient);
	}
}

void TangibleObject::setPvpStatusBit(unsigned int pvpStatus, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPVPSTATUSBIT__INT_BOOL_);
		method.addUnsignedIntParameter(pvpStatus);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPvpStatusBit(pvpStatus, notifyClient);
	}
}

void TangibleObject::clearPvpStatusBit(unsigned int pvpStatus, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARPVPSTATUSBIT__INT_BOOL_);
		method.addUnsignedIntParameter(pvpStatus);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearPvpStatusBit(pvpStatus, notifyClient);
	}
}

void TangibleObject::setCraftersName(String& name) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCRAFTERSNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCraftersName(name);
	}
}

String TangibleObject::getCraftersName() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRAFTERSNAME__);

		String _return_getCraftersName;
		method.executeWithAsciiReturn(_return_getCraftersName);
		return _return_getCraftersName;
	} else {
		return _implementation->getCraftersName();
	}
}

void TangibleObject::setJunkDealerNeeded(int jdNeeded) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETJUNKDEALERNEEDED__INT_);
		method.addSignedIntParameter(jdNeeded);

		method.executeWithVoidReturn();
	} else {
		_implementation->setJunkDealerNeeded(jdNeeded);
	}
}

int TangibleObject::getJunkDealerNeeded() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETJUNKDEALERNEEDED__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getJunkDealerNeeded();
	}
}

void TangibleObject::setJunkValue(int jValue) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETJUNKVALUE__INT_);
		method.addSignedIntParameter(jValue);

		method.executeWithVoidReturn();
	} else {
		_implementation->setJunkValue(jValue);
	}
}

int TangibleObject::getJunkValue() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETJUNKVALUE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getJunkValue();
	}
}

void TangibleObject::setSerialNumber(const String& serial) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSERIALNUMBER__STRING_);
		method.addAsciiParameter(serial);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSerialNumber(serial);
	}
}

void TangibleObject::setLevel(int lev, bool randomHam) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLEVEL__INT_BOOL_);
		method.addSignedIntParameter(lev);
		method.addBooleanParameter(randomHam);

		method.executeWithVoidReturn();
	} else {
		_implementation->setLevel(lev, randomHam);
	}
}

String TangibleObject::getSerialNumber() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSERIALNUMBER__);

		String _return_getSerialNumber;
		method.executeWithAsciiReturn(_return_getSerialNumber);
		return _return_getSerialNumber;
	} else {
		return _implementation->getSerialNumber();
	}
}

ThreatMap* TangibleObject::getThreatMap() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getThreatMap();
	}
}

Reference<FactoryCrate* > TangibleObject::createFactoryCrate(int maxSize, bool insertSelf) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEFACTORYCRATE__INT_BOOL_);
		method.addSignedIntParameter(maxSize);
		method.addBooleanParameter(insertSelf);

		return static_cast<FactoryCrate*>(method.executeWithObjectReturn());
	} else {
		return _implementation->createFactoryCrate(maxSize, insertSelf);
	}
}

bool TangibleObject::canRepair(CreatureObject* player) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANREPAIR__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->canRepair(player);
	}
}

void TangibleObject::repair(CreatureObject* player) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REPAIR__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->repair(player);
	}
}

String TangibleObject::repairAttempt(int repairChance) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REPAIRATTEMPT__INT_);
		method.addSignedIntParameter(repairChance);

		String _return_repairAttempt;
		method.executeWithAsciiReturn(_return_repairAttempt);
		return _return_repairAttempt;
	} else {
		return _implementation->repairAttempt(repairChance);
	}
}

bool TangibleObject::isBroken() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBROKEN__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isBroken();
	}
}

float TangibleObject::getHitChance() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHITCHANCE__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getHitChance();
	}
}

void TangibleObject::broadcastPvpStatusBitmask() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTPVPSTATUSBITMASK__);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastPvpStatusBitmask();
	}
}

void TangibleObject::addActiveArea(ActiveArea* area) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else {
		_implementation->addActiveArea(area);
	}
}

void TangibleObject::dropActiveArea(ActiveArea* area) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else {
		_implementation->dropActiveArea(area);
	}
}

bool TangibleObject::hasActiveArea(ActiveArea* area) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasActiveArea(area);
	}
}

bool TangibleObject::hasActiveArea(unsigned long long objectid) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASACTIVEAREA__LONG_);
		method.addUnsignedLongParameter(objectid);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasActiveArea(objectid);
	}
}

SortedVector<ManagedReference<ActiveArea* > >* TangibleObject::getActiveAreas() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getActiveAreas();
	}
}

int TangibleObject::getActiveAreasSize() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVEAREASSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getActiveAreasSize();
	}
}

Reference<ActiveArea* > TangibleObject::getActiveRegion() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVEREGION__);

		return static_cast<ActiveArea*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getActiveRegion();
	}
}

bool TangibleObject::hasAntiDecayKit() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASANTIDECAYKIT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasAntiDecayKit();
	}
}

void TangibleObject::applyAntiDecayKit(CreatureObject* player, SceneObject* adk) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYANTIDECAYKIT__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(adk);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->applyAntiDecayKit(player, adk);
	}
}

SceneObject* TangibleObject::removeAntiDecayKit() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEANTIDECAYKIT__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->removeAntiDecayKit();
	}
}

bool TangibleObject::isCityStreetLamp() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYSTREETLAMP__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCityStreetLamp();
	}
}

bool TangibleObject::isCityStatue() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYSTATUE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCityStatue();
	}
}

bool TangibleObject::isCityFountain() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYFOUNTAIN__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCityFountain();
	}
}

bool TangibleObject::isInvisible() const {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINVISIBLE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInvisible();
	}
}

void TangibleObject::setInvisible(bool invis) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETINVISIBLE__BOOL_);
		method.addBooleanParameter(invis);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setInvisible(invis);
	}
}

bool TangibleObject::isCustomIngredient() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCUSTOMINGREDIENT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCustomIngredient();
	}
}

void TangibleObject::setLuaStringData(const String& key, const String& data) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLUASTRINGDATA__STRING_STRING_);
		method.addAsciiParameter(key);
		method.addAsciiParameter(data);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setLuaStringData(key, data);
	}
}

void TangibleObject::deleteLuaStringData(const String& key) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DELETELUASTRINGDATA__STRING_);
		method.addAsciiParameter(key);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->deleteLuaStringData(key);
	}
}

String TangibleObject::getLuaStringData(const String& key) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLUASTRINGDATA__STRING_);
		method.addAsciiParameter(key);

		String _return_getLuaStringData;
		method.executeWithAsciiReturn(_return_getLuaStringData);
		return _return_getLuaStringData;
	} else {
		return _implementation->getLuaStringData(key);
	}
}

void TangibleObject::setDisabled(bool disabled) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDISABLED__BOOL_);
		method.addBooleanParameter(disabled);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDisabled(disabled);
	}
}

bool TangibleObject::isDisabled() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDISABLED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDisabled();
	}
}

bool TangibleObject::isInNavMesh() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINNAVMESH__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInNavMesh();
	}
}

DistributedObjectServant* TangibleObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* TangibleObject::_getImplementationForRead() const {
	return _impl;
}

void TangibleObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TangibleObjectImplementation
 */

TangibleObjectImplementation::TangibleObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


TangibleObjectImplementation::~TangibleObjectImplementation() {
}


void TangibleObjectImplementation::finalize() {
}

void TangibleObjectImplementation::_initializeImplementation() {
	_setClassHelper(TangibleObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void TangibleObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<TangibleObject*>(stub);
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TangibleObjectImplementation::_getStub() {
	return _this.get();
}

TangibleObjectImplementation::operator const TangibleObject*() {
	return _this.get();
}

void TangibleObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void TangibleObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void TangibleObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void TangibleObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void TangibleObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void TangibleObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void TangibleObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void TangibleObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("TangibleObject");

}

void TangibleObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(TangibleObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TangibleObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SceneObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x44d211d4: //TangibleObject.targetable
		TypeInfo<bool >::parseFromBinaryStream(&targetable, stream);
		return true;

	case 0x8ac8d204: //TangibleObject.complexity
		TypeInfo<float >::parseFromBinaryStream(&complexity, stream);
		return true;

	case 0x1e059da5: //TangibleObject.volume
		TypeInfo<int >::parseFromBinaryStream(&volume, stream);
		return true;

	case 0x7aa39254: //TangibleObject.faction
		TypeInfo<unsigned int >::parseFromBinaryStream(&faction, stream);
		return true;

	case 0x26d472b0: //TangibleObject.factionStatus
		TypeInfo<int >::parseFromBinaryStream(&factionStatus, stream);
		return true;

	case 0xa4095b71: //TangibleObject.futureFactionStatus
		TypeInfo<int >::parseFromBinaryStream(&futureFactionStatus, stream);
		return true;

	case 0xc5251423: //TangibleObject.invisible
		TypeInfo<bool >::parseFromBinaryStream(&invisible, stream);
		return true;

	case 0xf53ca7: //TangibleObject.luaStringData
		TypeInfo<VectorMap<String, String> >::parseFromBinaryStream(&luaStringData, stream);
		return true;

	case 0xb56f0247: //TangibleObject.customizationVariables
		TypeInfo<CustomizationVariables >::parseFromBinaryStream(&customizationVariables, stream);
		return true;

	case 0xa4a80d3: //TangibleObject.conditionDamage
		TypeInfo<float >::parseFromBinaryStream(&conditionDamage, stream);
		return true;

	case 0x9c2e3029: //TangibleObject.maxCondition
		TypeInfo<int >::parseFromBinaryStream(&maxCondition, stream);
		return true;

	case 0xe6b8cb07: //TangibleObject.useCount
		TypeInfo<int >::parseFromBinaryStream(&useCount, stream);
		return true;

	case 0xf479fb1c: //TangibleObject.level
		TypeInfo<short >::parseFromBinaryStream(&level, stream);
		return true;

	case 0x6352a44d: //TangibleObject.optionsBitmask
		TypeInfo<unsigned int >::parseFromBinaryStream(&optionsBitmask, stream);
		return true;

	case 0xcbed6feb: //TangibleObject.magicBits
		TypeInfo<AtomicInteger >::parseFromBinaryStream(&magicBits, stream);
		return true;

	case 0x7169fd57: //TangibleObject.visibleComponents
		TypeInfo<AutoDeltaSet<int> >::parseFromBinaryStream(&visibleComponents, stream);
		return true;

	case 0x71d5e6e0: //TangibleObject.isCraftedEnhancedItem
		TypeInfo<bool >::parseFromBinaryStream(&isCraftedEnhancedItem, stream);
		return true;

	case 0x78a68bd7: //TangibleObject.pvpStatusBitmask
		TypeInfo<unsigned int >::parseFromBinaryStream(&pvpStatusBitmask, stream);
		return true;

	case 0x8a9c44bb: //TangibleObject.objectVisible
		TypeInfo<byte >::parseFromBinaryStream(&objectVisible, stream);
		return true;

	case 0xf6530d9d: //TangibleObject.craftersName
		TypeInfo<String >::parseFromBinaryStream(&craftersName, stream);
		return true;

	case 0xa090b45c: //TangibleObject.junkDealerNeeded
		TypeInfo<int >::parseFromBinaryStream(&junkDealerNeeded, stream);
		return true;

	case 0x30289553: //TangibleObject.junkValue
		TypeInfo<int >::parseFromBinaryStream(&junkValue, stream);
		return true;

	case 0x4f048d7d: //TangibleObject.objectSerial
		TypeInfo<String >::parseFromBinaryStream(&objectSerial, stream);
		return true;

	case 0x80b5a6a4: //TangibleObject.defenderList
		TypeInfo<DeltaVector<ManagedReference<SceneObject* > > >::parseFromBinaryStream(&defenderList, stream);
		return true;

	case 0x5e49de61: //TangibleObject.sliceable
		TypeInfo<bool >::parseFromBinaryStream(&sliceable, stream);
		return true;

	case 0x85d2a69f: //TangibleObject.sliced
		TypeInfo<bool >::parseFromBinaryStream(&sliced, stream);
		return true;

	case 0x140b08d0: //TangibleObject.activeAreas
		TypeInfo<SortedVector<ManagedReference<ActiveArea* > > >::parseFromBinaryStream(&activeAreas, stream);
		return true;

	case 0x2e41d02d: //TangibleObject.antiDecayKitObject
		TypeInfo<ManagedReference<SceneObject* > >::parseFromBinaryStream(&antiDecayKitObject, stream);
		return true;

	}

	return false;
}

void TangibleObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TangibleObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TangibleObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SceneObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x44d211d4; //TangibleObject.targetable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&targetable, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8ac8d204; //TangibleObject.complexity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&complexity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1e059da5; //TangibleObject.volume
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&volume, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7aa39254; //TangibleObject.faction
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&faction, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x26d472b0; //TangibleObject.factionStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&factionStatus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa4095b71; //TangibleObject.futureFactionStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&futureFactionStatus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc5251423; //TangibleObject.invisible
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&invisible, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf53ca7; //TangibleObject.luaStringData
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, String> >::toBinaryStream(&luaStringData, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb56f0247; //TangibleObject.customizationVariables
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<CustomizationVariables >::toBinaryStream(&customizationVariables, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa4a80d3; //TangibleObject.conditionDamage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&conditionDamage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9c2e3029; //TangibleObject.maxCondition
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxCondition, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe6b8cb07; //TangibleObject.useCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&useCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf479fb1c; //TangibleObject.level
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&level, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6352a44d; //TangibleObject.optionsBitmask
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&optionsBitmask, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcbed6feb; //TangibleObject.magicBits
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<AtomicInteger >::toBinaryStream(&magicBits, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7169fd57; //TangibleObject.visibleComponents
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<AutoDeltaSet<int> >::toBinaryStream(&visibleComponents, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x71d5e6e0; //TangibleObject.isCraftedEnhancedItem
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&isCraftedEnhancedItem, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x78a68bd7; //TangibleObject.pvpStatusBitmask
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&pvpStatusBitmask, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8a9c44bb; //TangibleObject.objectVisible
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&objectVisible, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf6530d9d; //TangibleObject.craftersName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&craftersName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa090b45c; //TangibleObject.junkDealerNeeded
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&junkDealerNeeded, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x30289553; //TangibleObject.junkValue
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&junkValue, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4f048d7d; //TangibleObject.objectSerial
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&objectSerial, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x80b5a6a4; //TangibleObject.defenderList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<DeltaVector<ManagedReference<SceneObject* > > >::toBinaryStream(&defenderList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5e49de61; //TangibleObject.sliceable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&sliceable, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x85d2a69f; //TangibleObject.sliced
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&sliced, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x140b08d0; //TangibleObject.activeAreas
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<ActiveArea* > > >::toBinaryStream(&activeAreas, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2e41d02d; //TangibleObject.antiDecayKitObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SceneObject* > >::toBinaryStream(&antiDecayKitObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 28;
}

TangibleObjectImplementation::TangibleObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/TangibleObject.idl():  		Logger.setLoggingName("TangibleObject");
	Logger::setLoggingName("TangibleObject");
	// server/zone/objects/tangible/TangibleObject.idl():  		initializeMembers();
	initializeMembers();
	// server/zone/objects/tangible/TangibleObject.idl():  		invisible = false;
	invisible = false;
	// server/zone/objects/tangible/TangibleObject.idl():  		antiDecayKitObject = null;
	antiDecayKitObject = NULL;
	// server/zone/objects/tangible/TangibleObject.idl():  		luaStringData.setNoDuplicateInsertPlan();
	(&luaStringData)->setNoDuplicateInsertPlan();
}

void TangibleObjectImplementation::initializeMembers() {
	// server/zone/objects/tangible/TangibleObject.idl():  		faction = 0;
	faction = 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		factionStatus = 0;
	factionStatus = 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		futureFactionStatus = -1;
	futureFactionStatus = -1;
	// server/zone/objects/tangible/TangibleObject.idl():  		level = 1;
	level = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		useCount = 1;
	useCount = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		complexity = 100.f;
	complexity = 100.f;
	// server/zone/objects/tangible/TangibleObject.idl():  		volume = 1;
	volume = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		objectVisible = 1;
	objectVisible = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		useCount = 1;
	useCount = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		conditionDamage = 0;
	conditionDamage = 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		sliceable = false;
	sliceable = false;
	// server/zone/objects/tangible/TangibleObject.idl():  		sliced = false;
	sliced = false;
	// server/zone/objects/tangible/TangibleObject.idl():  		isCraftedEnhancedItem = false;
	isCraftedEnhancedItem = false;
	// server/zone/objects/tangible/TangibleObject.idl():  		threatMap = null;
	threatMap = NULL;
	// server/zone/objects/tangible/TangibleObject.idl():  		junkDealerNeeded = 0;
	junkDealerNeeded = 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		junkValue = 0;
	junkValue = 0;
}

void TangibleObjectImplementation::applySkillModsTo(CreatureObject* creature) {
}

void TangibleObjectImplementation::removeSkillModsFrom(CreatureObject* creature) {
}

void TangibleObjectImplementation::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
}

void TangibleObjectImplementation::removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
}

void TangibleObjectImplementation::removeAllSkillModsOfType(const int skillType, bool notifyClient) {
}

void TangibleObjectImplementation::setCombatState() {
}

void TangibleObjectImplementation::clearCombatState(bool clearDefenders) {
	// server/zone/objects/tangible/TangibleObject.idl():  	}
	if (clearDefenders)	// server/zone/objects/tangible/TangibleObject.idl():  			removeDefenders();
	removeDefenders();
}

bool TangibleObjectImplementation::hasDefender(SceneObject* defender) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
	for (	// server/zone/objects/tangible/TangibleObject.idl():  		for (int i = 0;
	int i = 0;
	i < (&defenderList)->size();
 ++i) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
	if ((&defenderList)->get(i) == defender)	// server/zone/objects/tangible/TangibleObject.idl():  				return true;
	return true;
}
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isAggressiveTo(CreatureObject* object) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isHealableBy(CreatureObject* object) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::hasVisibleComponent(int value) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return visibleComponents.contains(value);
	return (&visibleComponents)->contains(value);
}

byte TangibleObjectImplementation::getObjectVisible() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return objectVisible;
	return objectVisible;
}

bool TangibleObjectImplementation::isKiller() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isTicketCollector() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isTicketObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isFsPuzzlePack() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isPlantObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isConsumable() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

CustomizationVariables* TangibleObjectImplementation::getCustomizationVariables() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return customizationVariables;
	return (&customizationVariables);
}

int TangibleObjectImplementation::getUseCount() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return useCount;
	return useCount;
}

int TangibleObjectImplementation::getMaxCondition() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return maxCondition;
	return maxCondition;
}

int TangibleObjectImplementation::getConditionDamage() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return (int)conditionDamage;
	return (int) conditionDamage;
}

int TangibleObjectImplementation::getVolume() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return volume;
	return volume;
}

void TangibleObjectImplementation::setComplexity(float value) {
	// server/zone/objects/tangible/TangibleObject.idl():  		complexity = value;
	complexity = value;
}

float TangibleObjectImplementation::getComplexity() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return complexity;
	return complexity;
}

unsigned int TangibleObjectImplementation::getOptionsBitmask() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return optionsBitmask;
	return optionsBitmask;
}

void TangibleObjectImplementation::addMagicBit(bool notifyClient) {
	// server/zone/objects/tangible/TangibleObject.idl():  	}
	if ((&magicBits)->increment() == 1)	// server/zone/objects/tangible/TangibleObject.idl():  			setOptionBit(OptionBitmask.YELLOW, notifyClient);
	setOptionBit(OptionBitmask::YELLOW, notifyClient);
}

void TangibleObjectImplementation::removeMagicBit(bool notifyClient) {
	// server/zone/objects/tangible/TangibleObject.idl():  	}
	if ((&magicBits)->decrement() == 0)	// server/zone/objects/tangible/TangibleObject.idl():  			clearOptionBit(OptionBitmask.YELLOW, notifyClient);
	clearOptionBit(OptionBitmask::YELLOW, notifyClient);
}

int TangibleObjectImplementation::getLevel() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return level;
	return level;
}

bool TangibleObjectImplementation::getIsCraftedEnhancedItem() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return isCraftedEnhancedItem;
	return isCraftedEnhancedItem;
}

unsigned int TangibleObjectImplementation::getPvpStatusBitmask() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return pvpStatusBitmask;
	return pvpStatusBitmask;
}

bool TangibleObjectImplementation::isTangibleObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return true;
	return true;
}

void TangibleObjectImplementation::getCustomizationString(String& variables) {
	// server/zone/objects/tangible/TangibleObject.idl():  		customizationVariables.getData(variables);
	(&customizationVariables)->getData(variables);
}

DeltaVector<ManagedReference<SceneObject* > >* TangibleObjectImplementation::getDefenderList() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return defenderList;
	return (&defenderList);
}

AutoDeltaSet<int>* TangibleObjectImplementation::getVisibleComponents() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return visibleComponents;
	return (&visibleComponents);
}

SceneObject* TangibleObjectImplementation::getMainDefender() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if ((&defenderList)->size() > 0)	// server/zone/objects/tangible/TangibleObject.idl():  			return defenderList.get(0);
	return (&defenderList)->get(0);
	// server/zone/objects/tangible/TangibleObject.idl():  		return null;
	return NULL;
}

bool TangibleObjectImplementation::isDestroyed() const{
	// server/zone/objects/tangible/TangibleObject.idl():  		return conditionDamage >= maxCondition;
	return conditionDamage >= maxCondition;
}

void TangibleObjectImplementation::setFaction(unsigned int crc) {
	// server/zone/objects/tangible/TangibleObject.idl():  		faction = crc;
	faction = crc;
	// server/zone/objects/tangible/TangibleObject.idl():  		notifyObservers(ObserverEventType.FACTIONCHANGED);
	notifyObservers(ObserverEventType::FACTIONCHANGED);
}

unsigned int TangibleObjectImplementation::getFaction() const{
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction;
	return faction;
}

int TangibleObjectImplementation::getFactionStatus() const{
	// server/zone/objects/tangible/TangibleObject.idl():  		return factionStatus;
	return factionStatus;
}

int TangibleObjectImplementation::getFutureFactionStatus() const{
	// server/zone/objects/tangible/TangibleObject.idl():  		return futureFactionStatus;
	return futureFactionStatus;
}

bool TangibleObjectImplementation::isSliceable() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (sliced)	// server/zone/objects/tangible/TangibleObject.idl():  			return false;
	return false;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isContainerObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isMissionTerminal())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isWeaponObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isArmorObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (SceneObjectImplementation::gameObjectType == SceneObjectType::PLAYERLOOTCRATE)	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isSecurityTerminal())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isSliced() const{
	// server/zone/objects/tangible/TangibleObject.idl():  		return sliced;
	return sliced;
}

void TangibleObjectImplementation::setSliceable(bool val) {
	// server/zone/objects/tangible/TangibleObject.idl():  		sliceable = val;
	sliceable = val;
}

void TangibleObjectImplementation::setSliced(bool slice) {
	// server/zone/objects/tangible/TangibleObject.idl():  		sliced = slice;
	sliced = slice;
}

void TangibleObjectImplementation::setCustomizationString(const String& vars) {
	// server/zone/objects/tangible/TangibleObject.idl():  		customizationVariables.parseFromClientString(vars);
	(&customizationVariables)->parseFromClientString(vars);
}

void TangibleObjectImplementation::setCraftersName(String& name) {
	// server/zone/objects/tangible/TangibleObject.idl():  		craftersName = name;
	craftersName = name;
}

String TangibleObjectImplementation::getCraftersName() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return craftersName;
	return craftersName;
}

void TangibleObjectImplementation::setJunkDealerNeeded(int jdNeeded) {
	// server/zone/objects/tangible/TangibleObject.idl():  		junkDealerNeeded = jdNeeded;
	junkDealerNeeded = jdNeeded;
}

int TangibleObjectImplementation::getJunkDealerNeeded() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return junkDealerNeeded;
	return junkDealerNeeded;
}

void TangibleObjectImplementation::setJunkValue(int jValue) {
	// server/zone/objects/tangible/TangibleObject.idl():  		junkValue = jValue;
	junkValue = jValue;
}

int TangibleObjectImplementation::getJunkValue() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return junkValue;
	return junkValue;
}

void TangibleObjectImplementation::setLevel(int lev, bool randomHam) {
	// server/zone/objects/tangible/TangibleObject.idl():  		level = lev;
	level = lev;
}

String TangibleObjectImplementation::getSerialNumber() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return objectSerial;
	return objectSerial;
}

String TangibleObjectImplementation::repairAttempt(int repairChance) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return "Repairing is not implemented for this item";
	return "Repairing is not implemented for this item";
}

bool TangibleObjectImplementation::isBroken() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return maxCondition < 2 || getConditionDamage() >= getMaxCondition();
	return maxCondition < 2 || getConditionDamage() >= getMaxCondition();
}

float TangibleObjectImplementation::getConditionReduction(float value) {
	// server/zone/objects/tangible/TangibleObject.idl():  		float 
	if (isBroken())	// server/zone/objects/tangible/TangibleObject.idl():  			return 0.5 * value;
	return 0.5 * value;
	// server/zone/objects/tangible/TangibleObject.idl():  		float ratio = (float)getConditionDamage() / (float)getMaxCondition() * 100.0;
	float ratio = (float) getConditionDamage() / (float) getMaxCondition() * 100.0;
	// server/zone/objects/tangible/TangibleObject.idl():  		float 
	if (ratio < 75.0)	// server/zone/objects/tangible/TangibleObject.idl():  			return 0;
	return 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		float reductionPercent = (ratio - 75.0) / 50;
	float reductionPercent = (ratio - 75.0) / 50;
	// server/zone/objects/tangible/TangibleObject.idl():  		return reductionPercent * value;
	return reductionPercent * value;
}

float TangibleObjectImplementation::getHitChance() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 0;
	return 0;
}

void TangibleObjectImplementation::dropActiveArea(ActiveArea* area) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
{
	Locker _locker(SceneObjectImplementation::getContainerLock());
	// server/zone/objects/tangible/TangibleObject.idl():  			activeAreas.drop(area);
	(&activeAreas)->drop(area);
}
}

bool TangibleObjectImplementation::hasActiveArea(ActiveArea* area) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
{
	Locker _locker(SceneObjectImplementation::getContainerLock());
	// server/zone/objects/tangible/TangibleObject.idl():  			return activeAreas.contains(area);
	return (&activeAreas)->contains(area);
}
}

bool TangibleObjectImplementation::hasActiveArea(unsigned long long objectid) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
{
	Locker _locker(SceneObjectImplementation::getContainerLock());
	// server/zone/objects/tangible/TangibleObject.idl():  			}
	for (	// server/zone/objects/tangible/TangibleObject.idl():  			for (int i = 0;
	int i = 0;
	i < (&activeAreas)->size();
 ++i) {
	// server/zone/objects/tangible/TangibleObject.idl():  				ActiveArea area = activeAreas.get(i);
	ManagedReference<ActiveArea* > area = (&activeAreas)->get(i);
	// server/zone/objects/tangible/TangibleObject.idl():  			}
	if (area->getObjectID() == objectid){
	// server/zone/objects/tangible/TangibleObject.idl():  					return true;
	return true;
}
}
}
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

SortedVector<ManagedReference<ActiveArea* > >* TangibleObjectImplementation::getActiveAreas() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return activeAreas;
	return (&activeAreas);
}

int TangibleObjectImplementation::getActiveAreasSize() const{
	// server/zone/objects/tangible/TangibleObject.idl():  		return activeAreas.size();
	return (&activeAreas)->size();
}

Reference<ActiveArea* > TangibleObjectImplementation::getActiveRegion() {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
{
	Locker _locker(SceneObjectImplementation::getContainerLock());
	// server/zone/objects/tangible/TangibleObject.idl():  			}
	for (	// server/zone/objects/tangible/TangibleObject.idl():  			for (int i = 0;
	int i = 0;
	i < (&activeAreas)->size();
i ++) {
	// server/zone/objects/tangible/TangibleObject.idl():  				ActiveArea region = activeAreas.get(i);
	ManagedReference<ActiveArea* > region = (&activeAreas)->get(i);
	// server/zone/objects/tangible/TangibleObject.idl():  			}
	if (region->isRegion()){
	// server/zone/objects/tangible/TangibleObject.idl():  					return region;
	return region;
}
}
}
	// server/zone/objects/tangible/TangibleObject.idl():  		return null;
	return NULL;
}

bool TangibleObjectImplementation::hasAntiDecayKit() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return antiDecayKitObject != null;
	return antiDecayKitObject != NULL;
}

void TangibleObjectImplementation::applyAntiDecayKit(CreatureObject* player, SceneObject* adk) {
	// server/zone/objects/tangible/TangibleObject.idl():  	}
	if (!hasAntiDecayKit()){
	// server/zone/objects/tangible/TangibleObject.idl():  			antiDecayKitObject = adk;
	antiDecayKitObject = adk;
	// server/zone/objects/tangible/TangibleObject.idl():  			sendAttributeListTo(
	if (adk->getParent() != NULL)	// server/zone/objects/tangible/TangibleObject.idl():  				adk.destroyObjectFromWorld(true);
	adk->destroyObjectFromWorld(true);
	// server/zone/objects/tangible/TangibleObject.idl():  			sendAttributeListTo(player);
	sendAttributeListTo(player);
}
}

SceneObject* TangibleObjectImplementation::removeAntiDecayKit() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (hasAntiDecayKit()){
	// server/zone/objects/tangible/TangibleObject.idl():  			SceneObject adk = antiDecayKitObject;
	ManagedReference<SceneObject* > adk = antiDecayKitObject;
	// server/zone/objects/tangible/TangibleObject.idl():  			antiDecayKitObject = null;
	antiDecayKitObject = NULL;
	// server/zone/objects/tangible/TangibleObject.idl():  			return adk;
	return adk;
}
	// server/zone/objects/tangible/TangibleObject.idl():  		return null;
	return NULL;
}

bool TangibleObjectImplementation::isInvisible() const{
	// server/zone/objects/tangible/TangibleObject.idl():  		return invisible;
	return invisible;
}

void TangibleObjectImplementation::setInvisible(bool invis) {
	// server/zone/objects/tangible/TangibleObject.idl():  		invisible = invis;
	invisible = invis;
}

bool TangibleObjectImplementation::isCustomIngredient() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

void TangibleObjectImplementation::setLuaStringData(const String& key, const String& data) {
	// server/zone/objects/tangible/TangibleObject.idl():  			luaStringData.put(key, data);
	if ((&luaStringData)->contains(key))	// server/zone/objects/tangible/TangibleObject.idl():  			luaStringData.get(key) = data;
	(&luaStringData)->get(key) = data;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  			luaStringData.put(key, data);
	(&luaStringData)->put(key, data);
}

void TangibleObjectImplementation::deleteLuaStringData(const String& key) {
	// server/zone/objects/tangible/TangibleObject.idl():  		luaStringData.drop(key);
	(&luaStringData)->drop(key);
}

String TangibleObjectImplementation::getLuaStringData(const String& key) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return luaStringData.get(key);
	return (&luaStringData)->get(key);
}

/*
 *	TangibleObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


TangibleObjectAdapter::TangibleObjectAdapter(TangibleObject* obj) : SceneObjectAdapter(obj) {
}

void TangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZEMEMBERS__:
		{
			
			initializeMembers();
			
		}
		break;
	case RPC_APPLYSKILLMODSTO__CREATUREOBJECT_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			applySkillModsTo(creature);
			
		}
		break;
	case RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeSkillModsFrom(creature);
			
		}
		break;
	case RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_:
		{
			 int skillType = inv->getSignedIntParameter();
			 String skillMod; inv->getAsciiParameter(skillMod);
			int value = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			addSkillMod(skillType, skillMod, value, notifyClient);
			
		}
		break;
	case RPC_REMOVESKILLMOD__INT_STRING_INT_BOOL_:
		{
			 int skillType = inv->getSignedIntParameter();
			 String skillMod; inv->getAsciiParameter(skillMod);
			int value = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			removeSkillMod(skillType, skillMod, value, notifyClient);
			
		}
		break;
	case RPC_REMOVEALLSKILLMODSOFTYPE__INT_BOOL_:
		{
			 int skillType = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			removeAllSkillModsOfType(skillType, notifyClient);
			
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			
			notifyLoadFromDatabase();
			
		}
		break;
	case RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_:
		{
			 UnicodeString name; inv->getUnicodeParameter(name);
			bool notifyClient = inv->getBooleanParameter();
			
			setCustomObjectName(name, notifyClient);
			
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendBaselinesTo(player);
			
		}
		break;
	case RPC_SENDTO__SCENEOBJECT_BOOL_BOOL_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			bool doClose = inv->getBooleanParameter();
			bool forceLoadContainer = inv->getBooleanParameter();
			
			sendTo(player, doClose, forceLoadContainer);
			
		}
		break;
	case RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int value = inv->getSignedIntParameter();
			
			synchronizedUIListen(player, value);
			
		}
		break;
	case RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int value = inv->getSignedIntParameter();
			
			synchronizedUIStopListen(player, value);
			
		}
		break;
	case RPC_SETDEFENDER__SCENEOBJECT_:
		{
			SceneObject* defender = static_cast<SceneObject*>(inv->getObjectParameter());
			
			setDefender(defender);
			
		}
		break;
	case RPC_ADDDEFENDER__SCENEOBJECT_:
		{
			SceneObject* defender = static_cast<SceneObject*>(inv->getObjectParameter());
			
			addDefender(defender);
			
		}
		break;
	case RPC_REMOVEDEFENDER__SCENEOBJECT_:
		{
			SceneObject* defender = static_cast<SceneObject*>(inv->getObjectParameter());
			
			removeDefender(defender);
			
		}
		break;
	case RPC_REMOVEDEFENDERS__:
		{
			
			removeDefenders();
			
		}
		break;
	case RPC_SETCOMBATSTATE__:
		{
			
			setCombatState();
			
		}
		break;
	case RPC_SETUSECOUNT__INT_BOOL_:
		{
			unsigned int newUseCount = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setUseCount(newUseCount, notifyClient);
			
		}
		break;
	case RPC_DECREASEUSECOUNT__INT_BOOL_:
		{
			unsigned int decrementAmount = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			decreaseUseCount(decrementAmount, notifyClient);
			
		}
		break;
	case RPC_SETCOUNTDOWNTIMER__INT_BOOL_:
		{
			unsigned int newCount = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setCountdownTimer(newCount, notifyClient);
			
		}
		break;
	case RPC_CLEARCOMBATSTATE__BOOL_:
		{
			bool clearDefenders = inv->getBooleanParameter();
			
			clearCombatState(clearDefenders);
			
		}
		break;
	case RPC_HASDEFENDER__SCENEOBJECT_:
		{
			SceneObject* defender = static_cast<SceneObject*>(inv->getObjectParameter());
			
			bool _m_res = hasDefender(defender);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISATTACKABLEBY__CREATUREOBJECT_:
		{
			CreatureObject* object = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isAttackableBy(object);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISATTACKABLEBY__TANGIBLEOBJECT_:
		{
			TangibleObject* object = static_cast<TangibleObject*>(inv->getObjectParameter());
			
			bool _m_res = isAttackableBy(object);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISAGGRESSIVETO__CREATUREOBJECT_:
		{
			CreatureObject* object = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isAggressiveTo(object);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISHEALABLEBY__CREATUREOBJECT_:
		{
			CreatureObject* object = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isHealableBy(object);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SENDPVPSTATUSTO__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendPvpStatusTo(player);
			
		}
		break;
	case RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_BOOL_:
		{
			TangibleObject* attacker = static_cast<TangibleObject*>(inv->getObjectParameter());
			int damageType = inv->getSignedIntParameter();
			float damage = inv->getFloatParameter();
			bool destroy = inv->getBooleanParameter();
			bool notifyClient = inv->getBooleanParameter();
			bool isCombatAction = inv->getBooleanParameter();
			
			int _m_res = inflictDamage(attacker, damageType, damage, destroy, notifyClient, isCombatAction);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_STRING_BOOL_BOOL_:
		{
			TangibleObject* attacker = static_cast<TangibleObject*>(inv->getObjectParameter());
			int damageType = inv->getSignedIntParameter();
			float damage = inv->getFloatParameter();
			bool destroy = inv->getBooleanParameter();
			 String xp; inv->getAsciiParameter(xp);
			bool notifyClient = inv->getBooleanParameter();
			bool isCombatAction = inv->getBooleanParameter();
			
			int _m_res = inflictDamage(attacker, damageType, damage, destroy, xp, notifyClient, isCombatAction);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_:
		{
			TangibleObject* healer = static_cast<TangibleObject*>(inv->getObjectParameter());
			int damageType = inv->getSignedIntParameter();
			float damageToHeal = inv->getFloatParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			int _m_res = healDamage(healer, damageType, damageToHeal, notifyClient);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETCONDITIONDAMAGE__FLOAT_BOOL_:
		{
			float condDamage = inv->getFloatParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setConditionDamage(condDamage, notifyClient);
			
		}
		break;
	case RPC_ADDVISIBLECOMPONENT__INT_BOOL_:
		{
			int value = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			addVisibleComponent(value, notifyClient);
			
		}
		break;
	case RPC_REMOVEVISIBLECOMPONENT__INT_BOOL_:
		{
			int value = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			removeVisibleComponent(value, notifyClient);
			
		}
		break;
	case RPC_REMOVEALLVISIBLECOMPONENTS__BOOL_:
		{
			bool notifyClient = inv->getBooleanParameter();
			
			removeAllVisibleComponents(notifyClient);
			
		}
		break;
	case RPC_HASVISIBLECOMPONENT__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			bool _m_res = hasVisibleComponent(value);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETCUSTOMIZATIONVARIABLE__BYTE_SHORT_BOOL_:
		{
			byte type = inv->getByteParameter();
			short value = inv->getSignedShortParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setCustomizationVariable(type, value, notifyClient);
			
		}
		break;
	case RPC_SETCUSTOMIZATIONVARIABLE__STRING_SHORT_BOOL_:
		{
			 String type; inv->getAsciiParameter(type);
			short value = inv->getSignedShortParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setCustomizationVariable(type, value, notifyClient);
			
		}
		break;
	case RPC_SETOPTIONSBITMASK__INT_BOOL_:
		{
			unsigned int bitmask = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setOptionsBitmask(bitmask, notifyClient);
			
		}
		break;
	case RPC_SETOPTIONBIT__INT_BOOL_:
		{
			unsigned int option = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setOptionBit(option, notifyClient);
			
		}
		break;
	case RPC_CLEAROPTIONBIT__INT_BOOL_:
		{
			unsigned int option = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			clearOptionBit(option, notifyClient);
			
		}
		break;
	case RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_BOOL_:
		{
			TangibleObject* attacker = static_cast<TangibleObject*>(inv->getObjectParameter());
			int condition = inv->getSignedIntParameter();
			bool isCombatAction = inv->getBooleanParameter();
			
			int _m_res = notifyObjectDestructionObservers(attacker, condition, isCombatAction);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_DROPFROMDEFENDERLISTS__:
		{
			
			dropFromDefenderLists();
			
		}
		break;
	case RPC_GETOBJECTVISIBLE__:
		{
			
			byte _m_res = getObjectVisible();
			resp->insertByte(_m_res);
		}
		break;
	case RPC_ISKILLER__:
		{
			
			bool _m_res = isKiller();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTICKETCOLLECTOR__:
		{
			
			bool _m_res = isTicketCollector();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTICKETOBJECT__:
		{
			
			bool _m_res = isTicketObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISFSPUZZLEPACK__:
		{
			
			bool _m_res = isFsPuzzlePack();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPLANTOBJECT__:
		{
			
			bool _m_res = isPlantObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCONSUMABLE__:
		{
			
			bool _m_res = isConsumable();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETUSECOUNT__:
		{
			
			int _m_res = getUseCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMAXCONDITION__:
		{
			
			int _m_res = getMaxCondition();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETMAXCONDITION__INT_BOOL_:
		{
			int maxCond = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setMaxCondition(maxCond, notifyClient);
			
		}
		break;
	case RPC_GETCONDITIONDAMAGE__:
		{
			
			int _m_res = getConditionDamage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETVOLUME__:
		{
			
			int _m_res = getVolume();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETCOMPLEXITY__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setComplexity(value);
			
		}
		break;
	case RPC_GETCOMPLEXITY__:
		{
			
			float _m_res = getComplexity();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETOPTIONSBITMASK__:
		{
			
			unsigned int _m_res = getOptionsBitmask();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_ADDMAGICBIT__BOOL_:
		{
			bool notifyClient = inv->getBooleanParameter();
			
			addMagicBit(notifyClient);
			
		}
		break;
	case RPC_REMOVEMAGICBIT__BOOL_:
		{
			bool notifyClient = inv->getBooleanParameter();
			
			removeMagicBit(notifyClient);
			
		}
		break;
	case RPC_GETLEVEL__:
		{
			
			int _m_res = getLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETISCRAFTEDENHANCEDITEM__:
		{
			
			bool _m_res = getIsCraftedEnhancedItem();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETPVPSTATUSBITMASK__:
		{
			
			unsigned int _m_res = getPvpStatusBitmask();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_ISTANGIBLEOBJECT__:
		{
			
			bool _m_res = isTangibleObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETCUSTOMIZATIONSTRING__STRING_:
		{
			String variables; inv->getAsciiParameter(variables);
			
			getCustomizationString(variables);
			
		}
		break;
	case RPC_GETMAINDEFENDER__:
		{
			
			DistributedObject* _m_res = getMainDefender();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ISDESTROYED__:
		{
			
			bool _m_res = isDestroyed();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETFACTION__INT_:
		{
			unsigned int crc = inv->getUnsignedIntParameter();
			
			setFaction(crc);
			
		}
		break;
	case RPC_GETFACTION__:
		{
			
			unsigned int _m_res = getFaction();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_ISREBEL__:
		{
			
			bool _m_res = isRebel();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISIMPERIAL__:
		{
			
			bool _m_res = isImperial();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISNEUTRAL__:
		{
			
			bool _m_res = isNeutral();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETFACTIONSTATUS__:
		{
			
			int _m_res = getFactionStatus();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETFACTIONSTATUS__INT_:
		{
			int status = inv->getSignedIntParameter();
			
			setFactionStatus(status);
			
		}
		break;
	case RPC_GETFUTUREFACTIONSTATUS__:
		{
			
			int _m_res = getFutureFactionStatus();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETFUTUREFACTIONSTATUS__INT_:
		{
			int status = inv->getSignedIntParameter();
			
			setFutureFactionStatus(status);
			
		}
		break;
	case RPC_ISSLICEABLE__:
		{
			
			bool _m_res = isSliceable();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISSLICED__:
		{
			
			bool _m_res = isSliced();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETSLICEABLE__BOOL_:
		{
			bool val = inv->getBooleanParameter();
			
			setSliceable(val);
			
		}
		break;
	case RPC_SETSLICED__BOOL_:
		{
			bool slice = inv->getBooleanParameter();
			
			setSliced(slice);
			
		}
		break;
	case RPC_SETCUSTOMIZATIONSTRING__STRING_:
		{
			 String vars; inv->getAsciiParameter(vars);
			
			setCustomizationString(vars);
			
		}
		break;
	case RPC_SETISCRAFTEDENHANCEDITEM__BOOL_:
		{
			bool value = inv->getBooleanParameter();
			
			setIsCraftedEnhancedItem(value);
			
		}
		break;
	case RPC_SETPVPSTATUSBITMASK__INT_BOOL_:
		{
			unsigned int bitmask = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setPvpStatusBitmask(bitmask, notifyClient);
			
		}
		break;
	case RPC_SETPVPSTATUSBIT__INT_BOOL_:
		{
			unsigned int pvpStatus = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setPvpStatusBit(pvpStatus, notifyClient);
			
		}
		break;
	case RPC_CLEARPVPSTATUSBIT__INT_BOOL_:
		{
			unsigned int pvpStatus = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			clearPvpStatusBit(pvpStatus, notifyClient);
			
		}
		break;
	case RPC_SETCRAFTERSNAME__STRING_:
		{
			String name; inv->getAsciiParameter(name);
			
			setCraftersName(name);
			
		}
		break;
	case RPC_GETCRAFTERSNAME__:
		{
			
			String _m_res = getCraftersName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETJUNKDEALERNEEDED__INT_:
		{
			int jdNeeded = inv->getSignedIntParameter();
			
			setJunkDealerNeeded(jdNeeded);
			
		}
		break;
	case RPC_GETJUNKDEALERNEEDED__:
		{
			
			int _m_res = getJunkDealerNeeded();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETJUNKVALUE__INT_:
		{
			int jValue = inv->getSignedIntParameter();
			
			setJunkValue(jValue);
			
		}
		break;
	case RPC_GETJUNKVALUE__:
		{
			
			int _m_res = getJunkValue();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETSERIALNUMBER__STRING_:
		{
			 String serial; inv->getAsciiParameter(serial);
			
			setSerialNumber(serial);
			
		}
		break;
	case RPC_SETLEVEL__INT_BOOL_:
		{
			int lev = inv->getSignedIntParameter();
			bool randomHam = inv->getBooleanParameter();
			
			setLevel(lev, randomHam);
			
		}
		break;
	case RPC_GETSERIALNUMBER__:
		{
			
			String _m_res = getSerialNumber();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_CREATEFACTORYCRATE__INT_BOOL_:
		{
			int maxSize = inv->getSignedIntParameter();
			bool insertSelf = inv->getBooleanParameter();
			
			DistributedObject* _m_res = createFactoryCrate(maxSize, insertSelf);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_CANREPAIR__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = canRepair(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_REPAIR__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			repair(player);
			
		}
		break;
	case RPC_REPAIRATTEMPT__INT_:
		{
			int repairChance = inv->getSignedIntParameter();
			
			String _m_res = repairAttempt(repairChance);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_ISBROKEN__:
		{
			
			bool _m_res = isBroken();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETHITCHANCE__:
		{
			
			float _m_res = getHitChance();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_BROADCASTPVPSTATUSBITMASK__:
		{
			
			broadcastPvpStatusBitmask();
			
		}
		break;
	case RPC_ADDACTIVEAREA__ACTIVEAREA_:
		{
			ActiveArea* area = static_cast<ActiveArea*>(inv->getObjectParameter());
			
			addActiveArea(area);
			
		}
		break;
	case RPC_DROPACTIVEAREA__ACTIVEAREA_:
		{
			ActiveArea* area = static_cast<ActiveArea*>(inv->getObjectParameter());
			
			dropActiveArea(area);
			
		}
		break;
	case RPC_HASACTIVEAREA__ACTIVEAREA_:
		{
			ActiveArea* area = static_cast<ActiveArea*>(inv->getObjectParameter());
			
			bool _m_res = hasActiveArea(area);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASACTIVEAREA__LONG_:
		{
			unsigned long long objectid = inv->getUnsignedLongParameter();
			
			bool _m_res = hasActiveArea(objectid);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETACTIVEAREASSIZE__:
		{
			
			int _m_res = getActiveAreasSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETACTIVEREGION__:
		{
			
			DistributedObject* _m_res = getActiveRegion();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_HASANTIDECAYKIT__:
		{
			
			bool _m_res = hasAntiDecayKit();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_APPLYANTIDECAYKIT__CREATUREOBJECT_SCENEOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* adk = static_cast<SceneObject*>(inv->getObjectParameter());
			
			applyAntiDecayKit(player, adk);
			
		}
		break;
	case RPC_REMOVEANTIDECAYKIT__:
		{
			
			DistributedObject* _m_res = removeAntiDecayKit();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ISCITYSTREETLAMP__:
		{
			
			bool _m_res = isCityStreetLamp();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCITYSTATUE__:
		{
			
			bool _m_res = isCityStatue();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCITYFOUNTAIN__:
		{
			
			bool _m_res = isCityFountain();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINVISIBLE__:
		{
			
			bool _m_res = isInvisible();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETINVISIBLE__BOOL_:
		{
			bool invis = inv->getBooleanParameter();
			
			setInvisible(invis);
			
		}
		break;
	case RPC_ISCUSTOMINGREDIENT__:
		{
			
			bool _m_res = isCustomIngredient();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETLUASTRINGDATA__STRING_STRING_:
		{
			 String key; inv->getAsciiParameter(key);
			 String data; inv->getAsciiParameter(data);
			
			setLuaStringData(key, data);
			
		}
		break;
	case RPC_DELETELUASTRINGDATA__STRING_:
		{
			 String key; inv->getAsciiParameter(key);
			
			deleteLuaStringData(key);
			
		}
		break;
	case RPC_GETLUASTRINGDATA__STRING_:
		{
			 String key; inv->getAsciiParameter(key);
			
			String _m_res = getLuaStringData(key);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETDISABLED__BOOL_:
		{
			bool disabled = inv->getBooleanParameter();
			
			setDisabled(disabled);
			
		}
		break;
	case RPC_ISDISABLED__:
		{
			
			bool _m_res = isDisabled();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINNAVMESH__:
		{
			
			bool _m_res = isInNavMesh();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		SceneObjectAdapter::invokeMethod(methid, inv);
	}
}

void TangibleObjectAdapter::initializeMembers() {
	(static_cast<TangibleObject*>(stub))->initializeMembers();
}

void TangibleObjectAdapter::applySkillModsTo(CreatureObject* creature) {
	(static_cast<TangibleObject*>(stub))->applySkillModsTo(creature);
}

void TangibleObjectAdapter::removeSkillModsFrom(CreatureObject* creature) {
	(static_cast<TangibleObject*>(stub))->removeSkillModsFrom(creature);
}

void TangibleObjectAdapter::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->addSkillMod(skillType, skillMod, value, notifyClient);
}

void TangibleObjectAdapter::removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->removeSkillMod(skillType, skillMod, value, notifyClient);
}

void TangibleObjectAdapter::removeAllSkillModsOfType(const int skillType, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->removeAllSkillModsOfType(skillType, notifyClient);
}

void TangibleObjectAdapter::initializeTransientMembers() {
	(static_cast<TangibleObject*>(stub))->initializeTransientMembers();
}

void TangibleObjectAdapter::notifyLoadFromDatabase() {
	(static_cast<TangibleObject*>(stub))->notifyLoadFromDatabase();
}

void TangibleObjectAdapter::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setCustomObjectName(name, notifyClient);
}

void TangibleObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<TangibleObject*>(stub))->sendBaselinesTo(player);
}

void TangibleObjectAdapter::sendTo(SceneObject* player, bool doClose, bool forceLoadContainer) {
	(static_cast<TangibleObject*>(stub))->sendTo(player, doClose, forceLoadContainer);
}

void TangibleObjectAdapter::synchronizedUIListen(CreatureObject* player, int value) {
	(static_cast<TangibleObject*>(stub))->synchronizedUIListen(player, value);
}

void TangibleObjectAdapter::synchronizedUIStopListen(CreatureObject* player, int value) {
	(static_cast<TangibleObject*>(stub))->synchronizedUIStopListen(player, value);
}

void TangibleObjectAdapter::setDefender(SceneObject* defender) {
	(static_cast<TangibleObject*>(stub))->setDefender(defender);
}

void TangibleObjectAdapter::addDefender(SceneObject* defender) {
	(static_cast<TangibleObject*>(stub))->addDefender(defender);
}

void TangibleObjectAdapter::removeDefender(SceneObject* defender) {
	(static_cast<TangibleObject*>(stub))->removeDefender(defender);
}

void TangibleObjectAdapter::removeDefenders() {
	(static_cast<TangibleObject*>(stub))->removeDefenders();
}

void TangibleObjectAdapter::setCombatState() {
	(static_cast<TangibleObject*>(stub))->setCombatState();
}

void TangibleObjectAdapter::setUseCount(unsigned int newUseCount, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setUseCount(newUseCount, notifyClient);
}

void TangibleObjectAdapter::decreaseUseCount(unsigned int decrementAmount, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->decreaseUseCount(decrementAmount, notifyClient);
}

void TangibleObjectAdapter::setCountdownTimer(unsigned int newCount, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setCountdownTimer(newCount, notifyClient);
}

void TangibleObjectAdapter::clearCombatState(bool clearDefenders) {
	(static_cast<TangibleObject*>(stub))->clearCombatState(clearDefenders);
}

bool TangibleObjectAdapter::hasDefender(SceneObject* defender) {
	return (static_cast<TangibleObject*>(stub))->hasDefender(defender);
}

bool TangibleObjectAdapter::isAttackableBy(CreatureObject* object) {
	return (static_cast<TangibleObject*>(stub))->isAttackableBy(object);
}

bool TangibleObjectAdapter::isAttackableBy(TangibleObject* object) {
	return (static_cast<TangibleObject*>(stub))->isAttackableBy(object);
}

bool TangibleObjectAdapter::isAggressiveTo(CreatureObject* object) {
	return (static_cast<TangibleObject*>(stub))->isAggressiveTo(object);
}

bool TangibleObjectAdapter::isHealableBy(CreatureObject* object) {
	return (static_cast<TangibleObject*>(stub))->isHealableBy(object);
}

void TangibleObjectAdapter::sendPvpStatusTo(CreatureObject* player) {
	(static_cast<TangibleObject*>(stub))->sendPvpStatusTo(player);
}

int TangibleObjectAdapter::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient, bool isCombatAction) {
	return (static_cast<TangibleObject*>(stub))->inflictDamage(attacker, damageType, damage, destroy, notifyClient, isCombatAction);
}

int TangibleObjectAdapter::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, const String& xp, bool notifyClient, bool isCombatAction) {
	return (static_cast<TangibleObject*>(stub))->inflictDamage(attacker, damageType, damage, destroy, xp, notifyClient, isCombatAction);
}

int TangibleObjectAdapter::healDamage(TangibleObject* healer, int damageType, float damageToHeal, bool notifyClient) {
	return (static_cast<TangibleObject*>(stub))->healDamage(healer, damageType, damageToHeal, notifyClient);
}

void TangibleObjectAdapter::setConditionDamage(float condDamage, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setConditionDamage(condDamage, notifyClient);
}

void TangibleObjectAdapter::addVisibleComponent(int value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->addVisibleComponent(value, notifyClient);
}

void TangibleObjectAdapter::removeVisibleComponent(int value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->removeVisibleComponent(value, notifyClient);
}

void TangibleObjectAdapter::removeAllVisibleComponents(bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->removeAllVisibleComponents(notifyClient);
}

bool TangibleObjectAdapter::hasVisibleComponent(int value) {
	return (static_cast<TangibleObject*>(stub))->hasVisibleComponent(value);
}

void TangibleObjectAdapter::setCustomizationVariable(byte type, short value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObjectAdapter::setCustomizationVariable(const String& type, short value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObjectAdapter::setOptionsBitmask(unsigned int bitmask, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setOptionsBitmask(bitmask, notifyClient);
}

void TangibleObjectAdapter::setOptionBit(unsigned int option, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setOptionBit(option, notifyClient);
}

void TangibleObjectAdapter::clearOptionBit(unsigned int option, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->clearOptionBit(option, notifyClient);
}

int TangibleObjectAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition, bool isCombatAction) {
	return (static_cast<TangibleObject*>(stub))->notifyObjectDestructionObservers(attacker, condition, isCombatAction);
}

void TangibleObjectAdapter::dropFromDefenderLists() {
	(static_cast<TangibleObject*>(stub))->dropFromDefenderLists();
}

byte TangibleObjectAdapter::getObjectVisible() {
	return (static_cast<TangibleObject*>(stub))->getObjectVisible();
}

bool TangibleObjectAdapter::isKiller() {
	return (static_cast<TangibleObject*>(stub))->isKiller();
}

bool TangibleObjectAdapter::isTicketCollector() {
	return (static_cast<TangibleObject*>(stub))->isTicketCollector();
}

bool TangibleObjectAdapter::isTicketObject() {
	return (static_cast<TangibleObject*>(stub))->isTicketObject();
}

bool TangibleObjectAdapter::isFsPuzzlePack() {
	return (static_cast<TangibleObject*>(stub))->isFsPuzzlePack();
}

bool TangibleObjectAdapter::isPlantObject() {
	return (static_cast<TangibleObject*>(stub))->isPlantObject();
}

bool TangibleObjectAdapter::isConsumable() {
	return (static_cast<TangibleObject*>(stub))->isConsumable();
}

int TangibleObjectAdapter::getUseCount() {
	return (static_cast<TangibleObject*>(stub))->getUseCount();
}

int TangibleObjectAdapter::getMaxCondition() {
	return (static_cast<TangibleObject*>(stub))->getMaxCondition();
}

void TangibleObjectAdapter::setMaxCondition(int maxCond, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setMaxCondition(maxCond, notifyClient);
}

int TangibleObjectAdapter::getConditionDamage() {
	return (static_cast<TangibleObject*>(stub))->getConditionDamage();
}

int TangibleObjectAdapter::getVolume() {
	return (static_cast<TangibleObject*>(stub))->getVolume();
}

void TangibleObjectAdapter::setComplexity(float value) {
	(static_cast<TangibleObject*>(stub))->setComplexity(value);
}

float TangibleObjectAdapter::getComplexity() {
	return (static_cast<TangibleObject*>(stub))->getComplexity();
}

unsigned int TangibleObjectAdapter::getOptionsBitmask() {
	return (static_cast<TangibleObject*>(stub))->getOptionsBitmask();
}

void TangibleObjectAdapter::addMagicBit(bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->addMagicBit(notifyClient);
}

void TangibleObjectAdapter::removeMagicBit(bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->removeMagicBit(notifyClient);
}

int TangibleObjectAdapter::getLevel() {
	return (static_cast<TangibleObject*>(stub))->getLevel();
}

bool TangibleObjectAdapter::getIsCraftedEnhancedItem() {
	return (static_cast<TangibleObject*>(stub))->getIsCraftedEnhancedItem();
}

unsigned int TangibleObjectAdapter::getPvpStatusBitmask() {
	return (static_cast<TangibleObject*>(stub))->getPvpStatusBitmask();
}

bool TangibleObjectAdapter::isTangibleObject() {
	return (static_cast<TangibleObject*>(stub))->isTangibleObject();
}

void TangibleObjectAdapter::getCustomizationString(String& variables) {
	(static_cast<TangibleObject*>(stub))->getCustomizationString(variables);
}

SceneObject* TangibleObjectAdapter::getMainDefender() {
	return (static_cast<TangibleObject*>(stub))->getMainDefender();
}

bool TangibleObjectAdapter::isDestroyed() const {
	return (static_cast<TangibleObject*>(stub))->isDestroyed();
}

void TangibleObjectAdapter::setFaction(unsigned int crc) {
	(static_cast<TangibleObject*>(stub))->setFaction(crc);
}

unsigned int TangibleObjectAdapter::getFaction() const {
	return (static_cast<TangibleObject*>(stub))->getFaction();
}

bool TangibleObjectAdapter::isRebel() const {
	return (static_cast<TangibleObject*>(stub))->isRebel();
}

bool TangibleObjectAdapter::isImperial() const {
	return (static_cast<TangibleObject*>(stub))->isImperial();
}

bool TangibleObjectAdapter::isNeutral() const {
	return (static_cast<TangibleObject*>(stub))->isNeutral();
}

int TangibleObjectAdapter::getFactionStatus() const {
	return (static_cast<TangibleObject*>(stub))->getFactionStatus();
}

void TangibleObjectAdapter::setFactionStatus(int status) {
	(static_cast<TangibleObject*>(stub))->setFactionStatus(status);
}

int TangibleObjectAdapter::getFutureFactionStatus() const {
	return (static_cast<TangibleObject*>(stub))->getFutureFactionStatus();
}

void TangibleObjectAdapter::setFutureFactionStatus(int status) {
	(static_cast<TangibleObject*>(stub))->setFutureFactionStatus(status);
}

bool TangibleObjectAdapter::isSliceable() {
	return (static_cast<TangibleObject*>(stub))->isSliceable();
}

bool TangibleObjectAdapter::isSliced() const {
	return (static_cast<TangibleObject*>(stub))->isSliced();
}

void TangibleObjectAdapter::setSliceable(bool val) {
	(static_cast<TangibleObject*>(stub))->setSliceable(val);
}

void TangibleObjectAdapter::setSliced(bool slice) {
	(static_cast<TangibleObject*>(stub))->setSliced(slice);
}

void TangibleObjectAdapter::setCustomizationString(const String& vars) {
	(static_cast<TangibleObject*>(stub))->setCustomizationString(vars);
}

void TangibleObjectAdapter::setIsCraftedEnhancedItem(bool value) {
	(static_cast<TangibleObject*>(stub))->setIsCraftedEnhancedItem(value);
}

void TangibleObjectAdapter::setPvpStatusBitmask(unsigned int bitmask, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setPvpStatusBitmask(bitmask, notifyClient);
}

void TangibleObjectAdapter::setPvpStatusBit(unsigned int pvpStatus, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setPvpStatusBit(pvpStatus, notifyClient);
}

void TangibleObjectAdapter::clearPvpStatusBit(unsigned int pvpStatus, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->clearPvpStatusBit(pvpStatus, notifyClient);
}

void TangibleObjectAdapter::setCraftersName(String& name) {
	(static_cast<TangibleObject*>(stub))->setCraftersName(name);
}

String TangibleObjectAdapter::getCraftersName() {
	return (static_cast<TangibleObject*>(stub))->getCraftersName();
}

void TangibleObjectAdapter::setJunkDealerNeeded(int jdNeeded) {
	(static_cast<TangibleObject*>(stub))->setJunkDealerNeeded(jdNeeded);
}

int TangibleObjectAdapter::getJunkDealerNeeded() {
	return (static_cast<TangibleObject*>(stub))->getJunkDealerNeeded();
}

void TangibleObjectAdapter::setJunkValue(int jValue) {
	(static_cast<TangibleObject*>(stub))->setJunkValue(jValue);
}

int TangibleObjectAdapter::getJunkValue() {
	return (static_cast<TangibleObject*>(stub))->getJunkValue();
}

void TangibleObjectAdapter::setSerialNumber(const String& serial) {
	(static_cast<TangibleObject*>(stub))->setSerialNumber(serial);
}

void TangibleObjectAdapter::setLevel(int lev, bool randomHam) {
	(static_cast<TangibleObject*>(stub))->setLevel(lev, randomHam);
}

String TangibleObjectAdapter::getSerialNumber() {
	return (static_cast<TangibleObject*>(stub))->getSerialNumber();
}

Reference<FactoryCrate* > TangibleObjectAdapter::createFactoryCrate(int maxSize, bool insertSelf) {
	return (static_cast<TangibleObject*>(stub))->createFactoryCrate(maxSize, insertSelf);
}

bool TangibleObjectAdapter::canRepair(CreatureObject* player) {
	return (static_cast<TangibleObject*>(stub))->canRepair(player);
}

void TangibleObjectAdapter::repair(CreatureObject* player) {
	(static_cast<TangibleObject*>(stub))->repair(player);
}

String TangibleObjectAdapter::repairAttempt(int repairChance) {
	return (static_cast<TangibleObject*>(stub))->repairAttempt(repairChance);
}

bool TangibleObjectAdapter::isBroken() {
	return (static_cast<TangibleObject*>(stub))->isBroken();
}

float TangibleObjectAdapter::getHitChance() {
	return (static_cast<TangibleObject*>(stub))->getHitChance();
}

void TangibleObjectAdapter::broadcastPvpStatusBitmask() {
	(static_cast<TangibleObject*>(stub))->broadcastPvpStatusBitmask();
}

void TangibleObjectAdapter::addActiveArea(ActiveArea* area) {
	(static_cast<TangibleObject*>(stub))->addActiveArea(area);
}

void TangibleObjectAdapter::dropActiveArea(ActiveArea* area) {
	(static_cast<TangibleObject*>(stub))->dropActiveArea(area);
}

bool TangibleObjectAdapter::hasActiveArea(ActiveArea* area) {
	return (static_cast<TangibleObject*>(stub))->hasActiveArea(area);
}

bool TangibleObjectAdapter::hasActiveArea(unsigned long long objectid) {
	return (static_cast<TangibleObject*>(stub))->hasActiveArea(objectid);
}

int TangibleObjectAdapter::getActiveAreasSize() const {
	return (static_cast<TangibleObject*>(stub))->getActiveAreasSize();
}

Reference<ActiveArea* > TangibleObjectAdapter::getActiveRegion() {
	return (static_cast<TangibleObject*>(stub))->getActiveRegion();
}

bool TangibleObjectAdapter::hasAntiDecayKit() {
	return (static_cast<TangibleObject*>(stub))->hasAntiDecayKit();
}

void TangibleObjectAdapter::applyAntiDecayKit(CreatureObject* player, SceneObject* adk) {
	(static_cast<TangibleObject*>(stub))->applyAntiDecayKit(player, adk);
}

SceneObject* TangibleObjectAdapter::removeAntiDecayKit() {
	return (static_cast<TangibleObject*>(stub))->removeAntiDecayKit();
}

bool TangibleObjectAdapter::isCityStreetLamp() {
	return (static_cast<TangibleObject*>(stub))->isCityStreetLamp();
}

bool TangibleObjectAdapter::isCityStatue() {
	return (static_cast<TangibleObject*>(stub))->isCityStatue();
}

bool TangibleObjectAdapter::isCityFountain() {
	return (static_cast<TangibleObject*>(stub))->isCityFountain();
}

bool TangibleObjectAdapter::isInvisible() const {
	return (static_cast<TangibleObject*>(stub))->isInvisible();
}

void TangibleObjectAdapter::setInvisible(bool invis) {
	(static_cast<TangibleObject*>(stub))->setInvisible(invis);
}

bool TangibleObjectAdapter::isCustomIngredient() {
	return (static_cast<TangibleObject*>(stub))->isCustomIngredient();
}

void TangibleObjectAdapter::setLuaStringData(const String& key, const String& data) {
	(static_cast<TangibleObject*>(stub))->setLuaStringData(key, data);
}

void TangibleObjectAdapter::deleteLuaStringData(const String& key) {
	(static_cast<TangibleObject*>(stub))->deleteLuaStringData(key);
}

String TangibleObjectAdapter::getLuaStringData(const String& key) {
	return (static_cast<TangibleObject*>(stub))->getLuaStringData(key);
}

void TangibleObjectAdapter::setDisabled(bool disabled) {
	(static_cast<TangibleObject*>(stub))->setDisabled(disabled);
}

bool TangibleObjectAdapter::isDisabled() {
	return (static_cast<TangibleObject*>(stub))->isDisabled();
}

bool TangibleObjectAdapter::isInNavMesh() {
	return (static_cast<TangibleObject*>(stub))->isInNavMesh();
}

/*
 *	TangibleObjectHelper
 */

TangibleObjectHelper* TangibleObjectHelper::staticInitializer = TangibleObjectHelper::instance();

TangibleObjectHelper::TangibleObjectHelper() {
	className = "TangibleObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void TangibleObjectHelper::finalizeHelper() {
	TangibleObjectHelper::finalize();
}

DistributedObject* TangibleObjectHelper::instantiateObject() {
	return new TangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* TangibleObjectHelper::instantiateServant() {
	return new TangibleObjectImplementation();
}

DistributedObjectAdapter* TangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TangibleObjectAdapter(static_cast<TangibleObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

