/*
 *	autogen/server/zone/objects/tangible/misc/CustomIngredient.cpp generated by engine3 IDL compiler 0.60
 */

#include "CustomIngredient.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	CustomIngredientStub
 */

enum {RPC_ADDATTRIBUTE__STRING_INT_,RPC_CLEARATTRIBUTES__,RPC_GETATTRIBUTEVALUE__INT_,RPC_GETRESOURCEVALUE__INT_,RPC_GETVALUEOF__INT_,RPC_GETVALUEOF__STRING_,RPC_ISCUSTOMINGREDIENT__};

CustomIngredient::CustomIngredient() : TangibleObject(DummyConstructorParameter::instance()) {
	CustomIngredientImplementation* _implementation = new CustomIngredientImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("CustomIngredient");
}

CustomIngredient::CustomIngredient(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("CustomIngredient");
}

CustomIngredient::~CustomIngredient() {
}



void CustomIngredient::loadTemplateData(SharedObjectTemplate* templateData) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void CustomIngredient::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void CustomIngredient::addAttribute(const String& attribute, int value) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDATTRIBUTE__STRING_INT_);
		method.addAsciiParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->addAttribute(attribute, value);
	}
}

void CustomIngredient::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

void CustomIngredient::clearAttributes() {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARATTRIBUTES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearAttributes();
	}
}

int CustomIngredient::getAttributeAndValue(String& attribute, int index) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getAttributeAndValue(attribute, index);
	}
}

int CustomIngredient::getAttributeValue(int index) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETATTRIBUTEVALUE__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getAttributeValue(index);
	}
}

int CustomIngredient::getResourceValue(int average) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRESOURCEVALUE__INT_);
		method.addSignedIntParameter(average);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getResourceValue(average);
	}
}

int CustomIngredient::getValueOf(int index) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVALUEOF__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getValueOf(index);
	}
}

int CustomIngredient::getValueOf(const String& attribute) {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVALUEOF__STRING_);
		method.addAsciiParameter(attribute);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getValueOf(attribute);
	}
}

bool CustomIngredient::isCustomIngredient() {
	CustomIngredientImplementation* _implementation = static_cast<CustomIngredientImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCUSTOMINGREDIENT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCustomIngredient();
	}
}

DistributedObjectServant* CustomIngredient::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* CustomIngredient::_getImplementationForRead() const {
	return _impl;
}

void CustomIngredient::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CustomIngredientImplementation
 */

CustomIngredientImplementation::CustomIngredientImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


CustomIngredientImplementation::~CustomIngredientImplementation() {
}


void CustomIngredientImplementation::finalize() {
}

void CustomIngredientImplementation::_initializeImplementation() {
	_setClassHelper(CustomIngredientHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CustomIngredientImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CustomIngredient*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CustomIngredientImplementation::_getStub() {
	return _this.get();
}

CustomIngredientImplementation::operator const CustomIngredient*() {
	return _this.get();
}

void CustomIngredientImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void CustomIngredientImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void CustomIngredientImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void CustomIngredientImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void CustomIngredientImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void CustomIngredientImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void CustomIngredientImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void CustomIngredientImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("CustomIngredient");

}

void CustomIngredientImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(CustomIngredientImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CustomIngredientImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xca7f9d31: //CustomIngredient.objectAttributes
		TypeInfo<VectorMap<String, int> >::parseFromBinaryStream(&objectAttributes, stream);
		return true;

	case 0xdd673848: //CustomIngredient.isBaseIngredient
		TypeInfo<bool >::parseFromBinaryStream(&isBaseIngredient, stream);
		return true;

	}

	return false;
}

void CustomIngredientImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CustomIngredientImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CustomIngredientImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xca7f9d31; //CustomIngredient.objectAttributes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, int> >::toBinaryStream(&objectAttributes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xdd673848; //CustomIngredient.isBaseIngredient
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&isBaseIngredient, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

CustomIngredientImplementation::CustomIngredientImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/misc/CustomIngredient.idl():  		objectAttributes.setAllowOverwriteInsertPlan();
	(&objectAttributes)->setAllowOverwriteInsertPlan();
	// server/zone/objects/tangible/misc/CustomIngredient.idl():  		setLoggingName("CustomIngredient");
	setLoggingName("CustomIngredient");
	// server/zone/objects/tangible/misc/CustomIngredient.idl():  		isBaseIngredient = false;
	isBaseIngredient = false;
}

void CustomIngredientImplementation::clearAttributes() {
	// server/zone/objects/tangible/misc/CustomIngredient.idl():  		objectAttributes.removeAll();
	(&objectAttributes)->removeAll();
}

int CustomIngredientImplementation::getAttributeValue(int index) {
	// server/zone/objects/tangible/misc/CustomIngredient.idl():  		return objectAttributes.get(index);
	return (&objectAttributes)->get(index);
}

bool CustomIngredientImplementation::isCustomIngredient() {
	// server/zone/objects/tangible/misc/CustomIngredient.idl():  		return true;
	return true;
}

/*
 *	CustomIngredientAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


CustomIngredientAdapter::CustomIngredientAdapter(CustomIngredient* obj) : TangibleObjectAdapter(obj) {
}

void CustomIngredientAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ADDATTRIBUTE__STRING_INT_:
		{
			 String attribute; inv->getAsciiParameter(attribute);
			int value = inv->getSignedIntParameter();
			
			addAttribute(attribute, value);
			
		}
		break;
	case RPC_CLEARATTRIBUTES__:
		{
			
			clearAttributes();
			
		}
		break;
	case RPC_GETATTRIBUTEVALUE__INT_:
		{
			int index = inv->getSignedIntParameter();
			
			int _m_res = getAttributeValue(index);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETRESOURCEVALUE__INT_:
		{
			int average = inv->getSignedIntParameter();
			
			int _m_res = getResourceValue(average);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETVALUEOF__INT_:
		{
			int index = inv->getSignedIntParameter();
			
			int _m_res = getValueOf(index);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETVALUEOF__STRING_:
		{
			 String attribute; inv->getAsciiParameter(attribute);
			
			int _m_res = getValueOf(attribute);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISCUSTOMINGREDIENT__:
		{
			
			bool _m_res = isCustomIngredient();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

void CustomIngredientAdapter::addAttribute(const String& attribute, int value) {
	(static_cast<CustomIngredient*>(stub))->addAttribute(attribute, value);
}

void CustomIngredientAdapter::clearAttributes() {
	(static_cast<CustomIngredient*>(stub))->clearAttributes();
}

int CustomIngredientAdapter::getAttributeValue(int index) {
	return (static_cast<CustomIngredient*>(stub))->getAttributeValue(index);
}

int CustomIngredientAdapter::getResourceValue(int average) {
	return (static_cast<CustomIngredient*>(stub))->getResourceValue(average);
}

int CustomIngredientAdapter::getValueOf(int index) {
	return (static_cast<CustomIngredient*>(stub))->getValueOf(index);
}

int CustomIngredientAdapter::getValueOf(const String& attribute) {
	return (static_cast<CustomIngredient*>(stub))->getValueOf(attribute);
}

bool CustomIngredientAdapter::isCustomIngredient() {
	return (static_cast<CustomIngredient*>(stub))->isCustomIngredient();
}

/*
 *	CustomIngredientHelper
 */

CustomIngredientHelper* CustomIngredientHelper::staticInitializer = CustomIngredientHelper::instance();

CustomIngredientHelper::CustomIngredientHelper() {
	className = "CustomIngredient";

	Core::getObjectBroker()->registerClass(className, this);
}

void CustomIngredientHelper::finalizeHelper() {
	CustomIngredientHelper::finalize();
}

DistributedObject* CustomIngredientHelper::instantiateObject() {
	return new CustomIngredient(DummyConstructorParameter::instance());
}

DistributedObjectServant* CustomIngredientHelper::instantiateServant() {
	return new CustomIngredientImplementation();
}

DistributedObjectAdapter* CustomIngredientHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CustomIngredientAdapter(static_cast<CustomIngredient*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaCustomIngredient::className[] = "LuaCustomIngredient";

Luna<LuaCustomIngredient>::RegType LuaCustomIngredient::Register[] = {
	{ "_setObject", &LuaCustomIngredient::_setObject },
	{ "_getObject", &LuaCustomIngredient::_getObject },
	{ "loadTemplateData", &LuaCustomIngredient::loadTemplateData },
	{ "fillAttributeList", &LuaCustomIngredient::fillAttributeList },
	{ "addAttribute", &LuaCustomIngredient::addAttribute },
	{ "updateCraftingValues", &LuaCustomIngredient::updateCraftingValues },
	{ "clearAttributes", &LuaCustomIngredient::clearAttributes },
	{ "getAttributeAndValue", &LuaCustomIngredient::getAttributeAndValue },
	{ "getAttributeValue", &LuaCustomIngredient::getAttributeValue },
	{ "getResourceValue", &LuaCustomIngredient::getResourceValue },
	{ "getValueOf", &LuaCustomIngredient::getValueOf },
	{ "isCustomIngredient", &LuaCustomIngredient::isCustomIngredient },
	{ 0, 0 }
};

LuaCustomIngredient::LuaCustomIngredient(lua_State *L) {
	realObject = static_cast<CustomIngredient*>(lua_touserdata(L, 1));
}

LuaCustomIngredient::~LuaCustomIngredient() {
}

int LuaCustomIngredient::_setObject(lua_State* L) {
	realObject = static_cast<CustomIngredient*>(lua_touserdata(L, -1));

	return 0;
}

int LuaCustomIngredient::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaCustomIngredient::loadTemplateData(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			SharedObjectTemplate* templateData = static_cast<SharedObjectTemplate*>(lua_touserdata(L, -1));

			realObject->loadTemplateData(templateData);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:loadTemplateData(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'CustomIngredient:loadTemplateData(userdata)'");
	}
	return 0;
}

int LuaCustomIngredient::fillAttributeList(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				AttributeListMessage* msg = static_cast<AttributeListMessage*>(lua_touserdata(L, -2));
				CreatureObject* object = static_cast<CreatureObject*>(lua_touserdata(L, -1));

				realObject->fillAttributeList(msg, object);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:fillAttributeList(userdata, userdata)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'CustomIngredient:fillAttributeList(userdata, userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'CustomIngredient:fillAttributeList(userdata, userdata)'");
	}
	return 0;
}

int LuaCustomIngredient::addAttribute(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (lua_isstring(L, -2)) {
			if (parameterCount == 2) {
				const String attribute = lua_tostring(L, -2);
				int value = lua_tointeger(L, -1);

				realObject->addAttribute(attribute, value);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:addAttribute(string, integer)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'CustomIngredient:addAttribute(string, integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'CustomIngredient:addAttribute(string, integer)'");
	}
	return 0;
}

int LuaCustomIngredient::updateCraftingValues(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isboolean(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				CraftingValues* values = static_cast<CraftingValues*>(lua_touserdata(L, -2));
				bool firstUpdate = lua_toboolean(L, -1);

				realObject->updateCraftingValues(values, firstUpdate);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:updateCraftingValues(userdata, boolean)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'CustomIngredient:updateCraftingValues(userdata, boolean)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'CustomIngredient:updateCraftingValues(userdata, boolean)'");
	}
	return 0;
}

int LuaCustomIngredient::clearAttributes(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		realObject->clearAttributes();

		return 0;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:clearAttributes()'");
	}
	return 0;
}

int LuaCustomIngredient::getAttributeAndValue(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (lua_isstring(L, -2)) {
			if (parameterCount == 2) {
				String attribute = lua_tostring(L, -2);
				int index = lua_tointeger(L, -1);

				int result = realObject->getAttributeAndValue(attribute, index);

				lua_pushinteger(L, result);
				return 1;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:getAttributeAndValue(string, integer)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'CustomIngredient:getAttributeAndValue(string, integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'CustomIngredient:getAttributeAndValue(string, integer)'");
	}
	return 0;
}

int LuaCustomIngredient::getAttributeValue(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int index = lua_tointeger(L, -1);

			int result = realObject->getAttributeValue(index);

			lua_pushinteger(L, result);
			return 1;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:getAttributeValue(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'CustomIngredient:getAttributeValue(integer)'");
	}
	return 0;
}

int LuaCustomIngredient::getResourceValue(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int average = lua_tointeger(L, -1);

			int result = realObject->getResourceValue(average);

			lua_pushinteger(L, result);
			return 1;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:getResourceValue(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'CustomIngredient:getResourceValue(integer)'");
	}
	return 0;
}

int LuaCustomIngredient::getValueOf(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int index = lua_tointeger(L, -1);

			int result = realObject->getValueOf(index);

			lua_pushinteger(L, result);
			return 1;
		}
	} else if (lua_isstring(L, -1)) {
		if (parameterCount == 1) {
			const String attribute = lua_tostring(L, -1);

			int result = realObject->getValueOf(attribute);

			lua_pushinteger(L, result);
			return 1;
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'CustomIngredient:getValueOf(integer)'");
	}
	return 0;
}

int LuaCustomIngredient::isCustomIngredient(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isCustomIngredient();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'CustomIngredient:isCustomIngredient()'");
	}
	return 0;
}

