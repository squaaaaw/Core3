/*
 *	autogen/server/zone/objects/tangible/misc/FsBuffItem.h generated by engine3 IDL compiler 0.60
 */

#ifndef FSBUFFITEM_H_
#define FSBUFFITEM_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "engine/lua/Luna.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace misc {

class FsBuffItem : public TangibleObject {
public:
	FsBuffItem();

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* player);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	String getTimeString(unsigned int timestamp);

	unsigned int getBuffCRC();

	void setReuseTime(unsigned int time);

	void setBuffAttribute(int attrib);

	void setBuffValue(int value);

	void setBuffDuration(unsigned int dur);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	FsBuffItem(DummyConstructorParameter* param);

	virtual ~FsBuffItem();

	friend class FsBuffItemHelper;
};

} // namespace misc
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::misc;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace misc {

class FsBuffItemImplementation : public TangibleObjectImplementation {
protected:
	unsigned int reuseTime;

	int buffAttribute;

	int buffValue;

	unsigned int buffDuration;

public:
	FsBuffItemImplementation();

	FsBuffItemImplementation(DummyConstructorParameter* param);

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* player);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	String getTimeString(unsigned int timestamp);

	unsigned int getBuffCRC();

	void setReuseTime(unsigned int time);

	void setBuffAttribute(int attrib);

	void setBuffValue(int value);

	void setBuffDuration(unsigned int dur);

	WeakReference<FsBuffItem*> _this;

	operator const FsBuffItem*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~FsBuffItemImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class FsBuffItem;
};

class FsBuffItemAdapter : public TangibleObjectAdapter {
public:
	FsBuffItemAdapter(FsBuffItem* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	String getTimeString(unsigned int timestamp);

	unsigned int getBuffCRC();

	void setReuseTime(unsigned int time);

	void setBuffAttribute(int attrib);

	void setBuffValue(int value);

	void setBuffDuration(unsigned int dur);

};

class FsBuffItemHelper : public DistributedObjectClassHelper, public Singleton<FsBuffItemHelper> {
	static FsBuffItemHelper* staticInitializer;

public:
	FsBuffItemHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FsBuffItemHelper>;
};

class LuaFsBuffItem {
public:
	static const char className[];
	static Luna<LuaFsBuffItem>::RegType Register[];

	LuaFsBuffItem(lua_State *L);
	virtual ~LuaFsBuffItem();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int fillAttributeList(lua_State *L);
	int handleObjectMenuSelect(lua_State *L);
	int fillObjectMenuResponse(lua_State *L);
	int getTimeString(lua_State *L);
	int getBuffCRC(lua_State *L);
	int setReuseTime(lua_State *L);
	int setBuffAttribute(lua_State *L);
	int setBuffValue(lua_State *L);
	int setBuffDuration(lua_State *L);

	Reference<FsBuffItem*> realObject;
};

} // namespace misc
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::misc;

#endif /*FSBUFFITEM_H_*/
