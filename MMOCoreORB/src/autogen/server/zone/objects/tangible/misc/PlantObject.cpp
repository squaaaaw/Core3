/*
 *	autogen/server/zone/objects/tangible/misc/PlantObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlantObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/tangible/tasks/GrowablePlantPulseTask.h"

/*
 *	PlantObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 713415823,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_INITIALIZEPLANT__INT_,RPC_SENDRESOURCESUI__CREATUREOBJECT_INT_,RPC_GETCRITICALATTRIBUTE__INT_,RPC_CHANGESIZE__INT_,RPC_UPDATELASTPULSE__,RPC_GETWATERLEVEL__,RPC_GETIDEALWATERLEVEL__,RPC_GETIDEALNUTRIENTLEVEL__,RPC_GETNUTRIENTLEVEL__,RPC_GETNUTRIENTQUALITY__,RPC_GETWATERQUALITY__,RPC_GETPLANTHEALTH__,RPC_GETGROWTH__,RPC_GETSIZE__,RPC_GETFRUIT__,RPC_GETCRITICALATTRIBUTEONE__,RPC_GETCRITICALATTRIBUTETWO__,RPC_SETNUTRIENTLEVEL__INT_,RPC_SETNUTRIENTQUALITY__INT_,RPC_SETWATERLEVEL__INT_,RPC_SETWATERQUALITY__INT_,RPC_SETPLANTHEALTH__INT_,RPC_SETFRUIT__INT_,RPC_ISPLANTOBJECT__,RPC_SETGROWTHRATE__INT_,RPC_SETGROWTH__INT_,RPC_STARTPULSE__};

PlantObject::PlantObject() : TangibleObject(DummyConstructorParameter::instance()) {
	PlantObjectImplementation* _implementation = new PlantObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PlantObject");
}

PlantObject::PlantObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("PlantObject");
}

PlantObject::~PlantObject() {
}



void PlantObject::initializeTransientMembers() {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void PlantObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

int PlantObject::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void PlantObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

void PlantObject::initializePlant(int size) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEPLANT__INT_);
		method.addSignedIntParameter(size);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->initializePlant(size);
	}
}

void PlantObject::sendResourceSUI(CreatureObject* player, int type) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDRESOURCESUI__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendResourceSUI(player, type);
	}
}

int PlantObject::getCriticalAttribute(int index) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRITICALATTRIBUTE__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCriticalAttribute(index);
	}
}

void PlantObject::changeSize(int size) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHANGESIZE__INT_);
		method.addSignedIntParameter(size);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->changeSize(size);
	}
}

void PlantObject::updateLastPulse() {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELASTPULSE__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateLastPulse();
	}
}

int PlantObject::getWaterLevel() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWATERLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getWaterLevel();
	}
}

int PlantObject::getIdealWaterLevel() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETIDEALWATERLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getIdealWaterLevel();
	}
}

int PlantObject::getIdealNutrientLevel() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETIDEALNUTRIENTLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getIdealNutrientLevel();
	}
}

int PlantObject::getNutrientLevel() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNUTRIENTLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getNutrientLevel();
	}
}

int PlantObject::getNutrientQuality() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNUTRIENTQUALITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getNutrientQuality();
	}
}

int PlantObject::getWaterQuality() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWATERQUALITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getWaterQuality();
	}
}

int PlantObject::getPlantHealth() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANTHEALTH__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPlantHealth();
	}
}

int PlantObject::getGrowth() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROWTH__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getGrowth();
	}
}

int PlantObject::getSize() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSize();
	}
}

int PlantObject::getFruit() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFRUIT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFruit();
	}
}

int PlantObject::getCriticalAttributeOne() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRITICALATTRIBUTEONE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCriticalAttributeOne();
	}
}

int PlantObject::getCriticalAttributeTwo() const {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRITICALATTRIBUTETWO__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCriticalAttributeTwo();
	}
}

void PlantObject::setNutrientLevel(int level) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNUTRIENTLEVEL__INT_);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setNutrientLevel(level);
	}
}

void PlantObject::setNutrientQuality(int qual) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNUTRIENTQUALITY__INT_);
		method.addSignedIntParameter(qual);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setNutrientQuality(qual);
	}
}

void PlantObject::setWaterLevel(int level) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWATERLEVEL__INT_);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setWaterLevel(level);
	}
}

void PlantObject::setWaterQuality(int qual) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWATERQUALITY__INT_);
		method.addSignedIntParameter(qual);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setWaterQuality(qual);
	}
}

void PlantObject::setPlantHealth(int hp) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPLANTHEALTH__INT_);
		method.addSignedIntParameter(hp);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setPlantHealth(hp);
	}
}

void PlantObject::setFruit(int count) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFRUIT__INT_);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setFruit(count);
	}
}

bool PlantObject::isPlantObject() {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLANTOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPlantObject();
	}
}

Time* PlantObject::getLastPulse() {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getLastPulse();
	}
}

void PlantObject::setGrowthRate(int rate) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGROWTHRATE__INT_);
		method.addSignedIntParameter(rate);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGrowthRate(rate);
	}
}

void PlantObject::setGrowth(int gr) {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGROWTH__INT_);
		method.addSignedIntParameter(gr);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGrowth(gr);
	}
}

void PlantObject::startPulse() {
	PlantObjectImplementation* _implementation = static_cast<PlantObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTPULSE__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->startPulse();
	}
}

DistributedObjectServant* PlantObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PlantObject::_getImplementationForRead() const {
	return _impl;
}

void PlantObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlantObjectImplementation
 */

PlantObjectImplementation::PlantObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


PlantObjectImplementation::~PlantObjectImplementation() {
}


void PlantObjectImplementation::finalize() {
}

void PlantObjectImplementation::_initializeImplementation() {
	_setClassHelper(PlantObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PlantObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PlantObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PlantObjectImplementation::_getStub() {
	return _this.get();
}

PlantObjectImplementation::operator const PlantObject*() {
	return _this.get();
}

void PlantObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PlantObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PlantObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PlantObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PlantObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PlantObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PlantObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PlantObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("PlantObject");

}

void PlantObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PlantObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlantObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xe3965bcc: //PlantObject.waterLevel
		TypeInfo<int >::parseFromBinaryStream(&waterLevel, stream);
		return true;

	case 0x125a1881: //PlantObject.nutrientLevel
		TypeInfo<int >::parseFromBinaryStream(&nutrientLevel, stream);
		return true;

	case 0x82ec512: //PlantObject.idealWaterLevel
		TypeInfo<int >::parseFromBinaryStream(&idealWaterLevel, stream);
		return true;

	case 0x403bd6fb: //PlantObject.idealNutrientLevel
		TypeInfo<int >::parseFromBinaryStream(&idealNutrientLevel, stream);
		return true;

	case 0xf2bd9776: //PlantObject.waterQuality
		TypeInfo<int >::parseFromBinaryStream(&waterQuality, stream);
		return true;

	case 0xf85744b6: //PlantObject.nutrientQuality
		TypeInfo<int >::parseFromBinaryStream(&nutrientQuality, stream);
		return true;

	case 0x2fd9aaaa: //PlantObject.health
		TypeInfo<int >::parseFromBinaryStream(&health, stream);
		return true;

	case 0x625c9e6d: //PlantObject.fruitCount
		TypeInfo<int >::parseFromBinaryStream(&fruitCount, stream);
		return true;

	case 0xe753630d: //PlantObject.growth
		TypeInfo<int >::parseFromBinaryStream(&growth, stream);
		return true;

	case 0xab656da1: //PlantObject.growthRate
		TypeInfo<int >::parseFromBinaryStream(&growthRate, stream);
		return true;

	case 0x8e7896be: //PlantObject.plantSize
		TypeInfo<int >::parseFromBinaryStream(&plantSize, stream);
		return true;

	case 0xe745da3f: //PlantObject.criticalAttribOne
		TypeInfo<int >::parseFromBinaryStream(&criticalAttribOne, stream);
		return true;

	case 0x91e94cb5: //PlantObject.criticalAttribTwo
		TypeInfo<int >::parseFromBinaryStream(&criticalAttribTwo, stream);
		return true;

	case 0x4ea4ce81: //PlantObject.lastPulse
		TypeInfo<Time >::parseFromBinaryStream(&lastPulse, stream);
		return true;

	}

	return false;
}

void PlantObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlantObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlantObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xe3965bcc; //PlantObject.waterLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&waterLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x125a1881; //PlantObject.nutrientLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&nutrientLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x82ec512; //PlantObject.idealWaterLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&idealWaterLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x403bd6fb; //PlantObject.idealNutrientLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&idealNutrientLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf2bd9776; //PlantObject.waterQuality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&waterQuality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf85744b6; //PlantObject.nutrientQuality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&nutrientQuality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2fd9aaaa; //PlantObject.health
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&health, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x625c9e6d; //PlantObject.fruitCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&fruitCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe753630d; //PlantObject.growth
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&growth, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xab656da1; //PlantObject.growthRate
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&growthRate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8e7896be; //PlantObject.plantSize
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&plantSize, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe745da3f; //PlantObject.criticalAttribOne
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&criticalAttribOne, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x91e94cb5; //PlantObject.criticalAttribTwo
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&criticalAttribTwo, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4ea4ce81; //PlantObject.lastPulse
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastPulse, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 14;
}

PlantObjectImplementation::PlantObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/misc/PlantObject.idl():  		Logger.setLoggingName("PlantObject");
	Logger::setLoggingName("PlantObject");
	// server/zone/objects/tangible/misc/PlantObject.idl():  		waterLevel = 51;
	waterLevel = 51;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		nutrientLevel = 51;
	nutrientLevel = 51;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		idealWaterLevel = 0;
	idealWaterLevel = 0;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		idealNutrientLevel = 0;
	idealNutrientLevel = 0;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		waterQuality = 500;
	waterQuality = 500;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		nutrientQuality = 500;
	nutrientQuality = 500;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		health = 50;
	health = 50;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		fruitCount = 0;
	fruitCount = 0;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		growth = 0;
	growth = 0;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		growthRate = 0;
	growthRate = 0;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		plantSize = 1;
	plantSize = 1;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		criticalAttribOne = 0;
	criticalAttribOne = 0;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		criticalAttribTwo = 0;
	criticalAttribTwo = 0;
	// server/zone/objects/tangible/misc/PlantObject.idl():  		initializePlant(1);
	initializePlant(1);
}

void PlantObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/misc/PlantObject.idl():  		startPulse();
	startPulse();
}

void PlantObjectImplementation::updateLastPulse() {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		lastPulse.updateToCurrentTime();
	(&lastPulse)->updateToCurrentTime();
}

int PlantObjectImplementation::getWaterLevel() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return waterLevel;
	return waterLevel;
}

int PlantObjectImplementation::getIdealWaterLevel() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return idealWaterLevel;
	return idealWaterLevel;
}

int PlantObjectImplementation::getIdealNutrientLevel() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return idealNutrientLevel;
	return idealNutrientLevel;
}

int PlantObjectImplementation::getNutrientLevel() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return nutrientLevel;
	return nutrientLevel;
}

int PlantObjectImplementation::getNutrientQuality() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return nutrientQuality;
	return nutrientQuality;
}

int PlantObjectImplementation::getWaterQuality() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return waterQuality;
	return waterQuality;
}

int PlantObjectImplementation::getPlantHealth() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return health;
	return health;
}

int PlantObjectImplementation::getGrowth() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return growth;
	return growth;
}

int PlantObjectImplementation::getSize() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return plantSize;
	return plantSize;
}

int PlantObjectImplementation::getFruit() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return fruitCount;
	return fruitCount;
}

int PlantObjectImplementation::getCriticalAttributeOne() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return criticalAttribOne;
	return criticalAttribOne;
}

int PlantObjectImplementation::getCriticalAttributeTwo() const{
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return criticalAttribTwo;
	return criticalAttribTwo;
}

void PlantObjectImplementation::setNutrientLevel(int level) {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		nutrientLevel = level;
	nutrientLevel = level;
}

void PlantObjectImplementation::setNutrientQuality(int qual) {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		nutrientQuality = qual;
	nutrientQuality = qual;
}

void PlantObjectImplementation::setWaterLevel(int level) {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		waterLevel = level;
	waterLevel = level;
}

void PlantObjectImplementation::setWaterQuality(int qual) {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		waterQuality = qual;
	waterQuality = qual;
}

void PlantObjectImplementation::setPlantHealth(int hp) {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		health = hp;
	health = hp;
}

void PlantObjectImplementation::setFruit(int count) {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		fruitCount = count;
	fruitCount = count;
}

bool PlantObjectImplementation::isPlantObject() {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return true;
	return true;
}

Time* PlantObjectImplementation::getLastPulse() {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		return lastPulse;
	return (&lastPulse);
}

void PlantObjectImplementation::setGrowthRate(int rate) {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		growthRate = rate;
	growthRate = rate;
}

void PlantObjectImplementation::setGrowth(int gr) {
	// server/zone/objects/tangible/misc/PlantObject.idl():  		growth = gr;
	growth = gr;
}

/*
 *	PlantObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PlantObjectAdapter::PlantObjectAdapter(PlantObject* obj) : TangibleObjectAdapter(obj) {
}

void PlantObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_INITIALIZEPLANT__INT_:
		{
			int size = inv->getSignedIntParameter();
			
			initializePlant(size);
			
		}
		break;
	case RPC_SENDRESOURCESUI__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int type = inv->getSignedIntParameter();
			
			sendResourceSUI(player, type);
			
		}
		break;
	case RPC_GETCRITICALATTRIBUTE__INT_:
		{
			int index = inv->getSignedIntParameter();
			
			int _m_res = getCriticalAttribute(index);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CHANGESIZE__INT_:
		{
			int size = inv->getSignedIntParameter();
			
			changeSize(size);
			
		}
		break;
	case RPC_UPDATELASTPULSE__:
		{
			
			updateLastPulse();
			
		}
		break;
	case RPC_GETWATERLEVEL__:
		{
			
			int _m_res = getWaterLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETIDEALWATERLEVEL__:
		{
			
			int _m_res = getIdealWaterLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETIDEALNUTRIENTLEVEL__:
		{
			
			int _m_res = getIdealNutrientLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETNUTRIENTLEVEL__:
		{
			
			int _m_res = getNutrientLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETNUTRIENTQUALITY__:
		{
			
			int _m_res = getNutrientQuality();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETWATERQUALITY__:
		{
			
			int _m_res = getWaterQuality();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPLANTHEALTH__:
		{
			
			int _m_res = getPlantHealth();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETGROWTH__:
		{
			
			int _m_res = getGrowth();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSIZE__:
		{
			
			int _m_res = getSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETFRUIT__:
		{
			
			int _m_res = getFruit();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCRITICALATTRIBUTEONE__:
		{
			
			int _m_res = getCriticalAttributeOne();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCRITICALATTRIBUTETWO__:
		{
			
			int _m_res = getCriticalAttributeTwo();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETNUTRIENTLEVEL__INT_:
		{
			int level = inv->getSignedIntParameter();
			
			setNutrientLevel(level);
			
		}
		break;
	case RPC_SETNUTRIENTQUALITY__INT_:
		{
			int qual = inv->getSignedIntParameter();
			
			setNutrientQuality(qual);
			
		}
		break;
	case RPC_SETWATERLEVEL__INT_:
		{
			int level = inv->getSignedIntParameter();
			
			setWaterLevel(level);
			
		}
		break;
	case RPC_SETWATERQUALITY__INT_:
		{
			int qual = inv->getSignedIntParameter();
			
			setWaterQuality(qual);
			
		}
		break;
	case RPC_SETPLANTHEALTH__INT_:
		{
			int hp = inv->getSignedIntParameter();
			
			setPlantHealth(hp);
			
		}
		break;
	case RPC_SETFRUIT__INT_:
		{
			int count = inv->getSignedIntParameter();
			
			setFruit(count);
			
		}
		break;
	case RPC_ISPLANTOBJECT__:
		{
			
			bool _m_res = isPlantObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETGROWTHRATE__INT_:
		{
			int rate = inv->getSignedIntParameter();
			
			setGrowthRate(rate);
			
		}
		break;
	case RPC_SETGROWTH__INT_:
		{
			int gr = inv->getSignedIntParameter();
			
			setGrowth(gr);
			
		}
		break;
	case RPC_STARTPULSE__:
		{
			
			startPulse();
			
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

void PlantObjectAdapter::initializeTransientMembers() {
	(static_cast<PlantObject*>(stub))->initializeTransientMembers();
}

int PlantObjectAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<PlantObject*>(stub))->handleObjectMenuSelect(player, selectedID);
}

void PlantObjectAdapter::initializePlant(int size) {
	(static_cast<PlantObject*>(stub))->initializePlant(size);
}

void PlantObjectAdapter::sendResourceSUI(CreatureObject* player, int type) {
	(static_cast<PlantObject*>(stub))->sendResourceSUI(player, type);
}

int PlantObjectAdapter::getCriticalAttribute(int index) {
	return (static_cast<PlantObject*>(stub))->getCriticalAttribute(index);
}

void PlantObjectAdapter::changeSize(int size) {
	(static_cast<PlantObject*>(stub))->changeSize(size);
}

void PlantObjectAdapter::updateLastPulse() {
	(static_cast<PlantObject*>(stub))->updateLastPulse();
}

int PlantObjectAdapter::getWaterLevel() const {
	return (static_cast<PlantObject*>(stub))->getWaterLevel();
}

int PlantObjectAdapter::getIdealWaterLevel() const {
	return (static_cast<PlantObject*>(stub))->getIdealWaterLevel();
}

int PlantObjectAdapter::getIdealNutrientLevel() const {
	return (static_cast<PlantObject*>(stub))->getIdealNutrientLevel();
}

int PlantObjectAdapter::getNutrientLevel() const {
	return (static_cast<PlantObject*>(stub))->getNutrientLevel();
}

int PlantObjectAdapter::getNutrientQuality() const {
	return (static_cast<PlantObject*>(stub))->getNutrientQuality();
}

int PlantObjectAdapter::getWaterQuality() const {
	return (static_cast<PlantObject*>(stub))->getWaterQuality();
}

int PlantObjectAdapter::getPlantHealth() const {
	return (static_cast<PlantObject*>(stub))->getPlantHealth();
}

int PlantObjectAdapter::getGrowth() const {
	return (static_cast<PlantObject*>(stub))->getGrowth();
}

int PlantObjectAdapter::getSize() const {
	return (static_cast<PlantObject*>(stub))->getSize();
}

int PlantObjectAdapter::getFruit() const {
	return (static_cast<PlantObject*>(stub))->getFruit();
}

int PlantObjectAdapter::getCriticalAttributeOne() const {
	return (static_cast<PlantObject*>(stub))->getCriticalAttributeOne();
}

int PlantObjectAdapter::getCriticalAttributeTwo() const {
	return (static_cast<PlantObject*>(stub))->getCriticalAttributeTwo();
}

void PlantObjectAdapter::setNutrientLevel(int level) {
	(static_cast<PlantObject*>(stub))->setNutrientLevel(level);
}

void PlantObjectAdapter::setNutrientQuality(int qual) {
	(static_cast<PlantObject*>(stub))->setNutrientQuality(qual);
}

void PlantObjectAdapter::setWaterLevel(int level) {
	(static_cast<PlantObject*>(stub))->setWaterLevel(level);
}

void PlantObjectAdapter::setWaterQuality(int qual) {
	(static_cast<PlantObject*>(stub))->setWaterQuality(qual);
}

void PlantObjectAdapter::setPlantHealth(int hp) {
	(static_cast<PlantObject*>(stub))->setPlantHealth(hp);
}

void PlantObjectAdapter::setFruit(int count) {
	(static_cast<PlantObject*>(stub))->setFruit(count);
}

bool PlantObjectAdapter::isPlantObject() {
	return (static_cast<PlantObject*>(stub))->isPlantObject();
}

void PlantObjectAdapter::setGrowthRate(int rate) {
	(static_cast<PlantObject*>(stub))->setGrowthRate(rate);
}

void PlantObjectAdapter::setGrowth(int gr) {
	(static_cast<PlantObject*>(stub))->setGrowth(gr);
}

void PlantObjectAdapter::startPulse() {
	(static_cast<PlantObject*>(stub))->startPulse();
}

/*
 *	PlantObjectHelper
 */

PlantObjectHelper* PlantObjectHelper::staticInitializer = PlantObjectHelper::instance();

PlantObjectHelper::PlantObjectHelper() {
	className = "PlantObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlantObjectHelper::finalizeHelper() {
	PlantObjectHelper::finalize();
}

DistributedObject* PlantObjectHelper::instantiateObject() {
	return new PlantObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlantObjectHelper::instantiateServant() {
	return new PlantObjectImplementation();
}

DistributedObjectAdapter* PlantObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlantObjectAdapter(static_cast<PlantObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

