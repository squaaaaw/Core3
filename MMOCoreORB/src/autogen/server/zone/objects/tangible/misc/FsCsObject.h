/*
 *	autogen/server/zone/objects/tangible/misc/FsCsObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef FSCSOBJECT_H_
#define FSCSOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/lua/Luna.h"

#include "system/lang/System.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/lang/String.h"

#include "system/lang/Time.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace fscsobject {

class FsCsObject : public TangibleObject {
public:
	FsCsObject();

	void initializeTransientMembers();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	int getDecayPercent();

	unsigned long long getPhaseDuration();

	void setPhaseDuration(unsigned long long dur);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	FsCsObject(DummyConstructorParameter* param);

	virtual ~FsCsObject();

	friend class FsCsObjectHelper;
};

} // namespace fscsobject
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::fscsobject;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace fscsobject {

class FsCsObjectImplementation : public TangibleObjectImplementation {
protected:
	Time createdTime;

	int phaseDuration;

	unsigned long long newPhaseDuration;

public:
	FsCsObjectImplementation();

	FsCsObjectImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	int getDecayPercent();

	unsigned long long getPhaseDuration();

	void setPhaseDuration(unsigned long long dur);

	WeakReference<FsCsObject*> _this;

	operator const FsCsObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~FsCsObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class FsCsObject;
};

class FsCsObjectAdapter : public TangibleObjectAdapter {
public:
	FsCsObjectAdapter(FsCsObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int getDecayPercent();

	unsigned long long getPhaseDuration();

	void setPhaseDuration(unsigned long long dur);

};

class FsCsObjectHelper : public DistributedObjectClassHelper, public Singleton<FsCsObjectHelper> {
	static FsCsObjectHelper* staticInitializer;

public:
	FsCsObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FsCsObjectHelper>;
};

class LuaFsCsObject {
public:
	static const char className[];
	static Luna<LuaFsCsObject>::RegType Register[];

	LuaFsCsObject(lua_State *L);
	virtual ~LuaFsCsObject();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int initializeTransientMembers(lua_State *L);
	int fillAttributeList(lua_State *L);
	int getDecayPercent(lua_State *L);
	int getPhaseDuration(lua_State *L);
	int setPhaseDuration(lua_State *L);

	Reference<FsCsObject*> realObject;
};

} // namespace fscsobject
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::fscsobject;

#endif /*FSCSOBJECT_H_*/
