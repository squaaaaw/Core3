/*
 *	autogen/server/zone/objects/tangible/misc/FsCraftingComponentObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef FSCRAFTINGCOMPONENTOBJECT_H_
#define FSCRAFTINGCOMPONENTOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/lua/Luna.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace misc {

class FsCraftingComponentObject : public TangibleObject {
public:
	FsCraftingComponentObject();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void destroyObjectFromWorld(bool sendSelfDestroy);

	int getStatus();

	void setStatus(int st);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	FsCraftingComponentObject(DummyConstructorParameter* param);

	virtual ~FsCraftingComponentObject();

	friend class FsCraftingComponentObjectHelper;
};

} // namespace misc
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::misc;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace misc {

class FsCraftingComponentObjectImplementation : public TangibleObjectImplementation {
protected:
	int status;

public:
	FsCraftingComponentObjectImplementation();

	FsCraftingComponentObjectImplementation(DummyConstructorParameter* param);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void destroyObjectFromWorld(bool sendSelfDestroy);

	int getStatus();

	void setStatus(int st);

	WeakReference<FsCraftingComponentObject*> _this;

	operator const FsCraftingComponentObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~FsCraftingComponentObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class FsCraftingComponentObject;
};

class FsCraftingComponentObjectAdapter : public TangibleObjectAdapter {
public:
	FsCraftingComponentObjectAdapter(FsCraftingComponentObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void destroyObjectFromWorld(bool sendSelfDestroy);

	int getStatus();

	void setStatus(int st);

};

class FsCraftingComponentObjectHelper : public DistributedObjectClassHelper, public Singleton<FsCraftingComponentObjectHelper> {
	static FsCraftingComponentObjectHelper* staticInitializer;

public:
	FsCraftingComponentObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FsCraftingComponentObjectHelper>;
};

class LuaFsCraftingComponentObject {
public:
	static const char className[];
	static Luna<LuaFsCraftingComponentObject>::RegType Register[];

	LuaFsCraftingComponentObject(lua_State *L);
	virtual ~LuaFsCraftingComponentObject();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int fillAttributeList(lua_State *L);
	int destroyObjectFromWorld(lua_State *L);
	int getStatus(lua_State *L);
	int setStatus(lua_State *L);

	Reference<FsCraftingComponentObject*> realObject;
};

} // namespace misc
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::misc;

#endif /*FSCRAFTINGCOMPONENTOBJECT_H_*/
