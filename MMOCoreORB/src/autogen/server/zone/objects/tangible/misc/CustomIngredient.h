/*
 *	autogen/server/zone/objects/tangible/misc/CustomIngredient.h generated by engine3 IDL compiler 0.60
 */

#ifndef CUSTOMINGREDIENT_H_
#define CUSTOMINGREDIENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/lua/Luna.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace misc {

class CustomIngredient : public TangibleObject {
public:
	CustomIngredient();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void addAttribute(const String& attribute, int value);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void clearAttributes();

	int getAttributeAndValue(String& attribute, int index);

	int getAttributeValue(int index);

	int getResourceValue(int average);

	int getValueOf(int index);

	int getValueOf(const String& attribute);

	bool isCustomIngredient();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CustomIngredient(DummyConstructorParameter* param);

	virtual ~CustomIngredient();

	friend class CustomIngredientHelper;
};

} // namespace misc
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::misc;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace misc {

class CustomIngredientImplementation : public TangibleObjectImplementation {
protected:
	VectorMap<String, int> objectAttributes;

private:
	bool isBaseIngredient;

public:
	CustomIngredientImplementation();

	CustomIngredientImplementation(DummyConstructorParameter* param);

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void addAttribute(const String& attribute, int value);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void clearAttributes();

	int getAttributeAndValue(String& attribute, int index);

	int getAttributeValue(int index);

	int getResourceValue(int average);

	int getValueOf(int index);

	int getValueOf(const String& attribute);

	bool isCustomIngredient();

	WeakReference<CustomIngredient*> _this;

	operator const CustomIngredient*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CustomIngredientImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CustomIngredient;
};

class CustomIngredientAdapter : public TangibleObjectAdapter {
public:
	CustomIngredientAdapter(CustomIngredient* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void addAttribute(const String& attribute, int value);

	void clearAttributes();

	int getAttributeValue(int index);

	int getResourceValue(int average);

	int getValueOf(int index);

	int getValueOf(const String& attribute);

	bool isCustomIngredient();

};

class CustomIngredientHelper : public DistributedObjectClassHelper, public Singleton<CustomIngredientHelper> {
	static CustomIngredientHelper* staticInitializer;

public:
	CustomIngredientHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CustomIngredientHelper>;
};

class LuaCustomIngredient {
public:
	static const char className[];
	static Luna<LuaCustomIngredient>::RegType Register[];

	LuaCustomIngredient(lua_State *L);
	virtual ~LuaCustomIngredient();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int loadTemplateData(lua_State *L);
	int fillAttributeList(lua_State *L);
	int addAttribute(lua_State *L);
	int updateCraftingValues(lua_State *L);
	int clearAttributes(lua_State *L);
	int getAttributeAndValue(lua_State *L);
	int getAttributeValue(lua_State *L);
	int getResourceValue(lua_State *L);
	int getValueOf(lua_State *L);
	int isCustomIngredient(lua_State *L);

	Reference<CustomIngredient*> realObject;
};

} // namespace misc
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::misc;

#endif /*CUSTOMINGREDIENT_H_*/
