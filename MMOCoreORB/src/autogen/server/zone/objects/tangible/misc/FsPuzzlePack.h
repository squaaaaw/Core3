/*
 *	autogen/server/zone/objects/tangible/misc/FsPuzzlePack.h generated by engine3 IDL compiler 0.60
 */

#ifndef FSPUZZLEPACK_H_
#define FSPUZZLEPACK_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/lua/Luna.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/lang/String.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace fspuzzlepack {

class FsPuzzlePack : public TangibleObject {
public:
	FsPuzzlePack();

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	int getCureSymptomOne();

	int getCureSymptomTwo();

	int getGiveSymptomOne();

	bool isFsPuzzlePack();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	FsPuzzlePack(DummyConstructorParameter* param);

	virtual ~FsPuzzlePack();

	friend class FsPuzzlePackHelper;
};

} // namespace fspuzzlepack
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::fspuzzlepack;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace fspuzzlepack {

class FsPuzzlePackImplementation : public TangibleObjectImplementation {
protected:
	int cureSymptomOne;

	int cureSymptomTwo;

	int giveSymptomOne;

public:
	FsPuzzlePackImplementation();

	FsPuzzlePackImplementation(DummyConstructorParameter* param);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	int getCureSymptomOne();

	int getCureSymptomTwo();

	int getGiveSymptomOne();

	bool isFsPuzzlePack();

	WeakReference<FsPuzzlePack*> _this;

	operator const FsPuzzlePack*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~FsPuzzlePackImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class FsPuzzlePack;
};

class FsPuzzlePackAdapter : public TangibleObjectAdapter {
public:
	FsPuzzlePackAdapter(FsPuzzlePack* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	int getCureSymptomOne();

	int getCureSymptomTwo();

	int getGiveSymptomOne();

	bool isFsPuzzlePack();

};

class FsPuzzlePackHelper : public DistributedObjectClassHelper, public Singleton<FsPuzzlePackHelper> {
	static FsPuzzlePackHelper* staticInitializer;

public:
	FsPuzzlePackHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FsPuzzlePackHelper>;
};

class LuaFsPuzzlePack {
public:
	static const char className[];
	static Luna<LuaFsPuzzlePack>::RegType Register[];

	LuaFsPuzzlePack(lua_State *L);
	virtual ~LuaFsPuzzlePack();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int updateCraftingValues(lua_State *L);
	int fillAttributeList(lua_State *L);
	int handleObjectMenuSelect(lua_State *L);
	int getCureSymptomOne(lua_State *L);
	int getCureSymptomTwo(lua_State *L);
	int getGiveSymptomOne(lua_State *L);
	int isFsPuzzlePack(lua_State *L);

	Reference<FsPuzzlePack*> realObject;
};

} // namespace fspuzzlepack
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::fspuzzlepack;

#endif /*FSPUZZLEPACK_H_*/
