/*
 *	autogen/server/zone/objects/tangible/misc/FsCraftingComponentObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "FsCraftingComponentObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	FsCraftingComponentObjectStub
 */

enum {RPC_DESTROYOBJECTFROMWORLD__BOOL_,RPC_GETSTATUS__,RPC_SETSTATUS__INT_};

FsCraftingComponentObject::FsCraftingComponentObject() : TangibleObject(DummyConstructorParameter::instance()) {
	FsCraftingComponentObjectImplementation* _implementation = new FsCraftingComponentObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FsCraftingComponentObject");
}

FsCraftingComponentObject::FsCraftingComponentObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("FsCraftingComponentObject");
}

FsCraftingComponentObject::~FsCraftingComponentObject() {
}



void FsCraftingComponentObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	FsCraftingComponentObjectImplementation* _implementation = static_cast<FsCraftingComponentObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void FsCraftingComponentObject::destroyObjectFromWorld(bool sendSelfDestroy) {
	FsCraftingComponentObjectImplementation* _implementation = static_cast<FsCraftingComponentObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMWORLD__BOOL_);
		method.addBooleanParameter(sendSelfDestroy);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->destroyObjectFromWorld(sendSelfDestroy);
	}
}

int FsCraftingComponentObject::getStatus() {
	FsCraftingComponentObjectImplementation* _implementation = static_cast<FsCraftingComponentObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTATUS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getStatus();
	}
}

void FsCraftingComponentObject::setStatus(int st) {
	FsCraftingComponentObjectImplementation* _implementation = static_cast<FsCraftingComponentObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTATUS__INT_);
		method.addSignedIntParameter(st);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStatus(st);
	}
}

DistributedObjectServant* FsCraftingComponentObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FsCraftingComponentObject::_getImplementationForRead() const {
	return _impl;
}

void FsCraftingComponentObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FsCraftingComponentObjectImplementation
 */

FsCraftingComponentObjectImplementation::FsCraftingComponentObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


FsCraftingComponentObjectImplementation::~FsCraftingComponentObjectImplementation() {
}


void FsCraftingComponentObjectImplementation::finalize() {
}

void FsCraftingComponentObjectImplementation::_initializeImplementation() {
	_setClassHelper(FsCraftingComponentObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FsCraftingComponentObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FsCraftingComponentObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FsCraftingComponentObjectImplementation::_getStub() {
	return _this.get();
}

FsCraftingComponentObjectImplementation::operator const FsCraftingComponentObject*() {
	return _this.get();
}

void FsCraftingComponentObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FsCraftingComponentObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FsCraftingComponentObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FsCraftingComponentObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FsCraftingComponentObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FsCraftingComponentObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FsCraftingComponentObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FsCraftingComponentObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("FsCraftingComponentObject");

}

void FsCraftingComponentObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FsCraftingComponentObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FsCraftingComponentObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x72fda3bb: //FsCraftingComponentObject.status
		TypeInfo<int >::parseFromBinaryStream(&status, stream);
		return true;

	}

	return false;
}

void FsCraftingComponentObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FsCraftingComponentObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FsCraftingComponentObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x72fda3bb; //FsCraftingComponentObject.status
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&status, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

FsCraftingComponentObjectImplementation::FsCraftingComponentObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  		setLoggingName("FsCraftingComponentObject");
	setLoggingName("FsCraftingComponentObject");
	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  		status = 0;
	status = 0;
}

void FsCraftingComponentObjectImplementation::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  			msg.insertAttribute("status", "@quest/force_sensitive/fs_crafting:phase1_status_not_calibrated");
	if (status == 1)	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  			msg.insertAttribute("status", "@quest/force_sensitive/fs_crafting:phase1_status_operational");
	msg->insertAttribute("status", "@quest/force_sensitive/fs_crafting:phase1_status_operational");

	else 	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  			msg.insertAttribute("status", "@quest/force_sensitive/fs_crafting:phase1_status_not_calibrated");
	if (status == -1)	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  			msg.insertAttribute("status", "@quest/force_sensitive/fs_crafting:phase1_status_damaged");
	msg->insertAttribute("status", "@quest/force_sensitive/fs_crafting:phase1_status_damaged");

	else 	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  			msg.insertAttribute("status", "@quest/force_sensitive/fs_crafting:phase1_status_not_calibrated");
	msg->insertAttribute("status", "@quest/force_sensitive/fs_crafting:phase1_status_not_calibrated");
}

int FsCraftingComponentObjectImplementation::getStatus() {
	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  		return status;
	return status;
}

void FsCraftingComponentObjectImplementation::setStatus(int st) {
	// server/zone/objects/tangible/misc/FsCraftingComponentObject.idl():  		status = st;
	status = st;
}

/*
 *	FsCraftingComponentObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FsCraftingComponentObjectAdapter::FsCraftingComponentObjectAdapter(FsCraftingComponentObject* obj) : TangibleObjectAdapter(obj) {
}

void FsCraftingComponentObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_DESTROYOBJECTFROMWORLD__BOOL_:
		{
			bool sendSelfDestroy = inv->getBooleanParameter();
			
			destroyObjectFromWorld(sendSelfDestroy);
			
		}
		break;
	case RPC_GETSTATUS__:
		{
			
			int _m_res = getStatus();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETSTATUS__INT_:
		{
			int st = inv->getSignedIntParameter();
			
			setStatus(st);
			
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

void FsCraftingComponentObjectAdapter::destroyObjectFromWorld(bool sendSelfDestroy) {
	(static_cast<FsCraftingComponentObject*>(stub))->destroyObjectFromWorld(sendSelfDestroy);
}

int FsCraftingComponentObjectAdapter::getStatus() {
	return (static_cast<FsCraftingComponentObject*>(stub))->getStatus();
}

void FsCraftingComponentObjectAdapter::setStatus(int st) {
	(static_cast<FsCraftingComponentObject*>(stub))->setStatus(st);
}

/*
 *	FsCraftingComponentObjectHelper
 */

FsCraftingComponentObjectHelper* FsCraftingComponentObjectHelper::staticInitializer = FsCraftingComponentObjectHelper::instance();

FsCraftingComponentObjectHelper::FsCraftingComponentObjectHelper() {
	className = "FsCraftingComponentObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void FsCraftingComponentObjectHelper::finalizeHelper() {
	FsCraftingComponentObjectHelper::finalize();
}

DistributedObject* FsCraftingComponentObjectHelper::instantiateObject() {
	return new FsCraftingComponentObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* FsCraftingComponentObjectHelper::instantiateServant() {
	return new FsCraftingComponentObjectImplementation();
}

DistributedObjectAdapter* FsCraftingComponentObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FsCraftingComponentObjectAdapter(static_cast<FsCraftingComponentObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaFsCraftingComponentObject::className[] = "LuaFsCraftingComponentObject";

Luna<LuaFsCraftingComponentObject>::RegType LuaFsCraftingComponentObject::Register[] = {
	{ "_setObject", &LuaFsCraftingComponentObject::_setObject },
	{ "_getObject", &LuaFsCraftingComponentObject::_getObject },
	{ "fillAttributeList", &LuaFsCraftingComponentObject::fillAttributeList },
	{ "destroyObjectFromWorld", &LuaFsCraftingComponentObject::destroyObjectFromWorld },
	{ "getStatus", &LuaFsCraftingComponentObject::getStatus },
	{ "setStatus", &LuaFsCraftingComponentObject::setStatus },
	{ 0, 0 }
};

LuaFsCraftingComponentObject::LuaFsCraftingComponentObject(lua_State *L) {
	realObject = static_cast<FsCraftingComponentObject*>(lua_touserdata(L, 1));
}

LuaFsCraftingComponentObject::~LuaFsCraftingComponentObject() {
}

int LuaFsCraftingComponentObject::_setObject(lua_State* L) {
	realObject = static_cast<FsCraftingComponentObject*>(lua_touserdata(L, -1));

	return 0;
}

int LuaFsCraftingComponentObject::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaFsCraftingComponentObject::fillAttributeList(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				AttributeListMessage* msg = static_cast<AttributeListMessage*>(lua_touserdata(L, -2));
				CreatureObject* object = static_cast<CreatureObject*>(lua_touserdata(L, -1));

				realObject->fillAttributeList(msg, object);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'FsCraftingComponentObject:fillAttributeList(userdata, userdata)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'FsCraftingComponentObject:fillAttributeList(userdata, userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'FsCraftingComponentObject:fillAttributeList(userdata, userdata)'");
	}
	return 0;
}

int LuaFsCraftingComponentObject::destroyObjectFromWorld(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isboolean(L, -1)) {
		if (parameterCount == 1) {
			bool sendSelfDestroy = lua_toboolean(L, -1);

			Locker _guard(realObject);

			realObject->destroyObjectFromWorld(sendSelfDestroy);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'FsCraftingComponentObject:destroyObjectFromWorld(boolean)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'FsCraftingComponentObject:destroyObjectFromWorld(boolean)'");
	}
	return 0;
}

int LuaFsCraftingComponentObject::getStatus(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getStatus();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'FsCraftingComponentObject:getStatus()'");
	}
	return 0;
}

int LuaFsCraftingComponentObject::setStatus(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int st = lua_tointeger(L, -1);

			realObject->setStatus(st);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'FsCraftingComponentObject:setStatus(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'FsCraftingComponentObject:setStatus(integer)'");
	}
	return 0;
}

