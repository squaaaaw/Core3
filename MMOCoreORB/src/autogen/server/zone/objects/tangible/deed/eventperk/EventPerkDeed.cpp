/*
 *	autogen/server/zone/objects/tangible/deed/eventperk/EventPerkDeed.cpp generated by engine3 IDL compiler 0.60
 */

#include "EventPerkDeed.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/tasks/RemoveEventPerkDeedTask.h"

/*
 *	EventPerkDeedStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 716999798,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_ACTIVATEREMOVEEVENT__BOOL_,RPC_GETDURATIONSTRING__,RPC_PARSECHILDOBJECTS__SCENEOBJECT_,RPC_SETOWNER__CREATUREOBJECT_,RPC_GETOWNER__,RPC_GETGENERATEDOBJECT__,RPC_GETPERKTYPE__,RPC_ISEVENTPERKDEED__};

EventPerkDeed::EventPerkDeed() : Deed(DummyConstructorParameter::instance()) {
	EventPerkDeedImplementation* _implementation = new EventPerkDeedImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("EventPerkDeed");
}

EventPerkDeed::EventPerkDeed(DummyConstructorParameter* param) : Deed(param) {
	_setClassName("EventPerkDeed");
}

EventPerkDeed::~EventPerkDeed() {
}



void EventPerkDeed::initializeTransientMembers() {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void EventPerkDeed::loadTemplateData(SharedObjectTemplate* templateData) {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void EventPerkDeed::fillAttributeList(AttributeListMessage* alm, CreatureObject* object) {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(alm, object);
	}
}

void EventPerkDeed::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

int EventPerkDeed::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void EventPerkDeed::destroyObjectFromDatabase(bool destroyContainedObjects) {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
	}
}

void EventPerkDeed::activateRemoveEvent(bool immediate) {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATEREMOVEEVENT__BOOL_);
		method.addBooleanParameter(immediate);

		method.executeWithVoidReturn();
	} else {
		_implementation->activateRemoveEvent(immediate);
	}
}

String EventPerkDeed::getDurationString() {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDURATIONSTRING__);

		String _return_getDurationString;
		method.executeWithAsciiReturn(_return_getDurationString);
		return _return_getDurationString;
	} else {
		return _implementation->getDurationString();
	}
}

void EventPerkDeed::parseChildObjects(SceneObject* parent) {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PARSECHILDOBJECTS__SCENEOBJECT_);
		method.addObjectParameter(parent);

		method.executeWithVoidReturn();
	} else {
		_implementation->parseChildObjects(parent);
	}
}

void EventPerkDeed::setOwner(CreatureObject* player) {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOwner(player);
	}
}

ManagedWeakReference<CreatureObject* > EventPerkDeed::getOwner() const {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getOwner();
	}
}

ManagedWeakReference<TangibleObject* > EventPerkDeed::getGeneratedObject() const {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGENERATEDOBJECT__);

		return static_cast<TangibleObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getGeneratedObject();
	}
}

int EventPerkDeed::getPerkType() const {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPERKTYPE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPerkType();
	}
}

Time* EventPerkDeed::getPurchaseTime() {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPurchaseTime();
	}
}

bool EventPerkDeed::isEventPerkDeed() {
	EventPerkDeedImplementation* _implementation = static_cast<EventPerkDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISEVENTPERKDEED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isEventPerkDeed();
	}
}

DistributedObjectServant* EventPerkDeed::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* EventPerkDeed::_getImplementationForRead() const {
	return _impl;
}

void EventPerkDeed::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	EventPerkDeedImplementation
 */

EventPerkDeedImplementation::EventPerkDeedImplementation(DummyConstructorParameter* param) : DeedImplementation(param) {
	_initializeImplementation();
}


EventPerkDeedImplementation::~EventPerkDeedImplementation() {
}


void EventPerkDeedImplementation::finalize() {
}

void EventPerkDeedImplementation::_initializeImplementation() {
	_setClassHelper(EventPerkDeedHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void EventPerkDeedImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<EventPerkDeed*>(stub);
	DeedImplementation::_setStub(stub);
}

DistributedObjectStub* EventPerkDeedImplementation::_getStub() {
	return _this.get();
}

EventPerkDeedImplementation::operator const EventPerkDeed*() {
	return _this.get();
}

void EventPerkDeedImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void EventPerkDeedImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void EventPerkDeedImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void EventPerkDeedImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void EventPerkDeedImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void EventPerkDeedImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void EventPerkDeedImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void EventPerkDeedImplementation::_serializationHelperMethod() {
	DeedImplementation::_serializationHelperMethod();

	_setClassName("EventPerkDeed");

}

void EventPerkDeedImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(EventPerkDeedImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool EventPerkDeedImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (DeedImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xb82f1fbb: //EventPerkDeed.perkType
		TypeInfo<int >::parseFromBinaryStream(&perkType, stream);
		return true;

	case 0x6c2d2833: //EventPerkDeed.generatedTimeToLive
		TypeInfo<unsigned long long >::parseFromBinaryStream(&generatedTimeToLive, stream);
		return true;

	case 0x76c77ef4: //EventPerkDeed.purchaseTime
		TypeInfo<Time >::parseFromBinaryStream(&purchaseTime, stream);
		return true;

	case 0x58a09b4: //EventPerkDeed.owner
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&owner, stream);
		return true;

	case 0xbc6e1f20: //EventPerkDeed.generatedObject
		TypeInfo<ManagedWeakReference<TangibleObject* > >::parseFromBinaryStream(&generatedObject, stream);
		return true;

	}

	return false;
}

void EventPerkDeedImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = EventPerkDeedImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int EventPerkDeedImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = DeedImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xb82f1fbb; //EventPerkDeed.perkType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&perkType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6c2d2833; //EventPerkDeed.generatedTimeToLive
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&generatedTimeToLive, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x76c77ef4; //EventPerkDeed.purchaseTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&purchaseTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x58a09b4; //EventPerkDeed.owner
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&owner, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbc6e1f20; //EventPerkDeed.generatedObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<TangibleObject* > >::toBinaryStream(&generatedObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 5;
}

EventPerkDeedImplementation::EventPerkDeedImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		Logger.setLoggingName("EventPerkDeed");
	Logger::setLoggingName("EventPerkDeed");
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		perkType = 0;
	perkType = 0;
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		generatedTimeToLive = 0;
	generatedTimeToLive = 0;
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		purchaseTime.updateToCurrentTime();
	(&purchaseTime)->updateToCurrentTime();
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		owner = null;
	owner = NULL;
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		generatedObject = null;
	generatedObject = NULL;
}

void EventPerkDeedImplementation::setOwner(CreatureObject* player) {
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		owner = player;
	owner = player;
}

ManagedWeakReference<CreatureObject* > EventPerkDeedImplementation::getOwner() const{
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		return owner;
	return owner;
}

ManagedWeakReference<TangibleObject* > EventPerkDeedImplementation::getGeneratedObject() const{
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		return generatedObject;
	return generatedObject;
}

int EventPerkDeedImplementation::getPerkType() const{
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		return perkType;
	return perkType;
}

Time* EventPerkDeedImplementation::getPurchaseTime() {
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		return purchaseTime;
	return (&purchaseTime);
}

bool EventPerkDeedImplementation::isEventPerkDeed() {
	// server/zone/objects/tangible/deed/eventperk/EventPerkDeed.idl():  		return true;
	return true;
}

/*
 *	EventPerkDeedAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


EventPerkDeedAdapter::EventPerkDeedAdapter(EventPerkDeed* obj) : DeedAdapter(obj) {
}

void EventPerkDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		{
			bool destroyContainedObjects = inv->getBooleanParameter();
			
			destroyObjectFromDatabase(destroyContainedObjects);
			
		}
		break;
	case RPC_ACTIVATEREMOVEEVENT__BOOL_:
		{
			bool immediate = inv->getBooleanParameter();
			
			activateRemoveEvent(immediate);
			
		}
		break;
	case RPC_GETDURATIONSTRING__:
		{
			
			String _m_res = getDurationString();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_PARSECHILDOBJECTS__SCENEOBJECT_:
		{
			SceneObject* parent = static_cast<SceneObject*>(inv->getObjectParameter());
			
			parseChildObjects(parent);
			
		}
		break;
	case RPC_SETOWNER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			setOwner(player);
			
		}
		break;
	case RPC_GETOWNER__:
		{
			
			DistributedObject* _m_res = getOwner().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETGENERATEDOBJECT__:
		{
			
			DistributedObject* _m_res = getGeneratedObject().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETPERKTYPE__:
		{
			
			int _m_res = getPerkType();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISEVENTPERKDEED__:
		{
			
			bool _m_res = isEventPerkDeed();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		DeedAdapter::invokeMethod(methid, inv);
	}
}

void EventPerkDeedAdapter::initializeTransientMembers() {
	(static_cast<EventPerkDeed*>(stub))->initializeTransientMembers();
}

int EventPerkDeedAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<EventPerkDeed*>(stub))->handleObjectMenuSelect(player, selectedID);
}

void EventPerkDeedAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<EventPerkDeed*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

void EventPerkDeedAdapter::activateRemoveEvent(bool immediate) {
	(static_cast<EventPerkDeed*>(stub))->activateRemoveEvent(immediate);
}

String EventPerkDeedAdapter::getDurationString() {
	return (static_cast<EventPerkDeed*>(stub))->getDurationString();
}

void EventPerkDeedAdapter::parseChildObjects(SceneObject* parent) {
	(static_cast<EventPerkDeed*>(stub))->parseChildObjects(parent);
}

void EventPerkDeedAdapter::setOwner(CreatureObject* player) {
	(static_cast<EventPerkDeed*>(stub))->setOwner(player);
}

ManagedWeakReference<CreatureObject* > EventPerkDeedAdapter::getOwner() const {
	return (static_cast<EventPerkDeed*>(stub))->getOwner();
}

ManagedWeakReference<TangibleObject* > EventPerkDeedAdapter::getGeneratedObject() const {
	return (static_cast<EventPerkDeed*>(stub))->getGeneratedObject();
}

int EventPerkDeedAdapter::getPerkType() const {
	return (static_cast<EventPerkDeed*>(stub))->getPerkType();
}

bool EventPerkDeedAdapter::isEventPerkDeed() {
	return (static_cast<EventPerkDeed*>(stub))->isEventPerkDeed();
}

/*
 *	EventPerkDeedHelper
 */

EventPerkDeedHelper* EventPerkDeedHelper::staticInitializer = EventPerkDeedHelper::instance();

EventPerkDeedHelper::EventPerkDeedHelper() {
	className = "EventPerkDeed";

	Core::getObjectBroker()->registerClass(className, this);
}

void EventPerkDeedHelper::finalizeHelper() {
	EventPerkDeedHelper::finalize();
}

DistributedObject* EventPerkDeedHelper::instantiateObject() {
	return new EventPerkDeed(DummyConstructorParameter::instance());
}

DistributedObjectServant* EventPerkDeedHelper::instantiateServant() {
	return new EventPerkDeedImplementation();
}

DistributedObjectAdapter* EventPerkDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new EventPerkDeedAdapter(static_cast<EventPerkDeed*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

