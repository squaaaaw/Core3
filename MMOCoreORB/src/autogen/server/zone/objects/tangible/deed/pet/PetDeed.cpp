/*
 *	autogen/server/zone/objects/tangible/deed/pet/PetDeed.cpp generated by engine3 IDL compiler 0.60
 */

#include "PetDeed.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	PetDeedStub
 */

enum {RPC_SETSPECIALRESIST__INT_ = 3403443374,RPC_ISSPECIALRESIST__INT_,RPC_GETSAMPLECOUNT__,RPC_INCREMENTSAMPLECOUNT__,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_GETQUALITY__,RPC_GETLEVEL__,RPC_GETATTACKSPEED__,RPC_GETHITCHANCE__,RPC_GETHEALTH__,RPC_GETACTION__,RPC_GETMIND__,RPC_GETMINDAMAGE__,RPC_GETMAXDAMAGE__,RPC_GETKINETIC__,RPC_GETENERGY__,RPC_GETBLAST__,RPC_GETCOLD__,RPC_GETHEAT__,RPC_GETELECTRIC__,RPC_GETACID__,RPC_GETSTUN__,RPC_GETSABER__,RPC_GETRANGED__,RPC_GETARMOR__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_ISPETDEEDOBJECT__,RPC_GETSPECIAL1__,RPC_GETSPECIAL2__,RPC_GETCLEVERNESS__,RPC_GETENDURANCE__,RPC_GETFIERCENESS__,RPC_GETPOWER__,RPC_GETINTELLIGENCE__,RPC_GETCOURAGE__,RPC_GETDEPENDENCY__,RPC_GETDEXTERITY__,RPC_GETFORTITUDE__,RPC_GETHARDINESS__,};

PetDeed::PetDeed() : Deed(DummyConstructorParameter::instance()) {
	PetDeedImplementation* _implementation = new PetDeedImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PetDeed");
}

PetDeed::PetDeed(DummyConstructorParameter* param) : Deed(param) {
	_setClassName("PetDeed");
}

PetDeed::~PetDeed() {
}



void PetDeed::setSpecialResist(int type) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALRESIST__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSpecialResist(type);
	}
}

bool PetDeed::isSpecialResist(int type) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSPECIALRESIST__INT_);
		method.addSignedIntParameter(type);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSpecialResist(type);
	}
}

int PetDeed::getSampleCount() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSAMPLECOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSampleCount();
	}
}

void PetDeed::incrementSampleCount() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INCREMENTSAMPLECOUNT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->incrementSampleCount();
	}
}

void PetDeed::initializeTransientMembers() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

CreatureAttackMap* PetDeed::getAttacks() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getAttacks();
	}
}

int PetDeed::getQuality() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETQUALITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getQuality();
	}
}

int PetDeed::getLevel() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getLevel();
	}
}

float PetDeed::getAttackSpeed() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETATTACKSPEED__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getAttackSpeed();
	}
}

float PetDeed::getHitChance() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHITCHANCE__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getHitChance();
	}
}

int PetDeed::getHealth() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHEALTH__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getHealth();
	}
}

int PetDeed::getAction() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getAction();
	}
}

int PetDeed::getMind() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMIND__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMind();
	}
}

int PetDeed::getMinDamage() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMINDAMAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMinDamage();
	}
}

int PetDeed::getMaxDamage() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXDAMAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMaxDamage();
	}
}

float PetDeed::getKinetic() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETKINETIC__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getKinetic();
	}
}

float PetDeed::getEnergy() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENERGY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getEnergy();
	}
}

float PetDeed::getBlast() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBLAST__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getBlast();
	}
}

float PetDeed::getCold() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOLD__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getCold();
	}
}

float PetDeed::getHeat() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHEAT__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getHeat();
	}
}

float PetDeed::getElectric() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETELECTRIC__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getElectric();
	}
}

float PetDeed::getAcid() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACID__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getAcid();
	}
}

float PetDeed::getStun() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTUN__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getStun();
	}
}

float PetDeed::getSaber() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSABER__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getSaber();
	}
}

bool PetDeed::getRanged() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANGED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->getRanged();
	}
}

int PetDeed::getArmor() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARMOR__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getArmor();
	}
}

void PetDeed::loadTemplateData(SharedObjectTemplate* templateData) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void PetDeed::fillAttributeList(AttributeListMessage* alm, CreatureObject* object) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(alm, object);
	}
}

void PetDeed::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

int PetDeed::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void PetDeed::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

bool PetDeed::isPetDeedObject() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPETDEEDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPetDeedObject();
	}
}

String PetDeed::getSpecial1() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIAL1__);

		String _return_getSpecial1;
		method.executeWithAsciiReturn(_return_getSpecial1);
		return _return_getSpecial1;
	} else {
		return _implementation->getSpecial1();
	}
}

String PetDeed::getSpecial2() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIAL2__);

		String _return_getSpecial2;
		method.executeWithAsciiReturn(_return_getSpecial2);
		return _return_getSpecial2;
	} else {
		return _implementation->getSpecial2();
	}
}

int PetDeed::getCleverness() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLEVERNESS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCleverness();
	}
}

int PetDeed::getEndurance() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDURANCE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getEndurance();
	}
}

int PetDeed::getFierceness() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFIERCENESS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFierceness();
	}
}

int PetDeed::getPower() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOWER__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPower();
	}
}

int PetDeed::getIntelligence() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINTELLIGENCE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getIntelligence();
	}
}

int PetDeed::getCourage() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOURAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCourage();
	}
}

int PetDeed::getDependency() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEPENDENCY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDependency();
	}
}

int PetDeed::getDexterity() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEXTERITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDexterity();
	}
}

int PetDeed::getFortitude() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFORTITUDE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFortitude();
	}
}

int PetDeed::getHardiness() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHARDINESS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getHardiness();
	}
}

String PetDeed::getTemplateName() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getTemplateName();
	}
}

void PetDeed::setupAttacks() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setupAttacks();
	}
}

int PetDeed::calculatePetLevel() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->calculatePetLevel();
	}
}

void PetDeed::adjustPetLevel(CreatureObject* player, CreatureObject* pet) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->adjustPetLevel(player, pet);
	}
}

bool PetDeed::adjustPetStats(CreatureObject* player, CreatureObject* pet) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->adjustPetStats(player, pet);
	}
}

DistributedObjectServant* PetDeed::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PetDeed::_getImplementationForRead() const {
	return _impl;
}

void PetDeed::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PetDeedImplementation
 */

PetDeedImplementation::PetDeedImplementation(DummyConstructorParameter* param) : DeedImplementation(param) {
	_initializeImplementation();
}


PetDeedImplementation::~PetDeedImplementation() {
}


void PetDeedImplementation::finalize() {
}

void PetDeedImplementation::_initializeImplementation() {
	_setClassHelper(PetDeedHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PetDeedImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PetDeed*>(stub);
	DeedImplementation::_setStub(stub);
}

DistributedObjectStub* PetDeedImplementation::_getStub() {
	return _this.get();
}

PetDeedImplementation::operator const PetDeed*() {
	return _this.get();
}

void PetDeedImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PetDeedImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PetDeedImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PetDeedImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PetDeedImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PetDeedImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PetDeedImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PetDeedImplementation::_serializationHelperMethod() {
	DeedImplementation::_serializationHelperMethod();

	_setClassName("PetDeed");

}

void PetDeedImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PetDeedImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PetDeedImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (DeedImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x4b7dc854: //PetDeed.quality
		TypeInfo<int >::parseFromBinaryStream(&quality, stream);
		return true;

	case 0xfacef493: //PetDeed.level
		TypeInfo<int >::parseFromBinaryStream(&level, stream);
		return true;

	case 0xcc2fc84d: //PetDeed.chanceHit
		TypeInfo<float >::parseFromBinaryStream(&chanceHit, stream);
		return true;

	case 0x3f1c3cb0: //PetDeed.attackSpeed
		TypeInfo<float >::parseFromBinaryStream(&attackSpeed, stream);
		return true;

	case 0x36bbae6: //PetDeed.damageMin
		TypeInfo<int >::parseFromBinaryStream(&damageMin, stream);
		return true;

	case 0xdfb46f76: //PetDeed.damageMax
		TypeInfo<int >::parseFromBinaryStream(&damageMax, stream);
		return true;

	case 0x724b3bb5: //PetDeed.armor
		TypeInfo<int >::parseFromBinaryStream(&armor, stream);
		return true;

	case 0x6c400b95: //PetDeed.kinResist
		TypeInfo<float >::parseFromBinaryStream(&kinResist, stream);
		return true;

	case 0x74ad1e50: //PetDeed.energyResist
		TypeInfo<float >::parseFromBinaryStream(&energyResist, stream);
		return true;

	case 0xcc571853: //PetDeed.blastResist
		TypeInfo<float >::parseFromBinaryStream(&blastResist, stream);
		return true;

	case 0xacf0b4a4: //PetDeed.coldResist
		TypeInfo<float >::parseFromBinaryStream(&coldResist, stream);
		return true;

	case 0x539aeeb7: //PetDeed.heatResist
		TypeInfo<float >::parseFromBinaryStream(&heatResist, stream);
		return true;

	case 0xd758b406: //PetDeed.elecResist
		TypeInfo<float >::parseFromBinaryStream(&elecResist, stream);
		return true;

	case 0xd3f4d7fc: //PetDeed.acidResist
		TypeInfo<float >::parseFromBinaryStream(&acidResist, stream);
		return true;

	case 0xc857a962: //PetDeed.stunResist
		TypeInfo<float >::parseFromBinaryStream(&stunResist, stream);
		return true;

	case 0xce82cd9d: //PetDeed.saberResist
		TypeInfo<float >::parseFromBinaryStream(&saberResist, stream);
		return true;

	case 0x41ae256d: //PetDeed.health
		TypeInfo<int >::parseFromBinaryStream(&health, stream);
		return true;

	case 0x926a20e6: //PetDeed.action
		TypeInfo<int >::parseFromBinaryStream(&action, stream);
		return true;

	case 0x8d871551: //PetDeed.mind
		TypeInfo<int >::parseFromBinaryStream(&mind, stream);
		return true;

	case 0x9fcbee99: //PetDeed.regen
		TypeInfo<int >::parseFromBinaryStream(&regen, stream);
		return true;

	case 0x887f0773: //PetDeed.special1
		TypeInfo<String >::parseFromBinaryStream(&special1, stream);
		return true;

	case 0x853c21aa: //PetDeed.special2
		TypeInfo<String >::parseFromBinaryStream(&special2, stream);
		return true;

	case 0x268b2b92: //PetDeed.ranged
		TypeInfo<bool >::parseFromBinaryStream(&ranged, stream);
		return true;

	case 0x5fe2df88: //PetDeed.controlDeviceObjectTemplate
		TypeInfo<String >::parseFromBinaryStream(&controlDeviceObjectTemplate, stream);
		return true;

	case 0x876bd86e: //PetDeed.mobileTemplate
		TypeInfo<String >::parseFromBinaryStream(&mobileTemplate, stream);
		return true;

	case 0x17add007: //PetDeed.cleverness
		TypeInfo<int >::parseFromBinaryStream(&cleverness, stream);
		return true;

	case 0xeb9fff0d: //PetDeed.endurance
		TypeInfo<int >::parseFromBinaryStream(&endurance, stream);
		return true;

	case 0xb0e1584e: //PetDeed.fierceness
		TypeInfo<int >::parseFromBinaryStream(&fierceness, stream);
		return true;

	case 0x2cb61934: //PetDeed.power
		TypeInfo<int >::parseFromBinaryStream(&power, stream);
		return true;

	case 0x4e108f9a: //PetDeed.intelligence
		TypeInfo<int >::parseFromBinaryStream(&intelligence, stream);
		return true;

	case 0x12a5e8ab: //PetDeed.courage
		TypeInfo<int >::parseFromBinaryStream(&courage, stream);
		return true;

	case 0x2105ac14: //PetDeed.dependency
		TypeInfo<int >::parseFromBinaryStream(&dependency, stream);
		return true;

	case 0x22d48997: //PetDeed.dexterity
		TypeInfo<int >::parseFromBinaryStream(&dexterity, stream);
		return true;

	case 0x90df2a88: //PetDeed.fortitude
		TypeInfo<int >::parseFromBinaryStream(&fortitude, stream);
		return true;

	case 0x5ab3092e: //PetDeed.hardiness
		TypeInfo<int >::parseFromBinaryStream(&hardiness, stream);
		return true;

	case 0x7c55a5ed: //PetDeed.sampleCount
		TypeInfo<int >::parseFromBinaryStream(&sampleCount, stream);
		return true;

	case 0x41917681: //PetDeed.specialResists
		TypeInfo<int >::parseFromBinaryStream(&specialResists, stream);
		return true;

	case 0x8a56db81: //PetDeed.attacks
		TypeInfo<CreatureAttackMap >::parseFromBinaryStream(&attacks, stream);
		return true;

	}

	return false;
}

void PetDeedImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PetDeedImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PetDeedImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = DeedImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x4b7dc854; //PetDeed.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfacef493; //PetDeed.level
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&level, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcc2fc84d; //PetDeed.chanceHit
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&chanceHit, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3f1c3cb0; //PetDeed.attackSpeed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&attackSpeed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x36bbae6; //PetDeed.damageMin
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&damageMin, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xdfb46f76; //PetDeed.damageMax
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&damageMax, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x724b3bb5; //PetDeed.armor
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&armor, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6c400b95; //PetDeed.kinResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&kinResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x74ad1e50; //PetDeed.energyResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&energyResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcc571853; //PetDeed.blastResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&blastResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xacf0b4a4; //PetDeed.coldResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&coldResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x539aeeb7; //PetDeed.heatResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&heatResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd758b406; //PetDeed.elecResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&elecResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd3f4d7fc; //PetDeed.acidResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&acidResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc857a962; //PetDeed.stunResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stunResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xce82cd9d; //PetDeed.saberResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&saberResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x41ae256d; //PetDeed.health
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&health, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x926a20e6; //PetDeed.action
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&action, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8d871551; //PetDeed.mind
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&mind, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9fcbee99; //PetDeed.regen
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&regen, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x887f0773; //PetDeed.special1
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special1, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x853c21aa; //PetDeed.special2
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special2, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x268b2b92; //PetDeed.ranged
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&ranged, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5fe2df88; //PetDeed.controlDeviceObjectTemplate
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&controlDeviceObjectTemplate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x876bd86e; //PetDeed.mobileTemplate
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&mobileTemplate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x17add007; //PetDeed.cleverness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&cleverness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xeb9fff0d; //PetDeed.endurance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&endurance, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb0e1584e; //PetDeed.fierceness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&fierceness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2cb61934; //PetDeed.power
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&power, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4e108f9a; //PetDeed.intelligence
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&intelligence, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x12a5e8ab; //PetDeed.courage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&courage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2105ac14; //PetDeed.dependency
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&dependency, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x22d48997; //PetDeed.dexterity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&dexterity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x90df2a88; //PetDeed.fortitude
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&fortitude, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5ab3092e; //PetDeed.hardiness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&hardiness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7c55a5ed; //PetDeed.sampleCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&sampleCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x41917681; //PetDeed.specialResists
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&specialResists, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8a56db81; //PetDeed.attacks
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<CreatureAttackMap >::toBinaryStream(&attacks, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 38;
}

PetDeedImplementation::PetDeedImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		Logger.setLoggingName("PetDeed");
	Logger::setLoggingName("PetDeed");
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		damageMin = 20;
	damageMin = 20;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		damageMax = 20;
	damageMax = 20;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		armor = 0;
	armor = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		kinResist = 0;
	kinResist = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		blastResist = 0;
	blastResist = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		coldResist = 0;
	coldResist = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		heatResist = 0;
	heatResist = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		elecResist = 0;
	elecResist = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		acidResist = 0;
	acidResist = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		stunResist = 0;
	stunResist = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		saberResist = -1;
	saberResist = -1;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		health = 10;
	health = 10;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		action = 10;
	action = 10;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		mind = 10;
	mind = 10;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		special1 = "none";
	special1 = "none";
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		special2 = "none";
	special2 = "none";
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		ranged = false;
	ranged = false;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		chanceHit = 0;
	chanceHit = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		attackSpeed = 0;
	attackSpeed = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		level = 1;
	level = 1;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		cleverness = 0;
	cleverness = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		endurance = 0;
	endurance = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		fierceness = 0;
	fierceness = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		power = 0;
	power = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		intelligence = 0;
	intelligence = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		courage = 0;
	courage = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		dependency = 0;
	dependency = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		dexterity = 0;
	dexterity = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		fortitude = 0;
	fortitude = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		hardiness = 0;
	hardiness = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		quality = 7;
	quality = 7;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		sampleCount = 0;
	sampleCount = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		specialResists = 0;
	specialResists = 0;
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		regen = 1;
	regen = 1;
}

int PetDeedImplementation::getSampleCount() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return sampleCount;
	return sampleCount;
}

void PetDeedImplementation::incrementSampleCount() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		sampleCount += 1;
	sampleCount += 1;
}

int PetDeedImplementation::getQuality() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return quality;
	return quality;
}

int PetDeedImplementation::getLevel() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return level;
	return level;
}

float PetDeedImplementation::getAttackSpeed() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return attackSpeed;
	return attackSpeed;
}

float PetDeedImplementation::getHitChance() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return chanceHit;
	return chanceHit;
}

int PetDeedImplementation::getHealth() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return health;
	return health;
}

int PetDeedImplementation::getAction() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return action;
	return action;
}

int PetDeedImplementation::getMind() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return mind;
	return mind;
}

int PetDeedImplementation::getMinDamage() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return damageMin;
	return damageMin;
}

int PetDeedImplementation::getMaxDamage() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return damageMax;
	return damageMax;
}

float PetDeedImplementation::getKinetic() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return kinResist;
	return kinResist;
}

float PetDeedImplementation::getEnergy() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return energyResist;
	return energyResist;
}

float PetDeedImplementation::getBlast() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return blastResist;
	return blastResist;
}

float PetDeedImplementation::getCold() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return coldResist;
	return coldResist;
}

float PetDeedImplementation::getHeat() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return heatResist;
	return heatResist;
}

float PetDeedImplementation::getElectric() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return elecResist;
	return elecResist;
}

float PetDeedImplementation::getAcid() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return acidResist;
	return acidResist;
}

float PetDeedImplementation::getStun() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return stunResist;
	return stunResist;
}

float PetDeedImplementation::getSaber() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return saberResist;
	return saberResist;
}

bool PetDeedImplementation::getRanged() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return ranged;
	return ranged;
}

int PetDeedImplementation::getArmor() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return armor;
	return armor;
}

bool PetDeedImplementation::isPetDeedObject() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return true;
	return true;
}

String PetDeedImplementation::getSpecial1() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return special1;
	return special1;
}

String PetDeedImplementation::getSpecial2() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return special2;
	return special2;
}

int PetDeedImplementation::getCleverness() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return cleverness;
	return cleverness;
}

int PetDeedImplementation::getEndurance() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return endurance;
	return endurance;
}

int PetDeedImplementation::getFierceness() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return fierceness;
	return fierceness;
}

int PetDeedImplementation::getPower() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return power;
	return power;
}

int PetDeedImplementation::getIntelligence() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return intelligence;
	return intelligence;
}

int PetDeedImplementation::getCourage() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return courage;
	return courage;
}

int PetDeedImplementation::getDependency() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return dependency;
	return dependency;
}

int PetDeedImplementation::getDexterity() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return dexterity;
	return dexterity;
}

int PetDeedImplementation::getFortitude() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return fortitude;
	return fortitude;
}

int PetDeedImplementation::getHardiness() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return hardiness;
	return hardiness;
}

/*
 *	PetDeedAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PetDeedAdapter::PetDeedAdapter(PetDeed* obj) : DeedAdapter(obj) {
}

void PetDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETSPECIALRESIST__INT_:
		{
			int type = inv->getSignedIntParameter();
			
			setSpecialResist(type);
			
		}
		break;
	case RPC_ISSPECIALRESIST__INT_:
		{
			int type = inv->getSignedIntParameter();
			
			bool _m_res = isSpecialResist(type);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETSAMPLECOUNT__:
		{
			
			int _m_res = getSampleCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_INCREMENTSAMPLECOUNT__:
		{
			
			incrementSampleCount();
			
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_GETQUALITY__:
		{
			
			int _m_res = getQuality();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETLEVEL__:
		{
			
			int _m_res = getLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETATTACKSPEED__:
		{
			
			float _m_res = getAttackSpeed();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETHITCHANCE__:
		{
			
			float _m_res = getHitChance();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETHEALTH__:
		{
			
			int _m_res = getHealth();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETACTION__:
		{
			
			int _m_res = getAction();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMIND__:
		{
			
			int _m_res = getMind();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMINDAMAGE__:
		{
			
			int _m_res = getMinDamage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMAXDAMAGE__:
		{
			
			int _m_res = getMaxDamage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETKINETIC__:
		{
			
			float _m_res = getKinetic();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETENERGY__:
		{
			
			float _m_res = getEnergy();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETBLAST__:
		{
			
			float _m_res = getBlast();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETCOLD__:
		{
			
			float _m_res = getCold();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETHEAT__:
		{
			
			float _m_res = getHeat();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETELECTRIC__:
		{
			
			float _m_res = getElectric();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETACID__:
		{
			
			float _m_res = getAcid();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSTUN__:
		{
			
			float _m_res = getStun();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSABER__:
		{
			
			float _m_res = getSaber();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETRANGED__:
		{
			
			bool _m_res = getRanged();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETARMOR__:
		{
			
			int _m_res = getArmor();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISPETDEEDOBJECT__:
		{
			
			bool _m_res = isPetDeedObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETSPECIAL1__:
		{
			
			String _m_res = getSpecial1();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETSPECIAL2__:
		{
			
			String _m_res = getSpecial2();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETCLEVERNESS__:
		{
			
			int _m_res = getCleverness();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETENDURANCE__:
		{
			
			int _m_res = getEndurance();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETFIERCENESS__:
		{
			
			int _m_res = getFierceness();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPOWER__:
		{
			
			int _m_res = getPower();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETINTELLIGENCE__:
		{
			
			int _m_res = getIntelligence();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCOURAGE__:
		{
			
			int _m_res = getCourage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDEPENDENCY__:
		{
			
			int _m_res = getDependency();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDEXTERITY__:
		{
			
			int _m_res = getDexterity();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETFORTITUDE__:
		{
			
			int _m_res = getFortitude();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETHARDINESS__:
		{
			
			int _m_res = getHardiness();
			resp->insertSignedInt(_m_res);
		}
		break;
	default:
		DeedAdapter::invokeMethod(methid, inv);
	}
}

void PetDeedAdapter::setSpecialResist(int type) {
	(static_cast<PetDeed*>(stub))->setSpecialResist(type);
}

bool PetDeedAdapter::isSpecialResist(int type) {
	return (static_cast<PetDeed*>(stub))->isSpecialResist(type);
}

int PetDeedAdapter::getSampleCount() {
	return (static_cast<PetDeed*>(stub))->getSampleCount();
}

void PetDeedAdapter::incrementSampleCount() {
	(static_cast<PetDeed*>(stub))->incrementSampleCount();
}

void PetDeedAdapter::initializeTransientMembers() {
	(static_cast<PetDeed*>(stub))->initializeTransientMembers();
}

int PetDeedAdapter::getQuality() {
	return (static_cast<PetDeed*>(stub))->getQuality();
}

int PetDeedAdapter::getLevel() {
	return (static_cast<PetDeed*>(stub))->getLevel();
}

float PetDeedAdapter::getAttackSpeed() {
	return (static_cast<PetDeed*>(stub))->getAttackSpeed();
}

float PetDeedAdapter::getHitChance() {
	return (static_cast<PetDeed*>(stub))->getHitChance();
}

int PetDeedAdapter::getHealth() {
	return (static_cast<PetDeed*>(stub))->getHealth();
}

int PetDeedAdapter::getAction() {
	return (static_cast<PetDeed*>(stub))->getAction();
}

int PetDeedAdapter::getMind() {
	return (static_cast<PetDeed*>(stub))->getMind();
}

int PetDeedAdapter::getMinDamage() {
	return (static_cast<PetDeed*>(stub))->getMinDamage();
}

int PetDeedAdapter::getMaxDamage() {
	return (static_cast<PetDeed*>(stub))->getMaxDamage();
}

float PetDeedAdapter::getKinetic() {
	return (static_cast<PetDeed*>(stub))->getKinetic();
}

float PetDeedAdapter::getEnergy() {
	return (static_cast<PetDeed*>(stub))->getEnergy();
}

float PetDeedAdapter::getBlast() {
	return (static_cast<PetDeed*>(stub))->getBlast();
}

float PetDeedAdapter::getCold() {
	return (static_cast<PetDeed*>(stub))->getCold();
}

float PetDeedAdapter::getHeat() {
	return (static_cast<PetDeed*>(stub))->getHeat();
}

float PetDeedAdapter::getElectric() {
	return (static_cast<PetDeed*>(stub))->getElectric();
}

float PetDeedAdapter::getAcid() {
	return (static_cast<PetDeed*>(stub))->getAcid();
}

float PetDeedAdapter::getStun() {
	return (static_cast<PetDeed*>(stub))->getStun();
}

float PetDeedAdapter::getSaber() {
	return (static_cast<PetDeed*>(stub))->getSaber();
}

bool PetDeedAdapter::getRanged() {
	return (static_cast<PetDeed*>(stub))->getRanged();
}

int PetDeedAdapter::getArmor() {
	return (static_cast<PetDeed*>(stub))->getArmor();
}

int PetDeedAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<PetDeed*>(stub))->handleObjectMenuSelect(player, selectedID);
}

bool PetDeedAdapter::isPetDeedObject() {
	return (static_cast<PetDeed*>(stub))->isPetDeedObject();
}

String PetDeedAdapter::getSpecial1() {
	return (static_cast<PetDeed*>(stub))->getSpecial1();
}

String PetDeedAdapter::getSpecial2() {
	return (static_cast<PetDeed*>(stub))->getSpecial2();
}

int PetDeedAdapter::getCleverness() {
	return (static_cast<PetDeed*>(stub))->getCleverness();
}

int PetDeedAdapter::getEndurance() {
	return (static_cast<PetDeed*>(stub))->getEndurance();
}

int PetDeedAdapter::getFierceness() {
	return (static_cast<PetDeed*>(stub))->getFierceness();
}

int PetDeedAdapter::getPower() {
	return (static_cast<PetDeed*>(stub))->getPower();
}

int PetDeedAdapter::getIntelligence() {
	return (static_cast<PetDeed*>(stub))->getIntelligence();
}

int PetDeedAdapter::getCourage() {
	return (static_cast<PetDeed*>(stub))->getCourage();
}

int PetDeedAdapter::getDependency() {
	return (static_cast<PetDeed*>(stub))->getDependency();
}

int PetDeedAdapter::getDexterity() {
	return (static_cast<PetDeed*>(stub))->getDexterity();
}

int PetDeedAdapter::getFortitude() {
	return (static_cast<PetDeed*>(stub))->getFortitude();
}

int PetDeedAdapter::getHardiness() {
	return (static_cast<PetDeed*>(stub))->getHardiness();
}

/*
 *	PetDeedHelper
 */

PetDeedHelper* PetDeedHelper::staticInitializer = PetDeedHelper::instance();

PetDeedHelper::PetDeedHelper() {
	className = "PetDeed";

	Core::getObjectBroker()->registerClass(className, this);
}

void PetDeedHelper::finalizeHelper() {
	PetDeedHelper::finalize();
}

DistributedObject* PetDeedHelper::instantiateObject() {
	return new PetDeed(DummyConstructorParameter::instance());
}

DistributedObjectServant* PetDeedHelper::instantiateServant() {
	return new PetDeedImplementation();
}

DistributedObjectAdapter* PetDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PetDeedAdapter(static_cast<PetDeed*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

