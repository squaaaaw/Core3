/*
 *	autogen/server/zone/objects/tangible/deed/pet/PetDeed.h generated by engine3 IDL compiler 0.60
 */

#ifndef PETDEED_H_
#define PETDEED_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/ai/variables/CreatureAttackMap.h"

#include "templates/SharedObjectTemplate.h"

#include "server/zone/objects/tangible/deed/Deed.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {
namespace pet {

class PetDeed : public Deed {
public:
	PetDeed();

	void setSpecialResist(int type);

	bool isSpecialResist(int type);

	int getSampleCount();

	void incrementSampleCount();

	void initializeTransientMembers();

	CreatureAttackMap* getAttacks();

	int getQuality();

	int getLevel();

	float getAttackSpeed();

	float getHitChance();

	int getHealth();

	int getAction();

	int getMind();

	int getMinDamage();

	int getMaxDamage();

	float getKinetic();

	float getEnergy();

	float getBlast();

	float getCold();

	float getHeat();

	float getElectric();

	float getAcid();

	float getStun();

	float getSaber();

	bool getRanged();

	int getArmor();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	void fillAttributeList(AttributeListMessage* alm, CreatureObject* object);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	bool isPetDeedObject();

	String getSpecial1();

	String getSpecial2();

	int getCleverness();

	int getEndurance();

	int getFierceness();

	int getPower();

	int getIntelligence();

	int getCourage();

	int getDependency();

	int getDexterity();

	int getFortitude();

	int getHardiness();

	String getTemplateName();

	/**
	 * Setup attack map during initialize
	 */
	void setupAttacks();

	int calculatePetLevel();

	void adjustPetLevel(CreatureObject* player, CreatureObject* pet);

	bool adjustPetStats(CreatureObject* player, CreatureObject* pet);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PetDeed(DummyConstructorParameter* param);

	virtual ~PetDeed();

	friend class PetDeedHelper;
};

} // namespace pet
} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed::pet;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {
namespace pet {

class PetDeedImplementation : public DeedImplementation {
protected:
	int quality;

	int level;

	float chanceHit;

	float attackSpeed;

	int damageMin;

	int damageMax;

	int armor;

	float kinResist;

	float energyResist;

	float blastResist;

	float coldResist;

	float heatResist;

	float elecResist;

	float acidResist;

	float stunResist;

	float saberResist;

	int health;

	int action;

	int mind;

	int regen;

	String special1;

	String special2;

	bool ranged;

	String controlDeviceObjectTemplate;

	String mobileTemplate;

	int cleverness;

	int endurance;

	int fierceness;

	int power;

	int intelligence;

	int courage;

	int dependency;

	int dexterity;

	int fortitude;

	int hardiness;

	int sampleCount;

	int specialResists;

	CreatureAttackMap attacks;

public:
	PetDeedImplementation();

	PetDeedImplementation(DummyConstructorParameter* param);

	void setSpecialResist(int type);

	bool isSpecialResist(int type);

	int getSampleCount();

	void incrementSampleCount();

	void initializeTransientMembers();

	CreatureAttackMap* getAttacks();

	int getQuality();

	int getLevel();

	float getAttackSpeed();

	float getHitChance();

	int getHealth();

	int getAction();

	int getMind();

	int getMinDamage();

	int getMaxDamage();

	float getKinetic();

	float getEnergy();

	float getBlast();

	float getCold();

	float getHeat();

	float getElectric();

	float getAcid();

	float getStun();

	float getSaber();

	bool getRanged();

	int getArmor();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	void fillAttributeList(AttributeListMessage* alm, CreatureObject* object);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	bool isPetDeedObject();

	String getSpecial1();

	String getSpecial2();

	int getCleverness();

	int getEndurance();

	int getFierceness();

	int getPower();

	int getIntelligence();

	int getCourage();

	int getDependency();

	int getDexterity();

	int getFortitude();

	int getHardiness();

	String getTemplateName();

	/**
	 * Setup attack map during initialize
	 */
	void setupAttacks();

	int calculatePetLevel();

	void adjustPetLevel(CreatureObject* player, CreatureObject* pet);

	bool adjustPetStats(CreatureObject* player, CreatureObject* pet);

	WeakReference<PetDeed*> _this;

	operator const PetDeed*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PetDeedImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PetDeed;
};

class PetDeedAdapter : public DeedAdapter {
public:
	PetDeedAdapter(PetDeed* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setSpecialResist(int type);

	bool isSpecialResist(int type);

	int getSampleCount();

	void incrementSampleCount();

	void initializeTransientMembers();

	int getQuality();

	int getLevel();

	float getAttackSpeed();

	float getHitChance();

	int getHealth();

	int getAction();

	int getMind();

	int getMinDamage();

	int getMaxDamage();

	float getKinetic();

	float getEnergy();

	float getBlast();

	float getCold();

	float getHeat();

	float getElectric();

	float getAcid();

	float getStun();

	float getSaber();

	bool getRanged();

	int getArmor();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	bool isPetDeedObject();

	String getSpecial1();

	String getSpecial2();

	int getCleverness();

	int getEndurance();

	int getFierceness();

	int getPower();

	int getIntelligence();

	int getCourage();

	int getDependency();

	int getDexterity();

	int getFortitude();

	int getHardiness();

};

class PetDeedHelper : public DistributedObjectClassHelper, public Singleton<PetDeedHelper> {
	static PetDeedHelper* staticInitializer;

public:
	PetDeedHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PetDeedHelper>;
};

} // namespace pet
} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed::pet;

#endif /*PETDEED_H_*/
