/*
 *	autogen/server/zone/objects/tangible/deed/droid/DroidDeed.h generated by engine3 IDL compiler 0.60
 */

#ifndef DROIDDEED_H_
#define DROIDDEED_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace component {
namespace droid {

class DroidComponent;

} // namespace droid
} // namespace component
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::component::droid;

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/tangible/components/droid/BaseDroidModuleComponent.h"

#include "templates/SharedObjectTemplate.h"

#include "server/zone/objects/tangible/deed/Deed.h"

#include "system/util/HashTable.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {
namespace droid {

class DroidDeed : public Deed {
public:
	DroidDeed();

	void onCloneObject(SceneObject* objectToClone);

	void initializeTransientMembers();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	void fillAttributeList(AttributeListMessage* alm, CreatureObject* object);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	bool isDroidDeedObject();

	HashTable<String, ManagedReference<DroidComponent* > >* getModules();

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	DroidDeed(DummyConstructorParameter* param);

	virtual ~DroidDeed();

	friend class DroidDeedHelper;
};

} // namespace droid
} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed::droid;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {
namespace droid {

class DroidDeedImplementation : public DeedImplementation {
protected:
	String controlDeviceObjectTemplate;

	String mobileTemplate;

	int species;

	float overallQuality;

	HashTable<String, ManagedReference<DroidComponent* > > modules;

	int combatRating;

public:
	DroidDeedImplementation();

	DroidDeedImplementation(DummyConstructorParameter* param);

	virtual void onCloneObject(SceneObject* objectToClone);

	void initializeTransientMembers();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	void fillAttributeList(AttributeListMessage* alm, CreatureObject* object);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	bool isDroidDeedObject();

protected:
	void processModule(BaseDroidModuleComponent* module, unsigned int crc);

public:
	HashTable<String, ManagedReference<DroidComponent* > >* getModules();

	virtual void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	WeakReference<DroidDeed*> _this;

	operator const DroidDeed*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~DroidDeedImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class DroidDeed;
};

class DroidDeedAdapter : public DeedAdapter {
public:
	DroidDeedAdapter(DroidDeed* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void onCloneObject(SceneObject* objectToClone);

	void initializeTransientMembers();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	bool isDroidDeedObject();

	void destroyObjectFromDatabase(bool destroyContainedObjects);

};

class DroidDeedHelper : public DistributedObjectClassHelper, public Singleton<DroidDeedHelper> {
	static DroidDeedHelper* staticInitializer;

public:
	DroidDeedHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<DroidDeedHelper>;
};

} // namespace droid
} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed::droid;

#endif /*DROIDDEED_H_*/
