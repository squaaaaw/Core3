/*
 *	autogen/server/zone/objects/tangible/deed/droid/DroidDeed.cpp generated by engine3 IDL compiler 0.60
 */

#include "DroidDeed.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/component/droid/DroidComponent.h"

/*
 *	DroidDeedStub
 */

enum {RPC_ONCLONEOBJECT__SCENEOBJECT_ = 493480336,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_ISDROIDDEEDOBJECT__,RPC_DESTROYOBJECTFROMDATABASE__BOOL_};

DroidDeed::DroidDeed() : Deed(DummyConstructorParameter::instance()) {
	DroidDeedImplementation* _implementation = new DroidDeedImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DroidDeed");
}

DroidDeed::DroidDeed(DummyConstructorParameter* param) : Deed(param) {
	_setClassName("DroidDeed");
}

DroidDeed::~DroidDeed() {
}



void DroidDeed::onCloneObject(SceneObject* objectToClone) {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ONCLONEOBJECT__SCENEOBJECT_);
		method.addObjectParameter(objectToClone);

		method.executeWithVoidReturn();
	} else {
		_implementation->onCloneObject(objectToClone);
	}
}

void DroidDeed::initializeTransientMembers() {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void DroidDeed::loadTemplateData(SharedObjectTemplate* templateData) {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void DroidDeed::fillAttributeList(AttributeListMessage* alm, CreatureObject* object) {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(alm, object);
	}
}

void DroidDeed::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

int DroidDeed::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void DroidDeed::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

bool DroidDeed::isDroidDeedObject() {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDROIDDEEDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDroidDeedObject();
	}
}

HashTable<String, ManagedReference<DroidComponent* > >* DroidDeed::getModules() {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getModules();
	}
}

void DroidDeed::destroyObjectFromDatabase(bool destroyContainedObjects) {
	DroidDeedImplementation* _implementation = static_cast<DroidDeedImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
	}
}

DistributedObjectServant* DroidDeed::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* DroidDeed::_getImplementationForRead() const {
	return _impl;
}

void DroidDeed::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DroidDeedImplementation
 */

DroidDeedImplementation::DroidDeedImplementation(DummyConstructorParameter* param) : DeedImplementation(param) {
	_initializeImplementation();
}


DroidDeedImplementation::~DroidDeedImplementation() {
}


void DroidDeedImplementation::finalize() {
}

void DroidDeedImplementation::_initializeImplementation() {
	_setClassHelper(DroidDeedHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DroidDeedImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DroidDeed*>(stub);
	DeedImplementation::_setStub(stub);
}

DistributedObjectStub* DroidDeedImplementation::_getStub() {
	return _this.get();
}

DroidDeedImplementation::operator const DroidDeed*() {
	return _this.get();
}

void DroidDeedImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void DroidDeedImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void DroidDeedImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void DroidDeedImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void DroidDeedImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void DroidDeedImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void DroidDeedImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void DroidDeedImplementation::_serializationHelperMethod() {
	DeedImplementation::_serializationHelperMethod();

	_setClassName("DroidDeed");

}

void DroidDeedImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DroidDeedImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DroidDeedImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (DeedImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x3ce9d173: //DroidDeed.controlDeviceObjectTemplate
		TypeInfo<String >::parseFromBinaryStream(&controlDeviceObjectTemplate, stream);
		return true;

	case 0x2c9a9e4d: //DroidDeed.mobileTemplate
		TypeInfo<String >::parseFromBinaryStream(&mobileTemplate, stream);
		return true;

	case 0xb2276c7d: //DroidDeed.species
		TypeInfo<int >::parseFromBinaryStream(&species, stream);
		return true;

	case 0xcd545fbe: //DroidDeed.overallQuality
		TypeInfo<float >::parseFromBinaryStream(&overallQuality, stream);
		return true;

	case 0xd6cb3e70: //DroidDeed.modules
		TypeInfo<HashTable<String, ManagedReference<DroidComponent* > > >::parseFromBinaryStream(&modules, stream);
		return true;

	case 0x7bab8d27: //DroidDeed.combatRating
		TypeInfo<int >::parseFromBinaryStream(&combatRating, stream);
		return true;

	}

	return false;
}

void DroidDeedImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DroidDeedImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DroidDeedImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = DeedImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x3ce9d173; //DroidDeed.controlDeviceObjectTemplate
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&controlDeviceObjectTemplate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2c9a9e4d; //DroidDeed.mobileTemplate
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&mobileTemplate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb2276c7d; //DroidDeed.species
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&species, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcd545fbe; //DroidDeed.overallQuality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&overallQuality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd6cb3e70; //DroidDeed.modules
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<HashTable<String, ManagedReference<DroidComponent* > > >::toBinaryStream(&modules, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7bab8d27; //DroidDeed.combatRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&combatRating, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 6;
}

DroidDeedImplementation::DroidDeedImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/deed/droid/DroidDeed.idl():  		Logger.setLoggingName("DroidDeed");
	Logger::setLoggingName("DroidDeed");
	// server/zone/objects/tangible/deed/droid/DroidDeed.idl():  		combatRating = 0;
	combatRating = 0;
	// server/zone/objects/tangible/deed/droid/DroidDeed.idl():  		overallQuality = 0;
	overallQuality = 0;
}

bool DroidDeedImplementation::isDroidDeedObject() {
	// server/zone/objects/tangible/deed/droid/DroidDeed.idl():  		return true;
	return true;
}

HashTable<String, ManagedReference<DroidComponent* > >* DroidDeedImplementation::getModules() {
	// server/zone/objects/tangible/deed/droid/DroidDeed.idl():  		return modules;
	return (&modules);
}

/*
 *	DroidDeedAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DroidDeedAdapter::DroidDeedAdapter(DroidDeed* obj) : DeedAdapter(obj) {
}

void DroidDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ONCLONEOBJECT__SCENEOBJECT_:
		{
			SceneObject* objectToClone = static_cast<SceneObject*>(inv->getObjectParameter());
			
			onCloneObject(objectToClone);
			
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISDROIDDEEDOBJECT__:
		{
			
			bool _m_res = isDroidDeedObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		{
			bool destroyContainedObjects = inv->getBooleanParameter();
			
			destroyObjectFromDatabase(destroyContainedObjects);
			
		}
		break;
	default:
		DeedAdapter::invokeMethod(methid, inv);
	}
}

void DroidDeedAdapter::onCloneObject(SceneObject* objectToClone) {
	(static_cast<DroidDeed*>(stub))->onCloneObject(objectToClone);
}

void DroidDeedAdapter::initializeTransientMembers() {
	(static_cast<DroidDeed*>(stub))->initializeTransientMembers();
}

int DroidDeedAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<DroidDeed*>(stub))->handleObjectMenuSelect(player, selectedID);
}

bool DroidDeedAdapter::isDroidDeedObject() {
	return (static_cast<DroidDeed*>(stub))->isDroidDeedObject();
}

void DroidDeedAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<DroidDeed*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

/*
 *	DroidDeedHelper
 */

DroidDeedHelper* DroidDeedHelper::staticInitializer = DroidDeedHelper::instance();

DroidDeedHelper::DroidDeedHelper() {
	className = "DroidDeed";

	Core::getObjectBroker()->registerClass(className, this);
}

void DroidDeedHelper::finalizeHelper() {
	DroidDeedHelper::finalize();
}

DistributedObject* DroidDeedHelper::instantiateObject() {
	return new DroidDeed(DummyConstructorParameter::instance());
}

DistributedObjectServant* DroidDeedHelper::instantiateServant() {
	return new DroidDeedImplementation();
}

DistributedObjectAdapter* DroidDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DroidDeedAdapter(static_cast<DroidDeed*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

