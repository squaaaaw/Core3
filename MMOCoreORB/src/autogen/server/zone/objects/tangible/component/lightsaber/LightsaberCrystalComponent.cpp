/*
 *	autogen/server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.cpp generated by engine3 IDL compiler 0.60
 */

#include "LightsaberCrystalComponent.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

/*
 *	LightsaberCrystalComponentStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 1088783342,RPC_NOTIFYLOADFROMDATABASE__,RPC_FILLOBJECTMENURESPONSE__OBJECTMENURESPONSE_CREATUREOBJECT_,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_HASPLAYERASPARENT__CREATUREOBJECT_,RPC_TUNECRYSTAL__CREATUREOBJECT_,RPC_UPDATECRYSTAL__INT_,RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_,RPC_GENERATECRYSTALSTATS__,RPC_VALIDATECRYSTALSTATS__,RPC_GETRANDOMIZEDSTAT__INT_INT_INT_,RPC_GETRANDOMIZEDSTAT__FLOAT_FLOAT_INT_,RPC_GETCRYSTALQUALITY__,RPC_GETDAMAGE__,RPC_GETFORCECOST__,RPC_GETSACHEALTH__,RPC_GETATTACKSPEED__,RPC_GETSACACTION__,RPC_GETSACMIND__,RPC_GETWOUNDCHANCE__,RPC_GETOWNERID__,RPC_GETQUALITY__,RPC_SETQUALITY__INT_,RPC_GETCOLOR__,RPC_SETCOLOR__INT_,RPC_SETOWNERID__LONG_,RPC_SETITEMLEVEL__INT_,RPC_SETMINIMUMDAMAGE__INT_,RPC_SETMAXIMUMDAMAGE__INT_,RPC_SETFORCECOST__FLOAT_,RPC_SETSACHEALTH__INT_,RPC_SETSACACTION__INT_,RPC_SETSACMIND__INT_,RPC_SETATTACKSPEED__FLOAT_,RPC_SETWOUNDCHANCE__INT_,RPC_ISLIGHTSABERCRYSTALOBJECT__};

LightsaberCrystalComponent::LightsaberCrystalComponent() : Component(DummyConstructorParameter::instance()) {
	LightsaberCrystalComponentImplementation* _implementation = new LightsaberCrystalComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("LightsaberCrystalComponent");
}

LightsaberCrystalComponent::LightsaberCrystalComponent(DummyConstructorParameter* param) : Component(param) {
	_setClassName("LightsaberCrystalComponent");
}

LightsaberCrystalComponent::~LightsaberCrystalComponent() {
}



void LightsaberCrystalComponent::initializeTransientMembers() {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void LightsaberCrystalComponent::notifyLoadFromDatabase() {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyLoadFromDatabase();
	}
}

void LightsaberCrystalComponent::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

void LightsaberCrystalComponent::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void LightsaberCrystalComponent::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FILLOBJECTMENURESPONSE__OBJECTMENURESPONSE_CREATUREOBJECT_);
		method.addObjectParameter(menuResponse);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

int LightsaberCrystalComponent::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

bool LightsaberCrystalComponent::hasPlayerAsParent(CreatureObject* player) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPLAYERASPARENT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasPlayerAsParent(player);
	}
}

void LightsaberCrystalComponent::tuneCrystal(CreatureObject* player) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TUNECRYSTAL__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->tuneCrystal(player);
	}
}

void LightsaberCrystalComponent::updateCrystal(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATECRYSTAL__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateCrystal(value);
	}
}

int LightsaberCrystalComponent::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addFloatParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
	}
}

void LightsaberCrystalComponent::generateCrystalStats() {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATECRYSTALSTATS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->generateCrystalStats();
	}
}

void LightsaberCrystalComponent::validateCrystalStats() {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATECRYSTALSTATS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->validateCrystalStats();
	}
}

int LightsaberCrystalComponent::getRandomizedStat(int min, int max, int itemLevel) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANDOMIZEDSTAT__INT_INT_INT_);
		method.addSignedIntParameter(min);
		method.addSignedIntParameter(max);
		method.addSignedIntParameter(itemLevel);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRandomizedStat(min, max, itemLevel);
	}
}

float LightsaberCrystalComponent::getRandomizedStat(float min, float max, int itemLevel) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANDOMIZEDSTAT__FLOAT_FLOAT_INT_);
		method.addFloatParameter(min);
		method.addFloatParameter(max);
		method.addSignedIntParameter(itemLevel);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getRandomizedStat(min, max, itemLevel);
	}
}

int LightsaberCrystalComponent::getCrystalQuality() {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRYSTALQUALITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCrystalQuality();
	}
}

int LightsaberCrystalComponent::getDamage() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDAMAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDamage();
	}
}

float LightsaberCrystalComponent::getForceCost() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFORCECOST__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getForceCost();
	}
}

int LightsaberCrystalComponent::getSacHealth() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSACHEALTH__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSacHealth();
	}
}

float LightsaberCrystalComponent::getAttackSpeed() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETATTACKSPEED__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getAttackSpeed();
	}
}

int LightsaberCrystalComponent::getSacAction() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSACACTION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSacAction();
	}
}

int LightsaberCrystalComponent::getSacMind() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSACMIND__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSacMind();
	}
}

int LightsaberCrystalComponent::getWoundChance() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWOUNDCHANCE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getWoundChance();
	}
}

unsigned long long LightsaberCrystalComponent::getOwnerID() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getOwnerID();
	}
}

int LightsaberCrystalComponent::getQuality() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETQUALITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getQuality();
	}
}

void LightsaberCrystalComponent::setQuality(int qual) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETQUALITY__INT_);
		method.addSignedIntParameter(qual);

		method.executeWithVoidReturn();
	} else {
		_implementation->setQuality(qual);
	}
}

int LightsaberCrystalComponent::getColor() const {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOLOR__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getColor();
	}
}

void LightsaberCrystalComponent::setColor(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOLOR__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setColor(value);
	}
}

void LightsaberCrystalComponent::setOwnerID(unsigned long long value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNERID__LONG_);
		method.addUnsignedLongParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOwnerID(value);
	}
}

void LightsaberCrystalComponent::setItemLevel(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETITEMLEVEL__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setItemLevel(value);
	}
}

void LightsaberCrystalComponent::setMinimumDamage(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMINIMUMDAMAGE__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setMinimumDamage(value);
	}
}

void LightsaberCrystalComponent::setMaximumDamage(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXIMUMDAMAGE__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setMaximumDamage(value);
	}
}

void LightsaberCrystalComponent::setForceCost(float value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORCECOST__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setForceCost(value);
	}
}

void LightsaberCrystalComponent::setSacHealth(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSACHEALTH__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSacHealth(value);
	}
}

void LightsaberCrystalComponent::setSacAction(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSACACTION__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSacAction(value);
	}
}

void LightsaberCrystalComponent::setSacMind(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSACMIND__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSacMind(value);
	}
}

void LightsaberCrystalComponent::setAttackSpeed(float value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETATTACKSPEED__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setAttackSpeed(value);
	}
}

void LightsaberCrystalComponent::setWoundChance(int value) {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWOUNDCHANCE__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setWoundChance(value);
	}
}

bool LightsaberCrystalComponent::isLightsaberCrystalObject() {
	LightsaberCrystalComponentImplementation* _implementation = static_cast<LightsaberCrystalComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLIGHTSABERCRYSTALOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isLightsaberCrystalObject();
	}
}

DistributedObjectServant* LightsaberCrystalComponent::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* LightsaberCrystalComponent::_getImplementationForRead() const {
	return _impl;
}

void LightsaberCrystalComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	LightsaberCrystalComponentImplementation
 */

LightsaberCrystalComponentImplementation::LightsaberCrystalComponentImplementation(DummyConstructorParameter* param) : ComponentImplementation(param) {
	_initializeImplementation();
}


LightsaberCrystalComponentImplementation::~LightsaberCrystalComponentImplementation() {
}


void LightsaberCrystalComponentImplementation::finalize() {
}

void LightsaberCrystalComponentImplementation::_initializeImplementation() {
	_setClassHelper(LightsaberCrystalComponentHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void LightsaberCrystalComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<LightsaberCrystalComponent*>(stub);
	ComponentImplementation::_setStub(stub);
}

DistributedObjectStub* LightsaberCrystalComponentImplementation::_getStub() {
	return _this.get();
}

LightsaberCrystalComponentImplementation::operator const LightsaberCrystalComponent*() {
	return _this.get();
}

void LightsaberCrystalComponentImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void LightsaberCrystalComponentImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void LightsaberCrystalComponentImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void LightsaberCrystalComponentImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void LightsaberCrystalComponentImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void LightsaberCrystalComponentImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void LightsaberCrystalComponentImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void LightsaberCrystalComponentImplementation::_serializationHelperMethod() {
	ComponentImplementation::_serializationHelperMethod();

	_setClassName("LightsaberCrystalComponent");

}

void LightsaberCrystalComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(LightsaberCrystalComponentImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LightsaberCrystalComponentImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ComponentImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xb5a3cc8c: //LightsaberCrystalComponent.damage
		TypeInfo<int >::parseFromBinaryStream(&damage, stream);
		return true;

	case 0x8338b3e0: //LightsaberCrystalComponent.color
		TypeInfo<int >::parseFromBinaryStream(&color, stream);
		return true;

	case 0xc0d40597: //LightsaberCrystalComponent.quality
		TypeInfo<int >::parseFromBinaryStream(&quality, stream);
		return true;

	case 0x564f91a5: //LightsaberCrystalComponent.attackSpeed
		TypeInfo<float >::parseFromBinaryStream(&attackSpeed, stream);
		return true;

	case 0x15049cd7: //LightsaberCrystalComponent.sacHealth
		TypeInfo<int >::parseFromBinaryStream(&sacHealth, stream);
		return true;

	case 0xc6c0995c: //LightsaberCrystalComponent.sacAction
		TypeInfo<int >::parseFromBinaryStream(&sacAction, stream);
		return true;

	case 0x673222d3: //LightsaberCrystalComponent.sacMind
		TypeInfo<int >::parseFromBinaryStream(&sacMind, stream);
		return true;

	case 0x7096a506: //LightsaberCrystalComponent.woundChance
		TypeInfo<int >::parseFromBinaryStream(&woundChance, stream);
		return true;

	case 0xf1c2f03e: //LightsaberCrystalComponent.itemLevel
		TypeInfo<int >::parseFromBinaryStream(&itemLevel, stream);
		return true;

	case 0xc9ed74be: //LightsaberCrystalComponent.floatForceCost
		TypeInfo<float >::parseFromBinaryStream(&floatForceCost, stream);
		return true;

	case 0x822e6ca3: //LightsaberCrystalComponent.ownerID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&ownerID, stream);
		return true;

	case 0xf3e5ef5e: //LightsaberCrystalComponent.ownerName
		TypeInfo<String >::parseFromBinaryStream(&ownerName, stream);
		return true;

	case 0x1c9e679b: //LightsaberCrystalComponent.forceCost
		TypeInfo<int >::parseFromBinaryStream(&forceCost, stream);
		return true;

	case 0x9e998d6d: //LightsaberCrystalComponent.minimumDamage
		TypeInfo<int >::parseFromBinaryStream(&minimumDamage, stream);
		return true;

	case 0x1fc07d0a: //LightsaberCrystalComponent.maximumDamage
		TypeInfo<int >::parseFromBinaryStream(&maximumDamage, stream);
		return true;

	case 0x717984bc: //LightsaberCrystalComponent.postTuneName
		TypeInfo<String >::parseFromBinaryStream(&postTuneName, stream);
		return true;

	}

	return false;
}

void LightsaberCrystalComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LightsaberCrystalComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LightsaberCrystalComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ComponentImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xb5a3cc8c; //LightsaberCrystalComponent.damage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&damage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8338b3e0; //LightsaberCrystalComponent.color
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&color, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc0d40597; //LightsaberCrystalComponent.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x564f91a5; //LightsaberCrystalComponent.attackSpeed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&attackSpeed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x15049cd7; //LightsaberCrystalComponent.sacHealth
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&sacHealth, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc6c0995c; //LightsaberCrystalComponent.sacAction
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&sacAction, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x673222d3; //LightsaberCrystalComponent.sacMind
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&sacMind, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7096a506; //LightsaberCrystalComponent.woundChance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&woundChance, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf1c2f03e; //LightsaberCrystalComponent.itemLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&itemLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc9ed74be; //LightsaberCrystalComponent.floatForceCost
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&floatForceCost, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x822e6ca3; //LightsaberCrystalComponent.ownerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&ownerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf3e5ef5e; //LightsaberCrystalComponent.ownerName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&ownerName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1c9e679b; //LightsaberCrystalComponent.forceCost
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&forceCost, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9e998d6d; //LightsaberCrystalComponent.minimumDamage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&minimumDamage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1fc07d0a; //LightsaberCrystalComponent.maximumDamage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maximumDamage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x717984bc; //LightsaberCrystalComponent.postTuneName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&postTuneName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 16;
}

LightsaberCrystalComponentImplementation::LightsaberCrystalComponentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		attackSpeed = 0.0;
	attackSpeed = 0.0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		sacHealth = 0;
	sacHealth = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		sacAction = 0;
	sacAction = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		sacMind = 0;
	sacMind = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		woundChance = 0;
	woundChance = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		color = 0;
	color = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		quality = 0;
	quality = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		itemLevel = 0;
	itemLevel = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		floatForceCost = 0.0;
	floatForceCost = 0.0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		ownerID = 0;
	ownerID = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		ownerName = "";
	ownerName = "";
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		forceCost = 0;
	forceCost = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		minimumDamage = 0;
	minimumDamage = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		maximumDamage = 0;
	maximumDamage = 0;
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		postTuneName = "";
	postTuneName = "";
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		Logger.setLoggingName("LightsaberCrystal");
	Logger::setLoggingName("LightsaberCrystal");
}

int LightsaberCrystalComponentImplementation::getDamage() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return damage;
	return damage;
}

float LightsaberCrystalComponentImplementation::getForceCost() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return floatForceCost;
	return floatForceCost;
}

int LightsaberCrystalComponentImplementation::getSacHealth() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return sacHealth;
	return sacHealth;
}

float LightsaberCrystalComponentImplementation::getAttackSpeed() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return attackSpeed;
	return attackSpeed;
}

int LightsaberCrystalComponentImplementation::getSacAction() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return sacAction;
	return sacAction;
}

int LightsaberCrystalComponentImplementation::getSacMind() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return sacMind;
	return sacMind;
}

int LightsaberCrystalComponentImplementation::getWoundChance() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return woundChance;
	return woundChance;
}

unsigned long long LightsaberCrystalComponentImplementation::getOwnerID() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return ownerID;
	return ownerID;
}

int LightsaberCrystalComponentImplementation::getQuality() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return quality;
	return quality;
}

void LightsaberCrystalComponentImplementation::setQuality(int qual) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		quality = qual;
	quality = qual;
}

int LightsaberCrystalComponentImplementation::getColor() const{
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return color;
	return color;
}

void LightsaberCrystalComponentImplementation::setColor(int value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		color = value;
	color = value;
}

void LightsaberCrystalComponentImplementation::setOwnerID(unsigned long long value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		ownerID = value;
	ownerID = value;
}

void LightsaberCrystalComponentImplementation::setItemLevel(int value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		itemLevel = value;
	itemLevel = value;
}

void LightsaberCrystalComponentImplementation::setMinimumDamage(int value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		minimumDamage = value;
	minimumDamage = value;
}

void LightsaberCrystalComponentImplementation::setMaximumDamage(int value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		maximumDamage = value;
	maximumDamage = value;
}

void LightsaberCrystalComponentImplementation::setForceCost(float value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		floatForceCost = value;
	floatForceCost = value;
}

void LightsaberCrystalComponentImplementation::setSacHealth(int value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		sacHealth = value;
	sacHealth = value;
}

void LightsaberCrystalComponentImplementation::setSacAction(int value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		sacAction = value;
	sacAction = value;
}

void LightsaberCrystalComponentImplementation::setSacMind(int value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		sacMind = value;
	sacMind = value;
}

void LightsaberCrystalComponentImplementation::setAttackSpeed(float value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		attackSpeed = value;
	attackSpeed = value;
}

void LightsaberCrystalComponentImplementation::setWoundChance(int value) {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		woundChance = value;
	woundChance = value;
}

bool LightsaberCrystalComponentImplementation::isLightsaberCrystalObject() {
	// server/zone/objects/tangible/component/lightsaber/LightsaberCrystalComponent.idl():  		return true;
	return true;
}

/*
 *	LightsaberCrystalComponentAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


LightsaberCrystalComponentAdapter::LightsaberCrystalComponentAdapter(LightsaberCrystalComponent* obj) : ComponentAdapter(obj) {
}

void LightsaberCrystalComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			
			notifyLoadFromDatabase();
			
		}
		break;
	case RPC_FILLOBJECTMENURESPONSE__OBJECTMENURESPONSE_CREATUREOBJECT_:
		{
			ObjectMenuResponse* menuResponse = static_cast<ObjectMenuResponse*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			fillObjectMenuResponse(menuResponse, player);
			
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HASPLAYERASPARENT__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = hasPlayerAsParent(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_TUNECRYSTAL__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			tuneCrystal(player);
			
		}
		break;
	case RPC_UPDATECRYSTAL__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			updateCrystal(value);
			
		}
		break;
	case RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_:
		{
			TangibleObject* attacker = static_cast<TangibleObject*>(inv->getObjectParameter());
			int damageType = inv->getSignedIntParameter();
			float damage = inv->getFloatParameter();
			bool destroy = inv->getBooleanParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			int _m_res = inflictDamage(attacker, damageType, damage, destroy, notifyClient);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GENERATECRYSTALSTATS__:
		{
			
			generateCrystalStats();
			
		}
		break;
	case RPC_VALIDATECRYSTALSTATS__:
		{
			
			validateCrystalStats();
			
		}
		break;
	case RPC_GETRANDOMIZEDSTAT__INT_INT_INT_:
		{
			int min = inv->getSignedIntParameter();
			int max = inv->getSignedIntParameter();
			int itemLevel = inv->getSignedIntParameter();
			
			int _m_res = getRandomizedStat(min, max, itemLevel);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETRANDOMIZEDSTAT__FLOAT_FLOAT_INT_:
		{
			float min = inv->getFloatParameter();
			float max = inv->getFloatParameter();
			int itemLevel = inv->getSignedIntParameter();
			
			float _m_res = getRandomizedStat(min, max, itemLevel);
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETCRYSTALQUALITY__:
		{
			
			int _m_res = getCrystalQuality();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDAMAGE__:
		{
			
			int _m_res = getDamage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETFORCECOST__:
		{
			
			float _m_res = getForceCost();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSACHEALTH__:
		{
			
			int _m_res = getSacHealth();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETATTACKSPEED__:
		{
			
			float _m_res = getAttackSpeed();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSACACTION__:
		{
			
			int _m_res = getSacAction();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSACMIND__:
		{
			
			int _m_res = getSacMind();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETWOUNDCHANCE__:
		{
			
			int _m_res = getWoundChance();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETOWNERID__:
		{
			
			unsigned long long _m_res = getOwnerID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETQUALITY__:
		{
			
			int _m_res = getQuality();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETQUALITY__INT_:
		{
			int qual = inv->getSignedIntParameter();
			
			setQuality(qual);
			
		}
		break;
	case RPC_GETCOLOR__:
		{
			
			int _m_res = getColor();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETCOLOR__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setColor(value);
			
		}
		break;
	case RPC_SETOWNERID__LONG_:
		{
			unsigned long long value = inv->getUnsignedLongParameter();
			
			setOwnerID(value);
			
		}
		break;
	case RPC_SETITEMLEVEL__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setItemLevel(value);
			
		}
		break;
	case RPC_SETMINIMUMDAMAGE__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setMinimumDamage(value);
			
		}
		break;
	case RPC_SETMAXIMUMDAMAGE__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setMaximumDamage(value);
			
		}
		break;
	case RPC_SETFORCECOST__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setForceCost(value);
			
		}
		break;
	case RPC_SETSACHEALTH__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setSacHealth(value);
			
		}
		break;
	case RPC_SETSACACTION__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setSacAction(value);
			
		}
		break;
	case RPC_SETSACMIND__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setSacMind(value);
			
		}
		break;
	case RPC_SETATTACKSPEED__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setAttackSpeed(value);
			
		}
		break;
	case RPC_SETWOUNDCHANCE__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setWoundChance(value);
			
		}
		break;
	case RPC_ISLIGHTSABERCRYSTALOBJECT__:
		{
			
			bool _m_res = isLightsaberCrystalObject();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		ComponentAdapter::invokeMethod(methid, inv);
	}
}

void LightsaberCrystalComponentAdapter::initializeTransientMembers() {
	(static_cast<LightsaberCrystalComponent*>(stub))->initializeTransientMembers();
}

void LightsaberCrystalComponentAdapter::notifyLoadFromDatabase() {
	(static_cast<LightsaberCrystalComponent*>(stub))->notifyLoadFromDatabase();
}

void LightsaberCrystalComponentAdapter::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	(static_cast<LightsaberCrystalComponent*>(stub))->fillObjectMenuResponse(menuResponse, player);
}

int LightsaberCrystalComponentAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<LightsaberCrystalComponent*>(stub))->handleObjectMenuSelect(player, selectedID);
}

bool LightsaberCrystalComponentAdapter::hasPlayerAsParent(CreatureObject* player) {
	return (static_cast<LightsaberCrystalComponent*>(stub))->hasPlayerAsParent(player);
}

void LightsaberCrystalComponentAdapter::tuneCrystal(CreatureObject* player) {
	(static_cast<LightsaberCrystalComponent*>(stub))->tuneCrystal(player);
}

void LightsaberCrystalComponentAdapter::updateCrystal(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->updateCrystal(value);
}

int LightsaberCrystalComponentAdapter::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient) {
	return (static_cast<LightsaberCrystalComponent*>(stub))->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void LightsaberCrystalComponentAdapter::generateCrystalStats() {
	(static_cast<LightsaberCrystalComponent*>(stub))->generateCrystalStats();
}

void LightsaberCrystalComponentAdapter::validateCrystalStats() {
	(static_cast<LightsaberCrystalComponent*>(stub))->validateCrystalStats();
}

int LightsaberCrystalComponentAdapter::getRandomizedStat(int min, int max, int itemLevel) {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getRandomizedStat(min, max, itemLevel);
}

float LightsaberCrystalComponentAdapter::getRandomizedStat(float min, float max, int itemLevel) {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getRandomizedStat(min, max, itemLevel);
}

int LightsaberCrystalComponentAdapter::getCrystalQuality() {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getCrystalQuality();
}

int LightsaberCrystalComponentAdapter::getDamage() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getDamage();
}

float LightsaberCrystalComponentAdapter::getForceCost() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getForceCost();
}

int LightsaberCrystalComponentAdapter::getSacHealth() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getSacHealth();
}

float LightsaberCrystalComponentAdapter::getAttackSpeed() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getAttackSpeed();
}

int LightsaberCrystalComponentAdapter::getSacAction() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getSacAction();
}

int LightsaberCrystalComponentAdapter::getSacMind() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getSacMind();
}

int LightsaberCrystalComponentAdapter::getWoundChance() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getWoundChance();
}

unsigned long long LightsaberCrystalComponentAdapter::getOwnerID() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getOwnerID();
}

int LightsaberCrystalComponentAdapter::getQuality() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getQuality();
}

void LightsaberCrystalComponentAdapter::setQuality(int qual) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setQuality(qual);
}

int LightsaberCrystalComponentAdapter::getColor() const {
	return (static_cast<LightsaberCrystalComponent*>(stub))->getColor();
}

void LightsaberCrystalComponentAdapter::setColor(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setColor(value);
}

void LightsaberCrystalComponentAdapter::setOwnerID(unsigned long long value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setOwnerID(value);
}

void LightsaberCrystalComponentAdapter::setItemLevel(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setItemLevel(value);
}

void LightsaberCrystalComponentAdapter::setMinimumDamage(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setMinimumDamage(value);
}

void LightsaberCrystalComponentAdapter::setMaximumDamage(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setMaximumDamage(value);
}

void LightsaberCrystalComponentAdapter::setForceCost(float value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setForceCost(value);
}

void LightsaberCrystalComponentAdapter::setSacHealth(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setSacHealth(value);
}

void LightsaberCrystalComponentAdapter::setSacAction(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setSacAction(value);
}

void LightsaberCrystalComponentAdapter::setSacMind(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setSacMind(value);
}

void LightsaberCrystalComponentAdapter::setAttackSpeed(float value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setAttackSpeed(value);
}

void LightsaberCrystalComponentAdapter::setWoundChance(int value) {
	(static_cast<LightsaberCrystalComponent*>(stub))->setWoundChance(value);
}

bool LightsaberCrystalComponentAdapter::isLightsaberCrystalObject() {
	return (static_cast<LightsaberCrystalComponent*>(stub))->isLightsaberCrystalObject();
}

/*
 *	LightsaberCrystalComponentHelper
 */

LightsaberCrystalComponentHelper* LightsaberCrystalComponentHelper::staticInitializer = LightsaberCrystalComponentHelper::instance();

LightsaberCrystalComponentHelper::LightsaberCrystalComponentHelper() {
	className = "LightsaberCrystalComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void LightsaberCrystalComponentHelper::finalizeHelper() {
	LightsaberCrystalComponentHelper::finalize();
}

DistributedObject* LightsaberCrystalComponentHelper::instantiateObject() {
	return new LightsaberCrystalComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* LightsaberCrystalComponentHelper::instantiateServant() {
	return new LightsaberCrystalComponentImplementation();
}

DistributedObjectAdapter* LightsaberCrystalComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LightsaberCrystalComponentAdapter(static_cast<LightsaberCrystalComponent*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaLightsaberCrystalComponent::className[] = "LuaLightsaberCrystalComponent";

Luna<LuaLightsaberCrystalComponent>::RegType LuaLightsaberCrystalComponent::Register[] = {
	{ "initializeTransientMembers", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::initializeTransientMembers },
	{ "fillObjectMenuResponse", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::fillObjectMenuResponse },
	{ "fillAttributeList", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::fillAttributeList },
	{ "isComponent", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::isComponent },
	{ "generateLootStats", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::generateLootStats },
	{ "compare", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::compare },
	{ "hasKey", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::hasKey },
	{ "updateCraftingValues", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::updateCraftingValues },
	{ "addProperty", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::addProperty },
	{ "getAttributeValue", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::getAttributeValue },
	{ "getAttributePrecision", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::getAttributePrecision },
	{ "getAttributeTitle", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::getAttributeTitle },
	{ "getAttributeHidden", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::getAttributeHidden },
	{ "setPropertyToHidden", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::setPropertyToHidden },
	{ "getPropertyCount", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::getPropertyCount },
	{ "getProperty", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::getProperty },
	{ "changeAttributeValue", (int (LuaLightsaberCrystalComponent::*)(lua_State*)) &LuaComponent::changeAttributeValue },
	{ "_setObject", &LuaLightsaberCrystalComponent::_setObject },
	{ "_getObject", &LuaLightsaberCrystalComponent::_getObject },
	{ "initializeTransientMembers", &LuaLightsaberCrystalComponent::initializeTransientMembers },
	{ "notifyLoadFromDatabase", &LuaLightsaberCrystalComponent::notifyLoadFromDatabase },
	{ "updateCraftingValues", &LuaLightsaberCrystalComponent::updateCraftingValues },
	{ "fillAttributeList", &LuaLightsaberCrystalComponent::fillAttributeList },
	{ "fillObjectMenuResponse", &LuaLightsaberCrystalComponent::fillObjectMenuResponse },
	{ "handleObjectMenuSelect", &LuaLightsaberCrystalComponent::handleObjectMenuSelect },
	{ "hasPlayerAsParent", &LuaLightsaberCrystalComponent::hasPlayerAsParent },
	{ "tuneCrystal", &LuaLightsaberCrystalComponent::tuneCrystal },
	{ "updateCrystal", &LuaLightsaberCrystalComponent::updateCrystal },
	{ "inflictDamage", &LuaLightsaberCrystalComponent::inflictDamage },
	{ "generateCrystalStats", &LuaLightsaberCrystalComponent::generateCrystalStats },
	{ "validateCrystalStats", &LuaLightsaberCrystalComponent::validateCrystalStats },
	{ "getRandomizedStat", &LuaLightsaberCrystalComponent::getRandomizedStat },
	{ "getCrystalQuality", &LuaLightsaberCrystalComponent::getCrystalQuality },
	{ "getDamage", &LuaLightsaberCrystalComponent::getDamage },
	{ "getForceCost", &LuaLightsaberCrystalComponent::getForceCost },
	{ "getSacHealth", &LuaLightsaberCrystalComponent::getSacHealth },
	{ "getAttackSpeed", &LuaLightsaberCrystalComponent::getAttackSpeed },
	{ "getSacAction", &LuaLightsaberCrystalComponent::getSacAction },
	{ "getSacMind", &LuaLightsaberCrystalComponent::getSacMind },
	{ "getWoundChance", &LuaLightsaberCrystalComponent::getWoundChance },
	{ "getOwnerID", &LuaLightsaberCrystalComponent::getOwnerID },
	{ "getQuality", &LuaLightsaberCrystalComponent::getQuality },
	{ "setQuality", &LuaLightsaberCrystalComponent::setQuality },
	{ "getColor", &LuaLightsaberCrystalComponent::getColor },
	{ "setColor", &LuaLightsaberCrystalComponent::setColor },
	{ "setOwnerID", &LuaLightsaberCrystalComponent::setOwnerID },
	{ "setItemLevel", &LuaLightsaberCrystalComponent::setItemLevel },
	{ "setMinimumDamage", &LuaLightsaberCrystalComponent::setMinimumDamage },
	{ "setMaximumDamage", &LuaLightsaberCrystalComponent::setMaximumDamage },
	{ "setForceCost", &LuaLightsaberCrystalComponent::setForceCost },
	{ "setSacHealth", &LuaLightsaberCrystalComponent::setSacHealth },
	{ "setSacAction", &LuaLightsaberCrystalComponent::setSacAction },
	{ "setSacMind", &LuaLightsaberCrystalComponent::setSacMind },
	{ "setAttackSpeed", &LuaLightsaberCrystalComponent::setAttackSpeed },
	{ "setWoundChance", &LuaLightsaberCrystalComponent::setWoundChance },
	{ "isLightsaberCrystalObject", &LuaLightsaberCrystalComponent::isLightsaberCrystalObject },
	{ 0, 0 }
};

LuaLightsaberCrystalComponent::LuaLightsaberCrystalComponent(lua_State *L) : LuaComponent(L) {
	realObject = static_cast<LightsaberCrystalComponent*>(lua_touserdata(L, 1));
}

LuaLightsaberCrystalComponent::~LuaLightsaberCrystalComponent() {
}

int LuaLightsaberCrystalComponent::_setObject(lua_State* L) {
	realObject = static_cast<LightsaberCrystalComponent*>(lua_touserdata(L, -1));

	return 0;
}

int LuaLightsaberCrystalComponent::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaLightsaberCrystalComponent::initializeTransientMembers(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		realObject->initializeTransientMembers();

		return 0;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:initializeTransientMembers()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::notifyLoadFromDatabase(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		realObject->notifyLoadFromDatabase();

		return 0;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:notifyLoadFromDatabase()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::updateCraftingValues(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isboolean(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				CraftingValues* values = static_cast<CraftingValues*>(lua_touserdata(L, -2));
				bool firstUpdate = lua_toboolean(L, -1);

				realObject->updateCraftingValues(values, firstUpdate);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:updateCraftingValues(userdata, boolean)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'LightsaberCrystalComponent:updateCraftingValues(userdata, boolean)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:updateCraftingValues(userdata, boolean)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::fillAttributeList(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				AttributeListMessage* msg = static_cast<AttributeListMessage*>(lua_touserdata(L, -2));
				CreatureObject* object = static_cast<CreatureObject*>(lua_touserdata(L, -1));

				realObject->fillAttributeList(msg, object);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:fillAttributeList(userdata, userdata)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'LightsaberCrystalComponent:fillAttributeList(userdata, userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:fillAttributeList(userdata, userdata)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::fillObjectMenuResponse(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				ObjectMenuResponse* menuResponse = static_cast<ObjectMenuResponse*>(lua_touserdata(L, -2));
				CreatureObject* player = static_cast<CreatureObject*>(lua_touserdata(L, -1));

				realObject->fillObjectMenuResponse(menuResponse, player);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:fillObjectMenuResponse(userdata, userdata)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'LightsaberCrystalComponent:fillObjectMenuResponse(userdata, userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:fillObjectMenuResponse(userdata, userdata)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::handleObjectMenuSelect(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				CreatureObject* player = static_cast<CreatureObject*>(lua_touserdata(L, -2));
				byte selectedID = lua_tointeger(L, -1);

				int result = realObject->handleObjectMenuSelect(player, selectedID);

				lua_pushinteger(L, result);
				return 1;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:handleObjectMenuSelect(userdata, integer)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'LightsaberCrystalComponent:handleObjectMenuSelect(userdata, integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:handleObjectMenuSelect(userdata, integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::hasPlayerAsParent(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			CreatureObject* player = static_cast<CreatureObject*>(lua_touserdata(L, -1));

			bool result = realObject->hasPlayerAsParent(player);

			lua_pushboolean(L, result);
			return 1;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:hasPlayerAsParent(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:hasPlayerAsParent(userdata)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::tuneCrystal(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			CreatureObject* player = static_cast<CreatureObject*>(lua_touserdata(L, -1));

			realObject->tuneCrystal(player);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:tuneCrystal(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:tuneCrystal(userdata)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::updateCrystal(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->updateCrystal(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:updateCrystal(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:updateCrystal(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::inflictDamage(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isboolean(L, -1)) {
		if (lua_isboolean(L, -2)) {
			if (lua_isnumber(L, -3)) {
				if (lua_isnumber(L, -4)) {
					if (lua_isuserdata(L, -5)) {
						if (parameterCount == 5) {
							TangibleObject* attacker = static_cast<TangibleObject*>(lua_touserdata(L, -5));
							int damageType = lua_tointeger(L, -4);
							float damage = lua_tonumber(L, -3);
							bool destroy = lua_toboolean(L, -2);
							bool notifyClient = lua_toboolean(L, -1);

							int result = realObject->inflictDamage(attacker, damageType, damage, destroy, notifyClient);

							lua_pushinteger(L, result);
							return 1;
						} else {
							throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:inflictDamage(userdata, integer, number, boolean, boolean)'");
						}
					} else {
						throw LuaCallbackException(L, "invalid argument at 4 for lua method 'LightsaberCrystalComponent:inflictDamage(userdata, integer, number, boolean, boolean)'");
					}
				} else {
					throw LuaCallbackException(L, "invalid argument at 3 for lua method 'LightsaberCrystalComponent:inflictDamage(userdata, integer, number, boolean, boolean)'");
				}
			} else {
				throw LuaCallbackException(L, "invalid argument at 2 for lua method 'LightsaberCrystalComponent:inflictDamage(userdata, integer, number, boolean, boolean)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'LightsaberCrystalComponent:inflictDamage(userdata, integer, number, boolean, boolean)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:inflictDamage(userdata, integer, number, boolean, boolean)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::generateCrystalStats(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		realObject->generateCrystalStats();

		return 0;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:generateCrystalStats()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::validateCrystalStats(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		realObject->validateCrystalStats();

		return 0;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:validateCrystalStats()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getRandomizedStat(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (lua_isnumber(L, -2)) {
			if (lua_isnumber(L, -3)) {
				if (parameterCount == 3) {
					int min = lua_tointeger(L, -3);
					int max = lua_tointeger(L, -2);
					int itemLevel = lua_tointeger(L, -1);

					int result = realObject->getRandomizedStat(min, max, itemLevel);

					lua_pushinteger(L, result);
					return 1;
				}
			} else {
				throw LuaCallbackException(L, "invalid argument at 2 for lua method 'LightsaberCrystalComponent:getRandomizedStat(integer, integer, integer)'");
			}
		} else if (lua_isnumber(L, -2)) {
			if (lua_isnumber(L, -3)) {
				if (parameterCount == 3) {
					float min = lua_tonumber(L, -3);
					float max = lua_tonumber(L, -2);
					int itemLevel = lua_tointeger(L, -1);

					float result = realObject->getRandomizedStat(min, max, itemLevel);

					lua_pushnumber(L, result);
					return 1;
				}
			} else {
				throw LuaCallbackException(L, "invalid argument at 2 for lua method 'LightsaberCrystalComponent:getRandomizedStat(integer, integer, integer)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'LightsaberCrystalComponent:getRandomizedStat(integer, integer, integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:getRandomizedStat(integer, integer, integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getCrystalQuality(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getCrystalQuality();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getCrystalQuality()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getDamage(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getDamage();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getDamage()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getForceCost(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		float result = realObject->getForceCost();

		lua_pushnumber(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getForceCost()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getSacHealth(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getSacHealth();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getSacHealth()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getAttackSpeed(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		float result = realObject->getAttackSpeed();

		lua_pushnumber(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getAttackSpeed()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getSacAction(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getSacAction();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getSacAction()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getSacMind(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getSacMind();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getSacMind()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getWoundChance(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getWoundChance();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getWoundChance()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getOwnerID(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		unsigned long long result = realObject->getOwnerID();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getOwnerID()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getQuality(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getQuality();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getQuality()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setQuality(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int qual = lua_tointeger(L, -1);

			realObject->setQuality(qual);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setQuality(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setQuality(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::getColor(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getColor();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:getColor()'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setColor(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->setColor(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setColor(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setColor(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setOwnerID(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			unsigned long long value = lua_tointeger(L, -1);

			realObject->setOwnerID(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setOwnerID(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setOwnerID(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setItemLevel(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->setItemLevel(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setItemLevel(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setItemLevel(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setMinimumDamage(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->setMinimumDamage(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setMinimumDamage(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setMinimumDamage(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setMaximumDamage(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->setMaximumDamage(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setMaximumDamage(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setMaximumDamage(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setForceCost(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			float value = lua_tonumber(L, -1);

			realObject->setForceCost(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setForceCost(number)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setForceCost(number)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setSacHealth(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->setSacHealth(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setSacHealth(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setSacHealth(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setSacAction(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->setSacAction(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setSacAction(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setSacAction(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setSacMind(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->setSacMind(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setSacMind(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setSacMind(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setAttackSpeed(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			float value = lua_tonumber(L, -1);

			realObject->setAttackSpeed(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setAttackSpeed(number)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setAttackSpeed(number)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::setWoundChance(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int value = lua_tointeger(L, -1);

			realObject->setWoundChance(value);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:setWoundChance(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'LightsaberCrystalComponent:setWoundChance(integer)'");
	}
	return 0;
}

int LuaLightsaberCrystalComponent::isLightsaberCrystalObject(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isLightsaberCrystalObject();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'LightsaberCrystalComponent:isLightsaberCrystalObject()'");
	}
	return 0;
}

