/*
 *	autogen/server/zone/objects/tangible/components/droid/DroidHarvestObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "DroidHarvestObserver.h"

#include "server/zone/objects/tangible/components/droid/DroidHarvestModuleDataComponent.h"

/*
 *	DroidHarvestObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 2426178520};

DroidHarvestObserver::DroidHarvestObserver(DroidHarvestModuleDataComponent* m) : Observer(DummyConstructorParameter::instance()) {
	DroidHarvestObserverImplementation* _implementation = new DroidHarvestObserverImplementation(m);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DroidHarvestObserver");
}

DroidHarvestObserver::DroidHarvestObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("DroidHarvestObserver");
}

DroidHarvestObserver::~DroidHarvestObserver() {
}



int DroidHarvestObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	DroidHarvestObserverImplementation* _implementation = static_cast<DroidHarvestObserverImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

DistributedObjectServant* DroidHarvestObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* DroidHarvestObserver::_getImplementationForRead() const {
	return _impl;
}

void DroidHarvestObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DroidHarvestObserverImplementation
 */

DroidHarvestObserverImplementation::DroidHarvestObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


DroidHarvestObserverImplementation::~DroidHarvestObserverImplementation() {
}


void DroidHarvestObserverImplementation::finalize() {
}

void DroidHarvestObserverImplementation::_initializeImplementation() {
	_setClassHelper(DroidHarvestObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DroidHarvestObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DroidHarvestObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* DroidHarvestObserverImplementation::_getStub() {
	return _this.get();
}

DroidHarvestObserverImplementation::operator const DroidHarvestObserver*() {
	return _this.get();
}

void DroidHarvestObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void DroidHarvestObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void DroidHarvestObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void DroidHarvestObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void DroidHarvestObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void DroidHarvestObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void DroidHarvestObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void DroidHarvestObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("DroidHarvestObserver");

}

void DroidHarvestObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DroidHarvestObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DroidHarvestObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x4c3f5bd7: //DroidHarvestObserver.module
		TypeInfo<WeakReference<DroidHarvestModuleDataComponent* > >::parseFromBinaryStream(&module, stream);
		return true;

	}

	return false;
}

void DroidHarvestObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DroidHarvestObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DroidHarvestObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x4c3f5bd7; //DroidHarvestObserver.module
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<WeakReference<DroidHarvestModuleDataComponent* > >::toBinaryStream(&module, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

DroidHarvestObserverImplementation::DroidHarvestObserverImplementation(DroidHarvestModuleDataComponent* m) {
	_initializeImplementation();
	// server/zone/objects/tangible/components/droid/DroidHarvestObserver.idl():  		module = m;
	module = m;
}

/*
 *	DroidHarvestObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DroidHarvestObserverAdapter::DroidHarvestObserverAdapter(DroidHarvestObserver* obj) : ObserverAdapter(obj) {
}

void DroidHarvestObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

int DroidHarvestObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<DroidHarvestObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	DroidHarvestObserverHelper
 */

DroidHarvestObserverHelper* DroidHarvestObserverHelper::staticInitializer = DroidHarvestObserverHelper::instance();

DroidHarvestObserverHelper::DroidHarvestObserverHelper() {
	className = "DroidHarvestObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void DroidHarvestObserverHelper::finalizeHelper() {
	DroidHarvestObserverHelper::finalize();
}

DistributedObject* DroidHarvestObserverHelper::instantiateObject() {
	return new DroidHarvestObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* DroidHarvestObserverHelper::instantiateServant() {
	return new DroidHarvestObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DroidHarvestObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DroidHarvestObserverAdapter(static_cast<DroidHarvestObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

