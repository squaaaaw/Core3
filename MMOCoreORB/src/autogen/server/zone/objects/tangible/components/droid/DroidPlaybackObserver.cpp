/*
 *	autogen/server/zone/objects/tangible/components/droid/DroidPlaybackObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "DroidPlaybackObserver.h"

#include "server/zone/objects/tangible/components/droid/DroidPlaybackModuleDataComponent.h"

/*
 *	DroidPlaybackObserverStub
 */

enum {RPC_SETSLOT__INT_ = 2217904037,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_};

DroidPlaybackObserver::DroidPlaybackObserver(DroidPlaybackModuleDataComponent* m) : Observer(DummyConstructorParameter::instance()) {
	DroidPlaybackObserverImplementation* _implementation = new DroidPlaybackObserverImplementation(m);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DroidPlaybackObserver");
}

DroidPlaybackObserver::DroidPlaybackObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("DroidPlaybackObserver");
}

DroidPlaybackObserver::~DroidPlaybackObserver() {
}



void DroidPlaybackObserver::setSlot(int i) {
	DroidPlaybackObserverImplementation* _implementation = static_cast<DroidPlaybackObserverImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSLOT__INT_);
		method.addSignedIntParameter(i);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSlot(i);
	}
}

int DroidPlaybackObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	DroidPlaybackObserverImplementation* _implementation = static_cast<DroidPlaybackObserverImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

DistributedObjectServant* DroidPlaybackObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* DroidPlaybackObserver::_getImplementationForRead() const {
	return _impl;
}

void DroidPlaybackObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DroidPlaybackObserverImplementation
 */

DroidPlaybackObserverImplementation::DroidPlaybackObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


DroidPlaybackObserverImplementation::~DroidPlaybackObserverImplementation() {
}


void DroidPlaybackObserverImplementation::finalize() {
}

void DroidPlaybackObserverImplementation::_initializeImplementation() {
	_setClassHelper(DroidPlaybackObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DroidPlaybackObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DroidPlaybackObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* DroidPlaybackObserverImplementation::_getStub() {
	return _this.get();
}

DroidPlaybackObserverImplementation::operator const DroidPlaybackObserver*() {
	return _this.get();
}

void DroidPlaybackObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void DroidPlaybackObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void DroidPlaybackObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void DroidPlaybackObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void DroidPlaybackObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void DroidPlaybackObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void DroidPlaybackObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void DroidPlaybackObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("DroidPlaybackObserver");

}

void DroidPlaybackObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DroidPlaybackObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DroidPlaybackObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x2969d708: //DroidPlaybackObserver.module
		TypeInfo<WeakReference<DroidPlaybackModuleDataComponent* > >::parseFromBinaryStream(&module, stream);
		return true;

	case 0xdf97e02d: //DroidPlaybackObserver.slot
		TypeInfo<int >::parseFromBinaryStream(&slot, stream);
		return true;

	}

	return false;
}

void DroidPlaybackObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DroidPlaybackObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DroidPlaybackObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x2969d708; //DroidPlaybackObserver.module
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<WeakReference<DroidPlaybackModuleDataComponent* > >::toBinaryStream(&module, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xdf97e02d; //DroidPlaybackObserver.slot
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&slot, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

DroidPlaybackObserverImplementation::DroidPlaybackObserverImplementation(DroidPlaybackModuleDataComponent* m) {
	_initializeImplementation();
	// server/zone/objects/tangible/components/droid/DroidPlaybackObserver.idl():  		module = m;
	module = m;
	// server/zone/objects/tangible/components/droid/DroidPlaybackObserver.idl():  		slot = -1;
	slot = -1;
}

void DroidPlaybackObserverImplementation::setSlot(int i) {
	// server/zone/objects/tangible/components/droid/DroidPlaybackObserver.idl():  		slot = i;
	slot = i;
}

/*
 *	DroidPlaybackObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DroidPlaybackObserverAdapter::DroidPlaybackObserverAdapter(DroidPlaybackObserver* obj) : ObserverAdapter(obj) {
}

void DroidPlaybackObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETSLOT__INT_:
		{
			int i = inv->getSignedIntParameter();
			
			setSlot(i);
			
		}
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

void DroidPlaybackObserverAdapter::setSlot(int i) {
	(static_cast<DroidPlaybackObserver*>(stub))->setSlot(i);
}

int DroidPlaybackObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<DroidPlaybackObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	DroidPlaybackObserverHelper
 */

DroidPlaybackObserverHelper* DroidPlaybackObserverHelper::staticInitializer = DroidPlaybackObserverHelper::instance();

DroidPlaybackObserverHelper::DroidPlaybackObserverHelper() {
	className = "DroidPlaybackObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void DroidPlaybackObserverHelper::finalizeHelper() {
	DroidPlaybackObserverHelper::finalize();
}

DistributedObject* DroidPlaybackObserverHelper::instantiateObject() {
	return new DroidPlaybackObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* DroidPlaybackObserverHelper::instantiateServant() {
	return new DroidPlaybackObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DroidPlaybackObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DroidPlaybackObserverAdapter(static_cast<DroidPlaybackObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

