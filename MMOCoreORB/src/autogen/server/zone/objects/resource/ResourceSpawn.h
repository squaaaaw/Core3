/*
 *	autogen/server/zone/objects/resource/ResourceSpawn.h generated by engine3 IDL compiler 0.60
 */

#ifndef RESOURCESPAWN_H_
#define RESOURCESPAWN_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceContainer;

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

#include "engine/lua/Luna.h"

#include "server/zone/objects/player/sui/listbox/SuiListBox.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/resource/SpawnMap.h"

#include "engine/log/Logger.h"

#include "system/util/VectorMap.h"

#include "system/util/Vector.h"

#include "server/zone/objects/scene/SceneObject.h"

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceSpawn : public SceneObject {
public:
	ResourceSpawn();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void decreaseContainerReferenceCount();

	bool isResourceSpawn();

	/**
	 * Sets the resource spawn with the system generated name
	 * @pre { }
	 * @post { }
	 * @param name generated name to set this object with
	 */
	void setName(const String& name);

	void setType(const String& type);

	void setSpawnPool(int pool, const String& slot);

	void setZoneRestriction(const String& zoneName);

	/**
	 * adds a class to the resource
	 * @pre { }
	 * @post { }
	 * @param class string added to spawn
	 */
	void addClass(const String& newclass);

	void addStfClass(const String& newclass);

	void addAttribute(const String& attribute, int value);

	bool isType(const String& type);

	void setSurveyToolType(int type);

	void setIsEnergy(bool val);

	String getName();

	String getType();

	String getClass(int index);

	String getStfClass(int index);

	String getFinalClass();

	String getFamilyName();

	String getSurveyMissionSpawnFamilyName();

	void setSpawned(unsigned long long t);

	void setDespawned(unsigned long long t);

	unsigned long long getDespawned();

	void setContainerCRC(unsigned int crc);

	unsigned int getContainerCRC() const;

	int getSpawnPool() const;

	String getPoolSlot() const;

	bool isEnergy();

	String getZoneRestriction() const;

	int getSurveyToolType() const;

	int getSpawnMapSize();

	void extractResource(const String& zoneName, int units);

	Reference<ResourceContainer* > createResource(int units);

	String getSpawnMapZone(int i);

	bool isUnknownType();

	void createSpawnMaps(bool jtl, int minpool, int maxpool, const String& zonerestriction, Vector<String>& activeZones);

	unsigned int getPlanetCRC();

	float getDensityAt(const String& zoneName, float x, float y);

	bool inShift();

	int getAttributeAndValue(String& attribute, int index);

	int getAttributeValue(int index);

	int getValueOf(int index);

	int getValueOf(const String& attribute);

	void addStatsToDeedListBox(SuiListBox* suil);

	void print();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ResourceSpawn(DummyConstructorParameter* param);

	virtual ~ResourceSpawn();

	friend class ResourceSpawnHelper;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceSpawnImplementation : public SceneObjectImplementation {
protected:
	String spawnType;

	String spawnName;

	Vector<String> spawnClasses;

	Vector<String> stfSpawnClasses;

	VectorMap<String, int> spawnAttributes;

	String poolSlot;

	int spawnPool;

	String zoneRestriction;

	int surveyToolType;

	unsigned int containerCRC;

	unsigned long long spawned;

	unsigned long long despawned;

	SpawnMap spawnMaps;

	unsigned long long maxUnitsSpawned;

	unsigned long long unitsInCirculation;

	int containerReferenceCount;

	bool dbDestroyed;

	bool energy;

public:
	ResourceSpawnImplementation();

	ResourceSpawnImplementation(DummyConstructorParameter* param);

	void finalize();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void decreaseContainerReferenceCount();

	bool isResourceSpawn();

	/**
	 * Sets the resource spawn with the system generated name
	 * @pre { }
	 * @post { }
	 * @param name generated name to set this object with
	 */
	void setName(const String& name);

	void setType(const String& type);

	void setSpawnPool(int pool, const String& slot);

	void setZoneRestriction(const String& zoneName);

	/**
	 * adds a class to the resource
	 * @pre { }
	 * @post { }
	 * @param class string added to spawn
	 */
	void addClass(const String& newclass);

	void addStfClass(const String& newclass);

	void addAttribute(const String& attribute, int value);

	bool isType(const String& type);

	void setSurveyToolType(int type);

	void setIsEnergy(bool val);

	String getName();

	String getType();

	String getClass(int index);

	String getStfClass(int index);

	String getFinalClass();

	String getFamilyName();

	String getSurveyMissionSpawnFamilyName();

	void setSpawned(unsigned long long t);

	void setDespawned(unsigned long long t);

	unsigned long long getDespawned();

	void setContainerCRC(unsigned int crc);

	unsigned int getContainerCRC() const;

	int getSpawnPool() const;

	String getPoolSlot() const;

	bool isEnergy();

	String getZoneRestriction() const;

	int getSurveyToolType() const;

	int getSpawnMapSize();

	void extractResource(const String& zoneName, int units);

	Reference<ResourceContainer* > createResource(int units);

	String getSpawnMapZone(int i);

	bool isUnknownType();

	void createSpawnMaps(bool jtl, int minpool, int maxpool, const String& zonerestriction, Vector<String>& activeZones);

private:
	int getConcentration(bool jtl);

public:
	unsigned int getPlanetCRC();

private:
	Vector<String> getSpawnZones(int minpool, int maxpool, const String& zonerestriction, Vector<String>& activeZones);

public:
	float getDensityAt(const String& zoneName, float x, float y);

	bool inShift();

	int getAttributeAndValue(String& attribute, int index);

	int getAttributeValue(int index);

	int getValueOf(int index);

	int getValueOf(const String& attribute);

	void addStatsToDeedListBox(SuiListBox* suil);

	void print();

	WeakReference<ResourceSpawn*> _this;

	operator const ResourceSpawn*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ResourceSpawnImplementation();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ResourceSpawn;
};

class ResourceSpawnAdapter : public SceneObjectAdapter {
public:
	ResourceSpawnAdapter(ResourceSpawn* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void finalize();

	void decreaseContainerReferenceCount();

	bool isResourceSpawn();

	void setName(const String& name);

	void setType(const String& type);

	void setSpawnPool(int pool, const String& slot);

	void setZoneRestriction(const String& zoneName);

	void addClass(const String& newclass);

	void addStfClass(const String& newclass);

	void addAttribute(const String& attribute, int value);

	bool isType(const String& type);

	void setSurveyToolType(int type);

	void setIsEnergy(bool val);

	String getName();

	String getType();

	String getClass(int index);

	String getStfClass(int index);

	String getFinalClass();

	String getFamilyName();

	String getSurveyMissionSpawnFamilyName();

	void setSpawned(unsigned long long t);

	void setDespawned(unsigned long long t);

	unsigned long long getDespawned();

	void setContainerCRC(unsigned int crc);

	unsigned int getContainerCRC() const;

	int getSpawnPool() const;

	String getPoolSlot() const;

	bool isEnergy();

	String getZoneRestriction() const;

	int getSurveyToolType() const;

	int getSpawnMapSize();

	void extractResource(const String& zoneName, int units);

	Reference<ResourceContainer* > createResource(int units);

	unsigned int getPlanetCRC();

	int getAttributeValue(int index);

	int getValueOf(int index);

	int getValueOf(const String& attribute);

	void addStatsToDeedListBox(SuiListBox* suil);

};

class ResourceSpawnHelper : public DistributedObjectClassHelper, public Singleton<ResourceSpawnHelper> {
	static ResourceSpawnHelper* staticInitializer;

public:
	ResourceSpawnHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ResourceSpawnHelper>;
};

class LuaResourceSpawn {
public:
	static const char className[];
	static Luna<LuaResourceSpawn>::RegType Register[];

	LuaResourceSpawn(lua_State *L);
	virtual ~LuaResourceSpawn();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int fillAttributeList(lua_State *L);
	int decreaseContainerReferenceCount(lua_State *L);
	int isResourceSpawn(lua_State *L);
	int setName(lua_State *L);
	int setType(lua_State *L);
	int setSpawnPool(lua_State *L);
	int setZoneRestriction(lua_State *L);
	int addClass(lua_State *L);
	int addStfClass(lua_State *L);
	int addAttribute(lua_State *L);
	int isType(lua_State *L);
	int setSurveyToolType(lua_State *L);
	int setIsEnergy(lua_State *L);
	int getName(lua_State *L);
	int getType(lua_State *L);
	int getClass(lua_State *L);
	int getStfClass(lua_State *L);
	int getFinalClass(lua_State *L);
	int getFamilyName(lua_State *L);
	int getSurveyMissionSpawnFamilyName(lua_State *L);
	int setSpawned(lua_State *L);
	int setDespawned(lua_State *L);
	int getDespawned(lua_State *L);
	int setContainerCRC(lua_State *L);
	int getContainerCRC(lua_State *L);
	int getSpawnPool(lua_State *L);
	int getPoolSlot(lua_State *L);
	int isEnergy(lua_State *L);
	int getZoneRestriction(lua_State *L);
	int getSurveyToolType(lua_State *L);
	int getSpawnMapSize(lua_State *L);
	int extractResource(lua_State *L);
	int createResource(lua_State *L);
	int getSpawnMapZone(lua_State *L);
	int isUnknownType(lua_State *L);
	int createSpawnMaps(lua_State *L);
	int getPlanetCRC(lua_State *L);
	int getDensityAt(lua_State *L);
	int inShift(lua_State *L);
	int getAttributeAndValue(lua_State *L);
	int getAttributeValue(lua_State *L);
	int getValueOf(lua_State *L);
	int addStatsToDeedListBox(lua_State *L);
	int print(lua_State *L);

	Reference<ResourceSpawn*> realObject;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

#endif /*RESOURCESPAWN_H_*/
