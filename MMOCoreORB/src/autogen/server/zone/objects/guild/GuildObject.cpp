/*
 *	autogen/server/zone/objects/guild/GuildObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "GuildObject.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/objects/guild/GuildUpdateEvent.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	GuildObjectStub
 */

const byte GuildObject::PERMISSION_NONE = 0x00;

const byte GuildObject::PERMISSION_MAIL = 0x01;

const byte GuildObject::PERMISSION_SPONSOR = 0x02;

const byte GuildObject::PERMISSION_TITLE = 0x04;

const byte GuildObject::PERMISSION_ACCEPT = 0x08;

const byte GuildObject::PERMISSION_KICK = 0x10;

const byte GuildObject::PERMISSION_WAR = 0x20;

const byte GuildObject::PERMISSION_NAME = 0x40;

const byte GuildObject::PERMISSION_DISBAND = 0x80;

const byte GuildObject::PERMISSION_ALL = 0xFF;

const byte GuildObject::WAR_NONE = 0;

const byte GuildObject::WAR_MUTUAL = 0x3D;

const byte GuildObject::WAR_IN = 0x3C;

const byte GuildObject::WAR_OUT = 0x3E;

const byte GuildObject::ELECTION_DISABLED = 0;

const byte GuildObject::ELECTION_FIRST_WEEK = 1;

const byte GuildObject::ELECTION_SECOND_WEEK = 2;

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 178765840,RPC_RESCHEDULEUPDATEEVENT__INT_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_BROADCASTMESSAGE__BASEMESSAGE_,RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_,RPC_ADDMEMBER__LONG_,RPC_REMOVEMEMBER__LONG_,RPC_HASMEMBER__LONG_,RPC_GETMEMBER__INT_,RPC_SETGUILDMEMBERTITLE__LONG_STRING_,RPC_GETGUILDMEMBERTITLE__LONG_,RPC_ADDSPONSOREDPLAYER__LONG_,RPC_REMOVESPONSOREDPLAYER__LONG_,RPC_HASSPONSOREDPLAYER__LONG_,RPC_GETSPONSOREDPLAYER__INT_,RPC_GETSPONSOREDPLAYERCOUNT__,RPC_SETCHATROOM__CHATROOM_,RPC_GETCHATROOM__,RPC_GETTOTALMEMBERS__,RPC_GETGUILDLEADERID__,RPC_GETGUILDABBREV__,RPC_SETGUILDABBREV__STRING_,RPC_SETGUILDLEADERID__LONG_,RPC_SETGUILDID__INT_,RPC_GETGUILDID__,RPC_SETGUILDNAME__STRING_,RPC_GETGUILDNAME__,RPC_SETPENDINGNEWNAME__STRING_,RPC_GETPENDINGNEWNAME__,RPC_SETPENDINGNEWABBREV__STRING_,RPC_GETPENDINGNEWABBREV__,RPC_SETRENAMEPENDING__BOOL_,RPC_ISRENAMEPENDING__,RPC_SETRENAMERID__LONG_,RPC_GETRENAMERID__,RPC_RESETRENAME__,RPC_GETGUILDKEY__,RPC_ISGUILDOBJECT__,RPC_ISGUILDLEADER__CREATUREOBJECT_,RPC_GETWARSTATUS__LONG_,RPC_SETWARSTATUS__LONG_BYTE_,RPC_ISINWARINGGUILD__CREATUREOBJECT_,RPC_ISATWARWITH__LONG_,RPC_HASDECLAREDWARON__LONG_,RPC_HASDECLAREDWARBY__LONG_,RPC_HASMAILPERMISSION__LONG_,RPC_HASSPONSORPERMISSION__LONG_,RPC_HASACCEPTPERMISSION__LONG_,RPC_HASDISBANDPERMISSION__LONG_,RPC_HASKICKPERMISSION__LONG_,RPC_HASNAMEPERMISSION__LONG_,RPC_HASTITLEPERMISSION__LONG_,RPC_HASWARPERMISSION__LONG_,RPC_TOGGLEMEMBERPERMISSION__LONG_BYTE_,RPC_SETTRANSFERPENDING__BOOL_,RPC_ISTRANSFERPENDING__,RPC_ISELECTIONENABLED__,RPC_GETELECTIONSTATE__,RPC_SETELECTIONSTATE__BYTE_,RPC_ADDCANDIDATE__LONG_,RPC_SETVOTE__LONG_LONG_,RPC_RESETELECTION__BOOL_,RPC_REMOVECANDIDATE__LONG_,RPC_ISCANDIDATE__LONG_,RPC_GETMEMBERWITHHIGHESTPERMISSION__};

GuildObject::GuildObject() : SceneObject(DummyConstructorParameter::instance()) {
	GuildObjectImplementation* _implementation = new GuildObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("GuildObject");
}

GuildObject::GuildObject(DummyConstructorParameter* param) : SceneObject(param) {
	_setClassName("GuildObject");
}

GuildObject::~GuildObject() {
}



void GuildObject::initializeTransientMembers() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void GuildObject::rescheduleUpdateEvent(unsigned int seconds) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESCHEDULEUPDATEEVENT__INT_);
		method.addUnsignedIntParameter(seconds);

		method.executeWithVoidReturn();
	} else {
		_implementation->rescheduleUpdateEvent(seconds);
	}
}

Time* GuildObject::getNextUpdateTime() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getNextUpdateTime();
	}
}

void GuildObject::sendBaselinesTo(SceneObject* player) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBaselinesTo(player);
	}
}

void GuildObject::broadcastMessage(BaseMessage* msg) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEMESSAGE_);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessage(msg);
	}
}

void GuildObject::broadcastMessage(CreatureObject* player, BaseMessage* msg, bool sendSelf) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_);
		method.addObjectParameter(player);
		method.addObjectParameter(msg);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessage(player, msg, sendSelf);
	}
}

void GuildObject::addMember(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		_implementation->addMember(playerID);
	}
}

void GuildObject::removeMember(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeMember(playerID);
	}
}

bool GuildObject::hasMember(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasMember(playerID);
	}
}

GuildMemberInfo* GuildObject::getMember(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getMember(playerID);
	}
}

unsigned long long GuildObject::getMember(int index) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMEMBER__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getMember(index);
	}
}

void GuildObject::setGuildMemberTitle(unsigned long long playerID, const String& title) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDMEMBERTITLE__LONG_STRING_);
		method.addUnsignedLongParameter(playerID);
		method.addAsciiParameter(title);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGuildMemberTitle(playerID, title);
	}
}

String GuildObject::getGuildMemberTitle(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDMEMBERTITLE__LONG_);
		method.addUnsignedLongParameter(playerID);

		String _return_getGuildMemberTitle;
		method.executeWithAsciiReturn(_return_getGuildMemberTitle);
		return _return_getGuildMemberTitle;
	} else {
		return _implementation->getGuildMemberTitle(playerID);
	}
}

void GuildObject::addSponsoredPlayer(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSPONSOREDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		_implementation->addSponsoredPlayer(playerID);
	}
}

void GuildObject::removeSponsoredPlayer(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESPONSOREDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeSponsoredPlayer(playerID);
	}
}

bool GuildObject::hasSponsoredPlayer(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSPONSOREDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasSponsoredPlayer(playerID);
	}
}

unsigned long long GuildObject::getSponsoredPlayer(int idx) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPONSOREDPLAYER__INT_);
		method.addSignedIntParameter(idx);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getSponsoredPlayer(idx);
	}
}

int GuildObject::getSponsoredPlayerCount() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPONSOREDPLAYERCOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSponsoredPlayerCount();
	}
}

void GuildObject::setChatRoom(ChatRoom* room) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCHATROOM__CHATROOM_);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setChatRoom(room);
	}
}

ChatRoom* GuildObject::getChatRoom() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getChatRoom();
	}
}

int GuildObject::getTotalMembers() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALMEMBERS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalMembers();
	}
}

unsigned long long GuildObject::getGuildLeaderID() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDLEADERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getGuildLeaderID();
	}
}

GuildMemberList* GuildObject::getGuildMemberList() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getGuildMemberList();
	}
}

String GuildObject::getGuildAbbrev() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDABBREV__);

		String _return_getGuildAbbrev;
		method.executeWithAsciiReturn(_return_getGuildAbbrev);
		return _return_getGuildAbbrev;
	} else {
		return _implementation->getGuildAbbrev();
	}
}

void GuildObject::setGuildAbbrev(const String& abbrev) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDABBREV__STRING_);
		method.addAsciiParameter(abbrev);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGuildAbbrev(abbrev);
	}
}

void GuildObject::setGuildLeaderID(unsigned long long leaderID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDLEADERID__LONG_);
		method.addUnsignedLongParameter(leaderID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGuildLeaderID(leaderID);
	}
}

void GuildObject::setGuildID(unsigned int id) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDID__INT_);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGuildID(id);
	}
}

unsigned int GuildObject::getGuildID() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDID__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getGuildID();
	}
}

void GuildObject::setGuildName(const String& gname) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDNAME__STRING_);
		method.addAsciiParameter(gname);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setGuildName(gname);
	}
}

String GuildObject::getGuildName() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDNAME__);

		String _return_getGuildName;
		method.executeWithAsciiReturn(_return_getGuildName);
		return _return_getGuildName;
	} else {
		return _implementation->getGuildName();
	}
}

void GuildObject::setPendingNewName(const String& newName) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPENDINGNEWNAME__STRING_);
		method.addAsciiParameter(newName);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setPendingNewName(newName);
	}
}

String GuildObject::getPendingNewName() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPENDINGNEWNAME__);

		String _return_getPendingNewName;
		method.executeWithAsciiReturn(_return_getPendingNewName);
		return _return_getPendingNewName;
	} else {
		return _implementation->getPendingNewName();
	}
}

void GuildObject::setPendingNewAbbrev(const String& newAbbrev) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPENDINGNEWABBREV__STRING_);
		method.addAsciiParameter(newAbbrev);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setPendingNewAbbrev(newAbbrev);
	}
}

String GuildObject::getPendingNewAbbrev() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPENDINGNEWABBREV__);

		String _return_getPendingNewAbbrev;
		method.executeWithAsciiReturn(_return_getPendingNewAbbrev);
		return _return_getPendingNewAbbrev;
	} else {
		return _implementation->getPendingNewAbbrev();
	}
}

void GuildObject::setRenamePending(bool pending) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRENAMEPENDING__BOOL_);
		method.addBooleanParameter(pending);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setRenamePending(pending);
	}
}

bool GuildObject::isRenamePending() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRENAMEPENDING__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRenamePending();
	}
}

void GuildObject::setRenamerID(unsigned long long id) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRENAMERID__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setRenamerID(id);
	}
}

unsigned long long GuildObject::getRenamerID() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRENAMERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getRenamerID();
	}
}

void GuildObject::resetRename() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETRENAME__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->resetRename();
	}
}

String GuildObject::getGuildKey() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDKEY__);

		String _return_getGuildKey;
		method.executeWithAsciiReturn(_return_getGuildKey);
		return _return_getGuildKey;
	} else {
		return _implementation->getGuildKey();
	}
}

bool GuildObject::isGuildObject() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGUILDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isGuildObject();
	}
}

bool GuildObject::isGuildLeader(CreatureObject* player) const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGUILDLEADER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isGuildLeader(player);
	}
}

byte GuildObject::getWarStatus(unsigned long long guildoid) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWARSTATUS__LONG_);
		method.addUnsignedLongParameter(guildoid);

		return method.executeWithByteReturn();
	} else {
		return _implementation->getWarStatus(guildoid);
	}
}

void GuildObject::setWarStatus(unsigned long long guildoid, byte status) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWARSTATUS__LONG_BYTE_);
		method.addUnsignedLongParameter(guildoid);
		method.addByteParameter(status);

		method.executeWithVoidReturn();
	} else {
		_implementation->setWarStatus(guildoid, status);
	}
}

bool GuildObject::isInWaringGuild(CreatureObject* creature) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINWARINGGUILD__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInWaringGuild(creature);
	}
}

bool GuildObject::isAtWarWith(unsigned long long guildoid) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISATWARWITH__LONG_);
		method.addUnsignedLongParameter(guildoid);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isAtWarWith(guildoid);
	}
}

bool GuildObject::hasDeclaredWarOn(unsigned long long guildoid) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASDECLAREDWARON__LONG_);
		method.addUnsignedLongParameter(guildoid);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasDeclaredWarOn(guildoid);
	}
}

bool GuildObject::hasDeclaredWarBy(unsigned long long guildoid) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASDECLAREDWARBY__LONG_);
		method.addUnsignedLongParameter(guildoid);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasDeclaredWarBy(guildoid);
	}
}

VectorMap<unsigned long long, byte>* GuildObject::getWaringGuilds() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getWaringGuilds();
	}
}

bool GuildObject::hasMailPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMAILPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasMailPermission(playerID);
	}
}

bool GuildObject::hasSponsorPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSPONSORPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasSponsorPermission(playerID);
	}
}

bool GuildObject::hasAcceptPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASACCEPTPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasAcceptPermission(playerID);
	}
}

bool GuildObject::hasDisbandPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASDISBANDPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasDisbandPermission(playerID);
	}
}

bool GuildObject::hasKickPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASKICKPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasKickPermission(playerID);
	}
}

bool GuildObject::hasNamePermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASNAMEPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasNamePermission(playerID);
	}
}

bool GuildObject::hasTitlePermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASTITLEPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasTitlePermission(playerID);
	}
}

bool GuildObject::hasWarPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASWARPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasWarPermission(playerID);
	}
}

void GuildObject::toggleMemberPermission(unsigned long long playerID, byte permission) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOGGLEMEMBERPERMISSION__LONG_BYTE_);
		method.addUnsignedLongParameter(playerID);
		method.addByteParameter(permission);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->toggleMemberPermission(playerID, permission);
	}
}

void GuildObject::setTransferPending(bool transfer) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTRANSFERPENDING__BOOL_);
		method.addBooleanParameter(transfer);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setTransferPending(transfer);
	}
}

bool GuildObject::isTransferPending() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTRANSFERPENDING__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTransferPending();
	}
}

bool GuildObject::isElectionEnabled() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISELECTIONENABLED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isElectionEnabled();
	}
}

byte GuildObject::getElectionState() const {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETELECTIONSTATE__);

		return method.executeWithByteReturn();
	} else {
		return _implementation->getElectionState();
	}
}

void GuildObject::setElectionState(byte state) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETELECTIONSTATE__BYTE_);
		method.addByteParameter(state);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setElectionState(state);
	}
}

void GuildObject::addCandidate(unsigned long long candidateoid) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCANDIDATE__LONG_);
		method.addUnsignedLongParameter(candidateoid);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addCandidate(candidateoid);
	}
}

void GuildObject::setVote(unsigned long long voteroid, unsigned long long candidateoid) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETVOTE__LONG_LONG_);
		method.addUnsignedLongParameter(voteroid);
		method.addUnsignedLongParameter(candidateoid);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setVote(voteroid, candidateoid);
	}
}

VectorMap<unsigned long long, int>* GuildObject::getCandidates() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCandidates();
	}
}

void GuildObject::resetElection(bool disable) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETELECTION__BOOL_);
		method.addBooleanParameter(disable);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->resetElection(disable);
	}
}

void GuildObject::removeCandidate(unsigned long long candidateoid) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVECANDIDATE__LONG_);
		method.addUnsignedLongParameter(candidateoid);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeCandidate(candidateoid);
	}
}

bool GuildObject::isCandidate(unsigned long long candidateoid) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCANDIDATE__LONG_);
		method.addUnsignedLongParameter(candidateoid);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCandidate(candidateoid);
	}
}

unsigned long long GuildObject::getMemberWithHighestPermission() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMEMBERWITHHIGHESTPERMISSION__);

		return method.executeWithUnsignedLongReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getMemberWithHighestPermission();
	}
}

DistributedObjectServant* GuildObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* GuildObject::_getImplementationForRead() const {
	return _impl;
}

void GuildObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GuildObjectImplementation
 */

const byte GuildObjectImplementation::PERMISSION_NONE = 0x00;

const byte GuildObjectImplementation::PERMISSION_MAIL = 0x01;

const byte GuildObjectImplementation::PERMISSION_SPONSOR = 0x02;

const byte GuildObjectImplementation::PERMISSION_TITLE = 0x04;

const byte GuildObjectImplementation::PERMISSION_ACCEPT = 0x08;

const byte GuildObjectImplementation::PERMISSION_KICK = 0x10;

const byte GuildObjectImplementation::PERMISSION_WAR = 0x20;

const byte GuildObjectImplementation::PERMISSION_NAME = 0x40;

const byte GuildObjectImplementation::PERMISSION_DISBAND = 0x80;

const byte GuildObjectImplementation::PERMISSION_ALL = 0xFF;

const byte GuildObjectImplementation::WAR_NONE = 0;

const byte GuildObjectImplementation::WAR_MUTUAL = 0x3D;

const byte GuildObjectImplementation::WAR_IN = 0x3C;

const byte GuildObjectImplementation::WAR_OUT = 0x3E;

const byte GuildObjectImplementation::ELECTION_DISABLED = 0;

const byte GuildObjectImplementation::ELECTION_FIRST_WEEK = 1;

const byte GuildObjectImplementation::ELECTION_SECOND_WEEK = 2;

GuildObjectImplementation::GuildObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


GuildObjectImplementation::~GuildObjectImplementation() {
}


void GuildObjectImplementation::finalize() {
}

void GuildObjectImplementation::_initializeImplementation() {
	_setClassHelper(GuildObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void GuildObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<GuildObject*>(stub);
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* GuildObjectImplementation::_getStub() {
	return _this.get();
}

GuildObjectImplementation::operator const GuildObject*() {
	return _this.get();
}

void GuildObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void GuildObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void GuildObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void GuildObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void GuildObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void GuildObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void GuildObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void GuildObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("GuildObject");

}

void GuildObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GuildObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GuildObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SceneObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x95482220: //GuildObject.chatRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&chatRoom, stream);
		return true;

	case 0x324b0858: //GuildObject.guildMembers
		TypeInfo<GuildMemberList >::parseFromBinaryStream(&guildMembers, stream);
		return true;

	case 0x50956ded: //GuildObject.sponsoredPlayers
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&sponsoredPlayers, stream);
		return true;

	case 0x37b3e51d: //GuildObject.waringGuilds
		TypeInfo<VectorMap<unsigned long long, byte> >::parseFromBinaryStream(&waringGuilds, stream);
		return true;

	case 0x5260abb9: //GuildObject.guildID
		TypeInfo<unsigned int >::parseFromBinaryStream(&guildID, stream);
		return true;

	case 0xef6c10e4: //GuildObject.guildName
		TypeInfo<String >::parseFromBinaryStream(&guildName, stream);
		return true;

	case 0x9a679b5a: //GuildObject.guildAbbrev
		TypeInfo<String >::parseFromBinaryStream(&guildAbbrev, stream);
		return true;

	case 0xb4b72b1d: //GuildObject.pendingNewName
		TypeInfo<String >::parseFromBinaryStream(&pendingNewName, stream);
		return true;

	case 0x32faf00c: //GuildObject.pendingNewAbbrev
		TypeInfo<String >::parseFromBinaryStream(&pendingNewAbbrev, stream);
		return true;

	case 0xb57b210a: //GuildObject.renamePending
		TypeInfo<bool >::parseFromBinaryStream(&renamePending, stream);
		return true;

	case 0xb60b5272: //GuildObject.renamerID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&renamerID, stream);
		return true;

	case 0xd607c575: //GuildObject.nextUpdateTime
		TypeInfo<Time >::parseFromBinaryStream(&nextUpdateTime, stream);
		return true;

	case 0x462af605: //GuildObject.guildLeaderID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&guildLeaderID, stream);
		return true;

	case 0x8819fa28: //GuildObject.electionState
		TypeInfo<byte >::parseFromBinaryStream(&electionState, stream);
		return true;

	case 0x8266c0dc: //GuildObject.candidates
		TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&candidates, stream);
		return true;

	case 0xf8f20c47: //GuildObject.votes
		TypeInfo<VectorMap<unsigned long long, unsigned long long> >::parseFromBinaryStream(&votes, stream);
		return true;

	}

	return false;
}

void GuildObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GuildObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GuildObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SceneObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x95482220; //GuildObject.chatRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&chatRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x324b0858; //GuildObject.guildMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<GuildMemberList >::toBinaryStream(&guildMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x50956ded; //GuildObject.sponsoredPlayers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&sponsoredPlayers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x37b3e51d; //GuildObject.waringGuilds
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, byte> >::toBinaryStream(&waringGuilds, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5260abb9; //GuildObject.guildID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&guildID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xef6c10e4; //GuildObject.guildName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&guildName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9a679b5a; //GuildObject.guildAbbrev
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&guildAbbrev, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb4b72b1d; //GuildObject.pendingNewName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&pendingNewName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x32faf00c; //GuildObject.pendingNewAbbrev
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&pendingNewAbbrev, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb57b210a; //GuildObject.renamePending
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&renamePending, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb60b5272; //GuildObject.renamerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&renamerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd607c575; //GuildObject.nextUpdateTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&nextUpdateTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x462af605; //GuildObject.guildLeaderID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&guildLeaderID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8819fa28; //GuildObject.electionState
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&electionState, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8266c0dc; //GuildObject.candidates
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&candidates, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf8f20c47; //GuildObject.votes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, unsigned long long> >::toBinaryStream(&votes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 16;
}

GuildObjectImplementation::GuildObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/guild/GuildObject.idl():  		Logger.setLoggingName("GuildObject");
	Logger::setLoggingName("GuildObject");
	// server/zone/objects/guild/GuildObject.idl():  		guildLeaderID = 0;
	guildLeaderID = 0;
	// server/zone/objects/guild/GuildObject.idl():  		guildID = 0;
	guildID = 0;
	// server/zone/objects/guild/GuildObject.idl():  		chatRoom = null;
	chatRoom = NULL;
	// server/zone/objects/guild/GuildObject.idl():  		renamePending = false;
	renamePending = false;
	// server/zone/objects/guild/GuildObject.idl():  		renamerID = 0;
	renamerID = 0;
	// server/zone/objects/guild/GuildObject.idl():  		waringGuilds.setAllowOverwriteInsertPlan();
	(&waringGuilds)->setAllowOverwriteInsertPlan();
	// server/zone/objects/guild/GuildObject.idl():  		sponsoredPlayers.setNoDuplicateInsertPlan();
	(&sponsoredPlayers)->setNoDuplicateInsertPlan();
	// server/zone/objects/guild/GuildObject.idl():  		guildMembers.setNoDuplicateInsertPlan();
	(&guildMembers)->setNoDuplicateInsertPlan();
	// server/zone/objects/guild/GuildObject.idl():  		nextUpdateTime.addMiliTime((3600 + System.random(601200)) * 1000);
	(&nextUpdateTime)->addMiliTime((3600 + System::random(601200)) * 1000);
	// server/zone/objects/guild/GuildObject.idl():  		electionState = ELECTION_DISABLED;
	electionState = ELECTION_DISABLED;
	// server/zone/objects/guild/GuildObject.idl():  		candidates.setAllowOverwriteInsertPlan();
	(&candidates)->setAllowOverwriteInsertPlan();
	// server/zone/objects/guild/GuildObject.idl():  		candidates.setNullValue(0);
	(&candidates)->setNullValue(0);
	// server/zone/objects/guild/GuildObject.idl():  		votes.setAllowOverwriteInsertPlan();
	(&votes)->setAllowOverwriteInsertPlan();
	// server/zone/objects/guild/GuildObject.idl():  		votes.setNullValue(0);
	(&votes)->setNullValue(0);
}

Time* GuildObjectImplementation::getNextUpdateTime() {
	// server/zone/objects/guild/GuildObject.idl():  		return nextUpdateTime;
	return (&nextUpdateTime);
}

void GuildObjectImplementation::addSponsoredPlayer(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/objects/guild/GuildObject.idl():  		sponsoredPlayers.put(playerID);
	(&sponsoredPlayers)->put(playerID);
}

void GuildObjectImplementation::removeSponsoredPlayer(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/objects/guild/GuildObject.idl():  		sponsoredPlayers.drop(playerID);
	(&sponsoredPlayers)->drop(playerID);
}

bool GuildObjectImplementation::hasSponsoredPlayer(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/objects/guild/GuildObject.idl():  		return sponsoredPlayers.contains(playerID);
	return (&sponsoredPlayers)->contains(playerID);
}

unsigned long long GuildObjectImplementation::getSponsoredPlayer(int idx) {
	Locker _locker(_this.get());
	// server/zone/objects/guild/GuildObject.idl():  		return sponsoredPlayers.get(idx);
	return (&sponsoredPlayers)->get(idx);
}

int GuildObjectImplementation::getSponsoredPlayerCount() const{
	// server/zone/objects/guild/GuildObject.idl():  		return sponsoredPlayers.size();
	return (&sponsoredPlayers)->size();
}

void GuildObjectImplementation::setChatRoom(ChatRoom* room) {
	// server/zone/objects/guild/GuildObject.idl():  		chatRoom = room;
	chatRoom = room;
}

ChatRoom* GuildObjectImplementation::getChatRoom() const{
	// server/zone/objects/guild/GuildObject.idl():  		return chatRoom;
	return chatRoom;
}

int GuildObjectImplementation::getTotalMembers() const{
	// server/zone/objects/guild/GuildObject.idl():  		return guildMembers.size();
	return (&guildMembers)->size();
}

unsigned long long GuildObjectImplementation::getGuildLeaderID() const{
	// server/zone/objects/guild/GuildObject.idl():  		return guildLeaderID;
	return guildLeaderID;
}

GuildMemberList* GuildObjectImplementation::getGuildMemberList() {
	// server/zone/objects/guild/GuildObject.idl():  		return guildMembers;
	return (&guildMembers);
}

String GuildObjectImplementation::getGuildAbbrev() const{
	// server/zone/objects/guild/GuildObject.idl():  		return guildAbbrev;
	return guildAbbrev;
}

void GuildObjectImplementation::setGuildAbbrev(const String& abbrev) {
	// server/zone/objects/guild/GuildObject.idl():  		guildAbbrev = abbrev;
	guildAbbrev = abbrev;
}

void GuildObjectImplementation::setGuildLeaderID(unsigned long long leaderID) {
	// server/zone/objects/guild/GuildObject.idl():  		guildLeaderID = leaderID;
	guildLeaderID = leaderID;
}

void GuildObjectImplementation::setGuildID(unsigned int id) {
	// server/zone/objects/guild/GuildObject.idl():  		guildID = id;
	guildID = id;
}

unsigned int GuildObjectImplementation::getGuildID() const{
	// server/zone/objects/guild/GuildObject.idl():  		return guildID;
	return guildID;
}

void GuildObjectImplementation::setGuildName(const String& gname) {
	// server/zone/objects/guild/GuildObject.idl():  		guildName = gname;
	guildName = gname;
}

String GuildObjectImplementation::getGuildName() const{
	// server/zone/objects/guild/GuildObject.idl():  		return guildName;
	return guildName;
}

void GuildObjectImplementation::setPendingNewName(const String& newName) {
	// server/zone/objects/guild/GuildObject.idl():  		pendingNewName = newName;
	pendingNewName = newName;
}

String GuildObjectImplementation::getPendingNewName() const{
	// server/zone/objects/guild/GuildObject.idl():  		return pendingNewName;
	return pendingNewName;
}

void GuildObjectImplementation::setPendingNewAbbrev(const String& newAbbrev) {
	// server/zone/objects/guild/GuildObject.idl():  		pendingNewAbbrev = newAbbrev;
	pendingNewAbbrev = newAbbrev;
}

String GuildObjectImplementation::getPendingNewAbbrev() const{
	// server/zone/objects/guild/GuildObject.idl():  		return pendingNewAbbrev;
	return pendingNewAbbrev;
}

void GuildObjectImplementation::setRenamePending(bool pending) {
	// server/zone/objects/guild/GuildObject.idl():  		renamePending = pending;
	renamePending = pending;
}

bool GuildObjectImplementation::isRenamePending() const{
	// server/zone/objects/guild/GuildObject.idl():  		return renamePending;
	return renamePending;
}

void GuildObjectImplementation::setRenamerID(unsigned long long id) {
	// server/zone/objects/guild/GuildObject.idl():  		renamerID = id;
	renamerID = id;
}

unsigned long long GuildObjectImplementation::getRenamerID() const{
	// server/zone/objects/guild/GuildObject.idl():  		return renamerID;
	return renamerID;
}

void GuildObjectImplementation::resetRename() {
	// server/zone/objects/guild/GuildObject.idl():  		renamerID = 0;
	renamerID = 0;
	// server/zone/objects/guild/GuildObject.idl():  		renamePending = false;
	renamePending = false;
	// server/zone/objects/guild/GuildObject.idl():  		pendingNewName = "";
	pendingNewName = "";
	// server/zone/objects/guild/GuildObject.idl():  		pendingNewAbbrev = "";
	pendingNewAbbrev = "";
}

String GuildObjectImplementation::getGuildKey() const{
	// server/zone/objects/guild/GuildObject.idl():  		string guildKey = String.valueOf(guildID) + ":" + guildAbbrev;
	String guildKey = String::valueOf(guildID) + ":" + guildAbbrev;
	// server/zone/objects/guild/GuildObject.idl():  		return guildKey;
	return guildKey;
}

bool GuildObjectImplementation::isGuildObject() {
	// server/zone/objects/guild/GuildObject.idl():  		return true;
	return true;
}

bool GuildObjectImplementation::isGuildLeader(CreatureObject* player) const{
	// server/zone/objects/guild/GuildObject.idl():  		return (guildLeaderID == player.getObjectID());
	return (guildLeaderID == player->getObjectID());
}

byte GuildObjectImplementation::getWarStatus(unsigned long long guildoid) {
	// server/zone/objects/guild/GuildObject.idl():  		}
{
	Locker _locker((&waringGuildsMutex));
	// server/zone/objects/guild/GuildObject.idl():  			return waringGuilds.get(guildoid);
	return (&waringGuilds)->get(guildoid);
}
}

void GuildObjectImplementation::setWarStatus(unsigned long long guildoid, byte status) {
	// server/zone/objects/guild/GuildObject.idl():  		}
{
	Locker _locker((&waringGuildsMutex));
	// server/zone/objects/guild/GuildObject.idl():  				waringGuilds.put(guildoid, status);
	if (status == WAR_NONE)	// server/zone/objects/guild/GuildObject.idl():  				waringGuilds.drop(guildoid);
	(&waringGuilds)->drop(guildoid);

	else 	// server/zone/objects/guild/GuildObject.idl():  				waringGuilds.put(guildoid, status);
	(&waringGuilds)->put(guildoid, status);
}
}

bool GuildObjectImplementation::hasDeclaredWarOn(unsigned long long guildoid) {
	// server/zone/objects/guild/GuildObject.idl():  		}
{
	Locker _locker((&waringGuildsMutex));
	// server/zone/objects/guild/GuildObject.idl():  			return waringGuilds.get(guildoid) == WAR_OUT;
	return (&waringGuilds)->get(guildoid) == WAR_OUT;
}
}

bool GuildObjectImplementation::hasDeclaredWarBy(unsigned long long guildoid) {
	// server/zone/objects/guild/GuildObject.idl():  		}
{
	Locker _locker((&waringGuildsMutex));
	// server/zone/objects/guild/GuildObject.idl():  			return waringGuilds.get(guildoid) == WAR_IN;
	return (&waringGuilds)->get(guildoid) == WAR_IN;
}
}

VectorMap<unsigned long long, byte>* GuildObjectImplementation::getWaringGuilds() {
	// server/zone/objects/guild/GuildObject.idl():  		return waringGuilds;
	return (&waringGuilds);
}

void GuildObjectImplementation::setTransferPending(bool transfer) {
	// server/zone/objects/guild/GuildObject.idl():  		transferPending = transfer;
	transferPending = transfer;
}

bool GuildObjectImplementation::isTransferPending() const{
	// server/zone/objects/guild/GuildObject.idl():  		return transferPending;
	return transferPending;
}

bool GuildObjectImplementation::isElectionEnabled() {
	// server/zone/objects/guild/GuildObject.idl():  		return electionState > ELECTION_DISABLED;
	return electionState > ELECTION_DISABLED;
}

byte GuildObjectImplementation::getElectionState() const{
	// server/zone/objects/guild/GuildObject.idl():  		return electionState;
	return electionState;
}

void GuildObjectImplementation::setElectionState(byte state) {
	// server/zone/objects/guild/GuildObject.idl():  		electionState = state;
	electionState = state;
}

void GuildObjectImplementation::addCandidate(unsigned long long candidateoid) {
	// server/zone/objects/guild/GuildObject.idl():  		candidates.put(candidateoid, 0);
	(&candidates)->put(candidateoid, 0);
}

void GuildObjectImplementation::setVote(unsigned long long voteroid, unsigned long long candidateoid) {
	// server/zone/objects/guild/GuildObject.idl():  		unsigned long currentoid = votes.get(voteroid);
	unsigned long long currentoid = (&votes)->get(voteroid);
	// server/zone/objects/guild/GuildObject.idl():  		if 
	if (currentoid == candidateoid)	// server/zone/objects/guild/GuildObject.idl():  			return;
	return;
	// server/zone/objects/guild/GuildObject.idl():  		votes.
	if (currentoid != 0 && (&candidates)->contains(currentoid))	// server/zone/objects/guild/GuildObject.idl():  			candidates.put(currentoid, candidates.get(currentoid) - 1);
	(&candidates)->put(currentoid, (&candidates)->get(currentoid) - 1);
	// server/zone/objects/guild/GuildObject.idl():  		votes.put(voteroid, candidateoid);
	(&votes)->put(voteroid, candidateoid);
	// server/zone/objects/guild/GuildObject.idl():  		candidates.put(candidateoid, candidates.get(candidateoid) + 1);
	(&candidates)->put(candidateoid, (&candidates)->get(candidateoid) + 1);
}

VectorMap<unsigned long long, int>* GuildObjectImplementation::getCandidates() {
	// server/zone/objects/guild/GuildObject.idl():  		return candidates;
	return (&candidates);
}

void GuildObjectImplementation::resetElection(bool disable) {
	// server/zone/objects/guild/GuildObject.idl():  		votes.removeAll();
	(&votes)->removeAll();
	// server/zone/objects/guild/GuildObject.idl():  		candidates.removeAll();
	(&candidates)->removeAll();
	// server/zone/objects/guild/GuildObject.idl():  	}
	if (disable){
	// server/zone/objects/guild/GuildObject.idl():  			electionState = ELECTION_DISABLED;
	electionState = ELECTION_DISABLED;
}
}

bool GuildObjectImplementation::isCandidate(unsigned long long candidateoid) {
	// server/zone/objects/guild/GuildObject.idl():  		return candidates.contains(candidateoid);
	return (&candidates)->contains(candidateoid);
}

/*
 *	GuildObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


GuildObjectAdapter::GuildObjectAdapter(GuildObject* obj) : SceneObjectAdapter(obj) {
}

void GuildObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_RESCHEDULEUPDATEEVENT__INT_:
		{
			unsigned int seconds = inv->getUnsignedIntParameter();
			
			rescheduleUpdateEvent(seconds);
			
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendBaselinesTo(player);
			
		}
		break;
	case RPC_BROADCASTMESSAGE__BASEMESSAGE_:
		{
			BaseMessage* msg = static_cast<BaseMessage*>(inv->getObjectParameter());
			
			broadcastMessage(msg);
			
		}
		break;
	case RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			BaseMessage* msg = static_cast<BaseMessage*>(inv->getObjectParameter());
			bool sendSelf = inv->getBooleanParameter();
			
			broadcastMessage(player, msg, sendSelf);
			
		}
		break;
	case RPC_ADDMEMBER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			addMember(playerID);
			
		}
		break;
	case RPC_REMOVEMEMBER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			removeMember(playerID);
			
		}
		break;
	case RPC_HASMEMBER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasMember(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETMEMBER__INT_:
		{
			int index = inv->getSignedIntParameter();
			
			unsigned long long _m_res = getMember(index);
			resp->insertLong(_m_res);
		}
		break;
	case RPC_SETGUILDMEMBERTITLE__LONG_STRING_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			 String title; inv->getAsciiParameter(title);
			
			setGuildMemberTitle(playerID, title);
			
		}
		break;
	case RPC_GETGUILDMEMBERTITLE__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			String _m_res = getGuildMemberTitle(playerID);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_ADDSPONSOREDPLAYER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			addSponsoredPlayer(playerID);
			
		}
		break;
	case RPC_REMOVESPONSOREDPLAYER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			removeSponsoredPlayer(playerID);
			
		}
		break;
	case RPC_HASSPONSOREDPLAYER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasSponsoredPlayer(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETSPONSOREDPLAYER__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			unsigned long long _m_res = getSponsoredPlayer(idx);
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETSPONSOREDPLAYERCOUNT__:
		{
			
			int _m_res = getSponsoredPlayerCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETCHATROOM__CHATROOM_:
		{
			ChatRoom* room = static_cast<ChatRoom*>(inv->getObjectParameter());
			
			setChatRoom(room);
			
		}
		break;
	case RPC_GETCHATROOM__:
		{
			
			DistributedObject* _m_res = getChatRoom();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETTOTALMEMBERS__:
		{
			
			int _m_res = getTotalMembers();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETGUILDLEADERID__:
		{
			
			unsigned long long _m_res = getGuildLeaderID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETGUILDABBREV__:
		{
			
			String _m_res = getGuildAbbrev();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETGUILDABBREV__STRING_:
		{
			 String abbrev; inv->getAsciiParameter(abbrev);
			
			setGuildAbbrev(abbrev);
			
		}
		break;
	case RPC_SETGUILDLEADERID__LONG_:
		{
			unsigned long long leaderID = inv->getUnsignedLongParameter();
			
			setGuildLeaderID(leaderID);
			
		}
		break;
	case RPC_SETGUILDID__INT_:
		{
			unsigned int id = inv->getUnsignedIntParameter();
			
			setGuildID(id);
			
		}
		break;
	case RPC_GETGUILDID__:
		{
			
			unsigned int _m_res = getGuildID();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_SETGUILDNAME__STRING_:
		{
			 String gname; inv->getAsciiParameter(gname);
			
			setGuildName(gname);
			
		}
		break;
	case RPC_GETGUILDNAME__:
		{
			
			String _m_res = getGuildName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETPENDINGNEWNAME__STRING_:
		{
			 String newName; inv->getAsciiParameter(newName);
			
			setPendingNewName(newName);
			
		}
		break;
	case RPC_GETPENDINGNEWNAME__:
		{
			
			String _m_res = getPendingNewName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETPENDINGNEWABBREV__STRING_:
		{
			 String newAbbrev; inv->getAsciiParameter(newAbbrev);
			
			setPendingNewAbbrev(newAbbrev);
			
		}
		break;
	case RPC_GETPENDINGNEWABBREV__:
		{
			
			String _m_res = getPendingNewAbbrev();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETRENAMEPENDING__BOOL_:
		{
			bool pending = inv->getBooleanParameter();
			
			setRenamePending(pending);
			
		}
		break;
	case RPC_ISRENAMEPENDING__:
		{
			
			bool _m_res = isRenamePending();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETRENAMERID__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			setRenamerID(id);
			
		}
		break;
	case RPC_GETRENAMERID__:
		{
			
			unsigned long long _m_res = getRenamerID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_RESETRENAME__:
		{
			
			resetRename();
			
		}
		break;
	case RPC_GETGUILDKEY__:
		{
			
			String _m_res = getGuildKey();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_ISGUILDOBJECT__:
		{
			
			bool _m_res = isGuildObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISGUILDLEADER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isGuildLeader(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETWARSTATUS__LONG_:
		{
			unsigned long long guildoid = inv->getUnsignedLongParameter();
			
			byte _m_res = getWarStatus(guildoid);
			resp->insertByte(_m_res);
		}
		break;
	case RPC_SETWARSTATUS__LONG_BYTE_:
		{
			unsigned long long guildoid = inv->getUnsignedLongParameter();
			byte status = inv->getByteParameter();
			
			setWarStatus(guildoid, status);
			
		}
		break;
	case RPC_ISINWARINGGUILD__CREATUREOBJECT_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isInWaringGuild(creature);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISATWARWITH__LONG_:
		{
			unsigned long long guildoid = inv->getUnsignedLongParameter();
			
			bool _m_res = isAtWarWith(guildoid);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASDECLAREDWARON__LONG_:
		{
			unsigned long long guildoid = inv->getUnsignedLongParameter();
			
			bool _m_res = hasDeclaredWarOn(guildoid);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASDECLAREDWARBY__LONG_:
		{
			unsigned long long guildoid = inv->getUnsignedLongParameter();
			
			bool _m_res = hasDeclaredWarBy(guildoid);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASMAILPERMISSION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasMailPermission(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASSPONSORPERMISSION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasSponsorPermission(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASACCEPTPERMISSION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasAcceptPermission(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASDISBANDPERMISSION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasDisbandPermission(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASKICKPERMISSION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasKickPermission(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASNAMEPERMISSION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasNamePermission(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASTITLEPERMISSION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasTitlePermission(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASWARPERMISSION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasWarPermission(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_TOGGLEMEMBERPERMISSION__LONG_BYTE_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			byte permission = inv->getByteParameter();
			
			toggleMemberPermission(playerID, permission);
			
		}
		break;
	case RPC_SETTRANSFERPENDING__BOOL_:
		{
			bool transfer = inv->getBooleanParameter();
			
			setTransferPending(transfer);
			
		}
		break;
	case RPC_ISTRANSFERPENDING__:
		{
			
			bool _m_res = isTransferPending();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISELECTIONENABLED__:
		{
			
			bool _m_res = isElectionEnabled();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETELECTIONSTATE__:
		{
			
			byte _m_res = getElectionState();
			resp->insertByte(_m_res);
		}
		break;
	case RPC_SETELECTIONSTATE__BYTE_:
		{
			byte state = inv->getByteParameter();
			
			setElectionState(state);
			
		}
		break;
	case RPC_ADDCANDIDATE__LONG_:
		{
			unsigned long long candidateoid = inv->getUnsignedLongParameter();
			
			addCandidate(candidateoid);
			
		}
		break;
	case RPC_SETVOTE__LONG_LONG_:
		{
			unsigned long long voteroid = inv->getUnsignedLongParameter();
			unsigned long long candidateoid = inv->getUnsignedLongParameter();
			
			setVote(voteroid, candidateoid);
			
		}
		break;
	case RPC_RESETELECTION__BOOL_:
		{
			bool disable = inv->getBooleanParameter();
			
			resetElection(disable);
			
		}
		break;
	case RPC_REMOVECANDIDATE__LONG_:
		{
			unsigned long long candidateoid = inv->getUnsignedLongParameter();
			
			removeCandidate(candidateoid);
			
		}
		break;
	case RPC_ISCANDIDATE__LONG_:
		{
			unsigned long long candidateoid = inv->getUnsignedLongParameter();
			
			bool _m_res = isCandidate(candidateoid);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETMEMBERWITHHIGHESTPERMISSION__:
		{
			
			unsigned long long _m_res = getMemberWithHighestPermission();
			resp->insertLong(_m_res);
		}
		break;
	default:
		SceneObjectAdapter::invokeMethod(methid, inv);
	}
}

void GuildObjectAdapter::initializeTransientMembers() {
	(static_cast<GuildObject*>(stub))->initializeTransientMembers();
}

void GuildObjectAdapter::rescheduleUpdateEvent(unsigned int seconds) {
	(static_cast<GuildObject*>(stub))->rescheduleUpdateEvent(seconds);
}

void GuildObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<GuildObject*>(stub))->sendBaselinesTo(player);
}

void GuildObjectAdapter::broadcastMessage(BaseMessage* msg) {
	(static_cast<GuildObject*>(stub))->broadcastMessage(msg);
}

void GuildObjectAdapter::broadcastMessage(CreatureObject* player, BaseMessage* msg, bool sendSelf) {
	(static_cast<GuildObject*>(stub))->broadcastMessage(player, msg, sendSelf);
}

void GuildObjectAdapter::addMember(unsigned long long playerID) {
	(static_cast<GuildObject*>(stub))->addMember(playerID);
}

void GuildObjectAdapter::removeMember(unsigned long long playerID) {
	(static_cast<GuildObject*>(stub))->removeMember(playerID);
}

bool GuildObjectAdapter::hasMember(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasMember(playerID);
}

unsigned long long GuildObjectAdapter::getMember(int index) {
	return (static_cast<GuildObject*>(stub))->getMember(index);
}

void GuildObjectAdapter::setGuildMemberTitle(unsigned long long playerID, const String& title) {
	(static_cast<GuildObject*>(stub))->setGuildMemberTitle(playerID, title);
}

String GuildObjectAdapter::getGuildMemberTitle(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->getGuildMemberTitle(playerID);
}

void GuildObjectAdapter::addSponsoredPlayer(unsigned long long playerID) {
	(static_cast<GuildObject*>(stub))->addSponsoredPlayer(playerID);
}

void GuildObjectAdapter::removeSponsoredPlayer(unsigned long long playerID) {
	(static_cast<GuildObject*>(stub))->removeSponsoredPlayer(playerID);
}

bool GuildObjectAdapter::hasSponsoredPlayer(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasSponsoredPlayer(playerID);
}

unsigned long long GuildObjectAdapter::getSponsoredPlayer(int idx) {
	return (static_cast<GuildObject*>(stub))->getSponsoredPlayer(idx);
}

int GuildObjectAdapter::getSponsoredPlayerCount() const {
	return (static_cast<GuildObject*>(stub))->getSponsoredPlayerCount();
}

void GuildObjectAdapter::setChatRoom(ChatRoom* room) {
	(static_cast<GuildObject*>(stub))->setChatRoom(room);
}

ChatRoom* GuildObjectAdapter::getChatRoom() const {
	return (static_cast<GuildObject*>(stub))->getChatRoom();
}

int GuildObjectAdapter::getTotalMembers() const {
	return (static_cast<GuildObject*>(stub))->getTotalMembers();
}

unsigned long long GuildObjectAdapter::getGuildLeaderID() const {
	return (static_cast<GuildObject*>(stub))->getGuildLeaderID();
}

String GuildObjectAdapter::getGuildAbbrev() const {
	return (static_cast<GuildObject*>(stub))->getGuildAbbrev();
}

void GuildObjectAdapter::setGuildAbbrev(const String& abbrev) {
	(static_cast<GuildObject*>(stub))->setGuildAbbrev(abbrev);
}

void GuildObjectAdapter::setGuildLeaderID(unsigned long long leaderID) {
	(static_cast<GuildObject*>(stub))->setGuildLeaderID(leaderID);
}

void GuildObjectAdapter::setGuildID(unsigned int id) {
	(static_cast<GuildObject*>(stub))->setGuildID(id);
}

unsigned int GuildObjectAdapter::getGuildID() const {
	return (static_cast<GuildObject*>(stub))->getGuildID();
}

void GuildObjectAdapter::setGuildName(const String& gname) {
	(static_cast<GuildObject*>(stub))->setGuildName(gname);
}

String GuildObjectAdapter::getGuildName() const {
	return (static_cast<GuildObject*>(stub))->getGuildName();
}

void GuildObjectAdapter::setPendingNewName(const String& newName) {
	(static_cast<GuildObject*>(stub))->setPendingNewName(newName);
}

String GuildObjectAdapter::getPendingNewName() const {
	return (static_cast<GuildObject*>(stub))->getPendingNewName();
}

void GuildObjectAdapter::setPendingNewAbbrev(const String& newAbbrev) {
	(static_cast<GuildObject*>(stub))->setPendingNewAbbrev(newAbbrev);
}

String GuildObjectAdapter::getPendingNewAbbrev() const {
	return (static_cast<GuildObject*>(stub))->getPendingNewAbbrev();
}

void GuildObjectAdapter::setRenamePending(bool pending) {
	(static_cast<GuildObject*>(stub))->setRenamePending(pending);
}

bool GuildObjectAdapter::isRenamePending() const {
	return (static_cast<GuildObject*>(stub))->isRenamePending();
}

void GuildObjectAdapter::setRenamerID(unsigned long long id) {
	(static_cast<GuildObject*>(stub))->setRenamerID(id);
}

unsigned long long GuildObjectAdapter::getRenamerID() const {
	return (static_cast<GuildObject*>(stub))->getRenamerID();
}

void GuildObjectAdapter::resetRename() {
	(static_cast<GuildObject*>(stub))->resetRename();
}

String GuildObjectAdapter::getGuildKey() const {
	return (static_cast<GuildObject*>(stub))->getGuildKey();
}

bool GuildObjectAdapter::isGuildObject() {
	return (static_cast<GuildObject*>(stub))->isGuildObject();
}

bool GuildObjectAdapter::isGuildLeader(CreatureObject* player) const {
	return (static_cast<GuildObject*>(stub))->isGuildLeader(player);
}

byte GuildObjectAdapter::getWarStatus(unsigned long long guildoid) {
	return (static_cast<GuildObject*>(stub))->getWarStatus(guildoid);
}

void GuildObjectAdapter::setWarStatus(unsigned long long guildoid, byte status) {
	(static_cast<GuildObject*>(stub))->setWarStatus(guildoid, status);
}

bool GuildObjectAdapter::isInWaringGuild(CreatureObject* creature) {
	return (static_cast<GuildObject*>(stub))->isInWaringGuild(creature);
}

bool GuildObjectAdapter::isAtWarWith(unsigned long long guildoid) {
	return (static_cast<GuildObject*>(stub))->isAtWarWith(guildoid);
}

bool GuildObjectAdapter::hasDeclaredWarOn(unsigned long long guildoid) {
	return (static_cast<GuildObject*>(stub))->hasDeclaredWarOn(guildoid);
}

bool GuildObjectAdapter::hasDeclaredWarBy(unsigned long long guildoid) {
	return (static_cast<GuildObject*>(stub))->hasDeclaredWarBy(guildoid);
}

bool GuildObjectAdapter::hasMailPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasMailPermission(playerID);
}

bool GuildObjectAdapter::hasSponsorPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasSponsorPermission(playerID);
}

bool GuildObjectAdapter::hasAcceptPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasAcceptPermission(playerID);
}

bool GuildObjectAdapter::hasDisbandPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasDisbandPermission(playerID);
}

bool GuildObjectAdapter::hasKickPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasKickPermission(playerID);
}

bool GuildObjectAdapter::hasNamePermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasNamePermission(playerID);
}

bool GuildObjectAdapter::hasTitlePermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasTitlePermission(playerID);
}

bool GuildObjectAdapter::hasWarPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasWarPermission(playerID);
}

void GuildObjectAdapter::toggleMemberPermission(unsigned long long playerID, byte permission) {
	(static_cast<GuildObject*>(stub))->toggleMemberPermission(playerID, permission);
}

void GuildObjectAdapter::setTransferPending(bool transfer) {
	(static_cast<GuildObject*>(stub))->setTransferPending(transfer);
}

bool GuildObjectAdapter::isTransferPending() const {
	return (static_cast<GuildObject*>(stub))->isTransferPending();
}

bool GuildObjectAdapter::isElectionEnabled() {
	return (static_cast<GuildObject*>(stub))->isElectionEnabled();
}

byte GuildObjectAdapter::getElectionState() const {
	return (static_cast<GuildObject*>(stub))->getElectionState();
}

void GuildObjectAdapter::setElectionState(byte state) {
	(static_cast<GuildObject*>(stub))->setElectionState(state);
}

void GuildObjectAdapter::addCandidate(unsigned long long candidateoid) {
	(static_cast<GuildObject*>(stub))->addCandidate(candidateoid);
}

void GuildObjectAdapter::setVote(unsigned long long voteroid, unsigned long long candidateoid) {
	(static_cast<GuildObject*>(stub))->setVote(voteroid, candidateoid);
}

void GuildObjectAdapter::resetElection(bool disable) {
	(static_cast<GuildObject*>(stub))->resetElection(disable);
}

void GuildObjectAdapter::removeCandidate(unsigned long long candidateoid) {
	(static_cast<GuildObject*>(stub))->removeCandidate(candidateoid);
}

bool GuildObjectAdapter::isCandidate(unsigned long long candidateoid) {
	return (static_cast<GuildObject*>(stub))->isCandidate(candidateoid);
}

unsigned long long GuildObjectAdapter::getMemberWithHighestPermission() {
	return (static_cast<GuildObject*>(stub))->getMemberWithHighestPermission();
}

/*
 *	GuildObjectHelper
 */

GuildObjectHelper* GuildObjectHelper::staticInitializer = GuildObjectHelper::instance();

GuildObjectHelper::GuildObjectHelper() {
	className = "GuildObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void GuildObjectHelper::finalizeHelper() {
	GuildObjectHelper::finalize();
}

DistributedObject* GuildObjectHelper::instantiateObject() {
	return new GuildObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* GuildObjectHelper::instantiateServant() {
	return new GuildObjectImplementation();
}

DistributedObjectAdapter* GuildObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildObjectAdapter(static_cast<GuildObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

