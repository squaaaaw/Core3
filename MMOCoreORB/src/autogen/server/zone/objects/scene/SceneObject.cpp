/*
 *	autogen/server/zone/objects/scene/SceneObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "SceneObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/staticobject/StaticObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/region/CityRegion.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

/*
 *	SceneObjectStub
 */

enum {RPC_FINALIZE__ = 3521407902,RPC_INITIALIZEPRIVATEDATA__,RPC_INITIALIZECONTAINEROBJECTSMAP__,RPC_ONCLONEOBJECT__SCENEOBJECT_,RPC_CREATECOMPONENTS__,RPC_CREATECONTAINERCOMPONENT__,RPC_CREATEOBJECTMENUCOMPONENT__,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_NOTIFYLOADFROMDATABASE__,RPC_INFO__STRING_BOOL_,RPC_ERROR__STRING_,RPC_DEBUG__STRING_,RPC_INRANGEOBJECTS__INT_FLOAT_,RPC_ISINRANGE__SCENEOBJECT_FLOAT_,RPC_ISINRANGEZONELESS__SCENEOBJECT_FLOAT_,RPC_ISINRANGE3D__SCENEOBJECT_FLOAT_,RPC_TRANSFEROBJECT__SCENEOBJECT_INT_BOOL_BOOL_BOOL_,RPC_REMOVEOBJECT__SCENEOBJECT_SCENEOBJECT_BOOL_,RPC_DESTROYOBJECTFROMWORLD__BOOL_,RPC_REMOVEOBJECTFROMZONE__ZONE_SCENEOBJECT_,RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_,RPC_NOTIFYOBJECTINSERTEDTOCHILD__SCENEOBJECT_SCENEOBJECT_SCENEOBJECT_,RPC_NOTIFYOBJECTREMOVEDFROMCHILD__SCENEOBJECT_SCENEOBJECT_,RPC_GETCRAFTEDCOMPONENTSSATCHEL__,RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_,RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_,RPC_UPDATETODATABASE__,RPC_UPDATETODATABASEWITHOUTCHILDREN__,RPC_UPDATETODATABASEALLOBJECTS__BOOL_,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_CANBEDESTROYED__CREATUREOBJECT_,RPC_LINK__LONG_INT_,RPC_SENDTO__SCENEOBJECT_BOOL_BOOL_,RPC_SENDWITHOUTPARENTTO__SCENEOBJECT_,RPC_SENDWITHOUTCONTAINEROBJECTSTO__SCENEOBJECT_,RPC_SENDDESTROYTO__SCENEOBJECT_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SENDCONTAINEROBJECTSTO__SCENEOBJECT_BOOL_,RPC_SENDSLOTTEDOBJECTSTO__SCENEOBJECT_,RPC_SENDTOOWNER__BOOL_,RPC_SENDATTRIBUTELISTTO__CREATUREOBJECT_,RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_,RPC_OPENCONTAINERTO__CREATUREOBJECT_,RPC_CLOSECONTAINERTO__CREATUREOBJECT_BOOL_,RPC_NOTIFYINSERTTOZONE__ZONE_,RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_BOOL_,RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_,RPC_UPDATEDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_,RPC_UPDATEDIRECTION__FLOAT_,RPC_NOTIFYREMOVEFROMZONE__,RPC_UPDATEZONE__BOOL_BOOL_,RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_,RPC_BROADCASTMESSAGE__BASEPACKET_BOOL_BOOL_,RPC_BROADCASTMESSAGEPRIVATE__BASEPACKET_SCENEOBJECT_BOOL_,RPC_BROADCASTOBJECT__SCENEOBJECT_BOOL_,RPC_BROADCASTOBJECTPRIVATE__SCENEOBJECT_SCENEOBJECT_,RPC_BROADCASTDESTROY__SCENEOBJECT_BOOL_,RPC_BROADCASTDESTROYPRIVATE__SCENEOBJECT_SCENEOBJECT_,RPC_SENDMESSAGE__BASEPACKET_,RPC_COMPARETO__SCENEOBJECT_,RPC_GETPARENTID__,RPC_CONTAINSPENDINGTASK__STRING_,RPC_SHOWFLYTEXT__STRING_STRING_BYTE_BYTE_BYTE_BOOL_,RPC_GETCONTAINEDOBJECTSRECURSIVE__,RPC_GETCOUNTABLEOBJECTSRECURSIVE__,RPC_GETSIZEONVENDORRECURSIVE__,RPC_GETACTIVESESSION__INT_,RPC_ADDACTIVESESSION__INT_FACADE_,RPC_CONTAINSACTIVESESSION__INT_,RPC_DROPACTIVESESSION__INT_,RPC_GETACTIVESESSIONSCOUNT__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_GETDISTANCETO__SCENEOBJECT_,RPC_UPDATEVEHICLEPOSITION__BOOL_,RPC_PLAYEFFECT__STRING_STRING_,RPC_PLAYEFFECT__STRING_,RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_,RPC_NOTIFYOBJECTREMOVED__SCENEOBJECT_,RPC_GETZONE__,RPC_GETZONEUNSAFE__,RPC_GETLOCALZONE__,RPC_GETWORLDPOSITIONX__,RPC_GETWORLDPOSITIONY__,RPC_GETWORLDPOSITIONZ__,RPC_GETDIRECTIONX__,RPC_GETDIRECTIONZ__,RPC_GETDIRECTIONY__,RPC_GETDIRECTIONW__,RPC_GETCLIENTOBJECTCRC__,RPC_GETSERVEROBJECTCRC__,RPC_ISWAYPOINTOBJECT__,RPC_GETOBJECTNAMESTRINGIDFILE__,RPC_GETOBJECTNAMESTRINGIDNAME__,RPC_SETDETAILEDDESCRIPTION__STRING_,RPC_GETARRANGEMENTDESCRIPTORSIZE__,RPC_GETSLOTDESCRIPTOR__INT_,RPC_HASSLOTDESCRIPTOR__STRING_,RPC_HASARRANGEMENTDESCRIPTOR__STRING_,RPC_GETSLOTTEDOBJECT__STRING_,RPC_GETSLOTDESCRIPTORSIZE__,RPC_GETSLOTTEDOBJECT__INT_,RPC_GETCONTAINEROBJECTRECURSIVE__LONG_,RPC_DROPSLOTTEDOBJECT__STRING_,RPC_REMOVESLOTTEDOBJECT__INT_,RPC_GETCONTAINEROBJECTSSIZE__,RPC_GETSLOTTEDOBJECTSSIZE__,RPC_ISCONTAINERFULL__,RPC_ISCONTAINERFULLRECURSIVE__,RPC_GETCONTAINERVOLUMELIMIT__,RPC_GETCONTAINEROBJECT__INT_,RPC_HASOBJECTINCONTAINER__LONG_,RPC_HASOBJECTINSLOTTEDCONTAINER__SCENEOBJECT_,RPC_GETCONTAINEROBJECT__LONG_,RPC_REMOVEALLCONTAINEROBJECTS__,RPC_PUTINCONTAINER__SCENEOBJECT_LONG_,RPC_REMOVEFROMCONTAINEROBJECTS__INT_,RPC_GETLASTCONTAINERACCESS__,RPC_UNLOADCONTAINEROBJECTS__,RPC_ISCONTAINERLOADED__,RPC_ONCONTAINERLOADED__,RPC_SETCONTAINERVOLUMELIMIT__INT_,RPC_SETCONTAINERTYPE__INT_,RPC_GETCONTAINERTYPE__,RPC_GETCLIENT__,RPC_GETGAMEOBJECTTYPE__,RPC_GETCLIENTGAMEOBJECTTYPE__,RPC_GETCONTAINMENTTYPE__,RPC_GETDIRECTIONANGLE__,RPC_GETSPECIALDIRECTIONANGLE__,RPC_ROTATE__INT_,RPC_FACEOBJECT__SCENEOBJECT_BOOL_,RPC_ISFACINGOBJECT__SCENEOBJECT_,RPC_NOTIFYSELFPOSITIONUPDATE__,RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_,RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_,RPC_GETMOVEMENTCOUNTER__,RPC_GETPARENT__,RPC_SETPARENT__QUADTREEENTRY_,RPC_SETPARENT__QUADTREEENTRY_BOOL_,RPC_GETZONESERVER__,RPC_GETROOTPARENT__,RPC_GETROOTPARENTUNSAFE__,RPC_UPDATESAVEDROOTPARENTRECURSIVE__SCENEOBJECT_,RPC_GETPARENTRECURSIVELY__INT_,RPC_ISASUBCHILDOF__SCENEOBJECT_,RPC_GETCUSTOMOBJECTNAME__,RPC_GETLOGGINGNAME__,RPC_ISDECORATION__,RPC_SETZONECOMPONENT__STRING_,RPC_ISNOTRADE__,RPC_ISSHUTTLEINSTALLATION__,RPC_ISPLAYEROBJECT__,RPC_ISACTIVEAREA__,RPC_ISREGION__,RPC_ISCREATURE__,RPC_ISSHIPOBJECT__,RPC_ISDROIDOBJECT__,RPC_ISCLONINGBUILDINGOBJECT__,RPC_ISGARAGE__,RPC_ISWEAPONOBJECT__,RPC_ISWEARABLEOBJECT__,RPC_ISWEARABLECONTAINEROBJECT__,RPC_ISARMOROBJECT__,RPC_ISROBEOBJECT__,RPC_ISLIGHTSABERCRYSTALOBJECT__,RPC_ISFIREWORKOBJECT__,RPC_ISPSGARMOROBJECT__,RPC_ISCELLOBJECT__,RPC_ISTANGIBLEOBJECT__,RPC_ISRESOURCECONTAINER__,RPC_ISRESOURCESPAWN__,RPC_ISCOMPONENT__,RPC_ISINTANGIBLEOBJECT__,RPC_ISINSTRUMENT__,RPC_ISBAZAARTERMINAL__,RPC_ISLIVESAMPLE__,RPC_ISINSTALLATIONOBJECT__,RPC_ISHARVESTEROBJECT__,RPC_ISGENERATOROBJECT__,RPC_ISCITYTERMINAL__,RPC_ISCITYVOTETERMINAL__,RPC_ISFACTORY__,RPC_ISFACTORYCRATE__,RPC_ISPHARMACEUTICALOBJECT__,RPC_ISFISHINGPOLEOBJECT__,RPC_ISDEEDOBJECT__,RPC_ISVEHICLEDEEDOBJECT__,RPC_ISDROIDDEEDOBJECT__,RPC_ISBUILDINGDEED__,RPC_ISSIGNOBJECT__,RPC_ISINSTALLATIONDEED__,RPC_ISCRAFTINGTOOL__,RPC_ISCRAFTINGSTATION__,RPC_ISMANUFACTURESCHEMATIC__,RPC_ISSTRUCTUREOBJECT__,RPC_ISAUCTIONOBJECT__,RPC_ISFISHINGBAIT__,RPC_ISTRAPOBJECT__,RPC_ISREPAIRTOOL__,RPC_ISCAMOKIT__,RPC_ISATTACHMENT__,RPC_ISDICEOBJECT__,RPC_ISCREATUREHABITAT__,RPC_ISCAMPKIT__,RPC_ISCAMPSTRUCTURE__,RPC_ISRECYCLETOOLOBJECT__,RPC_ISANTIDECAYKITOBJECT__,RPC_SETCONTAINERDEFAULTALLOWPERMISSION__SHORT_,RPC_CLEARCONTAINERDEFAULTALLOWPERMISSION__SHORT_,RPC_SETCONTAINERDEFAULTDENYPERMISSION__SHORT_,RPC_CLEARCONTAINERDEFAULTDENYPERMISSION__SHORT_,RPC_SETCONTAINERINHERITPERMISSIONSFROMPARENT__BOOL_,RPC_SETCONTAINEROWNERID__LONG_,RPC_SETCONTAINERALLOWPERMISSION__STRING_SHORT_,RPC_SETCONTAINERDENYPERMISSION__STRING_SHORT_,RPC_SETGAMEOBJECTTYPE__INT_,RPC_SETCLIENTOBJECTCRC__INT_,RPC_SETSERVEROBJECTCRC__INT_,RPC_SETZONE__ZONE_,RPC_SETDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_,RPC_SETDIRECTION__FLOAT_,RPC_SETMOVEMENTCOUNTER__INT_,RPC_INCREMENTMOVEMENTCOUNTER__,RPC_SETCONTAINMENTTYPE__INT_,RPC_SETLOGGINGNAME__STRING_,RPC_SETCLIENTOBJECT__BOOL_,RPC_GETPLANETCRC__,RPC_ISCLIENTOBJECT__,RPC_ISSTATICOBJECTCLASS__,RPC_ISCONTAINEROBJECT__,RPC_ISTERMINAL__,RPC_ISGROUPOBJECT__,RPC_ISGUILDOBJECT__,RPC_ISCONTROLDEVICE__,RPC_ISPETCONTROLDEVICE__,RPC_ISVEHICLECONTROLDEVICE__,RPC_ISSHIPCONTROLDEVICE__,RPC_ISMISSIONTERMINAL__,RPC_ISMISSIONOBJECT__,RPC_ISACTOROBJECT__,RPC_GETPLANETMAPCATEGORYCRC__,RPC_GETPLANETMAPSUBCATEGORYCRC__,RPC_CONTAINSCHILDOBJECT__SCENEOBJECT_,RPC_CREATECHILDOBJECTS__,RPC_DESTROYCHILDOBJECTS__,RPC_ADDCHILDOBJECT__SCENEOBJECT_,RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_,RPC_ISINWATER__,RPC_CONTAINSNOTRADEOBJECTRECURSIVE__,RPC_GETDISPLAYEDNAME__,RPC_DOSENDTOCLIENT__,RPC_SETSENDTOCLIENT__BOOL_,RPC_ISPET__,RPC_ISMOUNT__,RPC_ISLAIROBJECT__,RPC_ISPOIBUILDING__,RPC_ISTHEATEROBJECT__,RPC_ISEVENTPERKDEED__,RPC_ISEVENTPERKITEM__,RPC_ISDATAPAD__,RPC_GETTEMPLATERADIUS__,RPC_ISINNAVMESH__};

SceneObject::SceneObject() : QuadTreeEntry(DummyConstructorParameter::instance()) {
	SceneObjectImplementation* _implementation = new SceneObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SceneObject");
}

SceneObject::SceneObject(DummyConstructorParameter* param) : QuadTreeEntry(param) {
	_setClassName("SceneObject");
}

SceneObject::~SceneObject() {
}



void SceneObject::initializePrivateData() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEPRIVATEDATA__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializePrivateData();
	}
}

void SceneObject::initializeContainerObjectsMap() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZECONTAINEROBJECTSMAP__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeContainerObjectsMap();
	}
}

void SceneObject::loadTemplateData(SharedObjectTemplate* templateData) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void SceneObject::onCloneObject(SceneObject* objectToClone) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ONCLONEOBJECT__SCENEOBJECT_);
		method.addObjectParameter(objectToClone);

		method.executeWithVoidReturn();
	} else {
		_implementation->onCloneObject(objectToClone);
	}
}

void SceneObject::createComponents() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECOMPONENTS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->createComponents();
	}
}

void SceneObject::createContainerComponent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECONTAINERCOMPONENT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->createContainerComponent();
	}
}

void SceneObject::createObjectMenuComponent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEOBJECTMENUCOMPONENT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->createObjectMenuComponent();
	}
}

void SceneObject::initializeTransientMembers() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void SceneObject::notifyLoadFromDatabase() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyLoadFromDatabase();
	}
}

void SceneObject::info(const String& msg, bool forced) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INFO__STRING_BOOL_);
		method.addAsciiParameter(msg);
		method.addBooleanParameter(forced);

		method.executeWithVoidReturn();
	} else {
		_implementation->info(msg, forced);
	}
}

void SceneObject::error(const String& msg) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ERROR__STRING_);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->error(msg);
	}
}

void SceneObject::debug(const String& msg) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEBUG__STRING_);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->debug(msg);
	}
}

int SceneObject::inRangeObjects(unsigned int gameObjectType, float range) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INRANGEOBJECTS__INT_FLOAT_);
		method.addUnsignedIntParameter(gameObjectType);
		method.addFloatParameter(range);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->inRangeObjects(gameObjectType, range);
	}
}

bool SceneObject::isInRange(SceneObject* obj, float range) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINRANGE__SCENEOBJECT_FLOAT_);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInRange(obj, range);
	}
}

bool SceneObject::isInRangeZoneless(SceneObject* obj, float range) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINRANGEZONELESS__SCENEOBJECT_FLOAT_);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInRangeZoneless(obj, range);
	}
}

bool SceneObject::isInRange3d(SceneObject* obj, float range) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINRANGE3D__SCENEOBJECT_FLOAT_);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInRange3d(obj, range);
	}
}

bool SceneObject::transferObject(SceneObject* object, int containmentType, bool notifyClient, bool allowOverflow, bool notifyRoot) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TRANSFEROBJECT__SCENEOBJECT_INT_BOOL_BOOL_BOOL_);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addBooleanParameter(notifyClient);
		method.addBooleanParameter(allowOverflow);
		method.addBooleanParameter(notifyRoot);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->transferObject(object, containmentType, notifyClient, allowOverflow, notifyRoot);
	}
}

bool SceneObject::removeObject(SceneObject* object, SceneObject* destination, bool notifyClient) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEOBJECT__SCENEOBJECT_SCENEOBJECT_BOOL_);
		method.addObjectParameter(object);
		method.addObjectParameter(destination);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->removeObject(object, destination, notifyClient);
	}
}

void SceneObject::destroyObjectFromWorld(bool sendSelfDestroy) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMWORLD__BOOL_);
		method.addBooleanParameter(sendSelfDestroy);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyObjectFromWorld(sendSelfDestroy);
	}
}

void SceneObject::removeObjectFromZone(Zone* zone, SceneObject* par) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEOBJECTFROMZONE__ZONE_SCENEOBJECT_);
		method.addObjectParameter(zone);
		method.addObjectParameter(par);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeObjectFromZone(zone, par);
	}
}

int SceneObject::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->canAddObject(object, containmentType, errorDescription);
	}
}

int SceneObject::notifyObjectInsertedToChild(SceneObject* object, SceneObject* child, SceneObject* oldParent) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTINSERTEDTOCHILD__SCENEOBJECT_SCENEOBJECT_SCENEOBJECT_);
		method.addObjectParameter(object);
		method.addObjectParameter(child);
		method.addObjectParameter(oldParent);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObjectInsertedToChild(object, child, oldParent);
	}
}

int SceneObject::notifyObjectRemovedFromChild(SceneObject* object, SceneObject* child) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTREMOVEDFROMCHILD__SCENEOBJECT_SCENEOBJECT_);
		method.addObjectParameter(object);
		method.addObjectParameter(child);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObjectRemovedFromChild(object, child);
	}
}

Reference<SceneObject* > SceneObject::getCraftedComponentsSatchel() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRAFTEDCOMPONENTSSATCHEL__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getCraftedComponentsSatchel();
	}
}

void SceneObject::synchronizedUIListen(CreatureObject* player, int value) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->synchronizedUIListen(player, value);
	}
}

void SceneObject::synchronizedUIStopListen(CreatureObject* player, int value) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->synchronizedUIStopListen(player, value);
	}
}

void SceneObject::updateToDatabase() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateToDatabase();
	}
}

void SceneObject::updateToDatabaseWithoutChildren() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEWITHOUTCHILDREN__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateToDatabaseWithoutChildren();
	}
}

void SceneObject::updateToDatabaseAllObjects(bool startTask) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEALLOBJECTS__BOOL_);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateToDatabaseAllObjects(startTask);
	}
}

void SceneObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
	}
}

int SceneObject::canBeDestroyed(CreatureObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANBEDESTROYED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->canBeDestroyed(player);
	}
}

BaseMessage* SceneObject::link(unsigned long long objectID, unsigned int containmentType) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LINK__LONG_INT_);
		method.addUnsignedLongParameter(objectID);
		method.addUnsignedIntParameter(containmentType);

		return static_cast<BaseMessage*>(method.executeWithObjectReturn());
	} else {
		return _implementation->link(objectID, containmentType);
	}
}

void SceneObject::sendTo(SceneObject* player, bool doClose, bool forceLoadContainer) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTO__SCENEOBJECT_BOOL_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);
		method.addBooleanParameter(forceLoadContainer);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendTo(player, doClose, forceLoadContainer);
	}
}

void SceneObject::sendWithoutParentTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDWITHOUTPARENTTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendWithoutParentTo(player);
	}
}

void SceneObject::sendWithoutContainerObjectsTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDWITHOUTCONTAINEROBJECTSTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendWithoutContainerObjectsTo(player);
	}
}

void SceneObject::sendDestroyTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDESTROYTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendDestroyTo(player);
	}
}

void SceneObject::sendBaselinesTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBaselinesTo(player);
	}
}

void SceneObject::sendContainerObjectsTo(SceneObject* player, bool forceLoad) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCONTAINEROBJECTSTO__SCENEOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(forceLoad);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendContainerObjectsTo(player, forceLoad);
	}
}

void SceneObject::sendSlottedObjectsTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSLOTTEDOBJECTSTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendSlottedObjectsTo(player);
	}
}

void SceneObject::sendToOwner(bool doClose) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTOOWNER__BOOL_);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendToOwner(doClose);
	}
}

void SceneObject::sendAttributeListTo(CreatureObject* object) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDATTRIBUTELISTTO__CREATUREOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendAttributeListTo(object);
	}
}

void SceneObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void SceneObject::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_);
		method.addUnicodeParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCustomObjectName(name, notifyClient);
	}
}

void SceneObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

void SceneObject::openContainerTo(CreatureObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_OPENCONTAINERTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->openContainerTo(player);
	}
}

byte SceneObject::checkContainerPermission(CreatureObject* player, unsigned short permission) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->checkContainerPermission(player, permission);
	}
}

void SceneObject::closeContainerTo(CreatureObject* player, bool notify) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLOSECONTAINERTO__CREATUREOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(notify);

		method.executeWithVoidReturn();
	} else {
		_implementation->closeContainerTo(player, notify);
	}
}

void SceneObject::notifyInsertToZone(Zone* zone) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYINSERTTOZONE__ZONE_);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyInsertToZone(zone);
	}
}

void SceneObject::switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID, bool toggleInvisibility) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_BOOL_);
		method.addAsciiParameter(newTerrainName);
		method.addFloatParameter(newPostionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);
		method.addBooleanParameter(toggleInvisibility);

		method.executeWithVoidReturn();
	} else {
		_implementation->switchZone(newTerrainName, newPostionX, newPositionZ, newPositionY, parentID, toggleInvisibility);
	}
}

void SceneObject::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_);
		method.addFloatParameter(newPositionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else {
		_implementation->teleport(newPositionX, newPositionZ, newPositionY, parentID);
	}
}

void SceneObject::updateDirection(float fw, float fx, float fy, float fz) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(fw);
		method.addFloatParameter(fx);
		method.addFloatParameter(fy);
		method.addFloatParameter(fz);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateDirection(fw, fx, fy, fz);
	}
}

void SceneObject::updateDirection(float angleHeadingRadians) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEDIRECTION__FLOAT_);
		method.addFloatParameter(angleHeadingRadians);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateDirection(angleHeadingRadians);
	}
}

void SceneObject::notifyInsert(QuadTreeEntry* entry) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->notifyInsert(entry);
	}
}

void SceneObject::notifyDissapear(QuadTreeEntry* entry) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->notifyDissapear(entry);
	}
}

void SceneObject::notifyRemoveFromZone() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYREMOVEFROMZONE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyRemoveFromZone();
	}
}

void SceneObject::updateZone(bool lightUpdate, bool sendPackets) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEZONE__BOOL_BOOL_);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateZone(lightUpdate, sendPackets);
	}
}

void SceneObject::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_);
		method.addObjectParameter(newParent);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateZoneWithParent(newParent, lightUpdate, sendPackets);
	}
}

void SceneObject::broadcastMessage(BasePacket* message, bool sendSelf, bool lockZone) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEPACKET_BOOL_BOOL_);
		method.addObjectParameter(message);
		method.addBooleanParameter(sendSelf);
		method.addBooleanParameter(lockZone);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessage(message, sendSelf, lockZone);
	}
}

void SceneObject::broadcastMessagePrivate(BasePacket* message, SceneObject* selfObject, bool lockZone) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGEPRIVATE__BASEPACKET_SCENEOBJECT_BOOL_);
		method.addObjectParameter(message);
		method.addObjectParameter(selfObject);
		method.addBooleanParameter(lockZone);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessagePrivate(message, selfObject, lockZone);
	}
}

void SceneObject::broadcastObject(SceneObject* object, bool sendSelf) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTOBJECT__SCENEOBJECT_BOOL_);
		method.addObjectParameter(object);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastObject(object, sendSelf);
	}
}

void SceneObject::broadcastObjectPrivate(SceneObject* object, SceneObject* selfObject) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTOBJECTPRIVATE__SCENEOBJECT_SCENEOBJECT_);
		method.addObjectParameter(object);
		method.addObjectParameter(selfObject);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastObjectPrivate(object, selfObject);
	}
}

void SceneObject::broadcastDestroy(SceneObject* object, bool sendSelf) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTDESTROY__SCENEOBJECT_BOOL_);
		method.addObjectParameter(object);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastDestroy(object, sendSelf);
	}
}

void SceneObject::broadcastDestroyPrivate(SceneObject* object, SceneObject* selfObject) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTDESTROYPRIVATE__SCENEOBJECT_SCENEOBJECT_);
		method.addObjectParameter(object);
		method.addObjectParameter(selfObject);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastDestroyPrivate(object, selfObject);
	}
}

void SceneObject::broadcastMessages(Vector<BasePacket*>* messages, bool sendSelf) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->broadcastMessages(messages, sendSelf);
	}
}

void SceneObject::broadcastMessagesPrivate(Vector<BasePacket*>* messages, SceneObject* selfObject) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->broadcastMessagesPrivate(messages, selfObject);
	}
}

void SceneObject::sendMessage(BasePacket* msg) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMESSAGE__BASEPACKET_);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendMessage(msg);
	}
}

int SceneObject::__compareTo(SceneObject* obj) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPARETO__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->compareTo(obj);
	}
}

void SceneObject::getSlottedObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->getSlottedObjects(objects);
	}
}

void SceneObject::getContainerObjects(VectorMap<unsigned long long, ManagedReference<SceneObject* > >& objects) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->getContainerObjects(objects);
	}
}

unsigned long long SceneObject::getParentID() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENTID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getParentID();
	}
}

void SceneObject::addPendingTask(const String& name, Task* task, int miliseconds) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->addPendingTask(name, task, miliseconds);
	}
}

void SceneObject::executeOrderedTask(Task* task) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->executeOrderedTask(task);
	}
}

void SceneObject::executeOrderedTask(const StdFunction& function, const String& name) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->executeOrderedTask(function, name);
	}
}

void SceneObject::removePendingTask(const String& name) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->removePendingTask(name);
	}
}

PendingTasksMap* SceneObject::getPendingTasks() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPendingTasks();
	}
}

Reference<Task* > SceneObject::getPendingTask(const String& name) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPendingTask(name);
	}
}

bool SceneObject::containsPendingTask(const String& name) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSPENDINGTASK__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->containsPendingTask(name);
	}
}

void SceneObject::showFlyText(const String& file, const String& aux, byte red, byte green, byte blue, bool isPrivate) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SHOWFLYTEXT__STRING_STRING_BYTE_BYTE_BYTE_BOOL_);
		method.addAsciiParameter(file);
		method.addAsciiParameter(aux);
		method.addByteParameter(red);
		method.addByteParameter(green);
		method.addByteParameter(blue);
		method.addBooleanParameter(isPrivate);

		method.executeWithVoidReturn();
	} else {
		_implementation->showFlyText(file, aux, red, green, blue, isPrivate);
	}
}

int SceneObject::getContainedObjectsRecursive() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINEDOBJECTSRECURSIVE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getContainedObjectsRecursive();
	}
}

int SceneObject::getCountableObjectsRecursive() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOUNTABLEOBJECTSRECURSIVE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCountableObjectsRecursive();
	}
}

int SceneObject::getSizeOnVendorRecursive() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSIZEONVENDORRECURSIVE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSizeOnVendorRecursive();
	}
}

Reference<Facade* > SceneObject::getActiveSession(unsigned int type) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVESESSION__INT_);
		method.addUnsignedIntParameter(type);

		return static_cast<Facade*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getActiveSession(type);
	}
}

void SceneObject::addActiveSession(unsigned int type, Facade* session) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDACTIVESESSION__INT_FACADE_);
		method.addUnsignedIntParameter(type);
		method.addObjectParameter(session);

		method.executeWithVoidReturn();
	} else {
		_implementation->addActiveSession(type, session);
	}
}

bool SceneObject::containsActiveSession(unsigned const int type) const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSACTIVESESSION__INT_);
		method.addUnsignedIntParameter(type);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->containsActiveSession(type);
	}
}

bool SceneObject::dropActiveSession(unsigned int type) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPACTIVESESSION__INT_);
		method.addUnsignedIntParameter(type);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->dropActiveSession(type);
	}
}

int SceneObject::getActiveSessionsCount() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVESESSIONSCOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getActiveSessionsCount();
	}
}

VectorMap<unsigned int, ManagedReference<Facade* > >* SceneObject::getObjectActiveSessions() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getObjectActiveSessions();
	}
}

int SceneObject::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

float SceneObject::getDistanceTo(SceneObject* object) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDISTANCETO__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getDistanceTo(object);
	}
}

float SceneObject::getDistanceTo(Coordinate* coordinate) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getDistanceTo(coordinate);
	}
}

void SceneObject::updateVehiclePosition(bool sendPackets) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEVEHICLEPOSITION__BOOL_);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateVehiclePosition(sendPackets);
	}
}

void SceneObject::playEffect(const String& file, const String& aux) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PLAYEFFECT__STRING_STRING_);
		method.addAsciiParameter(file);
		method.addAsciiParameter(aux);

		method.executeWithVoidReturn();
	} else {
		_implementation->playEffect(file, aux);
	}
}

void SceneObject::playEffect(const String& file) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PLAYEFFECT__STRING_);
		method.addAsciiParameter(file);

		method.executeWithVoidReturn();
	} else {
		_implementation->playEffect(file);
	}
}

int SceneObject::notifyObjectInserted(SceneObject* object) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObjectInserted(object);
	}
}

int SceneObject::notifyObjectRemoved(SceneObject* object) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTREMOVED__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObjectRemoved(object);
	}
}

ManagedWeakReference<CityRegion* > SceneObject::getCityRegion() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCityRegion();
	}
}

void SceneObject::setCityRegion(CityRegion* region) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setCityRegion(region);
	}
}

Zone* SceneObject::getZone() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONE__);

		return static_cast<Zone*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getZone();
	}
}

Zone* SceneObject::getZoneUnsafe() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONEUNSAFE__);

		return static_cast<Zone*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getZoneUnsafe();
	}
}

Zone* SceneObject::getLocalZone() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOCALZONE__);

		return static_cast<Zone*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getLocalZone();
	}
}

Vector3 SceneObject::getCoordinate(float distance, float angleDegrees, bool includeZ) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCoordinate(distance, angleDegrees, includeZ);
	}
}

Vector3 SceneObject::getWorldCoordinate(float distance, float angleDegrees, bool includeZ) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getWorldCoordinate(distance, angleDegrees, includeZ);
	}
}

float SceneObject::getWorldPositionX() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWORLDPOSITIONX__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getWorldPositionX();
	}
}

float SceneObject::getWorldPositionY() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWORLDPOSITIONY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getWorldPositionY();
	}
}

float SceneObject::getWorldPositionZ() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWORLDPOSITIONZ__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getWorldPositionZ();
	}
}

Vector3 SceneObject::getWorldPosition() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getWorldPosition();
	}
}

float SceneObject::getDirectionX() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONX__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getDirectionX();
	}
}

float SceneObject::getDirectionZ() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONZ__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getDirectionZ();
	}
}

float SceneObject::getDirectionY() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getDirectionY();
	}
}

float SceneObject::getDirectionW() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONW__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getDirectionW();
	}
}

Quaternion* SceneObject::getDirection() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getDirection();
	}
}

unsigned int SceneObject::getClientObjectCRC() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLIENTOBJECTCRC__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getClientObjectCRC();
	}
}

unsigned int SceneObject::getServerObjectCRC() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSERVEROBJECTCRC__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getServerObjectCRC();
	}
}

bool SceneObject::isWaypointObject() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWAYPOINTOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isWaypointObject();
	}
}

StringId* SceneObject::getObjectName() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getObjectName();
	}
}

String SceneObject::getObjectNameStringIdFile() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTNAMESTRINGIDFILE__);

		String _return_getObjectNameStringIdFile;
		method.executeWithAsciiReturn(_return_getObjectNameStringIdFile);
		return _return_getObjectNameStringIdFile;
	} else {
		return _implementation->getObjectNameStringIdFile();
	}
}

String SceneObject::getObjectNameStringIdName() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTNAMESTRINGIDNAME__);

		String _return_getObjectNameStringIdName;
		method.executeWithAsciiReturn(_return_getObjectNameStringIdName);
		return _return_getObjectNameStringIdName;
	} else {
		return _implementation->getObjectNameStringIdName();
	}
}

String SceneObject::getDetailedDescription() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getDetailedDescription();
	}
}

void SceneObject::setDetailedDescription(const String& detail) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDETAILEDDESCRIPTION__STRING_);
		method.addAsciiParameter(detail);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDetailedDescription(detail);
	}
}

int SceneObject::getArrangementDescriptorSize() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARRANGEMENTDESCRIPTORSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getArrangementDescriptorSize();
	}
}

const Vector<String>* SceneObject::getArrangementDescriptor(int idx) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getArrangementDescriptor(idx);
	}
}

String SceneObject::getSlotDescriptor(int idx) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTDESCRIPTOR__INT_);
		method.addSignedIntParameter(idx);

		String _return_getSlotDescriptor;
		method.executeWithAsciiReturn(_return_getSlotDescriptor);
		return _return_getSlotDescriptor;
	} else {
		return _implementation->getSlotDescriptor(idx);
	}
}

bool SceneObject::hasSlotDescriptor(const String& descr) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSLOTDESCRIPTOR__STRING_);
		method.addAsciiParameter(descr);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasSlotDescriptor(descr);
	}
}

bool SceneObject::hasArrangementDescriptor(const String& descr) const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASARRANGEMENTDESCRIPTOR__STRING_);
		method.addAsciiParameter(descr);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasArrangementDescriptor(descr);
	}
}

VectorMap<String, ManagedReference<SceneObject* > >* SceneObject::getSlottedObjects() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getSlottedObjects();
	}
}

Reference<SceneObject* > SceneObject::getSlottedObject(const String& slot) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTTEDOBJECT__STRING_);
		method.addAsciiParameter(slot);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getSlottedObject(slot);
	}
}

int SceneObject::getSlotDescriptorSize() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTDESCRIPTORSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSlotDescriptorSize();
	}
}

Reference<SceneObject* > SceneObject::getSlottedObject(int idx) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTTEDOBJECT__INT_);
		method.addSignedIntParameter(idx);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getSlottedObject(idx);
	}
}

Reference<SceneObject* > SceneObject::getContainerObjectRecursive(unsigned long long oid) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINEROBJECTRECURSIVE__LONG_);
		method.addUnsignedLongParameter(oid);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getContainerObjectRecursive(oid);
	}
}

void SceneObject::dropSlottedObject(const String& arrengementDescriptor) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPSLOTTEDOBJECT__STRING_);
		method.addAsciiParameter(arrengementDescriptor);

		method.executeWithVoidReturn();
	} else {
		_implementation->dropSlottedObject(arrengementDescriptor);
	}
}

void SceneObject::removeSlottedObject(int index) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESLOTTEDOBJECT__INT_);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeSlottedObject(index);
	}
}

int SceneObject::getContainerObjectsSize() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINEROBJECTSSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getContainerObjectsSize();
	}
}

int SceneObject::getSlottedObjectsSize() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTTEDOBJECTSSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSlottedObjectsSize();
	}
}

bool SceneObject::isContainerFull() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTAINERFULL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isContainerFull();
	}
}

bool SceneObject::isContainerFullRecursive() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTAINERFULLRECURSIVE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isContainerFullRecursive();
	}
}

unsigned int SceneObject::getContainerVolumeLimit() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINERVOLUMELIMIT__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getContainerVolumeLimit();
	}
}

Reference<SceneObject* > SceneObject::getContainerObject(int idx) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINEROBJECT__INT_);
		method.addSignedIntParameter(idx);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getContainerObject(idx);
	}
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObject::getContainerObjects() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getContainerObjects();
	}
}

bool SceneObject::hasObjectInContainer(unsigned long long objectID) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASOBJECTINCONTAINER__LONG_);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasObjectInContainer(objectID);
	}
}

bool SceneObject::hasObjectInSlottedContainer(SceneObject* object) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASOBJECTINSLOTTEDCONTAINER__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasObjectInSlottedContainer(object);
	}
}

Reference<SceneObject* > SceneObject::getContainerObject(unsigned long long objectID) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINEROBJECT__LONG_);
		method.addUnsignedLongParameter(objectID);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getContainerObject(objectID);
	}
}

void SceneObject::removeAllContainerObjects() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLCONTAINEROBJECTS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeAllContainerObjects();
	}
}

void SceneObject::putInContainer(SceneObject* obj, unsigned long long key) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PUTINCONTAINER__SCENEOBJECT_LONG_);
		method.addObjectParameter(obj);
		method.addUnsignedLongParameter(key);

		method.executeWithVoidReturn();
	} else {
		_implementation->putInContainer(obj, key);
	}
}

void SceneObject::removeFromContainerObjects(int index) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMCONTAINEROBJECTS__INT_);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeFromContainerObjects(index);
	}
}

long long SceneObject::getLastContainerAccess() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLASTCONTAINERACCESS__);

		return method.executeWithSignedLongReturn();
	} else {
		return _implementation->getLastContainerAccess();
	}
}

void SceneObject::unloadContainerObjects() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UNLOADCONTAINEROBJECTS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->unloadContainerObjects();
	}
}

bool SceneObject::isContainerLoaded() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTAINERLOADED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isContainerLoaded();
	}
}

void SceneObject::onContainerLoaded() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ONCONTAINERLOADED__);

		method.executeWithVoidReturn();
	} else {
		_implementation->onContainerLoaded();
	}
}

void SceneObject::setContainerVolumeLimit(int lim) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERVOLUMELIMIT__INT_);
		method.addSignedIntParameter(lim);

		method.executeWithVoidReturn();
	} else {
		_implementation->setContainerVolumeLimit(lim);
	}
}

void SceneObject::setContainerType(int type) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERTYPE__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->setContainerType(type);
	}
}

unsigned int SceneObject::getContainerType() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINERTYPE__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getContainerType();
	}
}

Reference<ZoneClientSession* > SceneObject::getClient() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLIENT__);

		return static_cast<ZoneClientSession*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getClient();
	}
}

unsigned int SceneObject::getGameObjectType() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGAMEOBJECTTYPE__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getGameObjectType();
	}
}

unsigned int SceneObject::getClientGameObjectType() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLIENTGAMEOBJECTTYPE__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getClientGameObjectType();
	}
}

unsigned int SceneObject::getContainmentType() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINMENTTYPE__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getContainmentType();
	}
}

float SceneObject::getDirectionAngle() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONANGLE__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getDirectionAngle();
	}
}

float SceneObject::getSpecialDirectionAngle() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIALDIRECTIONANGLE__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getSpecialDirectionAngle();
	}
}

void SceneObject::rotate(int degrees) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ROTATE__INT_);
		method.addSignedIntParameter(degrees);

		method.executeWithVoidReturn();
	} else {
		_implementation->rotate(degrees);
	}
}

void SceneObject::faceObject(SceneObject* obj, bool notifyClient) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FACEOBJECT__SCENEOBJECT_BOOL_);
		method.addObjectParameter(obj);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->faceObject(obj, notifyClient);
	}
}

bool SceneObject::isFacingObject(SceneObject* obj) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFACINGOBJECT__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFacingObject(obj);
	}
}

void SceneObject::notifySelfPositionUpdate() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYSELFPOSITIONUPDATE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifySelfPositionUpdate();
	}
}

void SceneObject::notifyPositionUpdate(QuadTreeEntry* entry) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_);
		method.addObjectParameter(entry);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyPositionUpdate(entry);
	}
}

void SceneObject::notifyCloseContainer(CreatureObject* player) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyCloseContainer(player);
	}
}

unsigned int SceneObject::getMovementCounter() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMOVEMENTCOUNTER__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getMovementCounter();
	}
}

ManagedWeakReference<SceneObject* > SceneObject::getParent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENT__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getParent();
	}
}

void SceneObject::setParent(QuadTreeEntry* entry) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPARENT__QUADTREEENTRY_);
		method.addObjectParameter(entry);

		method.executeWithVoidReturn();
	} else {
		_implementation->setParent(entry);
	}
}

void SceneObject::setParent(QuadTreeEntry* entry, bool updateRecursively) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPARENT__QUADTREEENTRY_BOOL_);
		method.addObjectParameter(entry);
		method.addBooleanParameter(updateRecursively);

		method.executeWithVoidReturn();
	} else {
		_implementation->setParent(entry, updateRecursively);
	}
}

ZoneServer* SceneObject::getZoneServer() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONESERVER__);

		return static_cast<ZoneServer*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getZoneServer();
	}
}

SceneObject* SceneObject::getRootParent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOTPARENT__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getRootParent();
	}
}

SceneObject* SceneObject::getRootParentUnsafe() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOTPARENTUNSAFE__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getRootParentUnsafe();
	}
}

void SceneObject::updateSavedRootParentRecursive(SceneObject* newRoot) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATESAVEDROOTPARENTRECURSIVE__SCENEOBJECT_);
		method.addObjectParameter(newRoot);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateSavedRootParentRecursive(newRoot);
	}
}

Reference<SceneObject* > SceneObject::getParentRecursively(unsigned int gameObjectType) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENTRECURSIVELY__INT_);
		method.addUnsignedIntParameter(gameObjectType);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getParentRecursively(gameObjectType);
	}
}

bool SceneObject::isASubChildOf(SceneObject* object) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISASUBCHILDOF__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isASubChildOf(object);
	}
}

ReadWriteLock* SceneObject::getContainerLock() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getContainerLock();
	}
}

UnicodeString SceneObject::getCustomObjectName() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCUSTOMOBJECTNAME__);

		UnicodeString _return_getCustomObjectName;
		method.executeWithUnicodeReturn(_return_getCustomObjectName);
		return _return_getCustomObjectName;
	} else {
		return _implementation->getCustomObjectName();
	}
}

String SceneObject::getLoggingName() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOGGINGNAME__);

		String _return_getLoggingName;
		method.executeWithAsciiReturn(_return_getLoggingName);
		return _return_getLoggingName;
	} else {
		return _implementation->getLoggingName();
	}
}

bool SceneObject::__isPlayerCreature() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isPlayerCreature();
	}
}

bool SceneObject::isVendor() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isVendor();
	}
}

bool SceneObject::isGCWBase() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isGCWBase();
	}
}

bool SceneObject::isTurret() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isTurret();
	}
}

bool SceneObject::isMinefield() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isMinefield();
	}
}

bool SceneObject::isDetector() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isDetector();
	}
}

bool SceneObject::isSecurityTerminal() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isSecurityTerminal();
	}
}

bool SceneObject::isTurretControlTerminal() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isTurretControlTerminal();
	}
}

bool SceneObject::isEventPerk() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isEventPerk();
	}
}

ZoneComponent* SceneObject::getZoneComponent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getZoneComponent();
	}
}

ObjectMenuComponent* SceneObject::getObjectMenuComponent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getObjectMenuComponent();
	}
}

AttributeListComponent* SceneObject::getAttributeListComponent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getAttributeListComponent();
	}
}

DataObjectComponentReference* SceneObject::getDataObjectComponent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getDataObjectComponent();
	}
}

bool SceneObject::isDecoration() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDECORATION__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDecoration();
	}
}

void SceneObject::setObjectMenuComponent(const String& name) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setObjectMenuComponent(name);
	}
}

void SceneObject::setContainerComponent(const String& name) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setContainerComponent(name);
	}
}

void SceneObject::setZoneComponent(const String& name) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONECOMPONENT__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->setZoneComponent(name);
	}
}

bool SceneObject::isNoTrade() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISNOTRADE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isNoTrade();
	}
}

bool SceneObject::isShuttleInstallation() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSHUTTLEINSTALLATION__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isShuttleInstallation();
	}
}

bool SceneObject::isPlayerObject() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYEROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPlayerObject();
	}
}

bool SceneObject::isActiveArea() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISACTIVEAREA__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isActiveArea();
	}
}

bool SceneObject::isRegion() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREGION__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRegion();
	}
}

bool SceneObject::__isCreatureObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isCreatureObject();
	}
}

CreatureObject* SceneObject::__asCreatureObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->asCreatureObject();
	}
}

bool SceneObject::__isAiAgent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isAiAgent();
	}
}

AiAgent* SceneObject::__asAiAgent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->asAiAgent();
	}
}

bool SceneObject::isCreature() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCREATURE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCreature();
	}
}

bool SceneObject::isShipObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSHIPOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isShipObject();
	}
}

bool SceneObject::__isVehicleObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isVehicleObject();
	}
}

bool SceneObject::isDroidObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDROIDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDroidObject();
	}
}

bool SceneObject::__isBuildingObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isBuildingObject();
	}
}

BuildingObject* SceneObject::asBuildingObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->asBuildingObject();
	}
}

bool SceneObject::isCloningBuildingObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCLONINGBUILDINGOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCloningBuildingObject();
	}
}

bool SceneObject::isGarage() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGARAGE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isGarage();
	}
}

bool SceneObject::isWeaponObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWEAPONOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isWeaponObject();
	}
}

bool SceneObject::isWearableObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWEARABLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isWearableObject();
	}
}

bool SceneObject::isWearableContainerObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWEARABLECONTAINEROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isWearableContainerObject();
	}
}

bool SceneObject::isArmorObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISARMOROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isArmorObject();
	}
}

bool SceneObject::isRobeObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISROBEOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRobeObject();
	}
}

bool SceneObject::isLightsaberCrystalObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLIGHTSABERCRYSTALOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isLightsaberCrystalObject();
	}
}

bool SceneObject::isFireworkObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFIREWORKOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFireworkObject();
	}
}

bool SceneObject::isPsgArmorObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPSGARMOROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPsgArmorObject();
	}
}

bool SceneObject::isCellObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCELLOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCellObject();
	}
}

bool SceneObject::isTangibleObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTANGIBLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTangibleObject();
	}
}

TangibleObject* SceneObject::asTangibleObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->asTangibleObject();
	}
}

SceneObject* SceneObject::__asSceneObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->asSceneObject();
	}
}

bool SceneObject::isResourceContainer() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRESOURCECONTAINER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isResourceContainer();
	}
}

bool SceneObject::isResourceSpawn() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRESOURCESPAWN__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isResourceSpawn();
	}
}

bool SceneObject::isComponent() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCOMPONENT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isComponent();
	}
}

bool SceneObject::isIntangibleObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINTANGIBLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isIntangibleObject();
	}
}

bool SceneObject::isInstrument() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINSTRUMENT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInstrument();
	}
}

bool SceneObject::isBazaarTerminal() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBAZAARTERMINAL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isBazaarTerminal();
	}
}

bool SceneObject::isLiveSample() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLIVESAMPLE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isLiveSample();
	}
}

bool SceneObject::isInstallationObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINSTALLATIONOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInstallationObject();
	}
}

bool SceneObject::isHarvesterObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISHARVESTEROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isHarvesterObject();
	}
}

bool SceneObject::isGeneratorObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGENERATOROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isGeneratorObject();
	}
}

bool SceneObject::isCityTerminal() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYTERMINAL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCityTerminal();
	}
}

bool SceneObject::isCityVoteTerminal() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYVOTETERMINAL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCityVoteTerminal();
	}
}

bool SceneObject::isFactory() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFACTORY__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFactory();
	}
}

bool SceneObject::isFactoryCrate() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFACTORYCRATE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFactoryCrate();
	}
}

bool SceneObject::isPharmaceuticalObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPHARMACEUTICALOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPharmaceuticalObject();
	}
}

bool SceneObject::isFishingPoleObject() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFISHINGPOLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFishingPoleObject();
	}
}

bool SceneObject::isDeedObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDEEDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDeedObject();
	}
}

bool SceneObject::isVehicleDeedObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVEHICLEDEEDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isVehicleDeedObject();
	}
}

bool SceneObject::isDroidDeedObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDROIDDEEDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDroidDeedObject();
	}
}

bool SceneObject::isBuildingDeed() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBUILDINGDEED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isBuildingDeed();
	}
}

bool SceneObject::isSignObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSIGNOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSignObject();
	}
}

bool SceneObject::isInstallationDeed() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINSTALLATIONDEED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInstallationDeed();
	}
}

bool SceneObject::isCraftingTool() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCRAFTINGTOOL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCraftingTool();
	}
}

bool SceneObject::isCraftingStation() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCRAFTINGSTATION__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCraftingStation();
	}
}

bool SceneObject::isManufactureSchematic() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMANUFACTURESCHEMATIC__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isManufactureSchematic();
	}
}

bool SceneObject::isStructureObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTRUCTUREOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isStructureObject();
	}
}

bool SceneObject::isAuctionObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISAUCTIONOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isAuctionObject();
	}
}

bool SceneObject::isFishingBait() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFISHINGBAIT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFishingBait();
	}
}

bool SceneObject::isTrapObject() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTRAPOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTrapObject();
	}
}

bool SceneObject::isRepairTool() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREPAIRTOOL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRepairTool();
	}
}

bool SceneObject::isCamoKit() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCAMOKIT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCamoKit();
	}
}

bool SceneObject::isAttachment() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISATTACHMENT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isAttachment();
	}
}

bool SceneObject::isDiceObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDICEOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDiceObject();
	}
}

bool SceneObject::isCreatureHabitat() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCREATUREHABITAT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCreatureHabitat();
	}
}

bool SceneObject::isCampKit() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCAMPKIT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCampKit();
	}
}

bool SceneObject::isCampStructure() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCAMPSTRUCTURE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCampStructure();
	}
}

bool SceneObject::isRecycleToolObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRECYCLETOOLOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRecycleToolObject();
	}
}

bool SceneObject::isAntiDecayKitObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISANTIDECAYKITOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isAntiDecayKitObject();
	}
}

ContainerPermissions* SceneObject::getContainerPermissions() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getContainerPermissions();
	}
}

void SceneObject::setContainerDefaultAllowPermission(unsigned short perm) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERDEFAULTALLOWPERMISSION__SHORT_);
		method.addUnsignedShortParameter(perm);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setContainerDefaultAllowPermission(perm);
	}
}

void SceneObject::clearContainerDefaultAllowPermission(unsigned short perm) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARCONTAINERDEFAULTALLOWPERMISSION__SHORT_);
		method.addUnsignedShortParameter(perm);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->clearContainerDefaultAllowPermission(perm);
	}
}

void SceneObject::setContainerDefaultDenyPermission(unsigned short perm) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERDEFAULTDENYPERMISSION__SHORT_);
		method.addUnsignedShortParameter(perm);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setContainerDefaultDenyPermission(perm);
	}
}

void SceneObject::clearContainerDefaultDenyPermission(unsigned short perm) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARCONTAINERDEFAULTDENYPERMISSION__SHORT_);
		method.addUnsignedShortParameter(perm);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->clearContainerDefaultDenyPermission(perm);
	}
}

void SceneObject::setContainerInheritPermissionsFromParent(bool val) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERINHERITPERMISSIONSFROMPARENT__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setContainerInheritPermissionsFromParent(val);
	}
}

void SceneObject::setContainerOwnerID(unsigned long long id) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINEROWNERID__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setContainerOwnerID(id);
	}
}

void SceneObject::setContainerAllowPermission(const String& group, unsigned short perm) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERALLOWPERMISSION__STRING_SHORT_);
		method.addAsciiParameter(group);
		method.addUnsignedShortParameter(perm);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setContainerAllowPermission(group, perm);
	}
}

void SceneObject::setContainerDenyPermission(const String& group, unsigned short perm) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERDENYPERMISSION__STRING_SHORT_);
		method.addAsciiParameter(group);
		method.addUnsignedShortParameter(perm);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setContainerDenyPermission(group, perm);
	}
}

void SceneObject::setGameObjectType(unsigned int type) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGAMEOBJECTTYPE__INT_);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->setGameObjectType(type);
	}
}

void SceneObject::setClientObjectCRC(unsigned int objCRC) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCLIENTOBJECTCRC__INT_);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else {
		_implementation->setClientObjectCRC(objCRC);
	}
}

void SceneObject::setServerObjectCRC(unsigned int objCRC) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSERVEROBJECTCRC__INT_);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else {
		_implementation->setServerObjectCRC(objCRC);
	}
}

void SceneObject::setZoneProcessServer(ZoneProcessServer* srv) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setZoneProcessServer(srv);
	}
}

ZoneProcessServer* SceneObject::getZoneProcessServer() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getZoneProcessServer();
	}
}

void SceneObject::setZone(Zone* zone) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONE__ZONE_);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else {
		_implementation->setZone(zone);
	}
}

void SceneObject::setObjectName(StringId& stringID, bool notifyClient) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setObjectName(stringID, notifyClient);
	}
}

void SceneObject::setDirection(float fw, float fx, float fy, float fz) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(fw);
		method.addFloatParameter(fx);
		method.addFloatParameter(fy);
		method.addFloatParameter(fz);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDirection(fw, fx, fy, fz);
	}
}

void SceneObject::setDirection(float headingAngleRadians) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDIRECTION__FLOAT_);
		method.addFloatParameter(headingAngleRadians);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDirection(headingAngleRadians);
	}
}

void SceneObject::setDirection(const Quaternion& dir) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setDirection(dir);
	}
}

void SceneObject::setMovementCounter(unsigned int count) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMOVEMENTCOUNTER__INT_);
		method.addUnsignedIntParameter(count);

		method.executeWithVoidReturn();
	} else {
		_implementation->setMovementCounter(count);
	}
}

void SceneObject::incrementMovementCounter() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INCREMENTMOVEMENTCOUNTER__);

		method.executeWithVoidReturn();
	} else {
		_implementation->incrementMovementCounter();
	}
}

void SceneObject::setContainmentType(unsigned int type) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINMENTTYPE__INT_);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->setContainmentType(type);
	}
}

void SceneObject::setLoggingName(const String& name) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLOGGINGNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->setLoggingName(name);
	}
}

void SceneObject::setClientObject(bool val) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCLIENTOBJECT__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else {
		_implementation->setClientObject(val);
	}
}

unsigned int SceneObject::getPlanetCRC() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETCRC__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getPlanetCRC();
	}
}

bool SceneObject::isClientObject() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCLIENTOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isClientObject();
	}
}

bool SceneObject::isStaticObjectClass() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTATICOBJECTCLASS__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isStaticObjectClass();
	}
}

StaticObject* SceneObject::asStaticObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->asStaticObject();
	}
}

bool SceneObject::isContainerObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTAINEROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isContainerObject();
	}
}

bool SceneObject::isTerminal() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTERMINAL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTerminal();
	}
}

bool SceneObject::isGroupObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGROUPOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isGroupObject();
	}
}

bool SceneObject::isGuildObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGUILDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isGuildObject();
	}
}

bool SceneObject::isControlDevice() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTROLDEVICE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isControlDevice();
	}
}

bool SceneObject::isPetControlDevice() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPETCONTROLDEVICE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPetControlDevice();
	}
}

bool SceneObject::isVehicleControlDevice() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVEHICLECONTROLDEVICE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isVehicleControlDevice();
	}
}

bool SceneObject::isShipControlDevice() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSHIPCONTROLDEVICE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isShipControlDevice();
	}
}

bool SceneObject::isMissionTerminal() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMISSIONTERMINAL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isMissionTerminal();
	}
}

bool SceneObject::isMissionObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMISSIONOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isMissionObject();
	}
}

bool SceneObject::isActorObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISACTOROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isActorObject();
	}
}

int SceneObject::getPlanetMapCategoryCRC() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETMAPCATEGORYCRC__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPlanetMapCategoryCRC();
	}
}

int SceneObject::getPlanetMapSubCategoryCRC() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETMAPSUBCATEGORYCRC__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPlanetMapSubCategoryCRC();
	}
}

void SceneObject::setPlanetMapCategory(PlanetMapCategory* pmc) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setPlanetMapCategory(pmc);
	}
}

void SceneObject::setPlanetMapSubCategory(PlanetMapCategory* pmc) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setPlanetMapSubCategory(pmc);
	}
}

PlanetMapCategory* SceneObject::getPlanetMapCategory() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPlanetMapCategory();
	}
}

PlanetMapCategory* SceneObject::getPlanetMapSubCategory() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPlanetMapSubCategory();
	}
}

SortedVector<ManagedReference<SceneObject* > >* SceneObject::getChildObjects() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getChildObjects();
	}
}

bool SceneObject::containsChildObject(SceneObject* obj) const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSCHILDOBJECT__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->containsChildObject(obj);
	}
}

SharedObjectTemplate* SceneObject::getObjectTemplate() const {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getObjectTemplate();
	}
}

SortedVector<ManagedReference<Observer* > > SceneObject::getObservers(unsigned int eventType) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getObservers(eventType);
	}
}

void SceneObject::createChildObjects() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECHILDOBJECTS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->createChildObjects();
	}
}

void SceneObject::destroyChildObjects() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYCHILDOBJECTS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->destroyChildObjects();
	}
}

void SceneObject::addChildObject(SceneObject* obj) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCHILDOBJECT__SCENEOBJECT_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else {
		_implementation->addChildObject(obj);
	}
}

Matrix4* SceneObject::getTransformForCollisionMatrix() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getTransformForCollisionMatrix();
	}
}

bool SceneObject::setTransformForCollisionMatrixIfNull(Matrix4* mat) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->setTransformForCollisionMatrixIfNull(mat);
	}
}

void SceneObject::initializeChildObject(SceneObject* controllerObject) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_);
		method.addObjectParameter(controllerObject);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeChildObject(controllerObject);
	}
}

bool SceneObject::isInWater() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINWATER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInWater();
	}
}

bool SceneObject::containsNoTradeObjectRecursive() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSNOTRADEOBJECTRECURSIVE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->containsNoTradeObjectRecursive();
	}
}

String SceneObject::getDisplayedName() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDISPLAYEDNAME__);

		String _return_getDisplayedName;
		method.executeWithAsciiReturn(_return_getDisplayedName);
		return _return_getDisplayedName;
	} else {
		return _implementation->getDisplayedName();
	}
}

bool SceneObject::doSendToClient() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOSENDTOCLIENT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->doSendToClient();
	}
}

void SceneObject::setSendToClient(bool val) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSENDTOCLIENT__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSendToClient(val);
	}
}

bool SceneObject::isPet() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPET__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPet();
	}
}

bool SceneObject::isMount() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMOUNT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isMount();
	}
}

bool SceneObject::isLairObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLAIROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isLairObject();
	}
}

bool SceneObject::isPoiBuilding() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPOIBUILDING__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPoiBuilding();
	}
}

bool SceneObject::isTheaterObject() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTHEATEROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTheaterObject();
	}
}

bool SceneObject::isEventPerkDeed() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISEVENTPERKDEED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isEventPerkDeed();
	}
}

bool SceneObject::isEventPerkItem() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISEVENTPERKITEM__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isEventPerkItem();
	}
}

bool SceneObject::isDataPad() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDATAPAD__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDataPad();
	}
}

float SceneObject::getTemplateRadius() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTEMPLATERADIUS__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getTemplateRadius();
	}
}

Vector<Reference<MeshData*> > SceneObject::getTransformedMeshData(const Matrix4* parentTransform) {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getTransformedMeshData(parentTransform);
	}
}

const BaseBoundingVolume* SceneObject::getBoundingVolume() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getBoundingVolume();
	}
}

bool SceneObject::isInNavMesh() {
	SceneObjectImplementation* _implementation = static_cast<SceneObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINNAVMESH__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInNavMesh();
	}
}

DistributedObjectServant* SceneObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SceneObject::_getImplementationForRead() const {
	return _impl;
}

void SceneObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SceneObjectImplementation
 */

SceneObjectImplementation::SceneObjectImplementation(DummyConstructorParameter* param) : QuadTreeEntryImplementation(param) {
	_initializeImplementation();
}


SceneObjectImplementation::~SceneObjectImplementation() {
	SceneObjectImplementation::finalize();
}


void SceneObjectImplementation::_initializeImplementation() {
	_setClassHelper(SceneObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SceneObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SceneObject*>(stub);
	QuadTreeEntryImplementation::_setStub(stub);
}

DistributedObjectStub* SceneObjectImplementation::_getStub() {
	return _this.get();
}

SceneObjectImplementation::operator const SceneObject*() {
	return _this.get();
}

void SceneObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SceneObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SceneObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SceneObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SceneObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SceneObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SceneObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SceneObjectImplementation::_serializationHelperMethod() {
	QuadTreeEntryImplementation::_serializationHelperMethod();

	_setClassName("SceneObject");

}

void SceneObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SceneObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SceneObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (QuadTreeEntryImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xdf730a27: //SceneObject.sendToClient
		TypeInfo<bool >::parseFromBinaryStream(&sendToClient, stream);
		return true;

	case 0xaec18859: //SceneObject.zone
		TypeInfo<ZoneReference >::parseFromBinaryStream(&zone, stream);
		return true;

	case 0x6d6b5595: //SceneObject.dataObjectComponent
		TypeInfo<DataObjectComponentReference >::parseFromBinaryStream(&dataObjectComponent, stream);
		return true;

	case 0xb1f6d3a1: //SceneObject.containerType
		TypeInfo<unsigned int >::parseFromBinaryStream(&containerType, stream);
		return true;

	case 0x48b4b076: //SceneObject.containerVolumeLimit
		TypeInfo<unsigned int >::parseFromBinaryStream(&containerVolumeLimit, stream);
		return true;

	case 0x49c71bd2: //SceneObject.containerPermissions
		TypeInfo<ContainerPermissions >::parseFromBinaryStream(&containerPermissions, stream);
		return true;

	case 0x53bf8602: //SceneObject.serverObjectCRC
		TypeInfo<unsigned int >::parseFromBinaryStream(&serverObjectCRC, stream);
		return true;

	case 0xb7865b88: //SceneObject.clientObjectCRC
		TypeInfo<unsigned int >::parseFromBinaryStream(&clientObjectCRC, stream);
		return true;

	case 0xa7c9305d: //SceneObject.direction
		TypeInfo<Quaternion >::parseFromBinaryStream(&direction, stream);
		return true;

	case 0x4abd4bff: //SceneObject.movementCounter
		TypeInfo<unsigned int >::parseFromBinaryStream(&movementCounter, stream);
		return true;

	case 0xd57eccf8: //SceneObject.objectName
		TypeInfo<StringId >::parseFromBinaryStream(&objectName, stream);
		return true;

	case 0x63af3f23: //SceneObject.staticObject
		TypeInfo<bool >::parseFromBinaryStream(&staticObject, stream);
		return true;

	case 0x8f097c02: //SceneObject.objectActiveSessions
		TypeInfo<VectorMap<unsigned int, ManagedReference<Facade* > > >::parseFromBinaryStream(&objectActiveSessions, stream);
		return true;

	case 0x82d0211: //SceneObject.gameObjectType
		TypeInfo<unsigned int >::parseFromBinaryStream(&gameObjectType, stream);
		return true;

	case 0x54cd1989: //SceneObject.containmentType
		TypeInfo<unsigned int >::parseFromBinaryStream(&containmentType, stream);
		return true;

	case 0x4c7ad679: //SceneObject.planetMapCategory
		TypeInfo<int >::parseFromBinaryStream(&planetMapCategory, stream);
		return true;

	case 0x2150aa1e: //SceneObject.planetMapSubCategory
		TypeInfo<int >::parseFromBinaryStream(&planetMapSubCategory, stream);
		return true;

	case 0xb3fd7d2a: //SceneObject.customName
		TypeInfo<UnicodeString >::parseFromBinaryStream(&customName, stream);
		return true;

	case 0x3ff949cf: //SceneObject.childObjects
		TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::parseFromBinaryStream(&childObjects, stream);
		return true;

	case 0x86f38437: //SceneObject.slottedObjects
		TypeInfo<VectorMap<String, ManagedReference<SceneObject* > > >::parseFromBinaryStream(&slottedObjects, stream);
		return true;

	case 0xe866252e: //SceneObject.containerObjects
		TypeInfo<ContainerObjectsMap >::parseFromBinaryStream(&containerObjects, stream);
		return true;

	}

	return false;
}

void SceneObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SceneObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SceneObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = QuadTreeEntryImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xdf730a27; //SceneObject.sendToClient
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&sendToClient, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xaec18859; //SceneObject.zone
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ZoneReference >::toBinaryStream(&zone, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6d6b5595; //SceneObject.dataObjectComponent
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<DataObjectComponentReference >::toBinaryStream(&dataObjectComponent, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb1f6d3a1; //SceneObject.containerType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&containerType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x48b4b076; //SceneObject.containerVolumeLimit
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&containerVolumeLimit, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x49c71bd2; //SceneObject.containerPermissions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ContainerPermissions >::toBinaryStream(&containerPermissions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x53bf8602; //SceneObject.serverObjectCRC
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&serverObjectCRC, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb7865b88; //SceneObject.clientObjectCRC
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&clientObjectCRC, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa7c9305d; //SceneObject.direction
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Quaternion >::toBinaryStream(&direction, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4abd4bff; //SceneObject.movementCounter
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&movementCounter, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd57eccf8; //SceneObject.objectName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<StringId >::toBinaryStream(&objectName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x63af3f23; //SceneObject.staticObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&staticObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8f097c02; //SceneObject.objectActiveSessions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned int, ManagedReference<Facade* > > >::toBinaryStream(&objectActiveSessions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x82d0211; //SceneObject.gameObjectType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&gameObjectType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x54cd1989; //SceneObject.containmentType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&containmentType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4c7ad679; //SceneObject.planetMapCategory
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&planetMapCategory, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2150aa1e; //SceneObject.planetMapSubCategory
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&planetMapSubCategory, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb3fd7d2a; //SceneObject.customName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<UnicodeString >::toBinaryStream(&customName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3ff949cf; //SceneObject.childObjects
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::toBinaryStream(&childObjects, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x86f38437; //SceneObject.slottedObjects
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, ManagedReference<SceneObject* > > >::toBinaryStream(&slottedObjects, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe866252e; //SceneObject.containerObjects
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ContainerObjectsMap >::toBinaryStream(&containerObjects, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 21;
}

SceneObjectImplementation::SceneObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/scene/SceneObject.idl():  		initializePrivateData();
	initializePrivateData();
}

void SceneObjectImplementation::finalize() {
}

void SceneObjectImplementation::initializeContainerObjectsMap() {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.setContainer(asSceneObject());
	(&containerObjects)->setContainer(asSceneObject());
}

void SceneObjectImplementation::onCloneObject(SceneObject* objectToClone) {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.setContainer(asSceneObject());
	(&containerObjects)->setContainer(asSceneObject());
}

void SceneObjectImplementation::info(const String& msg, bool forced) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.info(msg, forced);
	Logger::info(msg, forced);
}

void SceneObjectImplementation::error(const String& msg) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.error(msg);
	Logger::error(msg);
}

void SceneObjectImplementation::debug(const String& msg) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.debug(msg);
	Logger::debug(msg);
}

void SceneObjectImplementation::destroyObjectFromWorld(bool sendSelfDestroy) {
	// server/zone/objects/scene/SceneObject.idl():  		zoneComponent.destroyObjectFromWorld(this, sendSelfDestroy);
	zoneComponent->destroyObjectFromWorld(_this.get(), sendSelfDestroy);
}

int SceneObjectImplementation::notifyObjectInsertedToChild(SceneObject* object, SceneObject* child, SceneObject* oldParent) {
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

int SceneObjectImplementation::notifyObjectRemovedFromChild(SceneObject* object, SceneObject* child) {
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

void SceneObjectImplementation::synchronizedUIListen(CreatureObject* player, int value) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.info("Unhandled synchronizedUIListen", true);
	Logger::info("Unhandled synchronizedUIListen", true);
}

void SceneObjectImplementation::synchronizedUIStopListen(CreatureObject* player, int value) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.info("Unhandled synchronizedUIStopListen", true);
	Logger::info("Unhandled synchronizedUIStopListen", true);
}

int SceneObjectImplementation::canBeDestroyed(CreatureObject* player) {
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

void SceneObjectImplementation::sendBaselinesTo(SceneObject* player) {
}

void SceneObjectImplementation::sendToOwner(bool doClose) {
}

void SceneObjectImplementation::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
}

void SceneObjectImplementation::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	// server/zone/objects/scene/SceneObject.idl():  		customName = name;
	customName = name;
}

byte SceneObjectImplementation::checkContainerPermission(CreatureObject* player, unsigned short permission) {
	// server/zone/objects/scene/SceneObject.idl():  		return containerComponent.checkContainerPermission(this, player, permission);
	return containerComponent->checkContainerPermission(_this.get(), player, permission);
}

void SceneObjectImplementation::notifyInsert(QuadTreeEntry* entry) {
	// server/zone/objects/scene/SceneObject.idl():  		zoneComponent.notifyInsert(this, entry);
	zoneComponent->notifyInsert(_this.get(), entry);
}

void SceneObjectImplementation::notifyDissapear(QuadTreeEntry* entry) {
	// server/zone/objects/scene/SceneObject.idl():  		zoneComponent.notifyDissapear(this, entry);
	zoneComponent->notifyDissapear(_this.get(), entry);
}

void SceneObjectImplementation::addPendingTask(const String& name, Task* task, int miliseconds) {
	// server/zone/objects/scene/SceneObject.idl():  		}
{
	Locker _locker((&containerLock));
	// server/zone/objects/scene/SceneObject.idl():  		}
	if (getPendingTasks()->put(name, task) > -1){
	// server/zone/objects/scene/SceneObject.idl():  				task.schedule(miliseconds);
	task->schedule(miliseconds);
}
}
}

void SceneObjectImplementation::executeOrderedTask(Task* task) {
	// server/zone/objects/scene/SceneObject.idl():  		}
{
	Locker _locker((&containerLock));
	// server/zone/objects/scene/SceneObject.idl():  			getPendingTasks().putOrdered(task, this);
	getPendingTasks()->putOrdered(task, _this.get());
}
}

void SceneObjectImplementation::removePendingTask(const String& name) {
	// server/zone/objects/scene/SceneObject.idl():  		}
{
	Locker _locker((&containerLock));
	// server/zone/objects/scene/SceneObject.idl():  			Task 
	if (pendingTasks == NULL)	// server/zone/objects/scene/SceneObject.idl():  				return;
	return;
	// server/zone/objects/scene/SceneObject.idl():  			Task task = pendingTasks.get(name);
	Task* task = pendingTasks->get(name);
	// server/zone/objects/scene/SceneObject.idl():  			pendingTasks.
	if (task != NULL && task->isScheduled())	// server/zone/objects/scene/SceneObject.idl():  				task.cancel();
	task->cancel();
	// server/zone/objects/scene/SceneObject.idl():  			pendingTasks.drop(name);
	pendingTasks->drop(name);
}
}

PendingTasksMap* SceneObjectImplementation::getPendingTasks() {
	// server/zone/objects/scene/SceneObject.idl():  		}
{
	Locker _locker((&containerLock));
	// server/zone/objects/scene/SceneObject.idl():  			return 
	if (pendingTasks == NULL){
	Reference<PendingTasksMap*> _ref0;
	// server/zone/objects/scene/SceneObject.idl():  				pendingTasks = new PendingTasksMap();
	pendingTasks = _ref0 = new PendingTasksMap();
}
	// server/zone/objects/scene/SceneObject.idl():  			return pendingTasks;
	return pendingTasks;
}
}

Reference<Task* > SceneObjectImplementation::getPendingTask(const String& name) {
	// server/zone/objects/scene/SceneObject.idl():  		}
{
	Locker _locker((&containerLock));
	// server/zone/objects/scene/SceneObject.idl():  			return 
	if (pendingTasks == NULL)	// server/zone/objects/scene/SceneObject.idl():  				return null;
	return NULL;
	// server/zone/objects/scene/SceneObject.idl():  			return pendingTasks.get(name);
	return pendingTasks->get(name);
}
}

bool SceneObjectImplementation::containsPendingTask(const String& name) {
	// server/zone/objects/scene/SceneObject.idl():  		}
{
	Locker _locker((&containerLock));
	// server/zone/objects/scene/SceneObject.idl():  			return 
	if (pendingTasks == NULL)	// server/zone/objects/scene/SceneObject.idl():  				return false;
	return false;
	// server/zone/objects/scene/SceneObject.idl():  			return pendingTasks.contains(name);
	return pendingTasks->contains(name);
}
}

Reference<Facade* > SceneObjectImplementation::getActiveSession(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions.get(type);
	return (&objectActiveSessions)->get(type);
}

void SceneObjectImplementation::addActiveSession(unsigned int type, Facade* session) {
	// server/zone/objects/scene/SceneObject.idl():  		objectActiveSessions.put(type, session);
	(&objectActiveSessions)->put(type, session);
}

bool SceneObjectImplementation::containsActiveSession(unsigned const int type) const{
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions.contains(type);
	return (&objectActiveSessions)->contains(type);
}

bool SceneObjectImplementation::dropActiveSession(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions.drop(type);
	return (&objectActiveSessions)->drop(type);
}

int SceneObjectImplementation::getActiveSessionsCount() const{
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions.size();
	return (&objectActiveSessions)->size();
}

VectorMap<unsigned int, ManagedReference<Facade* > >* SceneObjectImplementation::getObjectActiveSessions() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions;
	return (&objectActiveSessions);
}

void SceneObjectImplementation::playEffect(const String& file) {
	// server/zone/objects/scene/SceneObject.idl():  		playEffect(file, "");
	playEffect(file, "");
}

int SceneObjectImplementation::notifyObjectInserted(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

int SceneObjectImplementation::notifyObjectRemoved(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

ManagedWeakReference<CityRegion* > SceneObjectImplementation::getCityRegion() {
	// server/zone/objects/scene/SceneObject.idl():  		return cityRegion;
	return cityRegion;
}

void SceneObjectImplementation::setCityRegion(CityRegion* region) {
	// server/zone/objects/scene/SceneObject.idl():  		cityRegion = region;
	cityRegion = region;
}

Zone* SceneObjectImplementation::getLocalZone() const{
	// server/zone/objects/scene/SceneObject.idl():  		return zone.get();
	return (&zone)->get();
}

float SceneObjectImplementation::getDirectionX() const{
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getX();
	return (&direction)->getX();
}

float SceneObjectImplementation::getDirectionZ() const{
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getZ();
	return (&direction)->getZ();
}

float SceneObjectImplementation::getDirectionY() const{
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getY();
	return (&direction)->getY();
}

float SceneObjectImplementation::getDirectionW() const{
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getW();
	return (&direction)->getW();
}

unsigned int SceneObjectImplementation::getClientObjectCRC() const{
	// server/zone/objects/scene/SceneObject.idl():  		return clientObjectCRC;
	return clientObjectCRC;
}

unsigned int SceneObjectImplementation::getServerObjectCRC() const{
	// server/zone/objects/scene/SceneObject.idl():  		return serverObjectCRC;
	return serverObjectCRC;
}

bool SceneObjectImplementation::isWaypointObject() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.WAYPOINT;
	return gameObjectType == SceneObjectType::WAYPOINT;
}

StringId* SceneObjectImplementation::getObjectName() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectName;
	return (&objectName);
}

String SceneObjectImplementation::getObjectNameStringIdFile() const{
	// server/zone/objects/scene/SceneObject.idl():  		return objectName.getFile();
	return (&objectName)->getFile();
}

String SceneObjectImplementation::getObjectNameStringIdName() const{
	// server/zone/objects/scene/SceneObject.idl():  		return objectName.getStringID();
	return (&objectName)->getStringID();
}

String SceneObjectImplementation::getDetailedDescription() {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.getDetailedDescription();
	return templateObject->getDetailedDescription();
}

void SceneObjectImplementation::setDetailedDescription(const String& detail) {
	// server/zone/objects/scene/SceneObject.idl():  		return;
	return;
}

String SceneObjectImplementation::getSlotDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.getSlotDescriptors().get(idx);
	return templateObject->getSlotDescriptors()->get(idx);
}

bool SceneObjectImplementation::hasSlotDescriptor(const String& descr) {
	// server/zone/objects/scene/SceneObject.idl():  		}
	for (	// server/zone/objects/scene/SceneObject.idl():  		for (int i = 0;
	int i = 0;
	i < getSlotDescriptorSize();
 ++i) {
	// server/zone/objects/scene/SceneObject.idl():  		}
	if (getSlotDescriptor(i) == descr)	// server/zone/objects/scene/SceneObject.idl():  				return true;
	return true;
}
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::hasArrangementDescriptor(const String& descr) const{
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.hasArrangementDescriptor(descr);
	return templateObject->hasArrangementDescriptor(descr);
}

VectorMap<String, ManagedReference<SceneObject* > >* SceneObjectImplementation::getSlottedObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		return slottedObjects;
	return (&slottedObjects);
}

int SceneObjectImplementation::getSlotDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl():  		return 
	if (templateObject->getSlotDescriptors() != NULL)	// server/zone/objects/scene/SceneObject.idl():  			return templateObject.getSlotDescriptors().size();
	return templateObject->getSlotDescriptors()->size();
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

int SceneObjectImplementation::getContainerObjectsSize() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.size();
	return (&containerObjects)->size();
}

int SceneObjectImplementation::getSlottedObjectsSize() const{
	// server/zone/objects/scene/SceneObject.idl():  		return slottedObjects.size();
	return (&slottedObjects)->size();
}

bool SceneObjectImplementation::isContainerFull() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerVolumeLimit <= containerObjects.size();
	return containerVolumeLimit <= (&containerObjects)->size();
}

bool SceneObjectImplementation::isContainerFullRecursive() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerVolumeLimit <= getCountableObjectsRecursive();
	return containerVolumeLimit <= getCountableObjectsRecursive();
}

unsigned int SceneObjectImplementation::getContainerVolumeLimit() const{
	// server/zone/objects/scene/SceneObject.idl():  		return containerVolumeLimit;
	return containerVolumeLimit;
}

Reference<SceneObject* > SceneObjectImplementation::getContainerObject(int idx) {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.get(idx);
	return (&containerObjects)->get(idx);
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObjectImplementation::getContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.getContainerObjects();
	return (&containerObjects)->getContainerObjects();
}

bool SceneObjectImplementation::hasObjectInContainer(unsigned long long objectID) {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.contains(objectID);
	return (&containerObjects)->contains(objectID);
}

Reference<SceneObject* > SceneObjectImplementation::getContainerObject(unsigned long long objectID) {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.get(objectID);
	return (&containerObjects)->get(objectID);
}

void SceneObjectImplementation::removeAllContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.removeAll();
	(&containerObjects)->removeAll();
}

void SceneObjectImplementation::putInContainer(SceneObject* obj, unsigned long long key) {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.put(key, obj);
	(&containerObjects)->put(key, obj);
}

void SceneObjectImplementation::removeFromContainerObjects(int index) {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.removeElementAt(index);
	(&containerObjects)->removeElementAt(index);
}

long long SceneObjectImplementation::getLastContainerAccess() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.getLastAccess().miliDifference();
	return (&containerObjects)->getLastAccess()->miliDifference();
}

void SceneObjectImplementation::unloadContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.unloadObjects();
	(&containerObjects)->unloadObjects();
}

bool SceneObjectImplementation::isContainerLoaded() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.isLoaded();
	return (&containerObjects)->isLoaded();
}

void SceneObjectImplementation::setContainerVolumeLimit(int lim) {
	// server/zone/objects/scene/SceneObject.idl():  		containerVolumeLimit = lim;
	containerVolumeLimit = lim;
}

void SceneObjectImplementation::setContainerType(int type) {
	// server/zone/objects/scene/SceneObject.idl():  		containerType = type;
	containerType = type;
}

unsigned int SceneObjectImplementation::getContainerType() const{
	// server/zone/objects/scene/SceneObject.idl():  		return containerType;
	return containerType;
}

Reference<ZoneClientSession* > SceneObjectImplementation::getClient() {
	// server/zone/objects/scene/SceneObject.idl():  		return null;
	return NULL;
}

unsigned int SceneObjectImplementation::getGameObjectType() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType;
	return gameObjectType;
}

unsigned int SceneObjectImplementation::getClientGameObjectType() const{
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.getClientGameObjectType();
	return templateObject->getClientGameObjectType();
}

unsigned int SceneObjectImplementation::getContainmentType() const{
	// server/zone/objects/scene/SceneObject.idl():  		return containmentType;
	return containmentType;
}

float SceneObjectImplementation::getDirectionAngle() const{
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getDegrees();
	return (&direction)->getDegrees();
}

float SceneObjectImplementation::getSpecialDirectionAngle() const{
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getSpecialDegrees();
	return (&direction)->getSpecialDegrees();
}

unsigned int SceneObjectImplementation::getMovementCounter() const{
	// server/zone/objects/scene/SceneObject.idl():  		return movementCounter;
	return movementCounter;
}

ZoneServer* SceneObjectImplementation::getZoneServer() const{
	// server/zone/objects/scene/SceneObject.idl():  			return null;
	if (server != NULL)	// server/zone/objects/scene/SceneObject.idl():  			return server.getZoneServer();
	return server->getZoneServer();

	else 	// server/zone/objects/scene/SceneObject.idl():  			return null;
	return NULL;
}

ReadWriteLock* SceneObjectImplementation::getContainerLock() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerLock;
	return (&containerLock);
}

UnicodeString SceneObjectImplementation::getCustomObjectName() const{
	// server/zone/objects/scene/SceneObject.idl():  		return customName;
	return customName;
}

String SceneObjectImplementation::getLoggingName() const{
	// server/zone/objects/scene/SceneObject.idl():  		return Logger.getLoggingName();
	return Logger::getLoggingName();
}

bool SceneObjectImplementation::isVendor() const{
	// server/zone/objects/scene/SceneObject.idl():  		dataObjectComponent.get().isVendorData();
	return (&dataObjectComponent) != NULL && (&dataObjectComponent)->get() != NULL && (&dataObjectComponent)->get()->isVendorData();
}

bool SceneObjectImplementation::isGCWBase() const{
	// server/zone/objects/scene/SceneObject.idl():  		dataObjectComponent.get().isGCWBaseData();
	return (&dataObjectComponent) != NULL && (&dataObjectComponent)->get() != NULL && (&dataObjectComponent)->get()->isGCWBaseData();
}

bool SceneObjectImplementation::isTurret() const{
	// server/zone/objects/scene/SceneObject.idl():  		dataObjectComponent.get().isTurretData();
	return (&dataObjectComponent) != NULL && (&dataObjectComponent)->get() != NULL && (&dataObjectComponent)->get()->isTurretData();
}

bool SceneObjectImplementation::isMinefield() const{
	// server/zone/objects/scene/SceneObject.idl():  		dataObjectComponent.get().isMinefieldData();
	return (&dataObjectComponent) != NULL && (&dataObjectComponent)->get() != NULL && (&dataObjectComponent)->get()->isMinefieldData();
}

bool SceneObjectImplementation::isDetector() const{
	// server/zone/objects/scene/SceneObject.idl():  		dataObjectComponent.get().isDetectorData();
	return (&dataObjectComponent) != NULL && (&dataObjectComponent)->get() != NULL && (&dataObjectComponent)->get()->isDetectorData();
}

bool SceneObjectImplementation::isSecurityTerminal() const{
	// server/zone/objects/scene/SceneObject.idl():  		dataObjectComponent.get().isSecurityTerminalData();
	return (&dataObjectComponent) != NULL && (&dataObjectComponent)->get() != NULL && (&dataObjectComponent)->get()->isSecurityTerminalData();
}

bool SceneObjectImplementation::isTurretControlTerminal() const{
	// server/zone/objects/scene/SceneObject.idl():  		dataObjectComponent.get().isTurretControlTerminalData();
	return (&dataObjectComponent) != NULL && (&dataObjectComponent)->get() != NULL && (&dataObjectComponent)->get()->isTurretControlTerminalData();
}

bool SceneObjectImplementation::isEventPerk() const{
	// server/zone/objects/scene/SceneObject.idl():  		dataObjectComponent.get().isEventPerkData();
	return (&dataObjectComponent) != NULL && (&dataObjectComponent)->get() != NULL && (&dataObjectComponent)->get()->isEventPerkData();
}

ZoneComponent* SceneObjectImplementation::getZoneComponent() {
	// server/zone/objects/scene/SceneObject.idl():  		return zoneComponent;
	return zoneComponent;
}

ObjectMenuComponent* SceneObjectImplementation::getObjectMenuComponent() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectMenuComponent;
	return objectMenuComponent;
}

AttributeListComponent* SceneObjectImplementation::getAttributeListComponent() {
	// server/zone/objects/scene/SceneObject.idl():  		return attributeListComponent;
	return attributeListComponent;
}

DataObjectComponentReference* SceneObjectImplementation::getDataObjectComponent() {
	// server/zone/objects/scene/SceneObject.idl():  		return dataObjectComponent;
	return (&dataObjectComponent);
}

bool SceneObjectImplementation::isNoTrade() {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.isNoTrade();
	return templateObject->isNoTrade();
}

bool SceneObjectImplementation::isShuttleInstallation() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.SHUTTLEINSTALLATION;
	return gameObjectType == SceneObjectType::SHUTTLEINSTALLATION;
}

bool SceneObjectImplementation::isPlayerObject() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.PLAYEROBJECT;
	return gameObjectType == SceneObjectType::PLAYEROBJECT;
}

bool SceneObjectImplementation::isActiveArea() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isRegion() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCreature() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isShipObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isDroidObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

BuildingObject* SceneObjectImplementation::asBuildingObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return null;
	return NULL;
}

bool SceneObjectImplementation::isCloningBuildingObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isGarage() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.GARAGEBUILDING || gameObjectType == SceneObjectType.GARAGEINSTALLATION;
	return gameObjectType == SceneObjectType::GARAGEBUILDING || gameObjectType == SceneObjectType::GARAGEINSTALLATION;
}

bool SceneObjectImplementation::isWeaponObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isWearableObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isWearableContainerObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isArmorObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isRobeObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isLightsaberCrystalObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFireworkObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isPsgArmorObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.SHIELDGENERATOR;
	return gameObjectType == SceneObjectType::SHIELDGENERATOR;
}

bool SceneObjectImplementation::isCellObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isTangibleObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

TangibleObject* SceneObjectImplementation::asTangibleObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return null;
	return NULL;
}

bool SceneObjectImplementation::isResourceContainer() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isResourceSpawn() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isComponent() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isIntangibleObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isInstrument() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.INSTRUMENT;
	return gameObjectType == SceneObjectType::INSTRUMENT;
}

bool SceneObjectImplementation::isBazaarTerminal() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.BAZAAR;
	return gameObjectType == SceneObjectType::BAZAAR;
}

bool SceneObjectImplementation::isLiveSample() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.LIVESAMPLE;
	return gameObjectType == SceneObjectType::LIVESAMPLE;
}

bool SceneObjectImplementation::isInstallationObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isHarvesterObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isGeneratorObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCityTerminal() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCityVoteTerminal() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFactory() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFactoryCrate() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isPharmaceuticalObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFishingPoleObject() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.FISHINGPOLE;
	return gameObjectType == SceneObjectType::FISHINGPOLE;
}

bool SceneObjectImplementation::isDeedObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isVehicleDeedObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isDroidDeedObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isBuildingDeed() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isSignObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isInstallationDeed() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCraftingTool() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCraftingStation() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isManufactureSchematic() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isStructureObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isAuctionObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFishingBait() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.FISHINGBAIT;
	return gameObjectType == SceneObjectType::FISHINGBAIT;
}

bool SceneObjectImplementation::isTrapObject() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.TRAP;
	return gameObjectType == SceneObjectType::TRAP;
}

bool SceneObjectImplementation::isRepairTool() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.REPAIRTOOL;
	return gameObjectType == SceneObjectType::REPAIRTOOL;
}

bool SceneObjectImplementation::isCamoKit() {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.isCamoKitTemplate();
	return templateObject->isCamoKitTemplate();
}

bool SceneObjectImplementation::isAttachment() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isDiceObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.isDiceTemplate();
	return templateObject->isDiceTemplate();
}

bool SceneObjectImplementation::isCreatureHabitat() {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.isCreatureHabitatTemplate();
	return templateObject->isCreatureHabitatTemplate();
}

bool SceneObjectImplementation::isCampKit() const{
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.CAMPKIT;
	return gameObjectType == SceneObjectType::CAMPKIT;
}

bool SceneObjectImplementation::isCampStructure() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isRecycleToolObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.RECYCLETOOL;
	return gameObjectType == SceneObjectType::RECYCLETOOL;
}

bool SceneObjectImplementation::isAntiDecayKitObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SceneObjectType.ANTIDECAYKIT;
	return gameObjectType == SceneObjectType::ANTIDECAYKIT;
}

ContainerPermissions* SceneObjectImplementation::getContainerPermissions() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerPermissions;
	return (&containerPermissions);
}

void SceneObjectImplementation::setContainerDefaultAllowPermission(unsigned short perm) {
	// server/zone/objects/scene/SceneObject.idl():  		containerPermissions.setDefaultAllowPermission(perm);
	(&containerPermissions)->setDefaultAllowPermission(perm);
}

void SceneObjectImplementation::clearContainerDefaultAllowPermission(unsigned short perm) {
	// server/zone/objects/scene/SceneObject.idl():  		containerPermissions.clearDefaultAllowPermission(perm);
	(&containerPermissions)->clearDefaultAllowPermission(perm);
}

void SceneObjectImplementation::setContainerDefaultDenyPermission(unsigned short perm) {
	// server/zone/objects/scene/SceneObject.idl():  		containerPermissions.setDefaultDenyPermission(perm);
	(&containerPermissions)->setDefaultDenyPermission(perm);
}

void SceneObjectImplementation::clearContainerDefaultDenyPermission(unsigned short perm) {
	// server/zone/objects/scene/SceneObject.idl():  		containerPermissions.clearDefaultDenyPermission(perm);
	(&containerPermissions)->clearDefaultDenyPermission(perm);
}

void SceneObjectImplementation::setContainerInheritPermissionsFromParent(bool val) {
	// server/zone/objects/scene/SceneObject.idl():  		containerPermissions.setInheritPermissionsFromParent(val);
	(&containerPermissions)->setInheritPermissionsFromParent(val);
}

void SceneObjectImplementation::setContainerOwnerID(unsigned long long id) {
	// server/zone/objects/scene/SceneObject.idl():  		containerPermissions.setOwner(id);
	(&containerPermissions)->setOwner(id);
}

void SceneObjectImplementation::setContainerAllowPermission(const String& group, unsigned short perm) {
	// server/zone/objects/scene/SceneObject.idl():  		containerPermissions.setAllowPermission(group, perm);
	(&containerPermissions)->setAllowPermission(group, perm);
}

void SceneObjectImplementation::setContainerDenyPermission(const String& group, unsigned short perm) {
	// server/zone/objects/scene/SceneObject.idl():  		containerPermissions.setDenyPermission(group, perm);
	(&containerPermissions)->setDenyPermission(group, perm);
}

void SceneObjectImplementation::setGameObjectType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		gameObjectType = type;
	gameObjectType = type;
}

void SceneObjectImplementation::setClientObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl():  		clientObjectCRC = objCRC;
	clientObjectCRC = objCRC;
}

void SceneObjectImplementation::setServerObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl():  		serverObjectCRC = objCRC;
	serverObjectCRC = objCRC;
}

void SceneObjectImplementation::setZoneProcessServer(ZoneProcessServer* srv) {
	// server/zone/objects/scene/SceneObject.idl():  		server = srv;
	server = srv;
}

ZoneProcessServer* SceneObjectImplementation::getZoneProcessServer() {
	// server/zone/objects/scene/SceneObject.idl():  		return server;
	return server;
}

void SceneObjectImplementation::setDirection(float fw, float fx, float fy, float fz) {
	// server/zone/objects/scene/SceneObject.idl():  		direction.set(fw, fx, fy, fz);
	(&direction)->set(fw, fx, fy, fz);
}

void SceneObjectImplementation::setDirection(float headingAngleRadians) {
	// server/zone/objects/scene/SceneObject.idl():  		direction.setHeadingDirection(headingAngleRadians);
	(&direction)->setHeadingDirection(headingAngleRadians);
}

void SceneObjectImplementation::setMovementCounter(unsigned int count) {
	// server/zone/objects/scene/SceneObject.idl():  		movementCounter = count;
	movementCounter = count;
}

void SceneObjectImplementation::incrementMovementCounter() {
	// server/zone/objects/scene/SceneObject.idl():  		movementCounter++;
	movementCounter ++;
}

void SceneObjectImplementation::setContainmentType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		containmentType = type;
	containmentType = type;
}

void SceneObjectImplementation::setLoggingName(const String& name) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.setLoggingName(name);
	Logger::setLoggingName(name);
}

void SceneObjectImplementation::setClientObject(bool val) {
	// server/zone/objects/scene/SceneObject.idl():  		staticObject = val;
	staticObject = val;
}

bool SceneObjectImplementation::isClientObject() const{
	// server/zone/objects/scene/SceneObject.idl():  		return staticObject;
	return staticObject;
}

bool SceneObjectImplementation::isStaticObjectClass() {
	// server/zone/objects/scene/SceneObject.idl():  	 return false;
	return false;
}

StaticObject* SceneObjectImplementation::asStaticObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return null;
	return NULL;
}

bool SceneObjectImplementation::isContainerObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isTerminal() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isGroupObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isGuildObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isControlDevice() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isPetControlDevice() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isVehicleControlDevice() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isShipControlDevice() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isMissionTerminal() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isMissionObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isActorObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

int SceneObjectImplementation::getPlanetMapCategoryCRC() const{
	// server/zone/objects/scene/SceneObject.idl():  		return planetMapCategory;
	return planetMapCategory;
}

int SceneObjectImplementation::getPlanetMapSubCategoryCRC() const{
	// server/zone/objects/scene/SceneObject.idl():  		return planetMapSubCategory;
	return planetMapSubCategory;
}

void SceneObjectImplementation::setPlanetMapCategory(PlanetMapCategory* pmc) {
	// server/zone/objects/scene/SceneObject.idl():  			planetMapCategory = pmc.getCrc();
	if (pmc == NULL)	// server/zone/objects/scene/SceneObject.idl():  			planetMapCategory = 0;
	planetMapCategory = 0;

	else 	// server/zone/objects/scene/SceneObject.idl():  			planetMapCategory = pmc.getCrc();
	planetMapCategory = pmc->getCrc();
}

void SceneObjectImplementation::setPlanetMapSubCategory(PlanetMapCategory* pmc) {
	// server/zone/objects/scene/SceneObject.idl():  		planetMapSubCategory = pmc.getCrc();
	planetMapSubCategory = pmc->getCrc();
}

PlanetMapCategory* SceneObjectImplementation::getPlanetMapCategory() const{
	// server/zone/objects/scene/SceneObject.idl():  		TemplateManager templateManager = TemplateManager.instance();
	TemplateManager* templateManager = TemplateManager::instance();
	// server/zone/objects/scene/SceneObject.idl():  		return templateManager.getPlanetMapCategoryByCrc(planetMapCategory);
	return templateManager->getPlanetMapCategoryByCrc(planetMapCategory);
}

PlanetMapCategory* SceneObjectImplementation::getPlanetMapSubCategory() const{
	// server/zone/objects/scene/SceneObject.idl():  		TemplateManager templateManager = TemplateManager.instance();
	TemplateManager* templateManager = TemplateManager::instance();
	// server/zone/objects/scene/SceneObject.idl():  		return templateManager.getPlanetMapCategoryByCrc(planetMapSubCategory);
	return templateManager->getPlanetMapCategoryByCrc(planetMapSubCategory);
}

SortedVector<ManagedReference<SceneObject* > >* SceneObjectImplementation::getChildObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		return childObjects;
	return (&childObjects);
}

bool SceneObjectImplementation::containsChildObject(SceneObject* obj) const{
	// server/zone/objects/scene/SceneObject.idl():  		return childObjects.contains(obj);
	return (&childObjects)->contains(obj);
}

SharedObjectTemplate* SceneObjectImplementation::getObjectTemplate() const{
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject;
	return templateObject;
}

void SceneObjectImplementation::addChildObject(SceneObject* obj) {
	// server/zone/objects/scene/SceneObject.idl():  		childObjects.put(obj);
	(&childObjects)->put(obj);
}

Matrix4* SceneObjectImplementation::getTransformForCollisionMatrix() {
	// server/zone/objects/scene/SceneObject.idl():  		return transformForCollisionMatrix;
	return transformForCollisionMatrix;
}

bool SceneObjectImplementation::doSendToClient() {
	// server/zone/objects/scene/SceneObject.idl():  		return sendToClient;
	return sendToClient;
}

void SceneObjectImplementation::setSendToClient(bool val) {
	// server/zone/objects/scene/SceneObject.idl():  		sendToClient = val;
	sendToClient = val;
}

bool SceneObjectImplementation::isPet() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isMount() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isLairObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isPoiBuilding() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isTheaterObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isEventPerkDeed() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isEventPerkItem() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

/*
 *	SceneObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SceneObjectAdapter::SceneObjectAdapter(SceneObject* obj) : QuadTreeEntryAdapter(obj) {
}

void SceneObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_FINALIZE__:
		{
			
			finalize();
			
		}
		break;
	case RPC_INITIALIZEPRIVATEDATA__:
		{
			
			initializePrivateData();
			
		}
		break;
	case RPC_INITIALIZECONTAINEROBJECTSMAP__:
		{
			
			initializeContainerObjectsMap();
			
		}
		break;
	case RPC_ONCLONEOBJECT__SCENEOBJECT_:
		{
			SceneObject* objectToClone = static_cast<SceneObject*>(inv->getObjectParameter());
			
			onCloneObject(objectToClone);
			
		}
		break;
	case RPC_CREATECOMPONENTS__:
		{
			
			createComponents();
			
		}
		break;
	case RPC_CREATECONTAINERCOMPONENT__:
		{
			
			createContainerComponent();
			
		}
		break;
	case RPC_CREATEOBJECTMENUCOMPONENT__:
		{
			
			createObjectMenuComponent();
			
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			
			notifyLoadFromDatabase();
			
		}
		break;
	case RPC_INFO__STRING_BOOL_:
		{
			 String msg; inv->getAsciiParameter(msg);
			bool forced = inv->getBooleanParameter();
			
			info(msg, forced);
			
		}
		break;
	case RPC_ERROR__STRING_:
		{
			 String msg; inv->getAsciiParameter(msg);
			
			error(msg);
			
		}
		break;
	case RPC_DEBUG__STRING_:
		{
			 String msg; inv->getAsciiParameter(msg);
			
			debug(msg);
			
		}
		break;
	case RPC_INRANGEOBJECTS__INT_FLOAT_:
		{
			unsigned int gameObjectType = inv->getUnsignedIntParameter();
			float range = inv->getFloatParameter();
			
			int _m_res = inRangeObjects(gameObjectType, range);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISINRANGE__SCENEOBJECT_FLOAT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			float range = inv->getFloatParameter();
			
			bool _m_res = isInRange(obj, range);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINRANGEZONELESS__SCENEOBJECT_FLOAT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			float range = inv->getFloatParameter();
			
			bool _m_res = isInRangeZoneless(obj, range);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINRANGE3D__SCENEOBJECT_FLOAT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			float range = inv->getFloatParameter();
			
			bool _m_res = isInRange3d(obj, range);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_TRANSFEROBJECT__SCENEOBJECT_INT_BOOL_BOOL_BOOL_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			int containmentType = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			bool allowOverflow = inv->getBooleanParameter();
			bool notifyRoot = inv->getBooleanParameter();
			
			bool _m_res = transferObject(object, containmentType, notifyClient, allowOverflow, notifyRoot);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_REMOVEOBJECT__SCENEOBJECT_SCENEOBJECT_BOOL_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			SceneObject* destination = static_cast<SceneObject*>(inv->getObjectParameter());
			bool notifyClient = inv->getBooleanParameter();
			
			bool _m_res = removeObject(object, destination, notifyClient);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_DESTROYOBJECTFROMWORLD__BOOL_:
		{
			bool sendSelfDestroy = inv->getBooleanParameter();
			
			destroyObjectFromWorld(sendSelfDestroy);
			
		}
		break;
	case RPC_REMOVEOBJECTFROMZONE__ZONE_SCENEOBJECT_:
		{
			Zone* zone = static_cast<Zone*>(inv->getObjectParameter());
			SceneObject* par = static_cast<SceneObject*>(inv->getObjectParameter());
			
			removeObjectFromZone(zone, par);
			
		}
		break;
	case RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			int containmentType = inv->getSignedIntParameter();
			String errorDescription; inv->getAsciiParameter(errorDescription);
			
			int _m_res = canAddObject(object, containmentType, errorDescription);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_NOTIFYOBJECTINSERTEDTOCHILD__SCENEOBJECT_SCENEOBJECT_SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			SceneObject* child = static_cast<SceneObject*>(inv->getObjectParameter());
			SceneObject* oldParent = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = notifyObjectInsertedToChild(object, child, oldParent);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_NOTIFYOBJECTREMOVEDFROMCHILD__SCENEOBJECT_SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			SceneObject* child = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = notifyObjectRemovedFromChild(object, child);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCRAFTEDCOMPONENTSSATCHEL__:
		{
			
			DistributedObject* _m_res = getCraftedComponentsSatchel();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SYNCHRONIZEDUILISTEN__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int value = inv->getSignedIntParameter();
			
			synchronizedUIListen(player, value);
			
		}
		break;
	case RPC_SYNCHRONIZEDUISTOPLISTEN__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int value = inv->getSignedIntParameter();
			
			synchronizedUIStopListen(player, value);
			
		}
		break;
	case RPC_UPDATETODATABASE__:
		{
			
			updateToDatabase();
			
		}
		break;
	case RPC_UPDATETODATABASEWITHOUTCHILDREN__:
		{
			
			updateToDatabaseWithoutChildren();
			
		}
		break;
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		{
			bool startTask = inv->getBooleanParameter();
			
			updateToDatabaseAllObjects(startTask);
			
		}
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		{
			bool destroyContainedObjects = inv->getBooleanParameter();
			
			destroyObjectFromDatabase(destroyContainedObjects);
			
		}
		break;
	case RPC_CANBEDESTROYED__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			int _m_res = canBeDestroyed(player);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_LINK__LONG_INT_:
		{
			unsigned long long objectID = inv->getUnsignedLongParameter();
			unsigned int containmentType = inv->getUnsignedIntParameter();
			
			DistributedObject* _m_res = link(objectID, containmentType);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SENDTO__SCENEOBJECT_BOOL_BOOL_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			bool doClose = inv->getBooleanParameter();
			bool forceLoadContainer = inv->getBooleanParameter();
			
			sendTo(player, doClose, forceLoadContainer);
			
		}
		break;
	case RPC_SENDWITHOUTPARENTTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendWithoutParentTo(player);
			
		}
		break;
	case RPC_SENDWITHOUTCONTAINEROBJECTSTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendWithoutContainerObjectsTo(player);
			
		}
		break;
	case RPC_SENDDESTROYTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendDestroyTo(player);
			
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendBaselinesTo(player);
			
		}
		break;
	case RPC_SENDCONTAINEROBJECTSTO__SCENEOBJECT_BOOL_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			bool forceLoad = inv->getBooleanParameter();
			
			sendContainerObjectsTo(player, forceLoad);
			
		}
		break;
	case RPC_SENDSLOTTEDOBJECTSTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendSlottedObjectsTo(player);
			
		}
		break;
	case RPC_SENDTOOWNER__BOOL_:
		{
			bool doClose = inv->getBooleanParameter();
			
			sendToOwner(doClose);
			
		}
		break;
	case RPC_SENDATTRIBUTELISTTO__CREATUREOBJECT_:
		{
			CreatureObject* object = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendAttributeListTo(object);
			
		}
		break;
	case RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_:
		{
			 UnicodeString name; inv->getUnicodeParameter(name);
			bool notifyClient = inv->getBooleanParameter();
			
			setCustomObjectName(name, notifyClient);
			
		}
		break;
	case RPC_OPENCONTAINERTO__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			openContainerTo(player);
			
		}
		break;
	case RPC_CLOSECONTAINERTO__CREATUREOBJECT_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			bool notify = inv->getBooleanParameter();
			
			closeContainerTo(player, notify);
			
		}
		break;
	case RPC_NOTIFYINSERTTOZONE__ZONE_:
		{
			Zone* zone = static_cast<Zone*>(inv->getObjectParameter());
			
			notifyInsertToZone(zone);
			
		}
		break;
	case RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_BOOL_:
		{
			 String newTerrainName; inv->getAsciiParameter(newTerrainName);
			float newPostionX = inv->getFloatParameter();
			float newPositionZ = inv->getFloatParameter();
			float newPositionY = inv->getFloatParameter();
			unsigned long long parentID = inv->getUnsignedLongParameter();
			bool toggleInvisibility = inv->getBooleanParameter();
			
			switchZone(newTerrainName, newPostionX, newPositionZ, newPositionY, parentID, toggleInvisibility);
			
		}
		break;
	case RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_:
		{
			float newPositionX = inv->getFloatParameter();
			float newPositionZ = inv->getFloatParameter();
			float newPositionY = inv->getFloatParameter();
			unsigned long long parentID = inv->getUnsignedLongParameter();
			
			teleport(newPositionX, newPositionZ, newPositionY, parentID);
			
		}
		break;
	case RPC_UPDATEDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_:
		{
			float fw = inv->getFloatParameter();
			float fx = inv->getFloatParameter();
			float fy = inv->getFloatParameter();
			float fz = inv->getFloatParameter();
			
			updateDirection(fw, fx, fy, fz);
			
		}
		break;
	case RPC_UPDATEDIRECTION__FLOAT_:
		{
			float angleHeadingRadians = inv->getFloatParameter();
			
			updateDirection(angleHeadingRadians);
			
		}
		break;
	case RPC_NOTIFYREMOVEFROMZONE__:
		{
			
			notifyRemoveFromZone();
			
		}
		break;
	case RPC_UPDATEZONE__BOOL_BOOL_:
		{
			bool lightUpdate = inv->getBooleanParameter();
			bool sendPackets = inv->getBooleanParameter();
			
			updateZone(lightUpdate, sendPackets);
			
		}
		break;
	case RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_:
		{
			SceneObject* newParent = static_cast<SceneObject*>(inv->getObjectParameter());
			bool lightUpdate = inv->getBooleanParameter();
			bool sendPackets = inv->getBooleanParameter();
			
			updateZoneWithParent(newParent, lightUpdate, sendPackets);
			
		}
		break;
	case RPC_BROADCASTMESSAGE__BASEPACKET_BOOL_BOOL_:
		{
			BasePacket* message = static_cast<BasePacket*>(inv->getObjectParameter());
			bool sendSelf = inv->getBooleanParameter();
			bool lockZone = inv->getBooleanParameter();
			
			broadcastMessage(message, sendSelf, lockZone);
			
		}
		break;
	case RPC_BROADCASTMESSAGEPRIVATE__BASEPACKET_SCENEOBJECT_BOOL_:
		{
			BasePacket* message = static_cast<BasePacket*>(inv->getObjectParameter());
			SceneObject* selfObject = static_cast<SceneObject*>(inv->getObjectParameter());
			bool lockZone = inv->getBooleanParameter();
			
			broadcastMessagePrivate(message, selfObject, lockZone);
			
		}
		break;
	case RPC_BROADCASTOBJECT__SCENEOBJECT_BOOL_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			bool sendSelf = inv->getBooleanParameter();
			
			broadcastObject(object, sendSelf);
			
		}
		break;
	case RPC_BROADCASTOBJECTPRIVATE__SCENEOBJECT_SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			SceneObject* selfObject = static_cast<SceneObject*>(inv->getObjectParameter());
			
			broadcastObjectPrivate(object, selfObject);
			
		}
		break;
	case RPC_BROADCASTDESTROY__SCENEOBJECT_BOOL_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			bool sendSelf = inv->getBooleanParameter();
			
			broadcastDestroy(object, sendSelf);
			
		}
		break;
	case RPC_BROADCASTDESTROYPRIVATE__SCENEOBJECT_SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			SceneObject* selfObject = static_cast<SceneObject*>(inv->getObjectParameter());
			
			broadcastDestroyPrivate(object, selfObject);
			
		}
		break;
	case RPC_SENDMESSAGE__BASEPACKET_:
		{
			BasePacket* msg = static_cast<BasePacket*>(inv->getObjectParameter());
			
			sendMessage(msg);
			
		}
		break;
	case RPC_COMPARETO__SCENEOBJECT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = compareTo(obj);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPARENTID__:
		{
			
			unsigned long long _m_res = getParentID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_CONTAINSPENDINGTASK__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			bool _m_res = containsPendingTask(name);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SHOWFLYTEXT__STRING_STRING_BYTE_BYTE_BYTE_BOOL_:
		{
			 String file; inv->getAsciiParameter(file);
			 String aux; inv->getAsciiParameter(aux);
			byte red = inv->getByteParameter();
			byte green = inv->getByteParameter();
			byte blue = inv->getByteParameter();
			bool isPrivate = inv->getBooleanParameter();
			
			showFlyText(file, aux, red, green, blue, isPrivate);
			
		}
		break;
	case RPC_GETCONTAINEDOBJECTSRECURSIVE__:
		{
			
			int _m_res = getContainedObjectsRecursive();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCOUNTABLEOBJECTSRECURSIVE__:
		{
			
			int _m_res = getCountableObjectsRecursive();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSIZEONVENDORRECURSIVE__:
		{
			
			int _m_res = getSizeOnVendorRecursive();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETACTIVESESSION__INT_:
		{
			unsigned int type = inv->getUnsignedIntParameter();
			
			DistributedObject* _m_res = getActiveSession(type);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ADDACTIVESESSION__INT_FACADE_:
		{
			unsigned int type = inv->getUnsignedIntParameter();
			Facade* session = static_cast<Facade*>(inv->getObjectParameter());
			
			addActiveSession(type, session);
			
		}
		break;
	case RPC_CONTAINSACTIVESESSION__INT_:
		{
			unsigned const int type = inv->getUnsignedIntParameter();
			
			bool _m_res = containsActiveSession(type);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_DROPACTIVESESSION__INT_:
		{
			unsigned int type = inv->getUnsignedIntParameter();
			
			bool _m_res = dropActiveSession(type);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETACTIVESESSIONSCOUNT__:
		{
			
			int _m_res = getActiveSessionsCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDISTANCETO__SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			
			float _m_res = getDistanceTo(object);
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_UPDATEVEHICLEPOSITION__BOOL_:
		{
			bool sendPackets = inv->getBooleanParameter();
			
			updateVehiclePosition(sendPackets);
			
		}
		break;
	case RPC_PLAYEFFECT__STRING_STRING_:
		{
			 String file; inv->getAsciiParameter(file);
			 String aux; inv->getAsciiParameter(aux);
			
			playEffect(file, aux);
			
		}
		break;
	case RPC_PLAYEFFECT__STRING_:
		{
			 String file; inv->getAsciiParameter(file);
			
			playEffect(file);
			
		}
		break;
	case RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = notifyObjectInserted(object);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_NOTIFYOBJECTREMOVED__SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = notifyObjectRemoved(object);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETZONE__:
		{
			
			DistributedObject* _m_res = getZone();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETZONEUNSAFE__:
		{
			
			DistributedObject* _m_res = getZoneUnsafe();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETLOCALZONE__:
		{
			
			DistributedObject* _m_res = getLocalZone();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETWORLDPOSITIONX__:
		{
			
			float _m_res = getWorldPositionX();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETWORLDPOSITIONY__:
		{
			
			float _m_res = getWorldPositionY();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETWORLDPOSITIONZ__:
		{
			
			float _m_res = getWorldPositionZ();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETDIRECTIONX__:
		{
			
			float _m_res = getDirectionX();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETDIRECTIONZ__:
		{
			
			float _m_res = getDirectionZ();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETDIRECTIONY__:
		{
			
			float _m_res = getDirectionY();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETDIRECTIONW__:
		{
			
			float _m_res = getDirectionW();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETCLIENTOBJECTCRC__:
		{
			
			unsigned int _m_res = getClientObjectCRC();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETSERVEROBJECTCRC__:
		{
			
			unsigned int _m_res = getServerObjectCRC();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_ISWAYPOINTOBJECT__:
		{
			
			bool _m_res = isWaypointObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETOBJECTNAMESTRINGIDFILE__:
		{
			
			String _m_res = getObjectNameStringIdFile();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETOBJECTNAMESTRINGIDNAME__:
		{
			
			String _m_res = getObjectNameStringIdName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETDETAILEDDESCRIPTION__STRING_:
		{
			 String detail; inv->getAsciiParameter(detail);
			
			setDetailedDescription(detail);
			
		}
		break;
	case RPC_GETARRANGEMENTDESCRIPTORSIZE__:
		{
			
			int _m_res = getArrangementDescriptorSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSLOTDESCRIPTOR__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			String _m_res = getSlotDescriptor(idx);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_HASSLOTDESCRIPTOR__STRING_:
		{
			 String descr; inv->getAsciiParameter(descr);
			
			bool _m_res = hasSlotDescriptor(descr);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASARRANGEMENTDESCRIPTOR__STRING_:
		{
			 String descr; inv->getAsciiParameter(descr);
			
			bool _m_res = hasArrangementDescriptor(descr);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETSLOTTEDOBJECT__STRING_:
		{
			 String slot; inv->getAsciiParameter(slot);
			
			DistributedObject* _m_res = getSlottedObject(slot);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETSLOTDESCRIPTORSIZE__:
		{
			
			int _m_res = getSlotDescriptorSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSLOTTEDOBJECT__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			DistributedObject* _m_res = getSlottedObject(idx);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETCONTAINEROBJECTRECURSIVE__LONG_:
		{
			unsigned long long oid = inv->getUnsignedLongParameter();
			
			DistributedObject* _m_res = getContainerObjectRecursive(oid);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_DROPSLOTTEDOBJECT__STRING_:
		{
			 String arrengementDescriptor; inv->getAsciiParameter(arrengementDescriptor);
			
			dropSlottedObject(arrengementDescriptor);
			
		}
		break;
	case RPC_REMOVESLOTTEDOBJECT__INT_:
		{
			int index = inv->getSignedIntParameter();
			
			removeSlottedObject(index);
			
		}
		break;
	case RPC_GETCONTAINEROBJECTSSIZE__:
		{
			
			int _m_res = getContainerObjectsSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSLOTTEDOBJECTSSIZE__:
		{
			
			int _m_res = getSlottedObjectsSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISCONTAINERFULL__:
		{
			
			bool _m_res = isContainerFull();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCONTAINERFULLRECURSIVE__:
		{
			
			bool _m_res = isContainerFullRecursive();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETCONTAINERVOLUMELIMIT__:
		{
			
			unsigned int _m_res = getContainerVolumeLimit();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETCONTAINEROBJECT__INT_:
		{
			int idx = inv->getSignedIntParameter();
			
			DistributedObject* _m_res = getContainerObject(idx);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_HASOBJECTINCONTAINER__LONG_:
		{
			unsigned long long objectID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasObjectInContainer(objectID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASOBJECTINSLOTTEDCONTAINER__SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			
			bool _m_res = hasObjectInSlottedContainer(object);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETCONTAINEROBJECT__LONG_:
		{
			unsigned long long objectID = inv->getUnsignedLongParameter();
			
			DistributedObject* _m_res = getContainerObject(objectID);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_REMOVEALLCONTAINEROBJECTS__:
		{
			
			removeAllContainerObjects();
			
		}
		break;
	case RPC_PUTINCONTAINER__SCENEOBJECT_LONG_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			unsigned long long key = inv->getUnsignedLongParameter();
			
			putInContainer(obj, key);
			
		}
		break;
	case RPC_REMOVEFROMCONTAINEROBJECTS__INT_:
		{
			int index = inv->getSignedIntParameter();
			
			removeFromContainerObjects(index);
			
		}
		break;
	case RPC_GETLASTCONTAINERACCESS__:
		{
			
			long long _m_res = getLastContainerAccess();
			resp->insertSignedLong(_m_res);
		}
		break;
	case RPC_UNLOADCONTAINEROBJECTS__:
		{
			
			unloadContainerObjects();
			
		}
		break;
	case RPC_ISCONTAINERLOADED__:
		{
			
			bool _m_res = isContainerLoaded();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ONCONTAINERLOADED__:
		{
			
			onContainerLoaded();
			
		}
		break;
	case RPC_SETCONTAINERVOLUMELIMIT__INT_:
		{
			int lim = inv->getSignedIntParameter();
			
			setContainerVolumeLimit(lim);
			
		}
		break;
	case RPC_SETCONTAINERTYPE__INT_:
		{
			int type = inv->getSignedIntParameter();
			
			setContainerType(type);
			
		}
		break;
	case RPC_GETCONTAINERTYPE__:
		{
			
			unsigned int _m_res = getContainerType();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETCLIENT__:
		{
			
			DistributedObject* _m_res = getClient();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETGAMEOBJECTTYPE__:
		{
			
			unsigned int _m_res = getGameObjectType();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETCLIENTGAMEOBJECTTYPE__:
		{
			
			unsigned int _m_res = getClientGameObjectType();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETCONTAINMENTTYPE__:
		{
			
			unsigned int _m_res = getContainmentType();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETDIRECTIONANGLE__:
		{
			
			float _m_res = getDirectionAngle();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSPECIALDIRECTIONANGLE__:
		{
			
			float _m_res = getSpecialDirectionAngle();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_ROTATE__INT_:
		{
			int degrees = inv->getSignedIntParameter();
			
			rotate(degrees);
			
		}
		break;
	case RPC_FACEOBJECT__SCENEOBJECT_BOOL_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			bool notifyClient = inv->getBooleanParameter();
			
			faceObject(obj, notifyClient);
			
		}
		break;
	case RPC_ISFACINGOBJECT__SCENEOBJECT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			
			bool _m_res = isFacingObject(obj);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_NOTIFYSELFPOSITIONUPDATE__:
		{
			
			notifySelfPositionUpdate();
			
		}
		break;
	case RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_:
		{
			QuadTreeEntry* entry = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			notifyPositionUpdate(entry);
			
		}
		break;
	case RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			notifyCloseContainer(player);
			
		}
		break;
	case RPC_GETMOVEMENTCOUNTER__:
		{
			
			unsigned int _m_res = getMovementCounter();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETPARENT__:
		{
			
			DistributedObject* _m_res = getParent().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SETPARENT__QUADTREEENTRY_:
		{
			QuadTreeEntry* entry = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			setParent(entry);
			
		}
		break;
	case RPC_SETPARENT__QUADTREEENTRY_BOOL_:
		{
			QuadTreeEntry* entry = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			bool updateRecursively = inv->getBooleanParameter();
			
			setParent(entry, updateRecursively);
			
		}
		break;
	case RPC_GETZONESERVER__:
		{
			
			DistributedObject* _m_res = getZoneServer();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETROOTPARENT__:
		{
			
			DistributedObject* _m_res = getRootParent();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETROOTPARENTUNSAFE__:
		{
			
			DistributedObject* _m_res = getRootParentUnsafe();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_UPDATESAVEDROOTPARENTRECURSIVE__SCENEOBJECT_:
		{
			SceneObject* newRoot = static_cast<SceneObject*>(inv->getObjectParameter());
			
			updateSavedRootParentRecursive(newRoot);
			
		}
		break;
	case RPC_GETPARENTRECURSIVELY__INT_:
		{
			unsigned int gameObjectType = inv->getUnsignedIntParameter();
			
			DistributedObject* _m_res = getParentRecursively(gameObjectType);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ISASUBCHILDOF__SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			
			bool _m_res = isASubChildOf(object);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETCUSTOMOBJECTNAME__:
		{
			
			UnicodeString _m_res = getCustomObjectName();
			resp->insertUnicode(_m_res);
		}
		break;
	case RPC_GETLOGGINGNAME__:
		{
			
			String _m_res = getLoggingName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_ISDECORATION__:
		{
			
			bool _m_res = isDecoration();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETZONECOMPONENT__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			setZoneComponent(name);
			
		}
		break;
	case RPC_ISNOTRADE__:
		{
			
			bool _m_res = isNoTrade();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISSHUTTLEINSTALLATION__:
		{
			
			bool _m_res = isShuttleInstallation();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPLAYEROBJECT__:
		{
			
			bool _m_res = isPlayerObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISACTIVEAREA__:
		{
			
			bool _m_res = isActiveArea();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISREGION__:
		{
			
			bool _m_res = isRegion();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCREATURE__:
		{
			
			bool _m_res = isCreature();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISSHIPOBJECT__:
		{
			
			bool _m_res = isShipObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDROIDOBJECT__:
		{
			
			bool _m_res = isDroidObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCLONINGBUILDINGOBJECT__:
		{
			
			bool _m_res = isCloningBuildingObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISGARAGE__:
		{
			
			bool _m_res = isGarage();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISWEAPONOBJECT__:
		{
			
			bool _m_res = isWeaponObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISWEARABLEOBJECT__:
		{
			
			bool _m_res = isWearableObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISWEARABLECONTAINEROBJECT__:
		{
			
			bool _m_res = isWearableContainerObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISARMOROBJECT__:
		{
			
			bool _m_res = isArmorObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISROBEOBJECT__:
		{
			
			bool _m_res = isRobeObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISLIGHTSABERCRYSTALOBJECT__:
		{
			
			bool _m_res = isLightsaberCrystalObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISFIREWORKOBJECT__:
		{
			
			bool _m_res = isFireworkObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPSGARMOROBJECT__:
		{
			
			bool _m_res = isPsgArmorObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCELLOBJECT__:
		{
			
			bool _m_res = isCellObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTANGIBLEOBJECT__:
		{
			
			bool _m_res = isTangibleObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISRESOURCECONTAINER__:
		{
			
			bool _m_res = isResourceContainer();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISRESOURCESPAWN__:
		{
			
			bool _m_res = isResourceSpawn();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCOMPONENT__:
		{
			
			bool _m_res = isComponent();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINTANGIBLEOBJECT__:
		{
			
			bool _m_res = isIntangibleObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINSTRUMENT__:
		{
			
			bool _m_res = isInstrument();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISBAZAARTERMINAL__:
		{
			
			bool _m_res = isBazaarTerminal();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISLIVESAMPLE__:
		{
			
			bool _m_res = isLiveSample();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINSTALLATIONOBJECT__:
		{
			
			bool _m_res = isInstallationObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISHARVESTEROBJECT__:
		{
			
			bool _m_res = isHarvesterObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISGENERATOROBJECT__:
		{
			
			bool _m_res = isGeneratorObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCITYTERMINAL__:
		{
			
			bool _m_res = isCityTerminal();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCITYVOTETERMINAL__:
		{
			
			bool _m_res = isCityVoteTerminal();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISFACTORY__:
		{
			
			bool _m_res = isFactory();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISFACTORYCRATE__:
		{
			
			bool _m_res = isFactoryCrate();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPHARMACEUTICALOBJECT__:
		{
			
			bool _m_res = isPharmaceuticalObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISFISHINGPOLEOBJECT__:
		{
			
			bool _m_res = isFishingPoleObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDEEDOBJECT__:
		{
			
			bool _m_res = isDeedObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISVEHICLEDEEDOBJECT__:
		{
			
			bool _m_res = isVehicleDeedObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDROIDDEEDOBJECT__:
		{
			
			bool _m_res = isDroidDeedObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISBUILDINGDEED__:
		{
			
			bool _m_res = isBuildingDeed();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISSIGNOBJECT__:
		{
			
			bool _m_res = isSignObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINSTALLATIONDEED__:
		{
			
			bool _m_res = isInstallationDeed();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCRAFTINGTOOL__:
		{
			
			bool _m_res = isCraftingTool();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCRAFTINGSTATION__:
		{
			
			bool _m_res = isCraftingStation();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISMANUFACTURESCHEMATIC__:
		{
			
			bool _m_res = isManufactureSchematic();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISSTRUCTUREOBJECT__:
		{
			
			bool _m_res = isStructureObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISAUCTIONOBJECT__:
		{
			
			bool _m_res = isAuctionObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISFISHINGBAIT__:
		{
			
			bool _m_res = isFishingBait();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTRAPOBJECT__:
		{
			
			bool _m_res = isTrapObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISREPAIRTOOL__:
		{
			
			bool _m_res = isRepairTool();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCAMOKIT__:
		{
			
			bool _m_res = isCamoKit();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISATTACHMENT__:
		{
			
			bool _m_res = isAttachment();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDICEOBJECT__:
		{
			
			bool _m_res = isDiceObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCREATUREHABITAT__:
		{
			
			bool _m_res = isCreatureHabitat();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCAMPKIT__:
		{
			
			bool _m_res = isCampKit();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCAMPSTRUCTURE__:
		{
			
			bool _m_res = isCampStructure();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISRECYCLETOOLOBJECT__:
		{
			
			bool _m_res = isRecycleToolObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISANTIDECAYKITOBJECT__:
		{
			
			bool _m_res = isAntiDecayKitObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETCONTAINERDEFAULTALLOWPERMISSION__SHORT_:
		{
			unsigned short perm = inv->getUnsignedShortParameter();
			
			setContainerDefaultAllowPermission(perm);
			
		}
		break;
	case RPC_CLEARCONTAINERDEFAULTALLOWPERMISSION__SHORT_:
		{
			unsigned short perm = inv->getUnsignedShortParameter();
			
			clearContainerDefaultAllowPermission(perm);
			
		}
		break;
	case RPC_SETCONTAINERDEFAULTDENYPERMISSION__SHORT_:
		{
			unsigned short perm = inv->getUnsignedShortParameter();
			
			setContainerDefaultDenyPermission(perm);
			
		}
		break;
	case RPC_CLEARCONTAINERDEFAULTDENYPERMISSION__SHORT_:
		{
			unsigned short perm = inv->getUnsignedShortParameter();
			
			clearContainerDefaultDenyPermission(perm);
			
		}
		break;
	case RPC_SETCONTAINERINHERITPERMISSIONSFROMPARENT__BOOL_:
		{
			bool val = inv->getBooleanParameter();
			
			setContainerInheritPermissionsFromParent(val);
			
		}
		break;
	case RPC_SETCONTAINEROWNERID__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			setContainerOwnerID(id);
			
		}
		break;
	case RPC_SETCONTAINERALLOWPERMISSION__STRING_SHORT_:
		{
			 String group; inv->getAsciiParameter(group);
			unsigned short perm = inv->getUnsignedShortParameter();
			
			setContainerAllowPermission(group, perm);
			
		}
		break;
	case RPC_SETCONTAINERDENYPERMISSION__STRING_SHORT_:
		{
			 String group; inv->getAsciiParameter(group);
			unsigned short perm = inv->getUnsignedShortParameter();
			
			setContainerDenyPermission(group, perm);
			
		}
		break;
	case RPC_SETGAMEOBJECTTYPE__INT_:
		{
			unsigned int type = inv->getUnsignedIntParameter();
			
			setGameObjectType(type);
			
		}
		break;
	case RPC_SETCLIENTOBJECTCRC__INT_:
		{
			unsigned int objCRC = inv->getUnsignedIntParameter();
			
			setClientObjectCRC(objCRC);
			
		}
		break;
	case RPC_SETSERVEROBJECTCRC__INT_:
		{
			unsigned int objCRC = inv->getUnsignedIntParameter();
			
			setServerObjectCRC(objCRC);
			
		}
		break;
	case RPC_SETZONE__ZONE_:
		{
			Zone* zone = static_cast<Zone*>(inv->getObjectParameter());
			
			setZone(zone);
			
		}
		break;
	case RPC_SETDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_:
		{
			float fw = inv->getFloatParameter();
			float fx = inv->getFloatParameter();
			float fy = inv->getFloatParameter();
			float fz = inv->getFloatParameter();
			
			setDirection(fw, fx, fy, fz);
			
		}
		break;
	case RPC_SETDIRECTION__FLOAT_:
		{
			float headingAngleRadians = inv->getFloatParameter();
			
			setDirection(headingAngleRadians);
			
		}
		break;
	case RPC_SETMOVEMENTCOUNTER__INT_:
		{
			unsigned int count = inv->getUnsignedIntParameter();
			
			setMovementCounter(count);
			
		}
		break;
	case RPC_INCREMENTMOVEMENTCOUNTER__:
		{
			
			incrementMovementCounter();
			
		}
		break;
	case RPC_SETCONTAINMENTTYPE__INT_:
		{
			unsigned int type = inv->getUnsignedIntParameter();
			
			setContainmentType(type);
			
		}
		break;
	case RPC_SETLOGGINGNAME__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			setLoggingName(name);
			
		}
		break;
	case RPC_SETCLIENTOBJECT__BOOL_:
		{
			bool val = inv->getBooleanParameter();
			
			setClientObject(val);
			
		}
		break;
	case RPC_GETPLANETCRC__:
		{
			
			unsigned int _m_res = getPlanetCRC();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_ISCLIENTOBJECT__:
		{
			
			bool _m_res = isClientObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISSTATICOBJECTCLASS__:
		{
			
			bool _m_res = isStaticObjectClass();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCONTAINEROBJECT__:
		{
			
			bool _m_res = isContainerObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTERMINAL__:
		{
			
			bool _m_res = isTerminal();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISGROUPOBJECT__:
		{
			
			bool _m_res = isGroupObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISGUILDOBJECT__:
		{
			
			bool _m_res = isGuildObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCONTROLDEVICE__:
		{
			
			bool _m_res = isControlDevice();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPETCONTROLDEVICE__:
		{
			
			bool _m_res = isPetControlDevice();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISVEHICLECONTROLDEVICE__:
		{
			
			bool _m_res = isVehicleControlDevice();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISSHIPCONTROLDEVICE__:
		{
			
			bool _m_res = isShipControlDevice();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISMISSIONTERMINAL__:
		{
			
			bool _m_res = isMissionTerminal();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISMISSIONOBJECT__:
		{
			
			bool _m_res = isMissionObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISACTOROBJECT__:
		{
			
			bool _m_res = isActorObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETPLANETMAPCATEGORYCRC__:
		{
			
			int _m_res = getPlanetMapCategoryCRC();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPLANETMAPSUBCATEGORYCRC__:
		{
			
			int _m_res = getPlanetMapSubCategoryCRC();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CONTAINSCHILDOBJECT__SCENEOBJECT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			
			bool _m_res = containsChildObject(obj);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CREATECHILDOBJECTS__:
		{
			
			createChildObjects();
			
		}
		break;
	case RPC_DESTROYCHILDOBJECTS__:
		{
			
			destroyChildObjects();
			
		}
		break;
	case RPC_ADDCHILDOBJECT__SCENEOBJECT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			
			addChildObject(obj);
			
		}
		break;
	case RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_:
		{
			SceneObject* controllerObject = static_cast<SceneObject*>(inv->getObjectParameter());
			
			initializeChildObject(controllerObject);
			
		}
		break;
	case RPC_ISINWATER__:
		{
			
			bool _m_res = isInWater();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CONTAINSNOTRADEOBJECTRECURSIVE__:
		{
			
			bool _m_res = containsNoTradeObjectRecursive();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETDISPLAYEDNAME__:
		{
			
			String _m_res = getDisplayedName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_DOSENDTOCLIENT__:
		{
			
			bool _m_res = doSendToClient();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETSENDTOCLIENT__BOOL_:
		{
			bool val = inv->getBooleanParameter();
			
			setSendToClient(val);
			
		}
		break;
	case RPC_ISPET__:
		{
			
			bool _m_res = isPet();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISMOUNT__:
		{
			
			bool _m_res = isMount();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISLAIROBJECT__:
		{
			
			bool _m_res = isLairObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPOIBUILDING__:
		{
			
			bool _m_res = isPoiBuilding();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTHEATEROBJECT__:
		{
			
			bool _m_res = isTheaterObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISEVENTPERKDEED__:
		{
			
			bool _m_res = isEventPerkDeed();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISEVENTPERKITEM__:
		{
			
			bool _m_res = isEventPerkItem();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDATAPAD__:
		{
			
			bool _m_res = isDataPad();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETTEMPLATERADIUS__:
		{
			
			float _m_res = getTemplateRadius();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_ISINNAVMESH__:
		{
			
			bool _m_res = isInNavMesh();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		QuadTreeEntryAdapter::invokeMethod(methid, inv);
	}
}

void SceneObjectAdapter::finalize() {
	(static_cast<SceneObject*>(stub))->finalize();
}

void SceneObjectAdapter::initializePrivateData() {
	(static_cast<SceneObject*>(stub))->initializePrivateData();
}

void SceneObjectAdapter::initializeContainerObjectsMap() {
	(static_cast<SceneObject*>(stub))->initializeContainerObjectsMap();
}

void SceneObjectAdapter::onCloneObject(SceneObject* objectToClone) {
	(static_cast<SceneObject*>(stub))->onCloneObject(objectToClone);
}

void SceneObjectAdapter::createComponents() {
	(static_cast<SceneObject*>(stub))->createComponents();
}

void SceneObjectAdapter::createContainerComponent() {
	(static_cast<SceneObject*>(stub))->createContainerComponent();
}

void SceneObjectAdapter::createObjectMenuComponent() {
	(static_cast<SceneObject*>(stub))->createObjectMenuComponent();
}

void SceneObjectAdapter::initializeTransientMembers() {
	(static_cast<SceneObject*>(stub))->initializeTransientMembers();
}

void SceneObjectAdapter::notifyLoadFromDatabase() {
	(static_cast<SceneObject*>(stub))->notifyLoadFromDatabase();
}

void SceneObjectAdapter::info(const String& msg, bool forced) {
	(static_cast<SceneObject*>(stub))->info(msg, forced);
}

void SceneObjectAdapter::error(const String& msg) {
	(static_cast<SceneObject*>(stub))->error(msg);
}

void SceneObjectAdapter::debug(const String& msg) {
	(static_cast<SceneObject*>(stub))->debug(msg);
}

int SceneObjectAdapter::inRangeObjects(unsigned int gameObjectType, float range) {
	return (static_cast<SceneObject*>(stub))->inRangeObjects(gameObjectType, range);
}

bool SceneObjectAdapter::isInRange(SceneObject* obj, float range) {
	return (static_cast<SceneObject*>(stub))->isInRange(obj, range);
}

bool SceneObjectAdapter::isInRangeZoneless(SceneObject* obj, float range) {
	return (static_cast<SceneObject*>(stub))->isInRangeZoneless(obj, range);
}

bool SceneObjectAdapter::isInRange3d(SceneObject* obj, float range) {
	return (static_cast<SceneObject*>(stub))->isInRange3d(obj, range);
}

bool SceneObjectAdapter::transferObject(SceneObject* object, int containmentType, bool notifyClient, bool allowOverflow, bool notifyRoot) {
	return (static_cast<SceneObject*>(stub))->transferObject(object, containmentType, notifyClient, allowOverflow, notifyRoot);
}

bool SceneObjectAdapter::removeObject(SceneObject* object, SceneObject* destination, bool notifyClient) {
	return (static_cast<SceneObject*>(stub))->removeObject(object, destination, notifyClient);
}

void SceneObjectAdapter::destroyObjectFromWorld(bool sendSelfDestroy) {
	(static_cast<SceneObject*>(stub))->destroyObjectFromWorld(sendSelfDestroy);
}

void SceneObjectAdapter::removeObjectFromZone(Zone* zone, SceneObject* par) {
	(static_cast<SceneObject*>(stub))->removeObjectFromZone(zone, par);
}

int SceneObjectAdapter::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	return (static_cast<SceneObject*>(stub))->canAddObject(object, containmentType, errorDescription);
}

int SceneObjectAdapter::notifyObjectInsertedToChild(SceneObject* object, SceneObject* child, SceneObject* oldParent) {
	return (static_cast<SceneObject*>(stub))->notifyObjectInsertedToChild(object, child, oldParent);
}

int SceneObjectAdapter::notifyObjectRemovedFromChild(SceneObject* object, SceneObject* child) {
	return (static_cast<SceneObject*>(stub))->notifyObjectRemovedFromChild(object, child);
}

Reference<SceneObject* > SceneObjectAdapter::getCraftedComponentsSatchel() {
	return (static_cast<SceneObject*>(stub))->getCraftedComponentsSatchel();
}

void SceneObjectAdapter::synchronizedUIListen(CreatureObject* player, int value) {
	(static_cast<SceneObject*>(stub))->synchronizedUIListen(player, value);
}

void SceneObjectAdapter::synchronizedUIStopListen(CreatureObject* player, int value) {
	(static_cast<SceneObject*>(stub))->synchronizedUIStopListen(player, value);
}

void SceneObjectAdapter::updateToDatabase() {
	(static_cast<SceneObject*>(stub))->updateToDatabase();
}

void SceneObjectAdapter::updateToDatabaseWithoutChildren() {
	(static_cast<SceneObject*>(stub))->updateToDatabaseWithoutChildren();
}

void SceneObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	(static_cast<SceneObject*>(stub))->updateToDatabaseAllObjects(startTask);
}

void SceneObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<SceneObject*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

int SceneObjectAdapter::canBeDestroyed(CreatureObject* player) {
	return (static_cast<SceneObject*>(stub))->canBeDestroyed(player);
}

BaseMessage* SceneObjectAdapter::link(unsigned long long objectID, unsigned int containmentType) {
	return (static_cast<SceneObject*>(stub))->link(objectID, containmentType);
}

void SceneObjectAdapter::sendTo(SceneObject* player, bool doClose, bool forceLoadContainer) {
	(static_cast<SceneObject*>(stub))->sendTo(player, doClose, forceLoadContainer);
}

void SceneObjectAdapter::sendWithoutParentTo(SceneObject* player) {
	(static_cast<SceneObject*>(stub))->sendWithoutParentTo(player);
}

void SceneObjectAdapter::sendWithoutContainerObjectsTo(SceneObject* player) {
	(static_cast<SceneObject*>(stub))->sendWithoutContainerObjectsTo(player);
}

void SceneObjectAdapter::sendDestroyTo(SceneObject* player) {
	(static_cast<SceneObject*>(stub))->sendDestroyTo(player);
}

void SceneObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<SceneObject*>(stub))->sendBaselinesTo(player);
}

void SceneObjectAdapter::sendContainerObjectsTo(SceneObject* player, bool forceLoad) {
	(static_cast<SceneObject*>(stub))->sendContainerObjectsTo(player, forceLoad);
}

void SceneObjectAdapter::sendSlottedObjectsTo(SceneObject* player) {
	(static_cast<SceneObject*>(stub))->sendSlottedObjectsTo(player);
}

void SceneObjectAdapter::sendToOwner(bool doClose) {
	(static_cast<SceneObject*>(stub))->sendToOwner(doClose);
}

void SceneObjectAdapter::sendAttributeListTo(CreatureObject* object) {
	(static_cast<SceneObject*>(stub))->sendAttributeListTo(object);
}

void SceneObjectAdapter::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	(static_cast<SceneObject*>(stub))->setCustomObjectName(name, notifyClient);
}

void SceneObjectAdapter::openContainerTo(CreatureObject* player) {
	(static_cast<SceneObject*>(stub))->openContainerTo(player);
}

void SceneObjectAdapter::closeContainerTo(CreatureObject* player, bool notify) {
	(static_cast<SceneObject*>(stub))->closeContainerTo(player, notify);
}

void SceneObjectAdapter::notifyInsertToZone(Zone* zone) {
	(static_cast<SceneObject*>(stub))->notifyInsertToZone(zone);
}

void SceneObjectAdapter::switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID, bool toggleInvisibility) {
	(static_cast<SceneObject*>(stub))->switchZone(newTerrainName, newPostionX, newPositionZ, newPositionY, parentID, toggleInvisibility);
}

void SceneObjectAdapter::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	(static_cast<SceneObject*>(stub))->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void SceneObjectAdapter::updateDirection(float fw, float fx, float fy, float fz) {
	(static_cast<SceneObject*>(stub))->updateDirection(fw, fx, fy, fz);
}

void SceneObjectAdapter::updateDirection(float angleHeadingRadians) {
	(static_cast<SceneObject*>(stub))->updateDirection(angleHeadingRadians);
}

void SceneObjectAdapter::notifyRemoveFromZone() {
	(static_cast<SceneObject*>(stub))->notifyRemoveFromZone();
}

void SceneObjectAdapter::updateZone(bool lightUpdate, bool sendPackets) {
	(static_cast<SceneObject*>(stub))->updateZone(lightUpdate, sendPackets);
}

void SceneObjectAdapter::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	(static_cast<SceneObject*>(stub))->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

void SceneObjectAdapter::broadcastMessage(BasePacket* message, bool sendSelf, bool lockZone) {
	(static_cast<SceneObject*>(stub))->broadcastMessage(message, sendSelf, lockZone);
}

void SceneObjectAdapter::broadcastMessagePrivate(BasePacket* message, SceneObject* selfObject, bool lockZone) {
	(static_cast<SceneObject*>(stub))->broadcastMessagePrivate(message, selfObject, lockZone);
}

void SceneObjectAdapter::broadcastObject(SceneObject* object, bool sendSelf) {
	(static_cast<SceneObject*>(stub))->broadcastObject(object, sendSelf);
}

void SceneObjectAdapter::broadcastObjectPrivate(SceneObject* object, SceneObject* selfObject) {
	(static_cast<SceneObject*>(stub))->broadcastObjectPrivate(object, selfObject);
}

void SceneObjectAdapter::broadcastDestroy(SceneObject* object, bool sendSelf) {
	(static_cast<SceneObject*>(stub))->broadcastDestroy(object, sendSelf);
}

void SceneObjectAdapter::broadcastDestroyPrivate(SceneObject* object, SceneObject* selfObject) {
	(static_cast<SceneObject*>(stub))->broadcastDestroyPrivate(object, selfObject);
}

void SceneObjectAdapter::sendMessage(BasePacket* msg) {
	(static_cast<SceneObject*>(stub))->sendMessage(msg);
}

int SceneObjectAdapter::compareTo(SceneObject* obj) {
	return (static_cast<SceneObject*>(stub))->compareTo(obj);
}

unsigned long long SceneObjectAdapter::getParentID() {
	return (static_cast<SceneObject*>(stub))->getParentID();
}

bool SceneObjectAdapter::containsPendingTask(const String& name) {
	return (static_cast<SceneObject*>(stub))->containsPendingTask(name);
}

void SceneObjectAdapter::showFlyText(const String& file, const String& aux, byte red, byte green, byte blue, bool isPrivate) {
	(static_cast<SceneObject*>(stub))->showFlyText(file, aux, red, green, blue, isPrivate);
}

int SceneObjectAdapter::getContainedObjectsRecursive() {
	return (static_cast<SceneObject*>(stub))->getContainedObjectsRecursive();
}

int SceneObjectAdapter::getCountableObjectsRecursive() {
	return (static_cast<SceneObject*>(stub))->getCountableObjectsRecursive();
}

int SceneObjectAdapter::getSizeOnVendorRecursive() {
	return (static_cast<SceneObject*>(stub))->getSizeOnVendorRecursive();
}

Reference<Facade* > SceneObjectAdapter::getActiveSession(unsigned int type) {
	return (static_cast<SceneObject*>(stub))->getActiveSession(type);
}

void SceneObjectAdapter::addActiveSession(unsigned int type, Facade* session) {
	(static_cast<SceneObject*>(stub))->addActiveSession(type, session);
}

bool SceneObjectAdapter::containsActiveSession(unsigned const int type) const {
	return (static_cast<SceneObject*>(stub))->containsActiveSession(type);
}

bool SceneObjectAdapter::dropActiveSession(unsigned int type) {
	return (static_cast<SceneObject*>(stub))->dropActiveSession(type);
}

int SceneObjectAdapter::getActiveSessionsCount() const {
	return (static_cast<SceneObject*>(stub))->getActiveSessionsCount();
}

int SceneObjectAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<SceneObject*>(stub))->handleObjectMenuSelect(player, selectedID);
}

float SceneObjectAdapter::getDistanceTo(SceneObject* object) {
	return (static_cast<SceneObject*>(stub))->getDistanceTo(object);
}

void SceneObjectAdapter::updateVehiclePosition(bool sendPackets) {
	(static_cast<SceneObject*>(stub))->updateVehiclePosition(sendPackets);
}

void SceneObjectAdapter::playEffect(const String& file, const String& aux) {
	(static_cast<SceneObject*>(stub))->playEffect(file, aux);
}

void SceneObjectAdapter::playEffect(const String& file) {
	(static_cast<SceneObject*>(stub))->playEffect(file);
}

int SceneObjectAdapter::notifyObjectInserted(SceneObject* object) {
	return (static_cast<SceneObject*>(stub))->notifyObjectInserted(object);
}

int SceneObjectAdapter::notifyObjectRemoved(SceneObject* object) {
	return (static_cast<SceneObject*>(stub))->notifyObjectRemoved(object);
}

Zone* SceneObjectAdapter::getZone() {
	return (static_cast<SceneObject*>(stub))->getZone();
}

Zone* SceneObjectAdapter::getZoneUnsafe() {
	return (static_cast<SceneObject*>(stub))->getZoneUnsafe();
}

Zone* SceneObjectAdapter::getLocalZone() const {
	return (static_cast<SceneObject*>(stub))->getLocalZone();
}

float SceneObjectAdapter::getWorldPositionX() {
	return (static_cast<SceneObject*>(stub))->getWorldPositionX();
}

float SceneObjectAdapter::getWorldPositionY() {
	return (static_cast<SceneObject*>(stub))->getWorldPositionY();
}

float SceneObjectAdapter::getWorldPositionZ() {
	return (static_cast<SceneObject*>(stub))->getWorldPositionZ();
}

float SceneObjectAdapter::getDirectionX() const {
	return (static_cast<SceneObject*>(stub))->getDirectionX();
}

float SceneObjectAdapter::getDirectionZ() const {
	return (static_cast<SceneObject*>(stub))->getDirectionZ();
}

float SceneObjectAdapter::getDirectionY() const {
	return (static_cast<SceneObject*>(stub))->getDirectionY();
}

float SceneObjectAdapter::getDirectionW() const {
	return (static_cast<SceneObject*>(stub))->getDirectionW();
}

unsigned int SceneObjectAdapter::getClientObjectCRC() const {
	return (static_cast<SceneObject*>(stub))->getClientObjectCRC();
}

unsigned int SceneObjectAdapter::getServerObjectCRC() const {
	return (static_cast<SceneObject*>(stub))->getServerObjectCRC();
}

bool SceneObjectAdapter::isWaypointObject() const {
	return (static_cast<SceneObject*>(stub))->isWaypointObject();
}

String SceneObjectAdapter::getObjectNameStringIdFile() const {
	return (static_cast<SceneObject*>(stub))->getObjectNameStringIdFile();
}

String SceneObjectAdapter::getObjectNameStringIdName() const {
	return (static_cast<SceneObject*>(stub))->getObjectNameStringIdName();
}

void SceneObjectAdapter::setDetailedDescription(const String& detail) {
	(static_cast<SceneObject*>(stub))->setDetailedDescription(detail);
}

int SceneObjectAdapter::getArrangementDescriptorSize() {
	return (static_cast<SceneObject*>(stub))->getArrangementDescriptorSize();
}

String SceneObjectAdapter::getSlotDescriptor(int idx) {
	return (static_cast<SceneObject*>(stub))->getSlotDescriptor(idx);
}

bool SceneObjectAdapter::hasSlotDescriptor(const String& descr) {
	return (static_cast<SceneObject*>(stub))->hasSlotDescriptor(descr);
}

bool SceneObjectAdapter::hasArrangementDescriptor(const String& descr) const {
	return (static_cast<SceneObject*>(stub))->hasArrangementDescriptor(descr);
}

Reference<SceneObject* > SceneObjectAdapter::getSlottedObject(const String& slot) {
	return (static_cast<SceneObject*>(stub))->getSlottedObject(slot);
}

int SceneObjectAdapter::getSlotDescriptorSize() {
	return (static_cast<SceneObject*>(stub))->getSlotDescriptorSize();
}

Reference<SceneObject* > SceneObjectAdapter::getSlottedObject(int idx) {
	return (static_cast<SceneObject*>(stub))->getSlottedObject(idx);
}

Reference<SceneObject* > SceneObjectAdapter::getContainerObjectRecursive(unsigned long long oid) {
	return (static_cast<SceneObject*>(stub))->getContainerObjectRecursive(oid);
}

void SceneObjectAdapter::dropSlottedObject(const String& arrengementDescriptor) {
	(static_cast<SceneObject*>(stub))->dropSlottedObject(arrengementDescriptor);
}

void SceneObjectAdapter::removeSlottedObject(int index) {
	(static_cast<SceneObject*>(stub))->removeSlottedObject(index);
}

int SceneObjectAdapter::getContainerObjectsSize() {
	return (static_cast<SceneObject*>(stub))->getContainerObjectsSize();
}

int SceneObjectAdapter::getSlottedObjectsSize() const {
	return (static_cast<SceneObject*>(stub))->getSlottedObjectsSize();
}

bool SceneObjectAdapter::isContainerFull() {
	return (static_cast<SceneObject*>(stub))->isContainerFull();
}

bool SceneObjectAdapter::isContainerFullRecursive() {
	return (static_cast<SceneObject*>(stub))->isContainerFullRecursive();
}

unsigned int SceneObjectAdapter::getContainerVolumeLimit() const {
	return (static_cast<SceneObject*>(stub))->getContainerVolumeLimit();
}

Reference<SceneObject* > SceneObjectAdapter::getContainerObject(int idx) {
	return (static_cast<SceneObject*>(stub))->getContainerObject(idx);
}

bool SceneObjectAdapter::hasObjectInContainer(unsigned long long objectID) {
	return (static_cast<SceneObject*>(stub))->hasObjectInContainer(objectID);
}

bool SceneObjectAdapter::hasObjectInSlottedContainer(SceneObject* object) {
	return (static_cast<SceneObject*>(stub))->hasObjectInSlottedContainer(object);
}

Reference<SceneObject* > SceneObjectAdapter::getContainerObject(unsigned long long objectID) {
	return (static_cast<SceneObject*>(stub))->getContainerObject(objectID);
}

void SceneObjectAdapter::removeAllContainerObjects() {
	(static_cast<SceneObject*>(stub))->removeAllContainerObjects();
}

void SceneObjectAdapter::putInContainer(SceneObject* obj, unsigned long long key) {
	(static_cast<SceneObject*>(stub))->putInContainer(obj, key);
}

void SceneObjectAdapter::removeFromContainerObjects(int index) {
	(static_cast<SceneObject*>(stub))->removeFromContainerObjects(index);
}

long long SceneObjectAdapter::getLastContainerAccess() {
	return (static_cast<SceneObject*>(stub))->getLastContainerAccess();
}

void SceneObjectAdapter::unloadContainerObjects() {
	(static_cast<SceneObject*>(stub))->unloadContainerObjects();
}

bool SceneObjectAdapter::isContainerLoaded() {
	return (static_cast<SceneObject*>(stub))->isContainerLoaded();
}

void SceneObjectAdapter::onContainerLoaded() {
	(static_cast<SceneObject*>(stub))->onContainerLoaded();
}

void SceneObjectAdapter::setContainerVolumeLimit(int lim) {
	(static_cast<SceneObject*>(stub))->setContainerVolumeLimit(lim);
}

void SceneObjectAdapter::setContainerType(int type) {
	(static_cast<SceneObject*>(stub))->setContainerType(type);
}

unsigned int SceneObjectAdapter::getContainerType() const {
	return (static_cast<SceneObject*>(stub))->getContainerType();
}

Reference<ZoneClientSession* > SceneObjectAdapter::getClient() {
	return (static_cast<SceneObject*>(stub))->getClient();
}

unsigned int SceneObjectAdapter::getGameObjectType() const {
	return (static_cast<SceneObject*>(stub))->getGameObjectType();
}

unsigned int SceneObjectAdapter::getClientGameObjectType() const {
	return (static_cast<SceneObject*>(stub))->getClientGameObjectType();
}

unsigned int SceneObjectAdapter::getContainmentType() const {
	return (static_cast<SceneObject*>(stub))->getContainmentType();
}

float SceneObjectAdapter::getDirectionAngle() const {
	return (static_cast<SceneObject*>(stub))->getDirectionAngle();
}

float SceneObjectAdapter::getSpecialDirectionAngle() const {
	return (static_cast<SceneObject*>(stub))->getSpecialDirectionAngle();
}

void SceneObjectAdapter::rotate(int degrees) {
	(static_cast<SceneObject*>(stub))->rotate(degrees);
}

void SceneObjectAdapter::faceObject(SceneObject* obj, bool notifyClient) {
	(static_cast<SceneObject*>(stub))->faceObject(obj, notifyClient);
}

bool SceneObjectAdapter::isFacingObject(SceneObject* obj) {
	return (static_cast<SceneObject*>(stub))->isFacingObject(obj);
}

void SceneObjectAdapter::notifySelfPositionUpdate() {
	(static_cast<SceneObject*>(stub))->notifySelfPositionUpdate();
}

void SceneObjectAdapter::notifyPositionUpdate(QuadTreeEntry* entry) {
	(static_cast<SceneObject*>(stub))->notifyPositionUpdate(entry);
}

void SceneObjectAdapter::notifyCloseContainer(CreatureObject* player) {
	(static_cast<SceneObject*>(stub))->notifyCloseContainer(player);
}

unsigned int SceneObjectAdapter::getMovementCounter() const {
	return (static_cast<SceneObject*>(stub))->getMovementCounter();
}

ManagedWeakReference<SceneObject* > SceneObjectAdapter::getParent() {
	return (static_cast<SceneObject*>(stub))->getParent();
}

void SceneObjectAdapter::setParent(QuadTreeEntry* entry) {
	(static_cast<SceneObject*>(stub))->setParent(entry);
}

void SceneObjectAdapter::setParent(QuadTreeEntry* entry, bool updateRecursively) {
	(static_cast<SceneObject*>(stub))->setParent(entry, updateRecursively);
}

ZoneServer* SceneObjectAdapter::getZoneServer() const {
	return (static_cast<SceneObject*>(stub))->getZoneServer();
}

SceneObject* SceneObjectAdapter::getRootParent() {
	return (static_cast<SceneObject*>(stub))->getRootParent();
}

SceneObject* SceneObjectAdapter::getRootParentUnsafe() {
	return (static_cast<SceneObject*>(stub))->getRootParentUnsafe();
}

void SceneObjectAdapter::updateSavedRootParentRecursive(SceneObject* newRoot) {
	(static_cast<SceneObject*>(stub))->updateSavedRootParentRecursive(newRoot);
}

Reference<SceneObject* > SceneObjectAdapter::getParentRecursively(unsigned int gameObjectType) {
	return (static_cast<SceneObject*>(stub))->getParentRecursively(gameObjectType);
}

bool SceneObjectAdapter::isASubChildOf(SceneObject* object) {
	return (static_cast<SceneObject*>(stub))->isASubChildOf(object);
}

UnicodeString SceneObjectAdapter::getCustomObjectName() const {
	return (static_cast<SceneObject*>(stub))->getCustomObjectName();
}

String SceneObjectAdapter::getLoggingName() const {
	return (static_cast<SceneObject*>(stub))->getLoggingName();
}

bool SceneObjectAdapter::isDecoration() {
	return (static_cast<SceneObject*>(stub))->isDecoration();
}

void SceneObjectAdapter::setZoneComponent(const String& name) {
	(static_cast<SceneObject*>(stub))->setZoneComponent(name);
}

bool SceneObjectAdapter::isNoTrade() {
	return (static_cast<SceneObject*>(stub))->isNoTrade();
}

bool SceneObjectAdapter::isShuttleInstallation() const {
	return (static_cast<SceneObject*>(stub))->isShuttleInstallation();
}

bool SceneObjectAdapter::isPlayerObject() const {
	return (static_cast<SceneObject*>(stub))->isPlayerObject();
}

bool SceneObjectAdapter::isActiveArea() {
	return (static_cast<SceneObject*>(stub))->isActiveArea();
}

bool SceneObjectAdapter::isRegion() {
	return (static_cast<SceneObject*>(stub))->isRegion();
}

bool SceneObjectAdapter::isCreature() {
	return (static_cast<SceneObject*>(stub))->isCreature();
}

bool SceneObjectAdapter::isShipObject() {
	return (static_cast<SceneObject*>(stub))->isShipObject();
}

bool SceneObjectAdapter::isDroidObject() {
	return (static_cast<SceneObject*>(stub))->isDroidObject();
}

bool SceneObjectAdapter::isCloningBuildingObject() {
	return (static_cast<SceneObject*>(stub))->isCloningBuildingObject();
}

bool SceneObjectAdapter::isGarage() const {
	return (static_cast<SceneObject*>(stub))->isGarage();
}

bool SceneObjectAdapter::isWeaponObject() {
	return (static_cast<SceneObject*>(stub))->isWeaponObject();
}

bool SceneObjectAdapter::isWearableObject() {
	return (static_cast<SceneObject*>(stub))->isWearableObject();
}

bool SceneObjectAdapter::isWearableContainerObject() {
	return (static_cast<SceneObject*>(stub))->isWearableContainerObject();
}

bool SceneObjectAdapter::isArmorObject() {
	return (static_cast<SceneObject*>(stub))->isArmorObject();
}

bool SceneObjectAdapter::isRobeObject() {
	return (static_cast<SceneObject*>(stub))->isRobeObject();
}

bool SceneObjectAdapter::isLightsaberCrystalObject() {
	return (static_cast<SceneObject*>(stub))->isLightsaberCrystalObject();
}

bool SceneObjectAdapter::isFireworkObject() {
	return (static_cast<SceneObject*>(stub))->isFireworkObject();
}

bool SceneObjectAdapter::isPsgArmorObject() {
	return (static_cast<SceneObject*>(stub))->isPsgArmorObject();
}

bool SceneObjectAdapter::isCellObject() {
	return (static_cast<SceneObject*>(stub))->isCellObject();
}

bool SceneObjectAdapter::isTangibleObject() {
	return (static_cast<SceneObject*>(stub))->isTangibleObject();
}

bool SceneObjectAdapter::isResourceContainer() {
	return (static_cast<SceneObject*>(stub))->isResourceContainer();
}

bool SceneObjectAdapter::isResourceSpawn() {
	return (static_cast<SceneObject*>(stub))->isResourceSpawn();
}

bool SceneObjectAdapter::isComponent() {
	return (static_cast<SceneObject*>(stub))->isComponent();
}

bool SceneObjectAdapter::isIntangibleObject() {
	return (static_cast<SceneObject*>(stub))->isIntangibleObject();
}

bool SceneObjectAdapter::isInstrument() const {
	return (static_cast<SceneObject*>(stub))->isInstrument();
}

bool SceneObjectAdapter::isBazaarTerminal() const {
	return (static_cast<SceneObject*>(stub))->isBazaarTerminal();
}

bool SceneObjectAdapter::isLiveSample() const {
	return (static_cast<SceneObject*>(stub))->isLiveSample();
}

bool SceneObjectAdapter::isInstallationObject() {
	return (static_cast<SceneObject*>(stub))->isInstallationObject();
}

bool SceneObjectAdapter::isHarvesterObject() {
	return (static_cast<SceneObject*>(stub))->isHarvesterObject();
}

bool SceneObjectAdapter::isGeneratorObject() {
	return (static_cast<SceneObject*>(stub))->isGeneratorObject();
}

bool SceneObjectAdapter::isCityTerminal() {
	return (static_cast<SceneObject*>(stub))->isCityTerminal();
}

bool SceneObjectAdapter::isCityVoteTerminal() {
	return (static_cast<SceneObject*>(stub))->isCityVoteTerminal();
}

bool SceneObjectAdapter::isFactory() {
	return (static_cast<SceneObject*>(stub))->isFactory();
}

bool SceneObjectAdapter::isFactoryCrate() {
	return (static_cast<SceneObject*>(stub))->isFactoryCrate();
}

bool SceneObjectAdapter::isPharmaceuticalObject() {
	return (static_cast<SceneObject*>(stub))->isPharmaceuticalObject();
}

bool SceneObjectAdapter::isFishingPoleObject() const {
	return (static_cast<SceneObject*>(stub))->isFishingPoleObject();
}

bool SceneObjectAdapter::isDeedObject() {
	return (static_cast<SceneObject*>(stub))->isDeedObject();
}

bool SceneObjectAdapter::isVehicleDeedObject() {
	return (static_cast<SceneObject*>(stub))->isVehicleDeedObject();
}

bool SceneObjectAdapter::isDroidDeedObject() {
	return (static_cast<SceneObject*>(stub))->isDroidDeedObject();
}

bool SceneObjectAdapter::isBuildingDeed() {
	return (static_cast<SceneObject*>(stub))->isBuildingDeed();
}

bool SceneObjectAdapter::isSignObject() {
	return (static_cast<SceneObject*>(stub))->isSignObject();
}

bool SceneObjectAdapter::isInstallationDeed() {
	return (static_cast<SceneObject*>(stub))->isInstallationDeed();
}

bool SceneObjectAdapter::isCraftingTool() {
	return (static_cast<SceneObject*>(stub))->isCraftingTool();
}

bool SceneObjectAdapter::isCraftingStation() {
	return (static_cast<SceneObject*>(stub))->isCraftingStation();
}

bool SceneObjectAdapter::isManufactureSchematic() {
	return (static_cast<SceneObject*>(stub))->isManufactureSchematic();
}

bool SceneObjectAdapter::isStructureObject() {
	return (static_cast<SceneObject*>(stub))->isStructureObject();
}

bool SceneObjectAdapter::isAuctionObject() {
	return (static_cast<SceneObject*>(stub))->isAuctionObject();
}

bool SceneObjectAdapter::isFishingBait() const {
	return (static_cast<SceneObject*>(stub))->isFishingBait();
}

bool SceneObjectAdapter::isTrapObject() const {
	return (static_cast<SceneObject*>(stub))->isTrapObject();
}

bool SceneObjectAdapter::isRepairTool() const {
	return (static_cast<SceneObject*>(stub))->isRepairTool();
}

bool SceneObjectAdapter::isCamoKit() {
	return (static_cast<SceneObject*>(stub))->isCamoKit();
}

bool SceneObjectAdapter::isAttachment() {
	return (static_cast<SceneObject*>(stub))->isAttachment();
}

bool SceneObjectAdapter::isDiceObject() {
	return (static_cast<SceneObject*>(stub))->isDiceObject();
}

bool SceneObjectAdapter::isCreatureHabitat() {
	return (static_cast<SceneObject*>(stub))->isCreatureHabitat();
}

bool SceneObjectAdapter::isCampKit() const {
	return (static_cast<SceneObject*>(stub))->isCampKit();
}

bool SceneObjectAdapter::isCampStructure() {
	return (static_cast<SceneObject*>(stub))->isCampStructure();
}

bool SceneObjectAdapter::isRecycleToolObject() {
	return (static_cast<SceneObject*>(stub))->isRecycleToolObject();
}

bool SceneObjectAdapter::isAntiDecayKitObject() {
	return (static_cast<SceneObject*>(stub))->isAntiDecayKitObject();
}

void SceneObjectAdapter::setContainerDefaultAllowPermission(unsigned short perm) {
	(static_cast<SceneObject*>(stub))->setContainerDefaultAllowPermission(perm);
}

void SceneObjectAdapter::clearContainerDefaultAllowPermission(unsigned short perm) {
	(static_cast<SceneObject*>(stub))->clearContainerDefaultAllowPermission(perm);
}

void SceneObjectAdapter::setContainerDefaultDenyPermission(unsigned short perm) {
	(static_cast<SceneObject*>(stub))->setContainerDefaultDenyPermission(perm);
}

void SceneObjectAdapter::clearContainerDefaultDenyPermission(unsigned short perm) {
	(static_cast<SceneObject*>(stub))->clearContainerDefaultDenyPermission(perm);
}

void SceneObjectAdapter::setContainerInheritPermissionsFromParent(bool val) {
	(static_cast<SceneObject*>(stub))->setContainerInheritPermissionsFromParent(val);
}

void SceneObjectAdapter::setContainerOwnerID(unsigned long long id) {
	(static_cast<SceneObject*>(stub))->setContainerOwnerID(id);
}

void SceneObjectAdapter::setContainerAllowPermission(const String& group, unsigned short perm) {
	(static_cast<SceneObject*>(stub))->setContainerAllowPermission(group, perm);
}

void SceneObjectAdapter::setContainerDenyPermission(const String& group, unsigned short perm) {
	(static_cast<SceneObject*>(stub))->setContainerDenyPermission(group, perm);
}

void SceneObjectAdapter::setGameObjectType(unsigned int type) {
	(static_cast<SceneObject*>(stub))->setGameObjectType(type);
}

void SceneObjectAdapter::setClientObjectCRC(unsigned int objCRC) {
	(static_cast<SceneObject*>(stub))->setClientObjectCRC(objCRC);
}

void SceneObjectAdapter::setServerObjectCRC(unsigned int objCRC) {
	(static_cast<SceneObject*>(stub))->setServerObjectCRC(objCRC);
}

void SceneObjectAdapter::setZone(Zone* zone) {
	(static_cast<SceneObject*>(stub))->setZone(zone);
}

void SceneObjectAdapter::setDirection(float fw, float fx, float fy, float fz) {
	(static_cast<SceneObject*>(stub))->setDirection(fw, fx, fy, fz);
}

void SceneObjectAdapter::setDirection(float headingAngleRadians) {
	(static_cast<SceneObject*>(stub))->setDirection(headingAngleRadians);
}

void SceneObjectAdapter::setMovementCounter(unsigned int count) {
	(static_cast<SceneObject*>(stub))->setMovementCounter(count);
}

void SceneObjectAdapter::incrementMovementCounter() {
	(static_cast<SceneObject*>(stub))->incrementMovementCounter();
}

void SceneObjectAdapter::setContainmentType(unsigned int type) {
	(static_cast<SceneObject*>(stub))->setContainmentType(type);
}

void SceneObjectAdapter::setLoggingName(const String& name) {
	(static_cast<SceneObject*>(stub))->setLoggingName(name);
}

void SceneObjectAdapter::setClientObject(bool val) {
	(static_cast<SceneObject*>(stub))->setClientObject(val);
}

unsigned int SceneObjectAdapter::getPlanetCRC() {
	return (static_cast<SceneObject*>(stub))->getPlanetCRC();
}

bool SceneObjectAdapter::isClientObject() const {
	return (static_cast<SceneObject*>(stub))->isClientObject();
}

bool SceneObjectAdapter::isStaticObjectClass() {
	return (static_cast<SceneObject*>(stub))->isStaticObjectClass();
}

bool SceneObjectAdapter::isContainerObject() {
	return (static_cast<SceneObject*>(stub))->isContainerObject();
}

bool SceneObjectAdapter::isTerminal() {
	return (static_cast<SceneObject*>(stub))->isTerminal();
}

bool SceneObjectAdapter::isGroupObject() {
	return (static_cast<SceneObject*>(stub))->isGroupObject();
}

bool SceneObjectAdapter::isGuildObject() {
	return (static_cast<SceneObject*>(stub))->isGuildObject();
}

bool SceneObjectAdapter::isControlDevice() {
	return (static_cast<SceneObject*>(stub))->isControlDevice();
}

bool SceneObjectAdapter::isPetControlDevice() {
	return (static_cast<SceneObject*>(stub))->isPetControlDevice();
}

bool SceneObjectAdapter::isVehicleControlDevice() {
	return (static_cast<SceneObject*>(stub))->isVehicleControlDevice();
}

bool SceneObjectAdapter::isShipControlDevice() {
	return (static_cast<SceneObject*>(stub))->isShipControlDevice();
}

bool SceneObjectAdapter::isMissionTerminal() {
	return (static_cast<SceneObject*>(stub))->isMissionTerminal();
}

bool SceneObjectAdapter::isMissionObject() {
	return (static_cast<SceneObject*>(stub))->isMissionObject();
}

bool SceneObjectAdapter::isActorObject() {
	return (static_cast<SceneObject*>(stub))->isActorObject();
}

int SceneObjectAdapter::getPlanetMapCategoryCRC() const {
	return (static_cast<SceneObject*>(stub))->getPlanetMapCategoryCRC();
}

int SceneObjectAdapter::getPlanetMapSubCategoryCRC() const {
	return (static_cast<SceneObject*>(stub))->getPlanetMapSubCategoryCRC();
}

bool SceneObjectAdapter::containsChildObject(SceneObject* obj) const {
	return (static_cast<SceneObject*>(stub))->containsChildObject(obj);
}

void SceneObjectAdapter::createChildObjects() {
	(static_cast<SceneObject*>(stub))->createChildObjects();
}

void SceneObjectAdapter::destroyChildObjects() {
	(static_cast<SceneObject*>(stub))->destroyChildObjects();
}

void SceneObjectAdapter::addChildObject(SceneObject* obj) {
	(static_cast<SceneObject*>(stub))->addChildObject(obj);
}

void SceneObjectAdapter::initializeChildObject(SceneObject* controllerObject) {
	(static_cast<SceneObject*>(stub))->initializeChildObject(controllerObject);
}

bool SceneObjectAdapter::isInWater() {
	return (static_cast<SceneObject*>(stub))->isInWater();
}

bool SceneObjectAdapter::containsNoTradeObjectRecursive() {
	return (static_cast<SceneObject*>(stub))->containsNoTradeObjectRecursive();
}

String SceneObjectAdapter::getDisplayedName() {
	return (static_cast<SceneObject*>(stub))->getDisplayedName();
}

bool SceneObjectAdapter::doSendToClient() {
	return (static_cast<SceneObject*>(stub))->doSendToClient();
}

void SceneObjectAdapter::setSendToClient(bool val) {
	(static_cast<SceneObject*>(stub))->setSendToClient(val);
}

bool SceneObjectAdapter::isPet() {
	return (static_cast<SceneObject*>(stub))->isPet();
}

bool SceneObjectAdapter::isMount() {
	return (static_cast<SceneObject*>(stub))->isMount();
}

bool SceneObjectAdapter::isLairObject() {
	return (static_cast<SceneObject*>(stub))->isLairObject();
}

bool SceneObjectAdapter::isPoiBuilding() {
	return (static_cast<SceneObject*>(stub))->isPoiBuilding();
}

bool SceneObjectAdapter::isTheaterObject() {
	return (static_cast<SceneObject*>(stub))->isTheaterObject();
}

bool SceneObjectAdapter::isEventPerkDeed() {
	return (static_cast<SceneObject*>(stub))->isEventPerkDeed();
}

bool SceneObjectAdapter::isEventPerkItem() {
	return (static_cast<SceneObject*>(stub))->isEventPerkItem();
}

bool SceneObjectAdapter::isDataPad() {
	return (static_cast<SceneObject*>(stub))->isDataPad();
}

float SceneObjectAdapter::getTemplateRadius() {
	return (static_cast<SceneObject*>(stub))->getTemplateRadius();
}

bool SceneObjectAdapter::isInNavMesh() {
	return (static_cast<SceneObject*>(stub))->isInNavMesh();
}

/*
 *	SceneObjectHelper
 */

SceneObjectHelper* SceneObjectHelper::staticInitializer = SceneObjectHelper::instance();

SceneObjectHelper::SceneObjectHelper() {
	className = "SceneObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void SceneObjectHelper::finalizeHelper() {
	SceneObjectHelper::finalize();
}

DistributedObject* SceneObjectHelper::instantiateObject() {
	return new SceneObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* SceneObjectHelper::instantiateServant() {
	return new SceneObjectImplementation();
}

DistributedObjectAdapter* SceneObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SceneObjectAdapter(static_cast<SceneObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

