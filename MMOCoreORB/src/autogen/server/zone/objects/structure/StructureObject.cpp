/*
 *	autogen/server/zone/objects/structure/StructureObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "StructureObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/pathfinding/NavArea.h"

#include "server/zone/objects/creature/credits/CreditObject.h"

/*
 *	StructureObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 3783376556,RPC_FINALIZE__,RPC_NOTIFYLOADFROMDATABASE__,RPC_DESTROYOBJECTFROMWORLD__BOOL_,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_NOTIFYINSERTTOZONE__ZONE_,RPC_CREATECHILDOBJECTS__,RPC_NOTIFYSTRUCTUREPLACED__CREATUREOBJECT_,RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_,RPC_GETTIMESTRING__INT_,RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__,RPC_SCHEDULEMAINTENANCETASK__INT_,RPC_UPDATESTRUCTURESTATUS__,RPC_ISONADMINLIST__CREATUREOBJECT_,RPC_ISONADMINLIST__LONG_,RPC_ISONENTRYLIST__CREATUREOBJECT_,RPC_ISONBANLIST__CREATUREOBJECT_,RPC_ISONBANLIST__LONG_,RPC_ISONHOPPERLIST__CREATUREOBJECT_,RPC_ISONPERMISSIONLIST__STRING_CREATUREOBJECT_,RPC_ISONPERMISSIONLIST__STRING_LONG_,RPC_ISOWNEROF__SCENEOBJECT_,RPC_ISOWNEROF__LONG_,RPC_ISONACCESSLIST__SCENEOBJECT_,RPC_ISONACCESSLIST__LONG_,RPC_SENDPERMISSIONLISTTO__CREATUREOBJECT_STRING_,RPC_HASPERMISSIONLIST__STRING_,RPC_ISPERMISSIONLISTFULL__STRING_,RPC_TOGGLEPERMISSION__STRING_LONG_,RPC_GRANTPERMISSION__STRING_LONG_,RPC_REVOKEPERMISSION__STRING_LONG_,RPC_REVOKEALLPERMISSIONS__LONG_,RPC_REVOKEALLPERMISSIONS__,RPC_GETREDEEDCOST__,RPC_GETOWNERCREATUREOBJECT__,RPC_GETOWNEROBJECTID__,RPC_GETDEEDOBJECTID__,RPC_GETLOTSIZE__,RPC_SETMAINTENANCEREDUCED__BOOL_,RPC_GETMAINTENANCERATE__,RPC_GETMAINTENANCEMODS__,RPC_GETBASEMAINTENANCERATE__,RPC_GETBASEPOWERRATE__,RPC_GETSURPLUSMAINTENANCE__,RPC_GETSURPLUSPOWER__,RPC_ISPUBLICSTRUCTURE__,RPC_ISPRIVATESTRUCTURE__,RPC_SETOWNER__LONG_,RPC_SETWAYPOINTID__LONG_,RPC_GETWAYPOINTID__,RPC_SETDEEDOBJECTID__LONG_,RPC_SETSURPLUSMAINTENANCE__INT_,RPC_ADDMAINTENANCE__FLOAT_,RPC_SUBTRACTMAINTENANCE__FLOAT_,RPC_PAYMAINTENANCE__INT_CREDITOBJECT_BOOL_,RPC_SETSURPLUSPOWER__INT_,RPC_ADDPOWER__FLOAT_,RPC_ISDECAYING__,RPC_ISDECAYED__,RPC_GETDECAYPERCENTAGE__,RPC_ISCONDEMNED__,RPC_SETPUBLICSTRUCTURE__BOOL_,RPC_ISSTRUCTUREOBJECT__,RPC_ISCAMPSTRUCTURE__,RPC_ISREDEEDABLE__,RPC_GETREDEEDMESSAGE__,RPC_ISCIVICSTRUCTURE__,RPC_ISCITYHALL__,RPC_ISCOMMERCIALSTRUCTURE__,RPC_ISGUILDHALL__,RPC_MIGRATEPERMISSIONS__,RPC_GETNAVAREA__,RPC_HASNAVMESH__,RPC_CREATENAVMESH__};

StructureObject::StructureObject() : TangibleObject(DummyConstructorParameter::instance()) {
	StructureObjectImplementation* _implementation = new StructureObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("StructureObject");
}

StructureObject::StructureObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("StructureObject");
}

StructureObject::~StructureObject() {
}



void StructureObject::initializeTransientMembers() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void StructureObject::loadTemplateData(SharedObjectTemplate* templateData) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void StructureObject::notifyLoadFromDatabase() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyLoadFromDatabase();
	}
}

void StructureObject::destroyObjectFromWorld(bool sendSelfDestroy) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMWORLD__BOOL_);
		method.addBooleanParameter(sendSelfDestroy);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyObjectFromWorld(sendSelfDestroy);
	}
}

void StructureObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else {
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
	}
}

void StructureObject::notifyInsertToZone(Zone* zone) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYINSERTTOZONE__ZONE_);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyInsertToZone(zone);
	}
}

void StructureObject::createChildObjects() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECHILDOBJECTS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->createChildObjects();
	}
}

int StructureObject::notifyStructurePlaced(CreatureObject* creature) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYSTRUCTUREPLACED__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyStructurePlaced(creature);
	}
}

bool StructureObject::checkRequisitesForPlacement(CreatureObject* player) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->checkRequisitesForPlacement(player);
	}
}

String StructureObject::getTimeString(unsigned int timestamp) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMESTRING__INT_);
		method.addUnsignedIntParameter(timestamp);

		String _return_getTimeString;
		method.executeWithAsciiReturn(_return_getTimeString);
		return _return_getTimeString;
	} else {
		return _implementation->getTimeString(timestamp);
	}
}

void StructureObject::scheduleMaintenanceExpirationEvent() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->scheduleMaintenanceExpirationEvent();
	}
}

void StructureObject::scheduleMaintenanceTask(int timeFromNow) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SCHEDULEMAINTENANCETASK__INT_);
		method.addSignedIntParameter(timeFromNow);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->scheduleMaintenanceTask(timeFromNow);
	}
}

void StructureObject::updateStructureStatus() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATESTRUCTURESTATUS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateStructureStatus();
	}
}

bool StructureObject::isOnAdminList(CreatureObject* player) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONADMINLIST__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnAdminList(player);
	}
}

bool StructureObject::isOnAdminList(unsigned const long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONADMINLIST__LONG_);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnAdminList(objectID);
	}
}

bool StructureObject::isOnEntryList(CreatureObject* player) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONENTRYLIST__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnEntryList(player);
	}
}

bool StructureObject::isOnBanList(CreatureObject* player) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONBANLIST__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnBanList(player);
	}
}

bool StructureObject::isOnBanList(unsigned const long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONBANLIST__LONG_);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnBanList(objectID);
	}
}

bool StructureObject::isOnHopperList(CreatureObject* player) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONHOPPERLIST__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnHopperList(player);
	}
}

bool StructureObject::isOnPermissionList(const String& listName, CreatureObject* player) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONPERMISSIONLIST__STRING_CREATUREOBJECT_);
		method.addAsciiParameter(listName);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnPermissionList(listName, player);
	}
}

bool StructureObject::isOnPermissionList(const String& listName, unsigned const long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONPERMISSIONLIST__STRING_LONG_);
		method.addAsciiParameter(listName);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnPermissionList(listName, objectID);
	}
}

bool StructureObject::isOwnerOf(SceneObject* obj) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISOWNEROF__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOwnerOf(obj);
	}
}

bool StructureObject::isOwnerOf(unsigned long long oid) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISOWNEROF__LONG_);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOwnerOf(oid);
	}
}

bool StructureObject::isOnAccessList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONACCESSLIST__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnAccessList(obj);
	}
}

bool StructureObject::isOnAccessList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONACCESSLIST__LONG_);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnAccessList(oid);
	}
}

void StructureObject::sendPermissionListTo(CreatureObject* creature, const String& listName) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDPERMISSIONLISTTO__CREATUREOBJECT_STRING_);
		method.addObjectParameter(creature);
		method.addAsciiParameter(listName);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendPermissionListTo(creature, listName);
	}
}

bool StructureObject::hasPermissionList(const String& listName) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPERMISSIONLIST__STRING_);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasPermissionList(listName);
	}
}

bool StructureObject::isPermissionListFull(const String& listName) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPERMISSIONLISTFULL__STRING_);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPermissionListFull(listName);
	}
}

int StructureObject::togglePermission(const String& listName, unsigned const long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOGGLEPERMISSION__STRING_LONG_);
		method.addAsciiParameter(listName);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->togglePermission(listName, objectID);
	}
}

int StructureObject::grantPermission(const String& listName, unsigned const long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GRANTPERMISSION__STRING_LONG_);
		method.addAsciiParameter(listName);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->grantPermission(listName, objectID);
	}
}

int StructureObject::revokePermission(const String& listName, unsigned const long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REVOKEPERMISSION__STRING_LONG_);
		method.addAsciiParameter(listName);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->revokePermission(listName, objectID);
	}
}

int StructureObject::revokeAllPermissions(unsigned const long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REVOKEALLPERMISSIONS__LONG_);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->revokeAllPermissions(objectID);
	}
}

void StructureObject::revokeAllPermissions() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REVOKEALLPERMISSIONS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->revokeAllPermissions();
	}
}

int StructureObject::getRedeedCost() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREDEEDCOST__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRedeedCost();
	}
}

CreatureObject* StructureObject::getOwnerCreatureObject() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNERCREATUREOBJECT__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getOwnerCreatureObject();
	}
}

unsigned long long StructureObject::getOwnerObjectID() const {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNEROBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getOwnerObjectID();
	}
}

unsigned long long StructureObject::getDeedObjectID() const {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEEDOBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getDeedObjectID();
	}
}

int StructureObject::getLotSize() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOTSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getLotSize();
	}
}

void StructureObject::setMaintenanceReduced(bool value) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAINTENANCEREDUCED__BOOL_);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMaintenanceReduced(value);
	}
}

float StructureObject::getMaintenanceRate() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAINTENANCERATE__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getMaintenanceRate();
	}
}

String StructureObject::getMaintenanceMods() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAINTENANCEMODS__);

		String _return_getMaintenanceMods;
		method.executeWithAsciiReturn(_return_getMaintenanceMods);
		return _return_getMaintenanceMods;
	} else {
		return _implementation->getMaintenanceMods();
	}
}

int StructureObject::getBaseMaintenanceRate() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBASEMAINTENANCERATE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getBaseMaintenanceRate();
	}
}

int StructureObject::getBasePowerRate() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBASEPOWERRATE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getBasePowerRate();
	}
}

int StructureObject::getSurplusMaintenance() const {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURPLUSMAINTENANCE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSurplusMaintenance();
	}
}

int StructureObject::getSurplusPower() const {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURPLUSPOWER__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSurplusPower();
	}
}

bool StructureObject::isPublicStructure() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPUBLICSTRUCTURE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPublicStructure();
	}
}

bool StructureObject::isPrivateStructure() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPRIVATESTRUCTURE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPrivateStructure();
	}
}

void StructureObject::setOwner(unsigned long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNER__LONG_);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setOwner(objectID);
	}
}

void StructureObject::setWaypointID(unsigned long long objectID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWAYPOINTID__LONG_);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setWaypointID(objectID);
	}
}

unsigned long long StructureObject::getWaypointID() const {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWAYPOINTID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getWaypointID();
	}
}

void StructureObject::setDeedObjectID(unsigned long long deedID) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEEDOBJECTID__LONG_);
		method.addUnsignedLongParameter(deedID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setDeedObjectID(deedID);
	}
}

void StructureObject::setSurplusMaintenance(int surplus) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURPLUSMAINTENANCE__INT_);
		method.addSignedIntParameter(surplus);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setSurplusMaintenance(surplus);
	}
}

void StructureObject::addMaintenance(float add) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMAINTENANCE__FLOAT_);
		method.addFloatParameter(add);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addMaintenance(add);
	}
}

void StructureObject::subtractMaintenance(float subtract) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUBTRACTMAINTENANCE__FLOAT_);
		method.addFloatParameter(subtract);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->subtractMaintenance(subtract);
	}
}

void StructureObject::payMaintenance(int maintenance, CreditObject* creditObj, bool cashFirst) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PAYMAINTENANCE__INT_CREDITOBJECT_BOOL_);
		method.addSignedIntParameter(maintenance);
		method.addObjectParameter(creditObj);
		method.addBooleanParameter(cashFirst);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((creditObj == NULL) || creditObj->isLockedByCurrentThread());
		_implementation->payMaintenance(maintenance, creditObj, cashFirst);
	}
}

void StructureObject::setSurplusPower(int surplus) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURPLUSPOWER__INT_);
		method.addSignedIntParameter(surplus);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setSurplusPower(surplus);
	}
}

void StructureObject::addPower(float add) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPOWER__FLOAT_);
		method.addFloatParameter(add);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addPower(add);
	}
}

bool StructureObject::isDecaying() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDECAYING__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDecaying();
	}
}

bool StructureObject::isDecayed() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDECAYED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isDecayed();
	}
}

int StructureObject::getDecayPercentage() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDECAYPERCENTAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDecayPercentage();
	}
}

bool StructureObject::isCondemned() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONDEMNED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCondemned();
	}
}

void StructureObject::setPublicStructure(bool privacy) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPUBLICSTRUCTURE__BOOL_);
		method.addBooleanParameter(privacy);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPublicStructure(privacy);
	}
}

bool StructureObject::isStructureObject() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTRUCTUREOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isStructureObject();
	}
}

bool StructureObject::isCampStructure() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCAMPSTRUCTURE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCampStructure();
	}
}

bool StructureObject::isRedeedable() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREDEEDABLE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRedeedable();
	}
}

void StructureObject::addTemplateSkillMods(TangibleObject* targetObject) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert((targetObject == NULL) || targetObject->isLockedByCurrentThread());
		_implementation->addTemplateSkillMods(targetObject);
	}
}

void StructureObject::removeTemplateSkillMods(TangibleObject* tangibleObject) {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert((tangibleObject == NULL) || tangibleObject->isLockedByCurrentThread());
		_implementation->removeTemplateSkillMods(tangibleObject);
	}
}

String StructureObject::getRedeedMessage() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREDEEDMESSAGE__);

		String _return_getRedeedMessage;
		method.executeWithAsciiReturn(_return_getRedeedMessage);
		return _return_getRedeedMessage;
	} else {
		return _implementation->getRedeedMessage();
	}
}

bool StructureObject::isCivicStructure() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCIVICSTRUCTURE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCivicStructure();
	}
}

bool StructureObject::isCityHall() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYHALL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCityHall();
	}
}

bool StructureObject::isCommercialStructure() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCOMMERCIALSTRUCTURE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCommercialStructure();
	}
}

bool StructureObject::isGuildHall() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGUILDHALL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isGuildHall();
	}
}

void StructureObject::migratePermissions() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_MIGRATEPERMISSIONS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->migratePermissions();
	}
}

NavArea* StructureObject::getNavArea() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNAVAREA__);

		return static_cast<NavArea*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getNavArea();
	}
}

bool StructureObject::hasNavmesh() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASNAVMESH__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasNavmesh();
	}
}

void StructureObject::createNavMesh() {
	StructureObjectImplementation* _implementation = static_cast<StructureObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATENAVMESH__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->createNavMesh();
	}
}

DistributedObjectServant* StructureObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* StructureObject::_getImplementationForRead() const {
	return _impl;
}

void StructureObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	StructureObjectImplementation
 */

StructureObjectImplementation::StructureObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


StructureObjectImplementation::~StructureObjectImplementation() {
	StructureObjectImplementation::finalize();
}


void StructureObjectImplementation::_initializeImplementation() {
	_setClassHelper(StructureObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void StructureObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<StructureObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* StructureObjectImplementation::_getStub() {
	return _this.get();
}

StructureObjectImplementation::operator const StructureObject*() {
	return _this.get();
}

void StructureObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void StructureObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void StructureObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void StructureObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void StructureObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void StructureObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void StructureObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void StructureObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("StructureObject");

}

void StructureObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(StructureObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool StructureObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xe93cda22: //StructureObject.navArea
		TypeInfo<ManagedReference<NavArea* > >::parseFromBinaryStream(&navArea, stream);
		return true;

	case 0xfb75ba1b: //StructureObject.structurePermissionList
		TypeInfo<StructurePermissionList >::parseFromBinaryStream(&structurePermissionList, stream);
		return true;

	case 0xbc3681c6: //StructureObject.lastMaintenanceTime
		TypeInfo<Time >::parseFromBinaryStream(&lastMaintenanceTime, stream);
		return true;

	case 0x6a6ce595: //StructureObject.maintenanceExpires
		TypeInfo<Time >::parseFromBinaryStream(&maintenanceExpires, stream);
		return true;

	case 0xacd9b94b: //StructureObject.powerExpires
		TypeInfo<Time >::parseFromBinaryStream(&powerExpires, stream);
		return true;

	case 0x416adeb5: //StructureObject.ownerObjectID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&ownerObjectID, stream);
		return true;

	case 0x91401d8: //StructureObject.deedObjectID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&deedObjectID, stream);
		return true;

	case 0x7be437f9: //StructureObject.waypointID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&waypointID, stream);
		return true;

	case 0x14dab13c: //StructureObject.surplusMaintenance
		TypeInfo<float >::parseFromBinaryStream(&surplusMaintenance, stream);
		return true;

	case 0x3964b467: //StructureObject.surplusPower
		TypeInfo<float >::parseFromBinaryStream(&surplusPower, stream);
		return true;

	case 0xe3db1557: //StructureObject.maintenanceReduced
		TypeInfo<bool >::parseFromBinaryStream(&maintenanceReduced, stream);
		return true;

	case 0xfb045dfa: //StructureObject.permissionsFixed
		TypeInfo<bool >::parseFromBinaryStream(&permissionsFixed, stream);
		return true;

	}

	return false;
}

void StructureObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = StructureObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int StructureObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xe93cda22; //StructureObject.navArea
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<NavArea* > >::toBinaryStream(&navArea, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfb75ba1b; //StructureObject.structurePermissionList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<StructurePermissionList >::toBinaryStream(&structurePermissionList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbc3681c6; //StructureObject.lastMaintenanceTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastMaintenanceTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6a6ce595; //StructureObject.maintenanceExpires
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&maintenanceExpires, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xacd9b94b; //StructureObject.powerExpires
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&powerExpires, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x416adeb5; //StructureObject.ownerObjectID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&ownerObjectID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x91401d8; //StructureObject.deedObjectID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&deedObjectID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7be437f9; //StructureObject.waypointID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&waypointID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x14dab13c; //StructureObject.surplusMaintenance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&surplusMaintenance, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3964b467; //StructureObject.surplusPower
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&surplusPower, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe3db1557; //StructureObject.maintenanceReduced
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&maintenanceReduced, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfb045dfa; //StructureObject.permissionsFixed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&permissionsFixed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 12;
}

StructureObjectImplementation::StructureObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/structure/StructureObject.idl():  		Logger.setLoggingName("StructureObject");
	Logger::setLoggingName("StructureObject");
	// server/zone/objects/structure/StructureObject.idl():  		super.staticObject = false;
	TangibleObjectImplementation::staticObject = false;
	// server/zone/objects/structure/StructureObject.idl():  		ownerObjectID = 0;
	ownerObjectID = 0;
	// server/zone/objects/structure/StructureObject.idl():  		deedObjectID = 0;
	deedObjectID = 0;
	// server/zone/objects/structure/StructureObject.idl():  		waypointID = 0;
	waypointID = 0;
	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance = 0;
	surplusMaintenance = 0;
	// server/zone/objects/structure/StructureObject.idl():  		surplusPower = 0;
	surplusPower = 0;
	// server/zone/objects/structure/StructureObject.idl():  		structureMaintenanceTask = null;
	structureMaintenanceTask = NULL;
	// server/zone/objects/structure/StructureObject.idl():  		maintenanceReduced = false;
	maintenanceReduced = false;
	// server/zone/objects/structure/StructureObject.idl():  		permissionsFixed = false;
	permissionsFixed = false;
	// server/zone/objects/structure/StructureObject.idl():  		navArea = null;
	navArea = NULL;
}

void StructureObjectImplementation::createChildObjects() {
	// server/zone/objects/structure/StructureObject.idl():  		super.createChildObjects();
	TangibleObjectImplementation::createChildObjects();
}

int StructureObjectImplementation::notifyStructurePlaced(CreatureObject* creature) {
	// server/zone/objects/structure/StructureObject.idl():  		return 0;
	return 0;
}

bool StructureObjectImplementation::checkRequisitesForPlacement(CreatureObject* player) {
	// server/zone/objects/structure/StructureObject.idl():  		return true;
	return true;
}

bool StructureObjectImplementation::isOnAdminList(unsigned const long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnPermissionList("ADMIN", objectID);
	return (&structurePermissionList)->isOnPermissionList("ADMIN", objectID);
}

bool StructureObjectImplementation::isOnBanList(unsigned const long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnPermissionList("BAN", objectID);
	return (&structurePermissionList)->isOnPermissionList("BAN", objectID);
}

bool StructureObjectImplementation::isOnPermissionList(const String& listName, unsigned const long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnPermissionList(listName, objectID);
	return (&structurePermissionList)->isOnPermissionList(listName, objectID);
}

bool StructureObjectImplementation::isOnAccessList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl():  		return false;
	return false;
}

bool StructureObjectImplementation::isOnAccessList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl():  		return false;
	return false;
}

void StructureObjectImplementation::sendPermissionListTo(CreatureObject* creature, const String& listName) {
	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.sendTo(creature, listName);
	(&structurePermissionList)->sendTo(creature, listName);
}

bool StructureObjectImplementation::hasPermissionList(const String& listName) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.containsList(listName);
	return (&structurePermissionList)->containsList(listName);
}

bool StructureObjectImplementation::isPermissionListFull(const String& listName) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isListFull(listName);
	return (&structurePermissionList)->isListFull(listName);
}

int StructureObjectImplementation::togglePermission(const String& listName, unsigned const long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.togglePermission(listName, objectID);
	return (&structurePermissionList)->togglePermission(listName, objectID);
}

int StructureObjectImplementation::grantPermission(const String& listName, unsigned const long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.grantPermission(listName, objectID);
	return (&structurePermissionList)->grantPermission(listName, objectID);
}

int StructureObjectImplementation::revokePermission(const String& listName, unsigned const long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.revokePermission(listName, objectID);
	return (&structurePermissionList)->revokePermission(listName, objectID);
}

int StructureObjectImplementation::revokeAllPermissions(unsigned const long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.revokeAllPermissions(objectID);
	return (&structurePermissionList)->revokeAllPermissions(objectID);
}

void StructureObjectImplementation::revokeAllPermissions() {
	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.revokeAllPermissions();
	(&structurePermissionList)->revokeAllPermissions();
}

int StructureObjectImplementation::getRedeedCost() {
	// server/zone/objects/structure/StructureObject.idl():  		return (getBaseMaintenanceRate() * 50);
	return (getBaseMaintenanceRate() * 50);
}

unsigned long long StructureObjectImplementation::getOwnerObjectID() const{
	// server/zone/objects/structure/StructureObject.idl():  		return ownerObjectID;
	return ownerObjectID;
}

unsigned long long StructureObjectImplementation::getDeedObjectID() const{
	// server/zone/objects/structure/StructureObject.idl():  		return deedObjectID;
	return deedObjectID;
}

void StructureObjectImplementation::setMaintenanceReduced(bool value) {
	// server/zone/objects/structure/StructureObject.idl():  		maintenanceReduced = value;
	maintenanceReduced = value;
}

int StructureObjectImplementation::getSurplusMaintenance() const{
	// server/zone/objects/structure/StructureObject.idl():  		return surplusMaintenance;
	return surplusMaintenance;
}

int StructureObjectImplementation::getSurplusPower() const{
	// server/zone/objects/structure/StructureObject.idl():  		return surplusPower;
	return surplusPower;
}

bool StructureObjectImplementation::isPublicStructure() {
	// server/zone/objects/structure/StructureObject.idl():  		return false;
	return false;
}

bool StructureObjectImplementation::isPrivateStructure() {
	// server/zone/objects/structure/StructureObject.idl():  		return false;
	return false;
}

void StructureObjectImplementation::setOwner(unsigned long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		ownerObjectID = objectID;
	ownerObjectID = objectID;
	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.setOwner(objectID);
	(&structurePermissionList)->setOwner(objectID);
}

void StructureObjectImplementation::setWaypointID(unsigned long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		waypointID = objectID;
	waypointID = objectID;
}

unsigned long long StructureObjectImplementation::getWaypointID() const{
	// server/zone/objects/structure/StructureObject.idl():  		return waypointID;
	return waypointID;
}

void StructureObjectImplementation::setDeedObjectID(unsigned long long deedID) {
	// server/zone/objects/structure/StructureObject.idl():  		deedObjectID = deedID;
	deedObjectID = deedID;
}

void StructureObjectImplementation::setSurplusMaintenance(int surplus) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance = surplus;
	surplusMaintenance = surplus;
}

void StructureObjectImplementation::addMaintenance(float add) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance += add;
	surplusMaintenance += add;
}

void StructureObjectImplementation::subtractMaintenance(float subtract) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance = surplusMaintenance - subtract;
	surplusMaintenance = surplusMaintenance - subtract;
}

void StructureObjectImplementation::setSurplusPower(int surplus) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusPower = surplus;
	surplusPower = surplus;
}

void StructureObjectImplementation::addPower(float add) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusPower += add;
	surplusPower += add;
}

bool StructureObjectImplementation::isDecaying() {
	// server/zone/objects/structure/StructureObject.idl():  		return (surplusMaintenance < 0);
	return (surplusMaintenance < 0);
}

bool StructureObjectImplementation::isCondemned() {
	// server/zone/objects/structure/StructureObject.idl():  		return false;
	return false;
}

void StructureObjectImplementation::setPublicStructure(bool privacy) {
}

bool StructureObjectImplementation::isStructureObject() {
	// server/zone/objects/structure/StructureObject.idl():  		return true;
	return true;
}

bool StructureObjectImplementation::isRedeedable() {
	// server/zone/objects/structure/StructureObject.idl():  		}
	if (isCivicStructure()){
	// server/zone/objects/structure/StructureObject.idl():  			return (super.conditionDamage == 0 && !isCityHall());
	return (TangibleObjectImplementation::conditionDamage == 0 && !isCityHall());
}

	else {
	// server/zone/objects/structure/StructureObject.idl():  			return (getRedeedCost() < surplusMaintenance);
	return (getRedeedCost() < surplusMaintenance);
}
}

String StructureObjectImplementation::getRedeedMessage() {
	// server/zone/objects/structure/StructureObject.idl():  		return "";
	return "";
}

void StructureObjectImplementation::migratePermissions() {
	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.migrateLists(super.getZoneServer(), getOwnerObjectID());
	(&structurePermissionList)->migrateLists(TangibleObjectImplementation::getZoneServer(), getOwnerObjectID());
	// server/zone/objects/structure/StructureObject.idl():  		permissionsFixed = true;
	permissionsFixed = true;
}

NavArea* StructureObjectImplementation::getNavArea() {
	// server/zone/objects/structure/StructureObject.idl():  		return navArea;
	return navArea;
}

bool StructureObjectImplementation::hasNavmesh() {
	// server/zone/objects/structure/StructureObject.idl():  		return navArea != null;
	return navArea != NULL;
}

/*
 *	StructureObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


StructureObjectAdapter::StructureObjectAdapter(StructureObject* obj) : TangibleObjectAdapter(obj) {
}

void StructureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_FINALIZE__:
		{
			
			finalize();
			
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			
			notifyLoadFromDatabase();
			
		}
		break;
	case RPC_DESTROYOBJECTFROMWORLD__BOOL_:
		{
			bool sendSelfDestroy = inv->getBooleanParameter();
			
			destroyObjectFromWorld(sendSelfDestroy);
			
		}
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		{
			bool destroyContainedObjects = inv->getBooleanParameter();
			
			destroyObjectFromDatabase(destroyContainedObjects);
			
		}
		break;
	case RPC_NOTIFYINSERTTOZONE__ZONE_:
		{
			Zone* zone = static_cast<Zone*>(inv->getObjectParameter());
			
			notifyInsertToZone(zone);
			
		}
		break;
	case RPC_CREATECHILDOBJECTS__:
		{
			
			createChildObjects();
			
		}
		break;
	case RPC_NOTIFYSTRUCTUREPLACED__CREATUREOBJECT_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			int _m_res = notifyStructurePlaced(creature);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = checkRequisitesForPlacement(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETTIMESTRING__INT_:
		{
			unsigned int timestamp = inv->getUnsignedIntParameter();
			
			String _m_res = getTimeString(timestamp);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__:
		{
			
			scheduleMaintenanceExpirationEvent();
			
		}
		break;
	case RPC_SCHEDULEMAINTENANCETASK__INT_:
		{
			int timeFromNow = inv->getSignedIntParameter();
			
			scheduleMaintenanceTask(timeFromNow);
			
		}
		break;
	case RPC_UPDATESTRUCTURESTATUS__:
		{
			
			updateStructureStatus();
			
		}
		break;
	case RPC_ISONADMINLIST__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isOnAdminList(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONADMINLIST__LONG_:
		{
			unsigned const long long objectID = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnAdminList(objectID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONENTRYLIST__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isOnEntryList(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONBANLIST__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isOnBanList(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONBANLIST__LONG_:
		{
			unsigned const long long objectID = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnBanList(objectID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONHOPPERLIST__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isOnHopperList(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONPERMISSIONLIST__STRING_CREATUREOBJECT_:
		{
			 String listName; inv->getAsciiParameter(listName);
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isOnPermissionList(listName, player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONPERMISSIONLIST__STRING_LONG_:
		{
			 String listName; inv->getAsciiParameter(listName);
			unsigned const long long objectID = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnPermissionList(listName, objectID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISOWNEROF__SCENEOBJECT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			
			bool _m_res = isOwnerOf(obj);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISOWNEROF__LONG_:
		{
			unsigned long long oid = inv->getUnsignedLongParameter();
			
			bool _m_res = isOwnerOf(oid);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONACCESSLIST__SCENEOBJECT_:
		{
			SceneObject* obj = static_cast<SceneObject*>(inv->getObjectParameter());
			
			bool _m_res = isOnAccessList(obj);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISONACCESSLIST__LONG_:
		{
			unsigned long long oid = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnAccessList(oid);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SENDPERMISSIONLISTTO__CREATUREOBJECT_STRING_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String listName; inv->getAsciiParameter(listName);
			
			sendPermissionListTo(creature, listName);
			
		}
		break;
	case RPC_HASPERMISSIONLIST__STRING_:
		{
			 String listName; inv->getAsciiParameter(listName);
			
			bool _m_res = hasPermissionList(listName);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPERMISSIONLISTFULL__STRING_:
		{
			 String listName; inv->getAsciiParameter(listName);
			
			bool _m_res = isPermissionListFull(listName);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_TOGGLEPERMISSION__STRING_LONG_:
		{
			 String listName; inv->getAsciiParameter(listName);
			unsigned const long long objectID = inv->getUnsignedLongParameter();
			
			int _m_res = togglePermission(listName, objectID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GRANTPERMISSION__STRING_LONG_:
		{
			 String listName; inv->getAsciiParameter(listName);
			unsigned const long long objectID = inv->getUnsignedLongParameter();
			
			int _m_res = grantPermission(listName, objectID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_REVOKEPERMISSION__STRING_LONG_:
		{
			 String listName; inv->getAsciiParameter(listName);
			unsigned const long long objectID = inv->getUnsignedLongParameter();
			
			int _m_res = revokePermission(listName, objectID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_REVOKEALLPERMISSIONS__LONG_:
		{
			unsigned const long long objectID = inv->getUnsignedLongParameter();
			
			int _m_res = revokeAllPermissions(objectID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_REVOKEALLPERMISSIONS__:
		{
			
			revokeAllPermissions();
			
		}
		break;
	case RPC_GETREDEEDCOST__:
		{
			
			int _m_res = getRedeedCost();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETOWNERCREATUREOBJECT__:
		{
			
			DistributedObject* _m_res = getOwnerCreatureObject();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETOWNEROBJECTID__:
		{
			
			unsigned long long _m_res = getOwnerObjectID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETDEEDOBJECTID__:
		{
			
			unsigned long long _m_res = getDeedObjectID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETLOTSIZE__:
		{
			
			int _m_res = getLotSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETMAINTENANCEREDUCED__BOOL_:
		{
			bool value = inv->getBooleanParameter();
			
			setMaintenanceReduced(value);
			
		}
		break;
	case RPC_GETMAINTENANCERATE__:
		{
			
			float _m_res = getMaintenanceRate();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETMAINTENANCEMODS__:
		{
			
			String _m_res = getMaintenanceMods();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETBASEMAINTENANCERATE__:
		{
			
			int _m_res = getBaseMaintenanceRate();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETBASEPOWERRATE__:
		{
			
			int _m_res = getBasePowerRate();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSURPLUSMAINTENANCE__:
		{
			
			int _m_res = getSurplusMaintenance();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSURPLUSPOWER__:
		{
			
			int _m_res = getSurplusPower();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISPUBLICSTRUCTURE__:
		{
			
			bool _m_res = isPublicStructure();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPRIVATESTRUCTURE__:
		{
			
			bool _m_res = isPrivateStructure();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETOWNER__LONG_:
		{
			unsigned long long objectID = inv->getUnsignedLongParameter();
			
			setOwner(objectID);
			
		}
		break;
	case RPC_SETWAYPOINTID__LONG_:
		{
			unsigned long long objectID = inv->getUnsignedLongParameter();
			
			setWaypointID(objectID);
			
		}
		break;
	case RPC_GETWAYPOINTID__:
		{
			
			unsigned long long _m_res = getWaypointID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_SETDEEDOBJECTID__LONG_:
		{
			unsigned long long deedID = inv->getUnsignedLongParameter();
			
			setDeedObjectID(deedID);
			
		}
		break;
	case RPC_SETSURPLUSMAINTENANCE__INT_:
		{
			int surplus = inv->getSignedIntParameter();
			
			setSurplusMaintenance(surplus);
			
		}
		break;
	case RPC_ADDMAINTENANCE__FLOAT_:
		{
			float add = inv->getFloatParameter();
			
			addMaintenance(add);
			
		}
		break;
	case RPC_SUBTRACTMAINTENANCE__FLOAT_:
		{
			float subtract = inv->getFloatParameter();
			
			subtractMaintenance(subtract);
			
		}
		break;
	case RPC_PAYMAINTENANCE__INT_CREDITOBJECT_BOOL_:
		{
			int maintenance = inv->getSignedIntParameter();
			CreditObject* creditObj = static_cast<CreditObject*>(inv->getObjectParameter());
			bool cashFirst = inv->getBooleanParameter();
			
			payMaintenance(maintenance, creditObj, cashFirst);
			
		}
		break;
	case RPC_SETSURPLUSPOWER__INT_:
		{
			int surplus = inv->getSignedIntParameter();
			
			setSurplusPower(surplus);
			
		}
		break;
	case RPC_ADDPOWER__FLOAT_:
		{
			float add = inv->getFloatParameter();
			
			addPower(add);
			
		}
		break;
	case RPC_ISDECAYING__:
		{
			
			bool _m_res = isDecaying();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISDECAYED__:
		{
			
			bool _m_res = isDecayed();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETDECAYPERCENTAGE__:
		{
			
			int _m_res = getDecayPercentage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISCONDEMNED__:
		{
			
			bool _m_res = isCondemned();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETPUBLICSTRUCTURE__BOOL_:
		{
			bool privacy = inv->getBooleanParameter();
			
			setPublicStructure(privacy);
			
		}
		break;
	case RPC_ISSTRUCTUREOBJECT__:
		{
			
			bool _m_res = isStructureObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCAMPSTRUCTURE__:
		{
			
			bool _m_res = isCampStructure();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISREDEEDABLE__:
		{
			
			bool _m_res = isRedeedable();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETREDEEDMESSAGE__:
		{
			
			String _m_res = getRedeedMessage();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_ISCIVICSTRUCTURE__:
		{
			
			bool _m_res = isCivicStructure();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCITYHALL__:
		{
			
			bool _m_res = isCityHall();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCOMMERCIALSTRUCTURE__:
		{
			
			bool _m_res = isCommercialStructure();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISGUILDHALL__:
		{
			
			bool _m_res = isGuildHall();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_MIGRATEPERMISSIONS__:
		{
			
			migratePermissions();
			
		}
		break;
	case RPC_GETNAVAREA__:
		{
			
			DistributedObject* _m_res = getNavArea();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_HASNAVMESH__:
		{
			
			bool _m_res = hasNavmesh();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CREATENAVMESH__:
		{
			
			createNavMesh();
			
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

void StructureObjectAdapter::initializeTransientMembers() {
	(static_cast<StructureObject*>(stub))->initializeTransientMembers();
}

void StructureObjectAdapter::finalize() {
	(static_cast<StructureObject*>(stub))->finalize();
}

void StructureObjectAdapter::notifyLoadFromDatabase() {
	(static_cast<StructureObject*>(stub))->notifyLoadFromDatabase();
}

void StructureObjectAdapter::destroyObjectFromWorld(bool sendSelfDestroy) {
	(static_cast<StructureObject*>(stub))->destroyObjectFromWorld(sendSelfDestroy);
}

void StructureObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<StructureObject*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

void StructureObjectAdapter::notifyInsertToZone(Zone* zone) {
	(static_cast<StructureObject*>(stub))->notifyInsertToZone(zone);
}

void StructureObjectAdapter::createChildObjects() {
	(static_cast<StructureObject*>(stub))->createChildObjects();
}

int StructureObjectAdapter::notifyStructurePlaced(CreatureObject* creature) {
	return (static_cast<StructureObject*>(stub))->notifyStructurePlaced(creature);
}

bool StructureObjectAdapter::checkRequisitesForPlacement(CreatureObject* player) {
	return (static_cast<StructureObject*>(stub))->checkRequisitesForPlacement(player);
}

String StructureObjectAdapter::getTimeString(unsigned int timestamp) {
	return (static_cast<StructureObject*>(stub))->getTimeString(timestamp);
}

void StructureObjectAdapter::scheduleMaintenanceExpirationEvent() {
	(static_cast<StructureObject*>(stub))->scheduleMaintenanceExpirationEvent();
}

void StructureObjectAdapter::scheduleMaintenanceTask(int timeFromNow) {
	(static_cast<StructureObject*>(stub))->scheduleMaintenanceTask(timeFromNow);
}

void StructureObjectAdapter::updateStructureStatus() {
	(static_cast<StructureObject*>(stub))->updateStructureStatus();
}

bool StructureObjectAdapter::isOnAdminList(CreatureObject* player) {
	return (static_cast<StructureObject*>(stub))->isOnAdminList(player);
}

bool StructureObjectAdapter::isOnAdminList(unsigned const long long objectID) {
	return (static_cast<StructureObject*>(stub))->isOnAdminList(objectID);
}

bool StructureObjectAdapter::isOnEntryList(CreatureObject* player) {
	return (static_cast<StructureObject*>(stub))->isOnEntryList(player);
}

bool StructureObjectAdapter::isOnBanList(CreatureObject* player) {
	return (static_cast<StructureObject*>(stub))->isOnBanList(player);
}

bool StructureObjectAdapter::isOnBanList(unsigned const long long objectID) {
	return (static_cast<StructureObject*>(stub))->isOnBanList(objectID);
}

bool StructureObjectAdapter::isOnHopperList(CreatureObject* player) {
	return (static_cast<StructureObject*>(stub))->isOnHopperList(player);
}

bool StructureObjectAdapter::isOnPermissionList(const String& listName, CreatureObject* player) {
	return (static_cast<StructureObject*>(stub))->isOnPermissionList(listName, player);
}

bool StructureObjectAdapter::isOnPermissionList(const String& listName, unsigned const long long objectID) {
	return (static_cast<StructureObject*>(stub))->isOnPermissionList(listName, objectID);
}

bool StructureObjectAdapter::isOwnerOf(SceneObject* obj) {
	return (static_cast<StructureObject*>(stub))->isOwnerOf(obj);
}

bool StructureObjectAdapter::isOwnerOf(unsigned long long oid) {
	return (static_cast<StructureObject*>(stub))->isOwnerOf(oid);
}

bool StructureObjectAdapter::isOnAccessList(SceneObject* obj) {
	return (static_cast<StructureObject*>(stub))->isOnAccessList(obj);
}

bool StructureObjectAdapter::isOnAccessList(unsigned long long oid) {
	return (static_cast<StructureObject*>(stub))->isOnAccessList(oid);
}

void StructureObjectAdapter::sendPermissionListTo(CreatureObject* creature, const String& listName) {
	(static_cast<StructureObject*>(stub))->sendPermissionListTo(creature, listName);
}

bool StructureObjectAdapter::hasPermissionList(const String& listName) {
	return (static_cast<StructureObject*>(stub))->hasPermissionList(listName);
}

bool StructureObjectAdapter::isPermissionListFull(const String& listName) {
	return (static_cast<StructureObject*>(stub))->isPermissionListFull(listName);
}

int StructureObjectAdapter::togglePermission(const String& listName, unsigned const long long objectID) {
	return (static_cast<StructureObject*>(stub))->togglePermission(listName, objectID);
}

int StructureObjectAdapter::grantPermission(const String& listName, unsigned const long long objectID) {
	return (static_cast<StructureObject*>(stub))->grantPermission(listName, objectID);
}

int StructureObjectAdapter::revokePermission(const String& listName, unsigned const long long objectID) {
	return (static_cast<StructureObject*>(stub))->revokePermission(listName, objectID);
}

int StructureObjectAdapter::revokeAllPermissions(unsigned const long long objectID) {
	return (static_cast<StructureObject*>(stub))->revokeAllPermissions(objectID);
}

void StructureObjectAdapter::revokeAllPermissions() {
	(static_cast<StructureObject*>(stub))->revokeAllPermissions();
}

int StructureObjectAdapter::getRedeedCost() {
	return (static_cast<StructureObject*>(stub))->getRedeedCost();
}

CreatureObject* StructureObjectAdapter::getOwnerCreatureObject() {
	return (static_cast<StructureObject*>(stub))->getOwnerCreatureObject();
}

unsigned long long StructureObjectAdapter::getOwnerObjectID() const {
	return (static_cast<StructureObject*>(stub))->getOwnerObjectID();
}

unsigned long long StructureObjectAdapter::getDeedObjectID() const {
	return (static_cast<StructureObject*>(stub))->getDeedObjectID();
}

int StructureObjectAdapter::getLotSize() {
	return (static_cast<StructureObject*>(stub))->getLotSize();
}

void StructureObjectAdapter::setMaintenanceReduced(bool value) {
	(static_cast<StructureObject*>(stub))->setMaintenanceReduced(value);
}

float StructureObjectAdapter::getMaintenanceRate() {
	return (static_cast<StructureObject*>(stub))->getMaintenanceRate();
}

String StructureObjectAdapter::getMaintenanceMods() {
	return (static_cast<StructureObject*>(stub))->getMaintenanceMods();
}

int StructureObjectAdapter::getBaseMaintenanceRate() {
	return (static_cast<StructureObject*>(stub))->getBaseMaintenanceRate();
}

int StructureObjectAdapter::getBasePowerRate() {
	return (static_cast<StructureObject*>(stub))->getBasePowerRate();
}

int StructureObjectAdapter::getSurplusMaintenance() const {
	return (static_cast<StructureObject*>(stub))->getSurplusMaintenance();
}

int StructureObjectAdapter::getSurplusPower() const {
	return (static_cast<StructureObject*>(stub))->getSurplusPower();
}

bool StructureObjectAdapter::isPublicStructure() {
	return (static_cast<StructureObject*>(stub))->isPublicStructure();
}

bool StructureObjectAdapter::isPrivateStructure() {
	return (static_cast<StructureObject*>(stub))->isPrivateStructure();
}

void StructureObjectAdapter::setOwner(unsigned long long objectID) {
	(static_cast<StructureObject*>(stub))->setOwner(objectID);
}

void StructureObjectAdapter::setWaypointID(unsigned long long objectID) {
	(static_cast<StructureObject*>(stub))->setWaypointID(objectID);
}

unsigned long long StructureObjectAdapter::getWaypointID() const {
	return (static_cast<StructureObject*>(stub))->getWaypointID();
}

void StructureObjectAdapter::setDeedObjectID(unsigned long long deedID) {
	(static_cast<StructureObject*>(stub))->setDeedObjectID(deedID);
}

void StructureObjectAdapter::setSurplusMaintenance(int surplus) {
	(static_cast<StructureObject*>(stub))->setSurplusMaintenance(surplus);
}

void StructureObjectAdapter::addMaintenance(float add) {
	(static_cast<StructureObject*>(stub))->addMaintenance(add);
}

void StructureObjectAdapter::subtractMaintenance(float subtract) {
	(static_cast<StructureObject*>(stub))->subtractMaintenance(subtract);
}

void StructureObjectAdapter::payMaintenance(int maintenance, CreditObject* creditObj, bool cashFirst) {
	(static_cast<StructureObject*>(stub))->payMaintenance(maintenance, creditObj, cashFirst);
}

void StructureObjectAdapter::setSurplusPower(int surplus) {
	(static_cast<StructureObject*>(stub))->setSurplusPower(surplus);
}

void StructureObjectAdapter::addPower(float add) {
	(static_cast<StructureObject*>(stub))->addPower(add);
}

bool StructureObjectAdapter::isDecaying() {
	return (static_cast<StructureObject*>(stub))->isDecaying();
}

bool StructureObjectAdapter::isDecayed() {
	return (static_cast<StructureObject*>(stub))->isDecayed();
}

int StructureObjectAdapter::getDecayPercentage() {
	return (static_cast<StructureObject*>(stub))->getDecayPercentage();
}

bool StructureObjectAdapter::isCondemned() {
	return (static_cast<StructureObject*>(stub))->isCondemned();
}

void StructureObjectAdapter::setPublicStructure(bool privacy) {
	(static_cast<StructureObject*>(stub))->setPublicStructure(privacy);
}

bool StructureObjectAdapter::isStructureObject() {
	return (static_cast<StructureObject*>(stub))->isStructureObject();
}

bool StructureObjectAdapter::isCampStructure() {
	return (static_cast<StructureObject*>(stub))->isCampStructure();
}

bool StructureObjectAdapter::isRedeedable() {
	return (static_cast<StructureObject*>(stub))->isRedeedable();
}

String StructureObjectAdapter::getRedeedMessage() {
	return (static_cast<StructureObject*>(stub))->getRedeedMessage();
}

bool StructureObjectAdapter::isCivicStructure() {
	return (static_cast<StructureObject*>(stub))->isCivicStructure();
}

bool StructureObjectAdapter::isCityHall() {
	return (static_cast<StructureObject*>(stub))->isCityHall();
}

bool StructureObjectAdapter::isCommercialStructure() {
	return (static_cast<StructureObject*>(stub))->isCommercialStructure();
}

bool StructureObjectAdapter::isGuildHall() {
	return (static_cast<StructureObject*>(stub))->isGuildHall();
}

void StructureObjectAdapter::migratePermissions() {
	(static_cast<StructureObject*>(stub))->migratePermissions();
}

NavArea* StructureObjectAdapter::getNavArea() {
	return (static_cast<StructureObject*>(stub))->getNavArea();
}

bool StructureObjectAdapter::hasNavmesh() {
	return (static_cast<StructureObject*>(stub))->hasNavmesh();
}

void StructureObjectAdapter::createNavMesh() {
	(static_cast<StructureObject*>(stub))->createNavMesh();
}

/*
 *	StructureObjectHelper
 */

StructureObjectHelper* StructureObjectHelper::staticInitializer = StructureObjectHelper::instance();

StructureObjectHelper::StructureObjectHelper() {
	className = "StructureObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void StructureObjectHelper::finalizeHelper() {
	StructureObjectHelper::finalize();
}

DistributedObject* StructureObjectHelper::instantiateObject() {
	return new StructureObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* StructureObjectHelper::instantiateServant() {
	return new StructureObjectImplementation();
}

DistributedObjectAdapter* StructureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureObjectAdapter(static_cast<StructureObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

