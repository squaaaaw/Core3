/*
 *	autogen/server/zone/objects/group/GroupObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "GroupObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/objects/group/tasks/UpdateNearestMissionForGroupTask.h"

/*
 *	GroupObjectStub
 */

enum {RPC_SENDBASELINESTO__SCENEOBJECT_ = 1552788934,RPC_BROADCASTMESSAGE__BASEMESSAGE_,RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_,RPC_UPDATEPVPSTATUSNEARCREATURE__CREATUREOBJECT_,RPC_SENDSYSTEMMESSAGE__STRING_BOOL_,RPC_ADDMEMBER__CREATUREOBJECT_,RPC_REMOVEMEMBER__CREATUREOBJECT_,RPC_DISBAND__,RPC_MAKELEADER__CREATUREOBJECT_,RPC_HASMEMBER__CREATUREOBJECT_,RPC_HASMEMBER__LONG_,RPC_STARTCHATROOM__CREATUREOBJECT_,RPC_DESTROYCHATROOM__,RPC_GETGROUPHARVESTMODIFIER__CREATUREOBJECT_,RPC_CALCGROUPLEVEL__,RPC_GETGROUPLEVEL__,RPC_GETCHATROOM__,RPC_GETGROUPSIZE__,RPC_GETNUMBEROFPLAYERMEMBERS__,RPC_GETGROUPMEMBER__INT_,RPC_INITIALIZELEADER__CREATUREOBJECT_,RPC_GETLEADER__,RPC_ISGROUPOBJECT__,RPC_HASSQUADLEADER__,RPC_ADDGROUPMODIFIERS__,RPC_REMOVEGROUPMODIFIERS__,RPC_ISOTHERMEMBERPLAYINGMUSIC__CREATUREOBJECT_,RPC_GETBANDSONG__,RPC_SETBANDSONG__STRING_,RPC_GETLOOTRULE__,RPC_SETLOOTRULE__INT_,RPC_GETMASTERLOOTERID__,RPC_SETMASTERLOOTERID__LONG_,RPC_CHECKMASTERLOOTER__CREATUREOBJECT_,RPC_SCHEDULEUPDATENEARESTMISSIONFORGROUP__INT_,RPC_UPDATELOOTRULES__};

GroupObject::GroupObject() : SceneObject(DummyConstructorParameter::instance()) {
	GroupObjectImplementation* _implementation = new GroupObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("GroupObject");
}

GroupObject::GroupObject(DummyConstructorParameter* param) : SceneObject(param) {
	_setClassName("GroupObject");
}

GroupObject::~GroupObject() {
}



void GroupObject::sendBaselinesTo(SceneObject* player) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBaselinesTo(player);
	}
}

void GroupObject::broadcastMessage(BaseMessage* msg) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEMESSAGE_);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessage(msg);
	}
}

void GroupObject::broadcastMessage(CreatureObject* player, BaseMessage* msg, bool sendSelf) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_);
		method.addObjectParameter(player);
		method.addObjectParameter(msg);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else {
		_implementation->broadcastMessage(player, msg, sendSelf);
	}
}

void GroupObject::updatePvPStatusNearCreature(CreatureObject* creature) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEPVPSTATUSNEARCREATURE__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else {
		_implementation->updatePvPStatusNearCreature(creature);
	}
}

void GroupObject::sendSystemMessage(StringIdChatParameter& param, bool sendLeader) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->sendSystemMessage(param, sendLeader);
	}
}

void GroupObject::sendSystemMessage(const String& fullPath, bool sendLeader) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSYSTEMMESSAGE__STRING_BOOL_);
		method.addAsciiParameter(fullPath);
		method.addBooleanParameter(sendLeader);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendSystemMessage(fullPath, sendLeader);
	}
}

void GroupObject::sendSystemMessage(StringIdChatParameter& param, CreatureObject* excluded) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->sendSystemMessage(param, excluded);
	}
}

void GroupObject::addMember(CreatureObject* newMember) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMEMBER__CREATUREOBJECT_);
		method.addObjectParameter(newMember);

		method.executeWithVoidReturn();
	} else {
		_implementation->addMember(newMember);
	}
}

void GroupObject::removeMember(CreatureObject* member) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMEMBER__CREATUREOBJECT_);
		method.addObjectParameter(member);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeMember(member);
	}
}

void GroupObject::disband() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DISBAND__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->disband();
	}
}

void GroupObject::makeLeader(CreatureObject* player) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_MAKELEADER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->makeLeader(player);
	}
}

bool GroupObject::hasMember(CreatureObject* member) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMEMBER__CREATUREOBJECT_);
		method.addObjectParameter(member);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasMember(member);
	}
}

bool GroupObject::hasMember(unsigned long long member) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMEMBER__LONG_);
		method.addUnsignedLongParameter(member);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasMember(member);
	}
}

void GroupObject::startChatRoom(CreatureObject* leader) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTCHATROOM__CREATUREOBJECT_);
		method.addObjectParameter(leader);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->startChatRoom(leader);
	}
}

void GroupObject::destroyChatRoom() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYCHATROOM__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->destroyChatRoom();
	}
}

float GroupObject::getGroupHarvestModifier(CreatureObject* player) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPHARVESTMODIFIER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getGroupHarvestModifier(player);
	}
}

void GroupObject::calcGroupLevel() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCGROUPLEVEL__);

		method.executeWithVoidReturn();
	} else {
		_implementation->calcGroupLevel();
	}
}

int GroupObject::getGroupLevel() const {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getGroupLevel();
	}
}

ChatRoom* GroupObject::getChatRoom() const {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getChatRoom();
	}
}

int GroupObject::getGroupSize() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPSIZE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getGroupSize();
	}
}

int GroupObject::getNumberOfPlayerMembers() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNUMBEROFPLAYERMEMBERS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getNumberOfPlayerMembers();
	}
}

Reference<CreatureObject* > GroupObject::getGroupMember(int index) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPMEMBER__INT_);
		method.addSignedIntParameter(index);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getGroupMember(index);
	}
}

void GroupObject::initializeLeader(CreatureObject* player) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZELEADER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeLeader(player);
	}
}

Reference<CreatureObject* > GroupObject::getLeader() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLEADER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getLeader();
	}
}

GroupList* GroupObject::getGroupList() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getGroupList();
	}
}

bool GroupObject::isGroupObject() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGROUPOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isGroupObject();
	}
}

bool GroupObject::hasSquadLeader() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSQUADLEADER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasSquadLeader();
	}
}

void GroupObject::addGroupModifiers() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDGROUPMODIFIERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->addGroupModifiers();
	}
}

void GroupObject::removeGroupModifiers() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEGROUPMODIFIERS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeGroupModifiers();
	}
}

bool GroupObject::isOtherMemberPlayingMusic(CreatureObject* player) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISOTHERMEMBERPLAYINGMUSIC__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOtherMemberPlayingMusic(player);
	}
}

String GroupObject::getBandSong() const {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBANDSONG__);

		String _return_getBandSong;
		method.executeWithAsciiReturn(_return_getBandSong);
		return _return_getBandSong;
	} else {
		return _implementation->getBandSong();
	}
}

void GroupObject::setBandSong(const String& song) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBANDSONG__STRING_);
		method.addAsciiParameter(song);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setBandSong(song);
	}
}

int GroupObject::getLootRule() const {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOOTRULE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getLootRule();
	}
}

void GroupObject::setLootRule(int newRule) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLOOTRULE__INT_);
		method.addSignedIntParameter(newRule);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setLootRule(newRule);
	}
}

unsigned long long GroupObject::getMasterLooterID() const {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMASTERLOOTERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getMasterLooterID();
	}
}

void GroupObject::setMasterLooterID(unsigned long long newID) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMASTERLOOTERID__LONG_);
		method.addUnsignedLongParameter(newID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMasterLooterID(newID);
	}
}

bool GroupObject::checkMasterLooter(CreatureObject* object) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKMASTERLOOTER__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->checkMasterLooter(object);
	}
}

void GroupObject::scheduleUpdateNearestMissionForGroup(unsigned int planetCRC) {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SCHEDULEUPDATENEARESTMISSIONFORGROUP__INT_);
		method.addUnsignedIntParameter(planetCRC);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->scheduleUpdateNearestMissionForGroup(planetCRC);
	}
}

void GroupObject::updateLootRules() {
	GroupObjectImplementation* _implementation = static_cast<GroupObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELOOTRULES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateLootRules();
	}
}

DistributedObjectServant* GroupObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* GroupObject::_getImplementationForRead() const {
	return _impl;
}

void GroupObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GroupObjectImplementation
 */

GroupObjectImplementation::GroupObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


GroupObjectImplementation::~GroupObjectImplementation() {
}


void GroupObjectImplementation::finalize() {
}

void GroupObjectImplementation::_initializeImplementation() {
	_setClassHelper(GroupObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void GroupObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<GroupObject*>(stub);
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* GroupObjectImplementation::_getStub() {
	return _this.get();
}

GroupObjectImplementation::operator const GroupObject*() {
	return _this.get();
}

void GroupObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void GroupObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void GroupObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void GroupObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void GroupObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void GroupObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void GroupObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void GroupObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("GroupObject");

}

void GroupObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GroupObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GroupObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SceneObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x485e2f44: //GroupObject.groupMembers
		TypeInfo<GroupList >::parseFromBinaryStream(&groupMembers, stream);
		return true;

	case 0xa5e07863: //GroupObject.updateNearestMissionForGroupTasks
		TypeInfo<VectorMap<unsigned int, Reference<UpdateNearestMissionForGroupTask*> > >::parseFromBinaryStream(&updateNearestMissionForGroupTasks, stream);
		return true;

	case 0x3586cfbc: //GroupObject.chatRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&chatRoom, stream);
		return true;

	case 0x62afc634: //GroupObject.groupLevel
		TypeInfo<int >::parseFromBinaryStream(&groupLevel, stream);
		return true;

	case 0x68fdca98: //GroupObject.bandSong
		TypeInfo<String >::parseFromBinaryStream(&bandSong, stream);
		return true;

	case 0x48661f7e: //GroupObject.lootRule
		TypeInfo<int >::parseFromBinaryStream(&lootRule, stream);
		return true;

	case 0xe0e1f76a: //GroupObject.masterLooterID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&masterLooterID, stream);
		return true;

	}

	return false;
}

void GroupObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GroupObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GroupObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SceneObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x485e2f44; //GroupObject.groupMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<GroupList >::toBinaryStream(&groupMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa5e07863; //GroupObject.updateNearestMissionForGroupTasks
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned int, Reference<UpdateNearestMissionForGroupTask*> > >::toBinaryStream(&updateNearestMissionForGroupTasks, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3586cfbc; //GroupObject.chatRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&chatRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x62afc634; //GroupObject.groupLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&groupLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x68fdca98; //GroupObject.bandSong
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&bandSong, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x48661f7e; //GroupObject.lootRule
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&lootRule, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe0e1f76a; //GroupObject.masterLooterID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&masterLooterID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 7;
}

GroupObjectImplementation::GroupObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/group/GroupObject.idl():  		groupLevel = 0;
	groupLevel = 0;
	// server/zone/objects/group/GroupObject.idl():  		Logger.setLoggingName("GroupObject");
	Logger::setLoggingName("GroupObject");
	// server/zone/objects/group/GroupObject.idl():  		chatRoom = null;
	chatRoom = NULL;
	// server/zone/objects/group/GroupObject.idl():  		bandSong = "";
	bandSong = "";
	// server/zone/objects/group/GroupObject.idl():  		lootRule = GroupManager.FREEFORALL;
	lootRule = GroupManager::FREEFORALL;
	// server/zone/objects/group/GroupObject.idl():  		masterLooterID = 0;
	masterLooterID = 0;
}

int GroupObjectImplementation::getGroupLevel() const{
	// server/zone/objects/group/GroupObject.idl():  		return groupLevel;
	return groupLevel;
}

ChatRoom* GroupObjectImplementation::getChatRoom() const{
	// server/zone/objects/group/GroupObject.idl():  		return chatRoom;
	return chatRoom;
}

int GroupObjectImplementation::getGroupSize() {
	// server/zone/objects/group/GroupObject.idl():  		return groupMembers.size();
	return (&groupMembers)->size();
}

Reference<CreatureObject* > GroupObjectImplementation::getGroupMember(int index) {
	// server/zone/objects/group/GroupObject.idl():  		return groupMembers.getSafe(index);
	return (&groupMembers)->getSafe(index);
}

void GroupObjectImplementation::initializeLeader(CreatureObject* player) {
	// server/zone/objects/group/GroupObject.idl():  		groupMembers.add(player);
	(&groupMembers)->add(player);
}

Reference<CreatureObject* > GroupObjectImplementation::getLeader() {
	// server/zone/objects/group/GroupObject.idl():  		}
	if ((&groupMembers)->size() == 0){
	// server/zone/objects/group/GroupObject.idl():  			return null;
	return NULL;
}

	else {
	// server/zone/objects/group/GroupObject.idl():  			return groupMembers.getSafe(0);
	return (&groupMembers)->getSafe(0);
}
}

GroupList* GroupObjectImplementation::getGroupList() {
	// server/zone/objects/group/GroupObject.idl():  		return groupMembers;
	return (&groupMembers);
}

bool GroupObjectImplementation::isGroupObject() {
	// server/zone/objects/group/GroupObject.idl():  		return true;
	return true;
}

String GroupObjectImplementation::getBandSong() const{
	// server/zone/objects/group/GroupObject.idl():  		return bandSong;
	return bandSong;
}

void GroupObjectImplementation::setBandSong(const String& song) {
	// server/zone/objects/group/GroupObject.idl():  		bandSong = song;
	bandSong = song;
}

int GroupObjectImplementation::getLootRule() const{
	// server/zone/objects/group/GroupObject.idl():  		return lootRule;
	return lootRule;
}

void GroupObjectImplementation::setLootRule(int newRule) {
	// server/zone/objects/group/GroupObject.idl():  		lootRule = newRule;
	lootRule = newRule;
}

unsigned long long GroupObjectImplementation::getMasterLooterID() const{
	// server/zone/objects/group/GroupObject.idl():  		return masterLooterID;
	return masterLooterID;
}

void GroupObjectImplementation::setMasterLooterID(unsigned long long newID) {
	// server/zone/objects/group/GroupObject.idl():  		masterLooterID = newID;
	masterLooterID = newID;
}

bool GroupObjectImplementation::checkMasterLooter(CreatureObject* object) {
	// server/zone/objects/group/GroupObject.idl():  		return object.getObjectID() == masterLooterID;
	return object->getObjectID() == masterLooterID;
}

/*
 *	GroupObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


GroupObjectAdapter::GroupObjectAdapter(GroupObject* obj) : SceneObjectAdapter(obj) {
}

void GroupObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendBaselinesTo(player);
			
		}
		break;
	case RPC_BROADCASTMESSAGE__BASEMESSAGE_:
		{
			BaseMessage* msg = static_cast<BaseMessage*>(inv->getObjectParameter());
			
			broadcastMessage(msg);
			
		}
		break;
	case RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			BaseMessage* msg = static_cast<BaseMessage*>(inv->getObjectParameter());
			bool sendSelf = inv->getBooleanParameter();
			
			broadcastMessage(player, msg, sendSelf);
			
		}
		break;
	case RPC_UPDATEPVPSTATUSNEARCREATURE__CREATUREOBJECT_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			updatePvPStatusNearCreature(creature);
			
		}
		break;
	case RPC_SENDSYSTEMMESSAGE__STRING_BOOL_:
		{
			 String fullPath; inv->getAsciiParameter(fullPath);
			bool sendLeader = inv->getBooleanParameter();
			
			sendSystemMessage(fullPath, sendLeader);
			
		}
		break;
	case RPC_ADDMEMBER__CREATUREOBJECT_:
		{
			CreatureObject* newMember = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			addMember(newMember);
			
		}
		break;
	case RPC_REMOVEMEMBER__CREATUREOBJECT_:
		{
			CreatureObject* member = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeMember(member);
			
		}
		break;
	case RPC_DISBAND__:
		{
			
			disband();
			
		}
		break;
	case RPC_MAKELEADER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			makeLeader(player);
			
		}
		break;
	case RPC_HASMEMBER__CREATUREOBJECT_:
		{
			CreatureObject* member = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = hasMember(member);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASMEMBER__LONG_:
		{
			unsigned long long member = inv->getUnsignedLongParameter();
			
			bool _m_res = hasMember(member);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_STARTCHATROOM__CREATUREOBJECT_:
		{
			CreatureObject* leader = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			startChatRoom(leader);
			
		}
		break;
	case RPC_DESTROYCHATROOM__:
		{
			
			destroyChatRoom();
			
		}
		break;
	case RPC_GETGROUPHARVESTMODIFIER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			float _m_res = getGroupHarvestModifier(player);
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_CALCGROUPLEVEL__:
		{
			
			calcGroupLevel();
			
		}
		break;
	case RPC_GETGROUPLEVEL__:
		{
			
			int _m_res = getGroupLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCHATROOM__:
		{
			
			DistributedObject* _m_res = getChatRoom();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETGROUPSIZE__:
		{
			
			int _m_res = getGroupSize();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETNUMBEROFPLAYERMEMBERS__:
		{
			
			int _m_res = getNumberOfPlayerMembers();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETGROUPMEMBER__INT_:
		{
			int index = inv->getSignedIntParameter();
			
			DistributedObject* _m_res = getGroupMember(index);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_INITIALIZELEADER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			initializeLeader(player);
			
		}
		break;
	case RPC_GETLEADER__:
		{
			
			DistributedObject* _m_res = getLeader();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ISGROUPOBJECT__:
		{
			
			bool _m_res = isGroupObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASSQUADLEADER__:
		{
			
			bool _m_res = hasSquadLeader();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDGROUPMODIFIERS__:
		{
			
			addGroupModifiers();
			
		}
		break;
	case RPC_REMOVEGROUPMODIFIERS__:
		{
			
			removeGroupModifiers();
			
		}
		break;
	case RPC_ISOTHERMEMBERPLAYINGMUSIC__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isOtherMemberPlayingMusic(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETBANDSONG__:
		{
			
			String _m_res = getBandSong();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETBANDSONG__STRING_:
		{
			 String song; inv->getAsciiParameter(song);
			
			setBandSong(song);
			
		}
		break;
	case RPC_GETLOOTRULE__:
		{
			
			int _m_res = getLootRule();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETLOOTRULE__INT_:
		{
			int newRule = inv->getSignedIntParameter();
			
			setLootRule(newRule);
			
		}
		break;
	case RPC_GETMASTERLOOTERID__:
		{
			
			unsigned long long _m_res = getMasterLooterID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_SETMASTERLOOTERID__LONG_:
		{
			unsigned long long newID = inv->getUnsignedLongParameter();
			
			setMasterLooterID(newID);
			
		}
		break;
	case RPC_CHECKMASTERLOOTER__CREATUREOBJECT_:
		{
			CreatureObject* object = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = checkMasterLooter(object);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SCHEDULEUPDATENEARESTMISSIONFORGROUP__INT_:
		{
			unsigned int planetCRC = inv->getUnsignedIntParameter();
			
			scheduleUpdateNearestMissionForGroup(planetCRC);
			
		}
		break;
	case RPC_UPDATELOOTRULES__:
		{
			
			updateLootRules();
			
		}
		break;
	default:
		SceneObjectAdapter::invokeMethod(methid, inv);
	}
}

void GroupObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<GroupObject*>(stub))->sendBaselinesTo(player);
}

void GroupObjectAdapter::broadcastMessage(BaseMessage* msg) {
	(static_cast<GroupObject*>(stub))->broadcastMessage(msg);
}

void GroupObjectAdapter::broadcastMessage(CreatureObject* player, BaseMessage* msg, bool sendSelf) {
	(static_cast<GroupObject*>(stub))->broadcastMessage(player, msg, sendSelf);
}

void GroupObjectAdapter::updatePvPStatusNearCreature(CreatureObject* creature) {
	(static_cast<GroupObject*>(stub))->updatePvPStatusNearCreature(creature);
}

void GroupObjectAdapter::sendSystemMessage(const String& fullPath, bool sendLeader) {
	(static_cast<GroupObject*>(stub))->sendSystemMessage(fullPath, sendLeader);
}

void GroupObjectAdapter::addMember(CreatureObject* newMember) {
	(static_cast<GroupObject*>(stub))->addMember(newMember);
}

void GroupObjectAdapter::removeMember(CreatureObject* member) {
	(static_cast<GroupObject*>(stub))->removeMember(member);
}

void GroupObjectAdapter::disband() {
	(static_cast<GroupObject*>(stub))->disband();
}

void GroupObjectAdapter::makeLeader(CreatureObject* player) {
	(static_cast<GroupObject*>(stub))->makeLeader(player);
}

bool GroupObjectAdapter::hasMember(CreatureObject* member) {
	return (static_cast<GroupObject*>(stub))->hasMember(member);
}

bool GroupObjectAdapter::hasMember(unsigned long long member) {
	return (static_cast<GroupObject*>(stub))->hasMember(member);
}

void GroupObjectAdapter::startChatRoom(CreatureObject* leader) {
	(static_cast<GroupObject*>(stub))->startChatRoom(leader);
}

void GroupObjectAdapter::destroyChatRoom() {
	(static_cast<GroupObject*>(stub))->destroyChatRoom();
}

float GroupObjectAdapter::getGroupHarvestModifier(CreatureObject* player) {
	return (static_cast<GroupObject*>(stub))->getGroupHarvestModifier(player);
}

void GroupObjectAdapter::calcGroupLevel() {
	(static_cast<GroupObject*>(stub))->calcGroupLevel();
}

int GroupObjectAdapter::getGroupLevel() const {
	return (static_cast<GroupObject*>(stub))->getGroupLevel();
}

ChatRoom* GroupObjectAdapter::getChatRoom() const {
	return (static_cast<GroupObject*>(stub))->getChatRoom();
}

int GroupObjectAdapter::getGroupSize() {
	return (static_cast<GroupObject*>(stub))->getGroupSize();
}

int GroupObjectAdapter::getNumberOfPlayerMembers() {
	return (static_cast<GroupObject*>(stub))->getNumberOfPlayerMembers();
}

Reference<CreatureObject* > GroupObjectAdapter::getGroupMember(int index) {
	return (static_cast<GroupObject*>(stub))->getGroupMember(index);
}

void GroupObjectAdapter::initializeLeader(CreatureObject* player) {
	(static_cast<GroupObject*>(stub))->initializeLeader(player);
}

Reference<CreatureObject* > GroupObjectAdapter::getLeader() {
	return (static_cast<GroupObject*>(stub))->getLeader();
}

bool GroupObjectAdapter::isGroupObject() {
	return (static_cast<GroupObject*>(stub))->isGroupObject();
}

bool GroupObjectAdapter::hasSquadLeader() {
	return (static_cast<GroupObject*>(stub))->hasSquadLeader();
}

void GroupObjectAdapter::addGroupModifiers() {
	(static_cast<GroupObject*>(stub))->addGroupModifiers();
}

void GroupObjectAdapter::removeGroupModifiers() {
	(static_cast<GroupObject*>(stub))->removeGroupModifiers();
}

bool GroupObjectAdapter::isOtherMemberPlayingMusic(CreatureObject* player) {
	return (static_cast<GroupObject*>(stub))->isOtherMemberPlayingMusic(player);
}

String GroupObjectAdapter::getBandSong() const {
	return (static_cast<GroupObject*>(stub))->getBandSong();
}

void GroupObjectAdapter::setBandSong(const String& song) {
	(static_cast<GroupObject*>(stub))->setBandSong(song);
}

int GroupObjectAdapter::getLootRule() const {
	return (static_cast<GroupObject*>(stub))->getLootRule();
}

void GroupObjectAdapter::setLootRule(int newRule) {
	(static_cast<GroupObject*>(stub))->setLootRule(newRule);
}

unsigned long long GroupObjectAdapter::getMasterLooterID() const {
	return (static_cast<GroupObject*>(stub))->getMasterLooterID();
}

void GroupObjectAdapter::setMasterLooterID(unsigned long long newID) {
	(static_cast<GroupObject*>(stub))->setMasterLooterID(newID);
}

bool GroupObjectAdapter::checkMasterLooter(CreatureObject* object) {
	return (static_cast<GroupObject*>(stub))->checkMasterLooter(object);
}

void GroupObjectAdapter::scheduleUpdateNearestMissionForGroup(unsigned int planetCRC) {
	(static_cast<GroupObject*>(stub))->scheduleUpdateNearestMissionForGroup(planetCRC);
}

void GroupObjectAdapter::updateLootRules() {
	(static_cast<GroupObject*>(stub))->updateLootRules();
}

/*
 *	GroupObjectHelper
 */

GroupObjectHelper* GroupObjectHelper::staticInitializer = GroupObjectHelper::instance();

GroupObjectHelper::GroupObjectHelper() {
	className = "GroupObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void GroupObjectHelper::finalizeHelper() {
	GroupObjectHelper::finalize();
}

DistributedObject* GroupObjectHelper::instantiateObject() {
	return new GroupObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* GroupObjectHelper::instantiateServant() {
	return new GroupObjectImplementation();
}

DistributedObjectAdapter* GroupObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GroupObjectAdapter(static_cast<GroupObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

