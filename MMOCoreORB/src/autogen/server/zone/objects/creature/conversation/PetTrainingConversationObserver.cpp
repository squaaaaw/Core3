/*
 *	autogen/server/zone/objects/creature/conversation/PetTrainingConversationObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "PetTrainingConversationObserver.h"

/*
 *	PetTrainingConversationObserverStub
 */

PetTrainingConversationObserver::PetTrainingConversationObserver(unsigned int convoTemplateCRC) : ConversationObserver(DummyConstructorParameter::instance()) {
	PetTrainingConversationObserverImplementation* _implementation = new PetTrainingConversationObserverImplementation(convoTemplateCRC);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PetTrainingConversationObserver");
}

PetTrainingConversationObserver::PetTrainingConversationObserver(DummyConstructorParameter* param) : ConversationObserver(param) {
	_setClassName("PetTrainingConversationObserver");
}

PetTrainingConversationObserver::~PetTrainingConversationObserver() {
}



DistributedObjectServant* PetTrainingConversationObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PetTrainingConversationObserver::_getImplementationForRead() const {
	return _impl;
}

void PetTrainingConversationObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PetTrainingConversationObserverImplementation
 */

PetTrainingConversationObserverImplementation::PetTrainingConversationObserverImplementation(DummyConstructorParameter* param) : ConversationObserverImplementation(param) {
	_initializeImplementation();
}


PetTrainingConversationObserverImplementation::~PetTrainingConversationObserverImplementation() {
}


void PetTrainingConversationObserverImplementation::finalize() {
}

void PetTrainingConversationObserverImplementation::_initializeImplementation() {
	_setClassHelper(PetTrainingConversationObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PetTrainingConversationObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PetTrainingConversationObserver*>(stub);
	ConversationObserverImplementation::_setStub(stub);
}

DistributedObjectStub* PetTrainingConversationObserverImplementation::_getStub() {
	return _this.get();
}

PetTrainingConversationObserverImplementation::operator const PetTrainingConversationObserver*() {
	return _this.get();
}

void PetTrainingConversationObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PetTrainingConversationObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PetTrainingConversationObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PetTrainingConversationObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PetTrainingConversationObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PetTrainingConversationObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PetTrainingConversationObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PetTrainingConversationObserverImplementation::_serializationHelperMethod() {
	ConversationObserverImplementation::_serializationHelperMethod();

	_setClassName("PetTrainingConversationObserver");

}

void PetTrainingConversationObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PetTrainingConversationObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PetTrainingConversationObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ConversationObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6db8d4e3: //PetTrainingConversationObserver.screenHandler
		TypeInfo<PetTrainingScreenHandler >::parseFromBinaryStream(&screenHandler, stream);
		return true;

	}

	return false;
}

void PetTrainingConversationObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PetTrainingConversationObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PetTrainingConversationObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ConversationObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x6db8d4e3; //PetTrainingConversationObserver.screenHandler
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<PetTrainingScreenHandler >::toBinaryStream(&screenHandler, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

/*
 *	PetTrainingConversationObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PetTrainingConversationObserverAdapter::PetTrainingConversationObserverAdapter(PetTrainingConversationObserver* obj) : ConversationObserverAdapter(obj) {
}

void PetTrainingConversationObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	default:
		ConversationObserverAdapter::invokeMethod(methid, inv);
	}
}

/*
 *	PetTrainingConversationObserverHelper
 */

PetTrainingConversationObserverHelper* PetTrainingConversationObserverHelper::staticInitializer = PetTrainingConversationObserverHelper::instance();

PetTrainingConversationObserverHelper::PetTrainingConversationObserverHelper() {
	className = "PetTrainingConversationObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void PetTrainingConversationObserverHelper::finalizeHelper() {
	PetTrainingConversationObserverHelper::finalize();
}

DistributedObject* PetTrainingConversationObserverHelper::instantiateObject() {
	return new PetTrainingConversationObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* PetTrainingConversationObserverHelper::instantiateServant() {
	return new PetTrainingConversationObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PetTrainingConversationObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PetTrainingConversationObserverAdapter(static_cast<PetTrainingConversationObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

