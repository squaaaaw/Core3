/*
 *	autogen/server/zone/objects/creature/buffs/SquadLeaderBuffObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "SquadLeaderBuffObserver.h"

#include "server/zone/objects/creature/buffs/SquadLeaderBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SquadLeaderBuffObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 2569662509,RPC_HANDLEOBSERVEREVENT__CREATUREOBJECT_SQUADLEADERBUFF_};

SquadLeaderBuffObserver::SquadLeaderBuffObserver(SquadLeaderBuff* b) : Observer(DummyConstructorParameter::instance()) {
	SquadLeaderBuffObserverImplementation* _implementation = new SquadLeaderBuffObserverImplementation(b);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SquadLeaderBuffObserver");
}

SquadLeaderBuffObserver::SquadLeaderBuffObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("SquadLeaderBuffObserver");
}

SquadLeaderBuffObserver::~SquadLeaderBuffObserver() {
}



int SquadLeaderBuffObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	SquadLeaderBuffObserverImplementation* _implementation = static_cast<SquadLeaderBuffObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

void SquadLeaderBuffObserver::handleObserverEvent(CreatureObject* player, SquadLeaderBuff* slBuff) {
	SquadLeaderBuffObserverImplementation* _implementation = static_cast<SquadLeaderBuffObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBSERVEREVENT__CREATUREOBJECT_SQUADLEADERBUFF_);
		method.addObjectParameter(player);
		method.addObjectParameter(slBuff);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleObserverEvent(player, slBuff);
	}
}

DistributedObjectServant* SquadLeaderBuffObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SquadLeaderBuffObserver::_getImplementationForRead() const {
	return _impl;
}

void SquadLeaderBuffObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SquadLeaderBuffObserverImplementation
 */

SquadLeaderBuffObserverImplementation::SquadLeaderBuffObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


SquadLeaderBuffObserverImplementation::~SquadLeaderBuffObserverImplementation() {
}


void SquadLeaderBuffObserverImplementation::finalize() {
}

void SquadLeaderBuffObserverImplementation::_initializeImplementation() {
	_setClassHelper(SquadLeaderBuffObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SquadLeaderBuffObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SquadLeaderBuffObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* SquadLeaderBuffObserverImplementation::_getStub() {
	return _this.get();
}

SquadLeaderBuffObserverImplementation::operator const SquadLeaderBuffObserver*() {
	return _this.get();
}

void SquadLeaderBuffObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SquadLeaderBuffObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SquadLeaderBuffObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SquadLeaderBuffObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SquadLeaderBuffObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SquadLeaderBuffObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SquadLeaderBuffObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SquadLeaderBuffObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("SquadLeaderBuffObserver");

}

void SquadLeaderBuffObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SquadLeaderBuffObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SquadLeaderBuffObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x638b7aaa: //SquadLeaderBuffObserver.buff
		TypeInfo<ManagedWeakReference<SquadLeaderBuff* > >::parseFromBinaryStream(&buff, stream);
		return true;

	}

	return false;
}

void SquadLeaderBuffObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SquadLeaderBuffObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SquadLeaderBuffObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x638b7aaa; //SquadLeaderBuffObserver.buff
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<SquadLeaderBuff* > >::toBinaryStream(&buff, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

SquadLeaderBuffObserverImplementation::SquadLeaderBuffObserverImplementation(SquadLeaderBuff* b) {
	_initializeImplementation();
	// server/zone/objects/creature/buffs/SquadLeaderBuffObserver.idl():  		buff = b;
	buff = b;
}

/*
 *	SquadLeaderBuffObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SquadLeaderBuffObserverAdapter::SquadLeaderBuffObserverAdapter(SquadLeaderBuffObserver* obj) : ObserverAdapter(obj) {
}

void SquadLeaderBuffObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HANDLEOBSERVEREVENT__CREATUREOBJECT_SQUADLEADERBUFF_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SquadLeaderBuff* slBuff = static_cast<SquadLeaderBuff*>(inv->getObjectParameter());
			
			handleObserverEvent(player, slBuff);
			
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

int SquadLeaderBuffObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<SquadLeaderBuffObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void SquadLeaderBuffObserverAdapter::handleObserverEvent(CreatureObject* player, SquadLeaderBuff* slBuff) {
	(static_cast<SquadLeaderBuffObserver*>(stub))->handleObserverEvent(player, slBuff);
}

/*
 *	SquadLeaderBuffObserverHelper
 */

SquadLeaderBuffObserverHelper* SquadLeaderBuffObserverHelper::staticInitializer = SquadLeaderBuffObserverHelper::instance();

SquadLeaderBuffObserverHelper::SquadLeaderBuffObserverHelper() {
	className = "SquadLeaderBuffObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void SquadLeaderBuffObserverHelper::finalizeHelper() {
	SquadLeaderBuffObserverHelper::finalize();
}

DistributedObject* SquadLeaderBuffObserverHelper::instantiateObject() {
	return new SquadLeaderBuffObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* SquadLeaderBuffObserverHelper::instantiateServant() {
	return new SquadLeaderBuffObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SquadLeaderBuffObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SquadLeaderBuffObserverAdapter(static_cast<SquadLeaderBuffObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

