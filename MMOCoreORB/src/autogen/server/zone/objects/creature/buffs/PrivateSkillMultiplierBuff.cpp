/*
 *	autogen/server/zone/objects/creature/buffs/PrivateSkillMultiplierBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "PrivateSkillMultiplierBuff.h"

/*
 *	PrivateSkillMultiplierBuffStub
 */

enum {RPC_APPLYSKILLMODIFIERS__ = 2405941101,RPC_REMOVESKILLMODIFIERS__};

PrivateSkillMultiplierBuff::PrivateSkillMultiplierBuff(CreatureObject* creo, unsigned int buffcrc, float duration, int bufftype) : PrivateBuff(DummyConstructorParameter::instance()) {
	PrivateSkillMultiplierBuffImplementation* _implementation = new PrivateSkillMultiplierBuffImplementation(creo, buffcrc, duration, bufftype);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PrivateSkillMultiplierBuff");
}

PrivateSkillMultiplierBuff::PrivateSkillMultiplierBuff(DummyConstructorParameter* param) : PrivateBuff(param) {
	_setClassName("PrivateSkillMultiplierBuff");
}

PrivateSkillMultiplierBuff::~PrivateSkillMultiplierBuff() {
}



void PrivateSkillMultiplierBuff::applySkillModifiers() {
	PrivateSkillMultiplierBuffImplementation* _implementation = static_cast<PrivateSkillMultiplierBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYSKILLMODIFIERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->applySkillModifiers();
	}
}

void PrivateSkillMultiplierBuff::removeSkillModifiers() {
	PrivateSkillMultiplierBuffImplementation* _implementation = static_cast<PrivateSkillMultiplierBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESKILLMODIFIERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeSkillModifiers();
	}
}

DistributedObjectServant* PrivateSkillMultiplierBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PrivateSkillMultiplierBuff::_getImplementationForRead() const {
	return _impl;
}

void PrivateSkillMultiplierBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PrivateSkillMultiplierBuffImplementation
 */

PrivateSkillMultiplierBuffImplementation::PrivateSkillMultiplierBuffImplementation(DummyConstructorParameter* param) : PrivateBuffImplementation(param) {
	_initializeImplementation();
}


PrivateSkillMultiplierBuffImplementation::~PrivateSkillMultiplierBuffImplementation() {
}


void PrivateSkillMultiplierBuffImplementation::finalize() {
}

void PrivateSkillMultiplierBuffImplementation::_initializeImplementation() {
	_setClassHelper(PrivateSkillMultiplierBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PrivateSkillMultiplierBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PrivateSkillMultiplierBuff*>(stub);
	PrivateBuffImplementation::_setStub(stub);
}

DistributedObjectStub* PrivateSkillMultiplierBuffImplementation::_getStub() {
	return _this.get();
}

PrivateSkillMultiplierBuffImplementation::operator const PrivateSkillMultiplierBuff*() {
	return _this.get();
}

void PrivateSkillMultiplierBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PrivateSkillMultiplierBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PrivateSkillMultiplierBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PrivateSkillMultiplierBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PrivateSkillMultiplierBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PrivateSkillMultiplierBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PrivateSkillMultiplierBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PrivateSkillMultiplierBuffImplementation::_serializationHelperMethod() {
	PrivateBuffImplementation::_serializationHelperMethod();

	_setClassName("PrivateSkillMultiplierBuff");

}

void PrivateSkillMultiplierBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PrivateSkillMultiplierBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PrivateSkillMultiplierBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (PrivateBuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void PrivateSkillMultiplierBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PrivateSkillMultiplierBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PrivateSkillMultiplierBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = PrivateBuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

PrivateSkillMultiplierBuffImplementation::PrivateSkillMultiplierBuffImplementation(CreatureObject* creo, unsigned int buffcrc, float duration, int bufftype) : PrivateBuffImplementation(creo, buffcrc, duration, bufftype) {
	_initializeImplementation();
}

/*
 *	PrivateSkillMultiplierBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PrivateSkillMultiplierBuffAdapter::PrivateSkillMultiplierBuffAdapter(PrivateSkillMultiplierBuff* obj) : PrivateBuffAdapter(obj) {
}

void PrivateSkillMultiplierBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_APPLYSKILLMODIFIERS__:
		{
			
			applySkillModifiers();
			
		}
		break;
	case RPC_REMOVESKILLMODIFIERS__:
		{
			
			removeSkillModifiers();
			
		}
		break;
	default:
		PrivateBuffAdapter::invokeMethod(methid, inv);
	}
}

void PrivateSkillMultiplierBuffAdapter::applySkillModifiers() {
	(static_cast<PrivateSkillMultiplierBuff*>(stub))->applySkillModifiers();
}

void PrivateSkillMultiplierBuffAdapter::removeSkillModifiers() {
	(static_cast<PrivateSkillMultiplierBuff*>(stub))->removeSkillModifiers();
}

/*
 *	PrivateSkillMultiplierBuffHelper
 */

PrivateSkillMultiplierBuffHelper* PrivateSkillMultiplierBuffHelper::staticInitializer = PrivateSkillMultiplierBuffHelper::instance();

PrivateSkillMultiplierBuffHelper::PrivateSkillMultiplierBuffHelper() {
	className = "PrivateSkillMultiplierBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void PrivateSkillMultiplierBuffHelper::finalizeHelper() {
	PrivateSkillMultiplierBuffHelper::finalize();
}

DistributedObject* PrivateSkillMultiplierBuffHelper::instantiateObject() {
	return new PrivateSkillMultiplierBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* PrivateSkillMultiplierBuffHelper::instantiateServant() {
	return new PrivateSkillMultiplierBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PrivateSkillMultiplierBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PrivateSkillMultiplierBuffAdapter(static_cast<PrivateSkillMultiplierBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

