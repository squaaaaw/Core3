/*
 *	autogen/server/zone/objects/creature/buffs/SquadLeaderBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "SquadLeaderBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/creature/buffs/SquadLeaderBuffObserver.h"

/*
 *	SquadLeaderBuffStub
 */

enum {RPC_FINALIZE__ = 49203159,RPC_GETPLAYER__,RPC_GETLEADER__,RPC_ACTIVATE__,RPC_DOACTIVATE__BOOL_,RPC_QUALIFIESFORACTIVATION__,RPC_CHECKRENEW__,RPC_ADDOBSERVERS__,RPC_REMOVEONCLEARBUFFS__};

SquadLeaderBuff::SquadLeaderBuff(CreatureObject* creo, CreatureObject* lead, unsigned int buffCRC, int duration) : Buff(DummyConstructorParameter::instance()) {
	SquadLeaderBuffImplementation* _implementation = new SquadLeaderBuffImplementation(creo, lead, buffCRC, duration);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SquadLeaderBuff");
}

SquadLeaderBuff::SquadLeaderBuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("SquadLeaderBuff");
}

SquadLeaderBuff::~SquadLeaderBuff() {
}



CreatureObject* SquadLeaderBuff::getPlayer() {
	SquadLeaderBuffImplementation* _implementation = static_cast<SquadLeaderBuffImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPlayer();
	}
}

CreatureObject* SquadLeaderBuff::getLeader() {
	SquadLeaderBuffImplementation* _implementation = static_cast<SquadLeaderBuffImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLEADER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getLeader();
	}
}

void SquadLeaderBuff::activate() {
	SquadLeaderBuffImplementation* _implementation = static_cast<SquadLeaderBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->activate();
	}
}

void SquadLeaderBuff::doActivate(bool doCheck) {
	SquadLeaderBuffImplementation* _implementation = static_cast<SquadLeaderBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOACTIVATE__BOOL_);
		method.addBooleanParameter(doCheck);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->doActivate(doCheck);
	}
}

bool SquadLeaderBuff::qualifiesForActivation() {
	SquadLeaderBuffImplementation* _implementation = static_cast<SquadLeaderBuffImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_QUALIFIESFORACTIVATION__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->qualifiesForActivation();
	}
}

bool SquadLeaderBuff::checkRenew() {
	SquadLeaderBuffImplementation* _implementation = static_cast<SquadLeaderBuffImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKRENEW__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->checkRenew();
	}
}

void SquadLeaderBuff::addObservers() {
	SquadLeaderBuffImplementation* _implementation = static_cast<SquadLeaderBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDOBSERVERS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addObservers();
	}
}

bool SquadLeaderBuff::removeOnClearBuffs() const {
	SquadLeaderBuffImplementation* _implementation = static_cast<SquadLeaderBuffImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEONCLEARBUFFS__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->removeOnClearBuffs();
	}
}

DistributedObjectServant* SquadLeaderBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SquadLeaderBuff::_getImplementationForRead() const {
	return _impl;
}

void SquadLeaderBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SquadLeaderBuffImplementation
 */

SquadLeaderBuffImplementation::SquadLeaderBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


SquadLeaderBuffImplementation::~SquadLeaderBuffImplementation() {
	SquadLeaderBuffImplementation::finalize();
}


void SquadLeaderBuffImplementation::_initializeImplementation() {
	_setClassHelper(SquadLeaderBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SquadLeaderBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SquadLeaderBuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* SquadLeaderBuffImplementation::_getStub() {
	return _this.get();
}

SquadLeaderBuffImplementation::operator const SquadLeaderBuff*() {
	return _this.get();
}

void SquadLeaderBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SquadLeaderBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SquadLeaderBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SquadLeaderBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SquadLeaderBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SquadLeaderBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SquadLeaderBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SquadLeaderBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("SquadLeaderBuff");

}

void SquadLeaderBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SquadLeaderBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SquadLeaderBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x13e3fb0f: //SquadLeaderBuff.playerObserver
		TypeInfo<ManagedReference<SquadLeaderBuffObserver* > >::parseFromBinaryStream(&playerObserver, stream);
		return true;

	case 0x8281ae99: //SquadLeaderBuff.leaderObserver
		TypeInfo<ManagedReference<SquadLeaderBuffObserver* > >::parseFromBinaryStream(&leaderObserver, stream);
		return true;

	case 0xc3fc01df: //SquadLeaderBuff.player
		TypeInfo<ManagedReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;

	case 0xdd4c4790: //SquadLeaderBuff.leader
		TypeInfo<ManagedReference<CreatureObject* > >::parseFromBinaryStream(&leader, stream);
		return true;

	}

	return false;
}

void SquadLeaderBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SquadLeaderBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SquadLeaderBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x13e3fb0f; //SquadLeaderBuff.playerObserver
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SquadLeaderBuffObserver* > >::toBinaryStream(&playerObserver, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8281ae99; //SquadLeaderBuff.leaderObserver
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SquadLeaderBuffObserver* > >::toBinaryStream(&leaderObserver, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc3fc01df; //SquadLeaderBuff.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xdd4c4790; //SquadLeaderBuff.leader
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<CreatureObject* > >::toBinaryStream(&leader, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 4;
}

SquadLeaderBuffImplementation::SquadLeaderBuffImplementation(CreatureObject* creo, CreatureObject* lead, unsigned int buffCRC, int duration) : BuffImplementation(creo, buffCRC, duration, BuffType::SKILL) {
	_initializeImplementation();
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		player = creo;
	player = creo;
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader = lead;
	leader = lead;
}

void SquadLeaderBuffImplementation::finalize() {
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		player.dropObserver(ObserverEventType.PARENTCHANGED, playerObserver);
	player->dropObserver(ObserverEventType::PARENTCHANGED, playerObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		player.dropObserver(ObserverEventType.BHTEFCHANGED, playerObserver);
	player->dropObserver(ObserverEventType::BHTEFCHANGED, playerObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		player.dropObserver(ObserverEventType.FACTIONCHANGED, playerObserver);
	player->dropObserver(ObserverEventType::FACTIONCHANGED, playerObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader.dropObserver(ObserverEventType.PARENTCHANGED, leaderObserver);
	leader->dropObserver(ObserverEventType::PARENTCHANGED, leaderObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader.dropObserver(ObserverEventType.FACTIONCHANGED, leaderObserver);
	leader->dropObserver(ObserverEventType::FACTIONCHANGED, leaderObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader.dropObserver(ObserverEventType.OBJECTDESTRUCTION, leaderObserver);
	leader->dropObserver(ObserverEventType::OBJECTDESTRUCTION, leaderObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader.dropObserver(ObserverEventType.CREATUREREVIVED, leaderObserver);
	leader->dropObserver(ObserverEventType::CREATUREREVIVED, leaderObserver);
}

CreatureObject* SquadLeaderBuffImplementation::getPlayer() {
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		return player;
	return player;
}

CreatureObject* SquadLeaderBuffImplementation::getLeader() {
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		return leader;
	return leader;
}

void SquadLeaderBuffImplementation::activate() {
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		if 
	if (player == NULL)	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  			return;
	return;
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		doActivate(
	if (leader == NULL || player->getGroupID() != leader->getGroupID()){
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  			player.removeBuff(super.buffCRC);
	player->removeBuff(BuffImplementation::buffCRC);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  			return;
	return;
}
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		doActivate(true);
	doActivate(true);
}

void SquadLeaderBuffImplementation::doActivate(bool doCheck) {
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		super.
	if (doCheck && !qualifiesForActivation())	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  			return;
	return;
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		super.activate();
	BuffImplementation::activate();
}

bool SquadLeaderBuffImplementation::qualifiesForActivation() {
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		return 
	if (player == NULL || leader == NULL || leader->isDead() || leader->isIncapacitated())	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  			return false;
	return false;
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		return SquadLeaderCommand.isValidGroupAbilityTarget(leader, player, false);
	return SquadLeaderCommand::isValidGroupAbilityTarget(leader, player, false);
}

bool SquadLeaderBuffImplementation::checkRenew() {
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		return 
	if (leader == NULL || player == NULL || player->getGroupID() != leader->getGroupID()){
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  			return false;
	return false;
}
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		return true;
	return true;
}

void SquadLeaderBuffImplementation::addObservers() {
	ManagedReference<SquadLeaderBuffObserver*> _ref0;
	ManagedReference<SquadLeaderBuffObserver*> _ref1;
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		SquadLeaderBuffObserver playObserver = new SquadLeaderBuffObserver(this);
	ManagedReference<SquadLeaderBuffObserver* > playObserver = _ref0 = new SquadLeaderBuffObserver(_this.get());
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		ObjectManager.instance().persistObject(playObserver, 1, "buffs");
	ObjectManager::instance()->persistObject(playObserver, 1, "buffs");
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		playerObserver = playObserver;
	playerObserver = playObserver;
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		SquadLeaderBuffObserver leadObserver = new SquadLeaderBuffObserver(this);
	ManagedReference<SquadLeaderBuffObserver* > leadObserver = _ref1 = new SquadLeaderBuffObserver(_this.get());
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		ObjectManager.instance().persistObject(leadObserver, 1, "buffs");
	ObjectManager::instance()->persistObject(leadObserver, 1, "buffs");
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leaderObserver = leadObserver;
	leaderObserver = leadObserver;
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		player.registerObserver(ObserverEventType.PARENTCHANGED, playerObserver);
	player->registerObserver(ObserverEventType::PARENTCHANGED, playerObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		player.registerObserver(ObserverEventType.BHTEFCHANGED, playerObserver);
	player->registerObserver(ObserverEventType::BHTEFCHANGED, playerObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		player.registerObserver(ObserverEventType.FACTIONCHANGED, playerObserver);
	player->registerObserver(ObserverEventType::FACTIONCHANGED, playerObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader.registerObserver(ObserverEventType.PARENTCHANGED, leaderObserver);
	leader->registerObserver(ObserverEventType::PARENTCHANGED, leaderObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader.registerObserver(ObserverEventType.FACTIONCHANGED, leaderObserver);
	leader->registerObserver(ObserverEventType::FACTIONCHANGED, leaderObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader.registerObserver(ObserverEventType.OBJECTDESTRUCTION, leaderObserver);
	leader->registerObserver(ObserverEventType::OBJECTDESTRUCTION, leaderObserver);
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		leader.registerObserver(ObserverEventType.CREATUREREVIVED, leaderObserver);
	leader->registerObserver(ObserverEventType::CREATUREREVIVED, leaderObserver);
}

bool SquadLeaderBuffImplementation::removeOnClearBuffs() const{
	// server/zone/objects/creature/buffs/SquadLeaderBuff.idl():  		return false;
	return false;
}

/*
 *	SquadLeaderBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SquadLeaderBuffAdapter::SquadLeaderBuffAdapter(SquadLeaderBuff* obj) : BuffAdapter(obj) {
}

void SquadLeaderBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_FINALIZE__:
		{
			
			finalize();
			
		}
		break;
	case RPC_GETPLAYER__:
		{
			
			DistributedObject* _m_res = getPlayer();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETLEADER__:
		{
			
			DistributedObject* _m_res = getLeader();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ACTIVATE__:
		{
			
			activate();
			
		}
		break;
	case RPC_DOACTIVATE__BOOL_:
		{
			bool doCheck = inv->getBooleanParameter();
			
			doActivate(doCheck);
			
		}
		break;
	case RPC_QUALIFIESFORACTIVATION__:
		{
			
			bool _m_res = qualifiesForActivation();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CHECKRENEW__:
		{
			
			bool _m_res = checkRenew();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDOBSERVERS__:
		{
			
			addObservers();
			
		}
		break;
	case RPC_REMOVEONCLEARBUFFS__:
		{
			
			bool _m_res = removeOnClearBuffs();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		BuffAdapter::invokeMethod(methid, inv);
	}
}

void SquadLeaderBuffAdapter::finalize() {
	(static_cast<SquadLeaderBuff*>(stub))->finalize();
}

CreatureObject* SquadLeaderBuffAdapter::getPlayer() {
	return (static_cast<SquadLeaderBuff*>(stub))->getPlayer();
}

CreatureObject* SquadLeaderBuffAdapter::getLeader() {
	return (static_cast<SquadLeaderBuff*>(stub))->getLeader();
}

void SquadLeaderBuffAdapter::activate() {
	(static_cast<SquadLeaderBuff*>(stub))->activate();
}

void SquadLeaderBuffAdapter::doActivate(bool doCheck) {
	(static_cast<SquadLeaderBuff*>(stub))->doActivate(doCheck);
}

bool SquadLeaderBuffAdapter::qualifiesForActivation() {
	return (static_cast<SquadLeaderBuff*>(stub))->qualifiesForActivation();
}

bool SquadLeaderBuffAdapter::checkRenew() {
	return (static_cast<SquadLeaderBuff*>(stub))->checkRenew();
}

void SquadLeaderBuffAdapter::addObservers() {
	(static_cast<SquadLeaderBuff*>(stub))->addObservers();
}

bool SquadLeaderBuffAdapter::removeOnClearBuffs() const {
	return (static_cast<SquadLeaderBuff*>(stub))->removeOnClearBuffs();
}

/*
 *	SquadLeaderBuffHelper
 */

SquadLeaderBuffHelper* SquadLeaderBuffHelper::staticInitializer = SquadLeaderBuffHelper::instance();

SquadLeaderBuffHelper::SquadLeaderBuffHelper() {
	className = "SquadLeaderBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void SquadLeaderBuffHelper::finalizeHelper() {
	SquadLeaderBuffHelper::finalize();
}

DistributedObject* SquadLeaderBuffHelper::instantiateObject() {
	return new SquadLeaderBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* SquadLeaderBuffHelper::instantiateServant() {
	return new SquadLeaderBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SquadLeaderBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SquadLeaderBuffAdapter(static_cast<SquadLeaderBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

