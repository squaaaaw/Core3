/*
 *	autogen/server/zone/objects/creature/buffs/GallopBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "GallopBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	GallopBuffStub
 */

enum {RPC_ACTIVATE__BOOL_ = 425045282,RPC_DEACTIVATE__BOOL_};

GallopBuff::GallopBuff(CreatureObject* creo, unsigned int buffcrc, float duration) : PlayerVehicleBuff(DummyConstructorParameter::instance()) {
	GallopBuffImplementation* _implementation = new GallopBuffImplementation(creo, buffcrc, duration);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("GallopBuff");
}

GallopBuff::GallopBuff(DummyConstructorParameter* param) : PlayerVehicleBuff(param) {
	_setClassName("GallopBuff");
}

GallopBuff::~GallopBuff() {
}



void GallopBuff::activate(bool applyModifiers) {
	GallopBuffImplementation* _implementation = static_cast<GallopBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else {
		_implementation->activate(applyModifiers);
	}
}

void GallopBuff::deactivate(bool applyModifiers) {
	GallopBuffImplementation* _implementation = static_cast<GallopBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else {
		_implementation->deactivate(applyModifiers);
	}
}

DistributedObjectServant* GallopBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* GallopBuff::_getImplementationForRead() const {
	return _impl;
}

void GallopBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GallopBuffImplementation
 */

GallopBuffImplementation::GallopBuffImplementation(DummyConstructorParameter* param) : PlayerVehicleBuffImplementation(param) {
	_initializeImplementation();
}


GallopBuffImplementation::~GallopBuffImplementation() {
}


void GallopBuffImplementation::finalize() {
}

void GallopBuffImplementation::_initializeImplementation() {
	_setClassHelper(GallopBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void GallopBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<GallopBuff*>(stub);
	PlayerVehicleBuffImplementation::_setStub(stub);
}

DistributedObjectStub* GallopBuffImplementation::_getStub() {
	return _this.get();
}

GallopBuffImplementation::operator const GallopBuff*() {
	return _this.get();
}

void GallopBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void GallopBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void GallopBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void GallopBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void GallopBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void GallopBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void GallopBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void GallopBuffImplementation::_serializationHelperMethod() {
	PlayerVehicleBuffImplementation::_serializationHelperMethod();

	_setClassName("GallopBuff");

}

void GallopBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GallopBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GallopBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (PlayerVehicleBuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void GallopBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GallopBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GallopBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = PlayerVehicleBuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

GallopBuffImplementation::GallopBuffImplementation(CreatureObject* creo, unsigned int buffcrc, float duration) : PlayerVehicleBuffImplementation(creo, buffcrc, duration, BuffType::SKILL) {
	_initializeImplementation();
}

void GallopBuffImplementation::activate(bool applyModifiers) {
	// server/zone/objects/creature/buffs/GallopBuff.idl():  		super.activate(true);
	PlayerVehicleBuffImplementation::activate(true);
	// server/zone/objects/creature/buffs/GallopBuff.idl():  		SceneObject rider = super.creature.getSlottedObject("rider");
	ManagedReference<SceneObject* > rider = PlayerVehicleBuffImplementation::creature.getForUpdate().get()->getSlottedObject("rider");
	// server/zone/objects/creature/buffs/GallopBuff.idl():  		CreatureObject 
	if (rider == NULL)	// server/zone/objects/creature/buffs/GallopBuff.idl():  			return;
	return;
	// server/zone/objects/creature/buffs/GallopBuff.idl():  		CreatureObject creo = rider.asCreatureObject();
	ManagedReference<CreatureObject* > creo = rider->asCreatureObject();
	// server/zone/objects/creature/buffs/GallopBuff.idl():  	}
	if (creo != NULL)	// server/zone/objects/creature/buffs/GallopBuff.idl():  			creo.removeMountedCombatSlow();
	creo->removeMountedCombatSlow();
}

void GallopBuffImplementation::deactivate(bool applyModifiers) {
	// server/zone/objects/creature/buffs/GallopBuff.idl():  		super.deactivate(true);
	PlayerVehicleBuffImplementation::deactivate(true);
	// server/zone/objects/creature/buffs/GallopBuff.idl():  		SceneObject rider = super.creature.getSlottedObject("rider");
	ManagedReference<SceneObject* > rider = PlayerVehicleBuffImplementation::creature.getForUpdate().get()->getSlottedObject("rider");
	// server/zone/objects/creature/buffs/GallopBuff.idl():  		CreatureObject 
	if (rider == NULL)	// server/zone/objects/creature/buffs/GallopBuff.idl():  			return;
	return;
	// server/zone/objects/creature/buffs/GallopBuff.idl():  		CreatureObject creo = rider.asCreatureObject();
	ManagedReference<CreatureObject* > creo = rider->asCreatureObject();
	// server/zone/objects/creature/buffs/GallopBuff.idl():  	}
	if (creo != NULL)	// server/zone/objects/creature/buffs/GallopBuff.idl():  			creo.addMountedCombatSlow();
	creo->addMountedCombatSlow();
}

/*
 *	GallopBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


GallopBuffAdapter::GallopBuffAdapter(GallopBuff* obj) : PlayerVehicleBuffAdapter(obj) {
}

void GallopBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ACTIVATE__BOOL_:
		{
			bool applyModifiers = inv->getBooleanParameter();
			
			activate(applyModifiers);
			
		}
		break;
	case RPC_DEACTIVATE__BOOL_:
		{
			bool applyModifiers = inv->getBooleanParameter();
			
			deactivate(applyModifiers);
			
		}
		break;
	default:
		PlayerVehicleBuffAdapter::invokeMethod(methid, inv);
	}
}

void GallopBuffAdapter::activate(bool applyModifiers) {
	(static_cast<GallopBuff*>(stub))->activate(applyModifiers);
}

void GallopBuffAdapter::deactivate(bool applyModifiers) {
	(static_cast<GallopBuff*>(stub))->deactivate(applyModifiers);
}

/*
 *	GallopBuffHelper
 */

GallopBuffHelper* GallopBuffHelper::staticInitializer = GallopBuffHelper::instance();

GallopBuffHelper::GallopBuffHelper() {
	className = "GallopBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void GallopBuffHelper::finalizeHelper() {
	GallopBuffHelper::finalize();
}

DistributedObject* GallopBuffHelper::instantiateObject() {
	return new GallopBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* GallopBuffHelper::instantiateServant() {
	return new GallopBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GallopBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GallopBuffAdapter(static_cast<GallopBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

