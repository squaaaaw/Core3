/*
 *	autogen/server/zone/objects/creature/buffs/PlayerVehicleBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerVehicleBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	PlayerVehicleBuffStub
 */

enum {RPC_APPLYALLMODIFIERS__ = 2932949861,RPC_REMOVEALLMODIFIERS__,RPC_ACTIVATE__BOOL_,RPC_DEACTIVATE__BOOL_,RPC_UPDATERIDERSPEEDS__};

PlayerVehicleBuff::PlayerVehicleBuff(CreatureObject* creo, unsigned int buffcrc, float duration, int bufftype) : Buff(DummyConstructorParameter::instance()) {
	PlayerVehicleBuffImplementation* _implementation = new PlayerVehicleBuffImplementation(creo, buffcrc, duration, bufftype);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PlayerVehicleBuff");
}

PlayerVehicleBuff::PlayerVehicleBuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("PlayerVehicleBuff");
}

PlayerVehicleBuff::~PlayerVehicleBuff() {
}



void PlayerVehicleBuff::applyAllModifiers() {
	PlayerVehicleBuffImplementation* _implementation = static_cast<PlayerVehicleBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYALLMODIFIERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->applyAllModifiers();
	}
}

void PlayerVehicleBuff::removeAllModifiers() {
	PlayerVehicleBuffImplementation* _implementation = static_cast<PlayerVehicleBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLMODIFIERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeAllModifiers();
	}
}

void PlayerVehicleBuff::activate(bool applyModifiers) {
	PlayerVehicleBuffImplementation* _implementation = static_cast<PlayerVehicleBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else {
		_implementation->activate(applyModifiers);
	}
}

void PlayerVehicleBuff::deactivate(bool removeModifiers) {
	PlayerVehicleBuffImplementation* _implementation = static_cast<PlayerVehicleBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATE__BOOL_);
		method.addBooleanParameter(removeModifiers);

		method.executeWithVoidReturn();
	} else {
		_implementation->deactivate(removeModifiers);
	}
}

void PlayerVehicleBuff::updateRiderSpeeds() {
	PlayerVehicleBuffImplementation* _implementation = static_cast<PlayerVehicleBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATERIDERSPEEDS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateRiderSpeeds();
	}
}

DistributedObjectServant* PlayerVehicleBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PlayerVehicleBuff::_getImplementationForRead() const {
	return _impl;
}

void PlayerVehicleBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlayerVehicleBuffImplementation
 */

PlayerVehicleBuffImplementation::PlayerVehicleBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


PlayerVehicleBuffImplementation::~PlayerVehicleBuffImplementation() {
}


void PlayerVehicleBuffImplementation::finalize() {
}

void PlayerVehicleBuffImplementation::_initializeImplementation() {
	_setClassHelper(PlayerVehicleBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PlayerVehicleBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PlayerVehicleBuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerVehicleBuffImplementation::_getStub() {
	return _this.get();
}

PlayerVehicleBuffImplementation::operator const PlayerVehicleBuff*() {
	return _this.get();
}

void PlayerVehicleBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PlayerVehicleBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PlayerVehicleBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PlayerVehicleBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PlayerVehicleBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PlayerVehicleBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PlayerVehicleBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PlayerVehicleBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("PlayerVehicleBuff");

}

void PlayerVehicleBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PlayerVehicleBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlayerVehicleBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void PlayerVehicleBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerVehicleBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerVehicleBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

PlayerVehicleBuffImplementation::PlayerVehicleBuffImplementation(CreatureObject* creo, unsigned int buffcrc, float duration, int bufftype) : BuffImplementation(creo, buffcrc, duration, bufftype) {
	_initializeImplementation();
}

/*
 *	PlayerVehicleBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PlayerVehicleBuffAdapter::PlayerVehicleBuffAdapter(PlayerVehicleBuff* obj) : BuffAdapter(obj) {
}

void PlayerVehicleBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_APPLYALLMODIFIERS__:
		{
			
			applyAllModifiers();
			
		}
		break;
	case RPC_REMOVEALLMODIFIERS__:
		{
			
			removeAllModifiers();
			
		}
		break;
	case RPC_ACTIVATE__BOOL_:
		{
			bool applyModifiers = inv->getBooleanParameter();
			
			activate(applyModifiers);
			
		}
		break;
	case RPC_DEACTIVATE__BOOL_:
		{
			bool removeModifiers = inv->getBooleanParameter();
			
			deactivate(removeModifiers);
			
		}
		break;
	case RPC_UPDATERIDERSPEEDS__:
		{
			
			updateRiderSpeeds();
			
		}
		break;
	default:
		BuffAdapter::invokeMethod(methid, inv);
	}
}

void PlayerVehicleBuffAdapter::applyAllModifiers() {
	(static_cast<PlayerVehicleBuff*>(stub))->applyAllModifiers();
}

void PlayerVehicleBuffAdapter::removeAllModifiers() {
	(static_cast<PlayerVehicleBuff*>(stub))->removeAllModifiers();
}

void PlayerVehicleBuffAdapter::activate(bool applyModifiers) {
	(static_cast<PlayerVehicleBuff*>(stub))->activate(applyModifiers);
}

void PlayerVehicleBuffAdapter::deactivate(bool removeModifiers) {
	(static_cast<PlayerVehicleBuff*>(stub))->deactivate(removeModifiers);
}

void PlayerVehicleBuffAdapter::updateRiderSpeeds() {
	(static_cast<PlayerVehicleBuff*>(stub))->updateRiderSpeeds();
}

/*
 *	PlayerVehicleBuffHelper
 */

PlayerVehicleBuffHelper* PlayerVehicleBuffHelper::staticInitializer = PlayerVehicleBuffHelper::instance();

PlayerVehicleBuffHelper::PlayerVehicleBuffHelper() {
	className = "PlayerVehicleBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlayerVehicleBuffHelper::finalizeHelper() {
	PlayerVehicleBuffHelper::finalize();
}

DistributedObject* PlayerVehicleBuffHelper::instantiateObject() {
	return new PlayerVehicleBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerVehicleBuffHelper::instantiateServant() {
	return new PlayerVehicleBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerVehicleBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerVehicleBuffAdapter(static_cast<PlayerVehicleBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

