/*
 *	autogen/server/zone/objects/creature/buffs/ConcealBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "ConcealBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	ConcealBuffStub
 */

enum {RPC_GETBUFFGIVER__ = 3524884704,RPC_GETPLANETNAME__};

ConcealBuff::ConcealBuff(CreatureObject* creo, CreatureObject* ranger, unsigned int buffCRC, int duration, String& zoneName) : Buff(DummyConstructorParameter::instance()) {
	ConcealBuffImplementation* _implementation = new ConcealBuffImplementation(creo, ranger, buffCRC, duration, zoneName);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ConcealBuff");
}

ConcealBuff::ConcealBuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("ConcealBuff");
}

ConcealBuff::~ConcealBuff() {
}



CreatureObject* ConcealBuff::getBuffGiver() {
	ConcealBuffImplementation* _implementation = static_cast<ConcealBuffImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBUFFGIVER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getBuffGiver();
	}
}

String ConcealBuff::getPlanetName() {
	ConcealBuffImplementation* _implementation = static_cast<ConcealBuffImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETNAME__);

		String _return_getPlanetName;
		method.executeWithAsciiReturn(_return_getPlanetName);
		return _return_getPlanetName;
	} else {
		return _implementation->getPlanetName();
	}
}

DistributedObjectServant* ConcealBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ConcealBuff::_getImplementationForRead() const {
	return _impl;
}

void ConcealBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ConcealBuffImplementation
 */

ConcealBuffImplementation::ConcealBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


ConcealBuffImplementation::~ConcealBuffImplementation() {
}


void ConcealBuffImplementation::finalize() {
}

void ConcealBuffImplementation::_initializeImplementation() {
	_setClassHelper(ConcealBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ConcealBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ConcealBuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* ConcealBuffImplementation::_getStub() {
	return _this.get();
}

ConcealBuffImplementation::operator const ConcealBuff*() {
	return _this.get();
}

void ConcealBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ConcealBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ConcealBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ConcealBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ConcealBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ConcealBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ConcealBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ConcealBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("ConcealBuff");

}

void ConcealBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ConcealBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ConcealBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x33b74646: //ConcealBuff.buffGiver
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&buffGiver, stream);
		return true;

	case 0x64ab0db4: //ConcealBuff.planetName
		TypeInfo<String >::parseFromBinaryStream(&planetName, stream);
		return true;

	}

	return false;
}

void ConcealBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ConcealBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ConcealBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x33b74646; //ConcealBuff.buffGiver
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&buffGiver, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x64ab0db4; //ConcealBuff.planetName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&planetName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

ConcealBuffImplementation::ConcealBuffImplementation(CreatureObject* creo, CreatureObject* ranger, unsigned int buffCRC, int duration, String& zoneName) : BuffImplementation(creo, buffCRC, duration, BuffType::SKILL) {
	_initializeImplementation();
	// server/zone/objects/creature/buffs/ConcealBuff.idl():  		buffGiver = ranger;
	buffGiver = ranger;
	// server/zone/objects/creature/buffs/ConcealBuff.idl():  		planetName = zoneName;
	planetName = zoneName;
}

CreatureObject* ConcealBuffImplementation::getBuffGiver() {
	// server/zone/objects/creature/buffs/ConcealBuff.idl():  		CreatureObject creo = buffGiver;
	ManagedReference<CreatureObject* > creo = buffGiver;
	// server/zone/objects/creature/buffs/ConcealBuff.idl():  		return creo;
	return creo;
}

String ConcealBuffImplementation::getPlanetName() {
	// server/zone/objects/creature/buffs/ConcealBuff.idl():  		return planetName;
	return planetName;
}

/*
 *	ConcealBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ConcealBuffAdapter::ConcealBuffAdapter(ConcealBuff* obj) : BuffAdapter(obj) {
}

void ConcealBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETBUFFGIVER__:
		{
			
			DistributedObject* _m_res = getBuffGiver();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETPLANETNAME__:
		{
			
			String _m_res = getPlanetName();
			resp->insertAscii(_m_res);
		}
		break;
	default:
		BuffAdapter::invokeMethod(methid, inv);
	}
}

CreatureObject* ConcealBuffAdapter::getBuffGiver() {
	return (static_cast<ConcealBuff*>(stub))->getBuffGiver();
}

String ConcealBuffAdapter::getPlanetName() {
	return (static_cast<ConcealBuff*>(stub))->getPlanetName();
}

/*
 *	ConcealBuffHelper
 */

ConcealBuffHelper* ConcealBuffHelper::staticInitializer = ConcealBuffHelper::instance();

ConcealBuffHelper::ConcealBuffHelper() {
	className = "ConcealBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void ConcealBuffHelper::finalizeHelper() {
	ConcealBuffHelper::finalize();
}

DistributedObject* ConcealBuffHelper::instantiateObject() {
	return new ConcealBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* ConcealBuffHelper::instantiateServant() {
	return new ConcealBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ConcealBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ConcealBuffAdapter(static_cast<ConcealBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

