/*
 *	autogen/server/zone/objects/creature/buffs/PrivateBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "PrivateBuff.h"

/*
 *	PrivateBuffStub
 */

enum {RPC_ACTIVATE__BOOL_ = 1987509396,RPC_DEACTIVATE__BOOL_};

PrivateBuff::PrivateBuff(CreatureObject* creo, unsigned int buffcrc, float duration, int bufftype) : Buff(DummyConstructorParameter::instance()) {
	PrivateBuffImplementation* _implementation = new PrivateBuffImplementation(creo, buffcrc, duration, bufftype);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PrivateBuff");
}

PrivateBuff::PrivateBuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("PrivateBuff");
}

PrivateBuff::~PrivateBuff() {
}



void PrivateBuff::activate(bool applyModifiers) {
	PrivateBuffImplementation* _implementation = static_cast<PrivateBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->activate(applyModifiers);
	}
}

void PrivateBuff::deactivate(bool removeModifiers) {
	PrivateBuffImplementation* _implementation = static_cast<PrivateBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATE__BOOL_);
		method.addBooleanParameter(removeModifiers);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->deactivate(removeModifiers);
	}
}

DistributedObjectServant* PrivateBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PrivateBuff::_getImplementationForRead() const {
	return _impl;
}

void PrivateBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PrivateBuffImplementation
 */

PrivateBuffImplementation::PrivateBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


PrivateBuffImplementation::~PrivateBuffImplementation() {
}


void PrivateBuffImplementation::finalize() {
}

void PrivateBuffImplementation::_initializeImplementation() {
	_setClassHelper(PrivateBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PrivateBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PrivateBuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* PrivateBuffImplementation::_getStub() {
	return _this.get();
}

PrivateBuffImplementation::operator const PrivateBuff*() {
	return _this.get();
}

void PrivateBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PrivateBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PrivateBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PrivateBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PrivateBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PrivateBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PrivateBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PrivateBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("PrivateBuff");

}

void PrivateBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PrivateBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PrivateBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void PrivateBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PrivateBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PrivateBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

PrivateBuffImplementation::PrivateBuffImplementation(CreatureObject* creo, unsigned int buffcrc, float duration, int bufftype) : BuffImplementation(creo, buffcrc, duration, bufftype) {
	_initializeImplementation();
}

void PrivateBuffImplementation::activate(bool applyModifiers) {
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  		scheduleBuffEvent(
	if (applyModifiers){
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  			applyAttributeModifiers();
	applyAttributeModifiers();
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  			applySkillModifiers();
	applySkillModifiers();
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  			applyStates();
	applyStates();
}
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  		scheduleBuffEvent();
	scheduleBuffEvent();
}

void PrivateBuffImplementation::deactivate(bool removeModifiers) {
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  		clearBuffEvent(
	if (removeModifiers){
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  			removeAttributeModifiers();
	removeAttributeModifiers();
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  			removeSkillModifiers();
	removeSkillModifiers();
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  			removeStates();
	removeStates();
}
	// server/zone/objects/creature/buffs/PrivateBuff.idl():  		clearBuffEvent();
	clearBuffEvent();
}

/*
 *	PrivateBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PrivateBuffAdapter::PrivateBuffAdapter(PrivateBuff* obj) : BuffAdapter(obj) {
}

void PrivateBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ACTIVATE__BOOL_:
		{
			bool applyModifiers = inv->getBooleanParameter();
			
			activate(applyModifiers);
			
		}
		break;
	case RPC_DEACTIVATE__BOOL_:
		{
			bool removeModifiers = inv->getBooleanParameter();
			
			deactivate(removeModifiers);
			
		}
		break;
	default:
		BuffAdapter::invokeMethod(methid, inv);
	}
}

void PrivateBuffAdapter::activate(bool applyModifiers) {
	(static_cast<PrivateBuff*>(stub))->activate(applyModifiers);
}

void PrivateBuffAdapter::deactivate(bool removeModifiers) {
	(static_cast<PrivateBuff*>(stub))->deactivate(removeModifiers);
}

/*
 *	PrivateBuffHelper
 */

PrivateBuffHelper* PrivateBuffHelper::staticInitializer = PrivateBuffHelper::instance();

PrivateBuffHelper::PrivateBuffHelper() {
	className = "PrivateBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void PrivateBuffHelper::finalizeHelper() {
	PrivateBuffHelper::finalize();
}

DistributedObject* PrivateBuffHelper::instantiateObject() {
	return new PrivateBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* PrivateBuffHelper::instantiateServant() {
	return new PrivateBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PrivateBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PrivateBuffAdapter(static_cast<PrivateBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

