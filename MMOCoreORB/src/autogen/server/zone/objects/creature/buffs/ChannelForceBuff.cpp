/*
 *	autogen/server/zone/objects/creature/buffs/ChannelForceBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "ChannelForceBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/buffs/ChannelForceBuffTickEvent.h"

/*
 *	ChannelForceBuffStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 878325981,RPC_ACTIVATE__BOOL_,RPC_DEACTIVATE__BOOL_,RPC_ACTIVATEREGENTICK__,RPC_DOHAMTICK__};

ChannelForceBuff::ChannelForceBuff(CreatureObject* creo, unsigned int buffCRC, int duration) : Buff(DummyConstructorParameter::instance()) {
	ChannelForceBuffImplementation* _implementation = new ChannelForceBuffImplementation(creo, buffCRC, duration);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ChannelForceBuff");
}

ChannelForceBuff::ChannelForceBuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("ChannelForceBuff");
}

ChannelForceBuff::~ChannelForceBuff() {
}



void ChannelForceBuff::initializeTransientMembers() {
	ChannelForceBuffImplementation* _implementation = static_cast<ChannelForceBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void ChannelForceBuff::activate(bool applyModifiers) {
	ChannelForceBuffImplementation* _implementation = static_cast<ChannelForceBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->activate(applyModifiers);
	}
}

void ChannelForceBuff::deactivate(bool removeModifiers) {
	ChannelForceBuffImplementation* _implementation = static_cast<ChannelForceBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATE__BOOL_);
		method.addBooleanParameter(removeModifiers);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->deactivate(removeModifiers);
	}
}

void ChannelForceBuff::activateRegenTick() {
	ChannelForceBuffImplementation* _implementation = static_cast<ChannelForceBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATEREGENTICK__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->activateRegenTick();
	}
}

void ChannelForceBuff::doHamTick() {
	ChannelForceBuffImplementation* _implementation = static_cast<ChannelForceBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOHAMTICK__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->doHamTick();
	}
}

DistributedObjectServant* ChannelForceBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ChannelForceBuff::_getImplementationForRead() const {
	return _impl;
}

void ChannelForceBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ChannelForceBuffImplementation
 */

ChannelForceBuffImplementation::ChannelForceBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


ChannelForceBuffImplementation::~ChannelForceBuffImplementation() {
}


void ChannelForceBuffImplementation::finalize() {
}

void ChannelForceBuffImplementation::_initializeImplementation() {
	_setClassHelper(ChannelForceBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ChannelForceBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ChannelForceBuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* ChannelForceBuffImplementation::_getStub() {
	return _this.get();
}

ChannelForceBuffImplementation::operator const ChannelForceBuff*() {
	return _this.get();
}

void ChannelForceBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ChannelForceBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ChannelForceBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ChannelForceBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ChannelForceBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ChannelForceBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ChannelForceBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ChannelForceBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("ChannelForceBuff");

}

void ChannelForceBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ChannelForceBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ChannelForceBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void ChannelForceBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ChannelForceBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ChannelForceBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

ChannelForceBuffImplementation::ChannelForceBuffImplementation(CreatureObject* creo, unsigned int buffCRC, int duration) : BuffImplementation(creo, buffCRC, duration, BuffType::SKILL) {
	_initializeImplementation();
}

/*
 *	ChannelForceBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ChannelForceBuffAdapter::ChannelForceBuffAdapter(ChannelForceBuff* obj) : BuffAdapter(obj) {
}

void ChannelForceBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_ACTIVATE__BOOL_:
		{
			bool applyModifiers = inv->getBooleanParameter();
			
			activate(applyModifiers);
			
		}
		break;
	case RPC_DEACTIVATE__BOOL_:
		{
			bool removeModifiers = inv->getBooleanParameter();
			
			deactivate(removeModifiers);
			
		}
		break;
	case RPC_ACTIVATEREGENTICK__:
		{
			
			activateRegenTick();
			
		}
		break;
	case RPC_DOHAMTICK__:
		{
			
			doHamTick();
			
		}
		break;
	default:
		BuffAdapter::invokeMethod(methid, inv);
	}
}

void ChannelForceBuffAdapter::initializeTransientMembers() {
	(static_cast<ChannelForceBuff*>(stub))->initializeTransientMembers();
}

void ChannelForceBuffAdapter::activate(bool applyModifiers) {
	(static_cast<ChannelForceBuff*>(stub))->activate(applyModifiers);
}

void ChannelForceBuffAdapter::deactivate(bool removeModifiers) {
	(static_cast<ChannelForceBuff*>(stub))->deactivate(removeModifiers);
}

void ChannelForceBuffAdapter::activateRegenTick() {
	(static_cast<ChannelForceBuff*>(stub))->activateRegenTick();
}

void ChannelForceBuffAdapter::doHamTick() {
	(static_cast<ChannelForceBuff*>(stub))->doHamTick();
}

/*
 *	ChannelForceBuffHelper
 */

ChannelForceBuffHelper* ChannelForceBuffHelper::staticInitializer = ChannelForceBuffHelper::instance();

ChannelForceBuffHelper::ChannelForceBuffHelper() {
	className = "ChannelForceBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void ChannelForceBuffHelper::finalizeHelper() {
	ChannelForceBuffHelper::finalize();
}

DistributedObject* ChannelForceBuffHelper::instantiateObject() {
	return new ChannelForceBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChannelForceBuffHelper::instantiateServant() {
	return new ChannelForceBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ChannelForceBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChannelForceBuffAdapter(static_cast<ChannelForceBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

