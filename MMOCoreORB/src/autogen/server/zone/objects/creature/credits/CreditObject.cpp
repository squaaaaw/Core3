/*
 *	autogen/server/zone/objects/creature/credits/CreditObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "CreditObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	CreditObjectStub
 */

enum {RPC_NOTIFYLOADFROMDATABASE__ = 2326470073,RPC_SETBANKCREDITS__INT_BOOL_,RPC_SETCASHCREDITS__INT_BOOL_,RPC_GETBANKCREDITS__,RPC_GETCASHCREDITS__,RPC_SUBTRACTBANKCREDITS__INT_BOOL_,RPC_SUBTRACTCASHCREDITS__INT_BOOL_,RPC_ADDBANKCREDITS__INT_BOOL_,RPC_ADDCASHCREDITS__INT_BOOL_,RPC_VERIFYCASHCREDITS__INT_,RPC_VERIFYBANKCREDITS__INT_,RPC_SETOWNER__CREATUREOBJECT_};

CreditObject::CreditObject() : ManagedObject(DummyConstructorParameter::instance()) {
	CreditObjectImplementation* _implementation = new CreditObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("CreditObject");
}

CreditObject::CreditObject(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("CreditObject");
}

CreditObject::~CreditObject() {
}



void CreditObject::notifyLoadFromDatabase() {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->notifyLoadFromDatabase();
	}
}

void CreditObject::setBankCredits(int credits, bool notifyClient) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBANKCREDITS__INT_BOOL_);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setBankCredits(credits, notifyClient);
	}
}

void CreditObject::setCashCredits(int credits, bool notifyClient) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCASHCREDITS__INT_BOOL_);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setCashCredits(credits, notifyClient);
	}
}

int CreditObject::getBankCredits() {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBANKCREDITS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getBankCredits();
	}
}

int CreditObject::getCashCredits() {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCASHCREDITS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCashCredits();
	}
}

void CreditObject::subtractBankCredits(int credits, bool notifyClient) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUBTRACTBANKCREDITS__INT_BOOL_);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->subtractBankCredits(credits, notifyClient);
	}
}

void CreditObject::subtractCashCredits(int credits, bool notifyClient) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUBTRACTCASHCREDITS__INT_BOOL_);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->subtractCashCredits(credits, notifyClient);
	}
}

void CreditObject::addBankCredits(int credits, bool notifyClient) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBANKCREDITS__INT_BOOL_);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addBankCredits(credits, notifyClient);
	}
}

void CreditObject::addCashCredits(int credits, bool notifyClient) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCASHCREDITS__INT_BOOL_);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addCashCredits(credits, notifyClient);
	}
}

bool CreditObject::verifyCashCredits(int credits) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VERIFYCASHCREDITS__INT_);
		method.addSignedIntParameter(credits);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->verifyCashCredits(credits);
	}
}

bool CreditObject::verifyBankCredits(int credits) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VERIFYBANKCREDITS__INT_);
		method.addSignedIntParameter(credits);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->verifyBankCredits(credits);
	}
}

WeakReference<CreatureObject* > CreditObject::getOwner() {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getOwner();
	}
}

void CreditObject::setOwner(CreatureObject* obj) {
	CreditObjectImplementation* _implementation = static_cast<CreditObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNER__CREATUREOBJECT_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOwner(obj);
	}
}

DistributedObjectServant* CreditObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* CreditObject::_getImplementationForRead() const {
	return _impl;
}

void CreditObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CreditObjectImplementation
 */

CreditObjectImplementation::CreditObjectImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


CreditObjectImplementation::~CreditObjectImplementation() {
}


void CreditObjectImplementation::finalize() {
}

void CreditObjectImplementation::_initializeImplementation() {
	_setClassHelper(CreditObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CreditObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CreditObject*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CreditObjectImplementation::_getStub() {
	return _this.get();
}

CreditObjectImplementation::operator const CreditObject*() {
	return _this.get();
}

void CreditObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void CreditObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void CreditObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void CreditObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void CreditObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void CreditObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void CreditObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void CreditObjectImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("CreditObject");

}

void CreditObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(CreditObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CreditObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xe24e4cf4: //CreditObject.bankCredits
		TypeInfo<int >::parseFromBinaryStream(&bankCredits, stream);
		return true;

	case 0x5646938b: //CreditObject.cashCredits
		TypeInfo<int >::parseFromBinaryStream(&cashCredits, stream);
		return true;

	}

	return false;
}

void CreditObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CreditObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CreditObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xe24e4cf4; //CreditObject.bankCredits
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&bankCredits, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5646938b; //CreditObject.cashCredits
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&cashCredits, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

CreditObjectImplementation::CreditObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/credits/CreditObject.idl():  		bankCredits = 0;
	bankCredits = 0;
	// server/zone/objects/creature/credits/CreditObject.idl():   cashCredits = 0;
	cashCredits = 0;
}

int CreditObjectImplementation::getBankCredits() {
	// server/zone/objects/creature/credits/CreditObject.idl():  		return bankCredits;
	return bankCredits;
}

int CreditObjectImplementation::getCashCredits() {
	// server/zone/objects/creature/credits/CreditObject.idl():  		return cashCredits;
	return cashCredits;
}

void CreditObjectImplementation::addBankCredits(int credits, bool notifyClient) {
	// server/zone/objects/creature/credits/CreditObject.idl():  		setBankCredits(bankCredits+credits, notifyClient);
	setBankCredits(bankCredits + credits, notifyClient);
}

void CreditObjectImplementation::addCashCredits(int credits, bool notifyClient) {
	// server/zone/objects/creature/credits/CreditObject.idl():  		setCashCredits(cashCredits+credits, notifyClient);
	setCashCredits(cashCredits + credits, notifyClient);
}

bool CreditObjectImplementation::verifyCashCredits(int credits) {
	// server/zone/objects/creature/credits/CreditObject.idl():  		if 
	if (credits < 0)	// server/zone/objects/creature/credits/CreditObject.idl():  			return false;
	return false;
	// server/zone/objects/creature/credits/CreditObject.idl():  		return 
	if (getCashCredits() < credits)	// server/zone/objects/creature/credits/CreditObject.idl():  			return false;
	return false;
	// server/zone/objects/creature/credits/CreditObject.idl():  		return true;
	return true;
}

bool CreditObjectImplementation::verifyBankCredits(int credits) {
	// server/zone/objects/creature/credits/CreditObject.idl():  		if 
	if (credits < 0)	// server/zone/objects/creature/credits/CreditObject.idl():  			return false;
	return false;
	// server/zone/objects/creature/credits/CreditObject.idl():  		return 
	if (getBankCredits() < credits)	// server/zone/objects/creature/credits/CreditObject.idl():  			return false;
	return false;
	// server/zone/objects/creature/credits/CreditObject.idl():  		return true;
	return true;
}

/*
 *	CreditObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


CreditObjectAdapter::CreditObjectAdapter(CreditObject* obj) : ManagedObjectAdapter(obj) {
}

void CreditObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			
			notifyLoadFromDatabase();
			
		}
		break;
	case RPC_SETBANKCREDITS__INT_BOOL_:
		{
			int credits = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setBankCredits(credits, notifyClient);
			
		}
		break;
	case RPC_SETCASHCREDITS__INT_BOOL_:
		{
			int credits = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setCashCredits(credits, notifyClient);
			
		}
		break;
	case RPC_GETBANKCREDITS__:
		{
			
			int _m_res = getBankCredits();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCASHCREDITS__:
		{
			
			int _m_res = getCashCredits();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SUBTRACTBANKCREDITS__INT_BOOL_:
		{
			int credits = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			subtractBankCredits(credits, notifyClient);
			
		}
		break;
	case RPC_SUBTRACTCASHCREDITS__INT_BOOL_:
		{
			int credits = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			subtractCashCredits(credits, notifyClient);
			
		}
		break;
	case RPC_ADDBANKCREDITS__INT_BOOL_:
		{
			int credits = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			addBankCredits(credits, notifyClient);
			
		}
		break;
	case RPC_ADDCASHCREDITS__INT_BOOL_:
		{
			int credits = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			addCashCredits(credits, notifyClient);
			
		}
		break;
	case RPC_VERIFYCASHCREDITS__INT_:
		{
			int credits = inv->getSignedIntParameter();
			
			bool _m_res = verifyCashCredits(credits);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_VERIFYBANKCREDITS__INT_:
		{
			int credits = inv->getSignedIntParameter();
			
			bool _m_res = verifyBankCredits(credits);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETOWNER__CREATUREOBJECT_:
		{
			CreatureObject* obj = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			setOwner(obj);
			
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

void CreditObjectAdapter::notifyLoadFromDatabase() {
	(static_cast<CreditObject*>(stub))->notifyLoadFromDatabase();
}

void CreditObjectAdapter::setBankCredits(int credits, bool notifyClient) {
	(static_cast<CreditObject*>(stub))->setBankCredits(credits, notifyClient);
}

void CreditObjectAdapter::setCashCredits(int credits, bool notifyClient) {
	(static_cast<CreditObject*>(stub))->setCashCredits(credits, notifyClient);
}

int CreditObjectAdapter::getBankCredits() {
	return (static_cast<CreditObject*>(stub))->getBankCredits();
}

int CreditObjectAdapter::getCashCredits() {
	return (static_cast<CreditObject*>(stub))->getCashCredits();
}

void CreditObjectAdapter::subtractBankCredits(int credits, bool notifyClient) {
	(static_cast<CreditObject*>(stub))->subtractBankCredits(credits, notifyClient);
}

void CreditObjectAdapter::subtractCashCredits(int credits, bool notifyClient) {
	(static_cast<CreditObject*>(stub))->subtractCashCredits(credits, notifyClient);
}

void CreditObjectAdapter::addBankCredits(int credits, bool notifyClient) {
	(static_cast<CreditObject*>(stub))->addBankCredits(credits, notifyClient);
}

void CreditObjectAdapter::addCashCredits(int credits, bool notifyClient) {
	(static_cast<CreditObject*>(stub))->addCashCredits(credits, notifyClient);
}

bool CreditObjectAdapter::verifyCashCredits(int credits) {
	return (static_cast<CreditObject*>(stub))->verifyCashCredits(credits);
}

bool CreditObjectAdapter::verifyBankCredits(int credits) {
	return (static_cast<CreditObject*>(stub))->verifyBankCredits(credits);
}

void CreditObjectAdapter::setOwner(CreatureObject* obj) {
	(static_cast<CreditObject*>(stub))->setOwner(obj);
}

/*
 *	CreditObjectHelper
 */

CreditObjectHelper* CreditObjectHelper::staticInitializer = CreditObjectHelper::instance();

CreditObjectHelper::CreditObjectHelper() {
	className = "CreditObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void CreditObjectHelper::finalizeHelper() {
	CreditObjectHelper::finalize();
}

DistributedObject* CreditObjectHelper::instantiateObject() {
	return new CreditObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* CreditObjectHelper::instantiateServant() {
	return new CreditObjectImplementation();
}

DistributedObjectAdapter* CreditObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreditObjectAdapter(static_cast<CreditObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

