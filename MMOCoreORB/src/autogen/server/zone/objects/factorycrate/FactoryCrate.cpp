/*
 *	autogen/server/zone/objects/factorycrate/FactoryCrate.cpp generated by engine3 IDL compiler 0.60
 */

#include "FactoryCrate.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/scene/variables/ContainerPermissions.h"

/*
 *	FactoryCrateStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_ISFACTORYCRATE__,RPC_GETMAXCAPACITY__,RPC_SETMAXCAPACITY__INT_,RPC_SETUSECOUNT__INT_BOOL_,RPC_GETPROTOTYPE__,RPC_GETCRAFTERSNAME__,RPC_GETSERIALNUMBER__,RPC_EXTRACTOBJECTTOINVENTORY__CREATUREOBJECT_,RPC_EXTRACTOBJECT__INT_,RPC_SPLIT__INT_,RPC_GETCOUNTABLEOBJECTSRECURSIVE__,RPC_GETSIZEONVENDORRECURSIVE__};

FactoryCrate::FactoryCrate() : TangibleObject(DummyConstructorParameter::instance()) {
	FactoryCrateImplementation* _implementation = new FactoryCrateImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FactoryCrate");
}

FactoryCrate::FactoryCrate(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("FactoryCrate");
}

FactoryCrate::~FactoryCrate() {
}



void FactoryCrate::loadTemplateData(SharedObjectTemplate* templateData) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void FactoryCrate::initializeTransientMembers() {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void FactoryCrate::sendBaselinesTo(SceneObject* player) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBaselinesTo(player);
	}
}

void FactoryCrate::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void FactoryCrate::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

int FactoryCrate::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

bool FactoryCrate::isFactoryCrate() {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFACTORYCRATE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFactoryCrate();
	}
}

int FactoryCrate::getMaxCapacity() const {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXCAPACITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMaxCapacity();
	}
}

void FactoryCrate::setMaxCapacity(int value) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXCAPACITY__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setMaxCapacity(value);
	}
}

void FactoryCrate::setUseCount(unsigned int newUseCount, bool notifyClient) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUSECOUNT__INT_BOOL_);
		method.addUnsignedIntParameter(newUseCount);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setUseCount(newUseCount, notifyClient);
	}
}

Reference<TangibleObject* > FactoryCrate::getPrototype() {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPROTOTYPE__);

		return static_cast<TangibleObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPrototype();
	}
}

String FactoryCrate::getCraftersName() {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRAFTERSNAME__);

		String _return_getCraftersName;
		method.executeWithAsciiReturn(_return_getCraftersName);
		return _return_getCraftersName;
	} else {
		return _implementation->getCraftersName();
	}
}

String FactoryCrate::getSerialNumber() {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSERIALNUMBER__);

		String _return_getSerialNumber;
		method.executeWithAsciiReturn(_return_getSerialNumber);
		return _return_getSerialNumber;
	} else {
		return _implementation->getSerialNumber();
	}
}

bool FactoryCrate::extractObjectToInventory(CreatureObject* player) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_EXTRACTOBJECTTOINVENTORY__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->extractObjectToInventory(player);
	}
}

Reference<TangibleObject* > FactoryCrate::extractObject(int count) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_EXTRACTOBJECT__INT_);
		method.addSignedIntParameter(count);

		return static_cast<TangibleObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->extractObject(count);
	}
}

void FactoryCrate::split(int newStackSize) {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SPLIT__INT_);
		method.addSignedIntParameter(newStackSize);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->split(newStackSize);
	}
}

int FactoryCrate::getCountableObjectsRecursive() {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOUNTABLEOBJECTSRECURSIVE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCountableObjectsRecursive();
	}
}

int FactoryCrate::getSizeOnVendorRecursive() {
	FactoryCrateImplementation* _implementation = static_cast<FactoryCrateImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSIZEONVENDORRECURSIVE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSizeOnVendorRecursive();
	}
}

DistributedObjectServant* FactoryCrate::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FactoryCrate::_getImplementationForRead() const {
	return _impl;
}

void FactoryCrate::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FactoryCrateImplementation
 */

FactoryCrateImplementation::FactoryCrateImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


FactoryCrateImplementation::~FactoryCrateImplementation() {
}


void FactoryCrateImplementation::finalize() {
}

void FactoryCrateImplementation::_initializeImplementation() {
	_setClassHelper(FactoryCrateHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FactoryCrateImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FactoryCrate*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FactoryCrateImplementation::_getStub() {
	return _this.get();
}

FactoryCrateImplementation::operator const FactoryCrate*() {
	return _this.get();
}

void FactoryCrateImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FactoryCrateImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FactoryCrateImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FactoryCrateImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FactoryCrateImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FactoryCrateImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FactoryCrateImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FactoryCrateImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("FactoryCrate");

}

void FactoryCrateImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FactoryCrateImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FactoryCrateImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x106911b0: //FactoryCrate.maxCapacity
		TypeInfo<int >::parseFromBinaryStream(&maxCapacity, stream);
		return true;

	}

	return false;
}

void FactoryCrateImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FactoryCrateImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FactoryCrateImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x106911b0; //FactoryCrate.maxCapacity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxCapacity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

FactoryCrateImplementation::FactoryCrateImplementation() {
	_initializeImplementation();
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		Logger.setLoggingName("FactoryCrate");
	Logger::setLoggingName("FactoryCrate");
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		maxCapacity = 100;
	maxCapacity = 100;
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		super.setContainerInheritPermissionsFromParent(false);
	TangibleObjectImplementation::setContainerInheritPermissionsFromParent(false);
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		super.setContainerDefaultDenyPermission(ContainerPermissions.OPEN);
	TangibleObjectImplementation::setContainerDefaultDenyPermission(ContainerPermissions::OPEN);
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		super.setContainerDefaultDenyPermission(ContainerPermissions.MOVEIN);
	TangibleObjectImplementation::setContainerDefaultDenyPermission(ContainerPermissions::MOVEIN);
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		super.setContainerDefaultDenyPermission(ContainerPermissions.MOVEOUT);
	TangibleObjectImplementation::setContainerDefaultDenyPermission(ContainerPermissions::MOVEOUT);
}

bool FactoryCrateImplementation::isFactoryCrate() {
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		return true;
	return true;
}

int FactoryCrateImplementation::getMaxCapacity() const{
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		return maxCapacity;
	return maxCapacity;
}

void FactoryCrateImplementation::setMaxCapacity(int value) {
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		maxCapacity = value;
	maxCapacity = value;
}

int FactoryCrateImplementation::getCountableObjectsRecursive() {
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		return 0;
	return 0;
}

int FactoryCrateImplementation::getSizeOnVendorRecursive() {
	// server/zone/objects/factorycrate/FactoryCrate.idl():  		return 1;
	return 1;
}

/*
 *	FactoryCrateAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FactoryCrateAdapter::FactoryCrateAdapter(FactoryCrate* obj) : TangibleObjectAdapter(obj) {
}

void FactoryCrateAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			SceneObject* player = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendBaselinesTo(player);
			
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISFACTORYCRATE__:
		{
			
			bool _m_res = isFactoryCrate();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETMAXCAPACITY__:
		{
			
			int _m_res = getMaxCapacity();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETMAXCAPACITY__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setMaxCapacity(value);
			
		}
		break;
	case RPC_SETUSECOUNT__INT_BOOL_:
		{
			unsigned int newUseCount = inv->getUnsignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			setUseCount(newUseCount, notifyClient);
			
		}
		break;
	case RPC_GETPROTOTYPE__:
		{
			
			DistributedObject* _m_res = getPrototype();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETCRAFTERSNAME__:
		{
			
			String _m_res = getCraftersName();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETSERIALNUMBER__:
		{
			
			String _m_res = getSerialNumber();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_EXTRACTOBJECTTOINVENTORY__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = extractObjectToInventory(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_EXTRACTOBJECT__INT_:
		{
			int count = inv->getSignedIntParameter();
			
			DistributedObject* _m_res = extractObject(count);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SPLIT__INT_:
		{
			int newStackSize = inv->getSignedIntParameter();
			
			split(newStackSize);
			
		}
		break;
	case RPC_GETCOUNTABLEOBJECTSRECURSIVE__:
		{
			
			int _m_res = getCountableObjectsRecursive();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSIZEONVENDORRECURSIVE__:
		{
			
			int _m_res = getSizeOnVendorRecursive();
			resp->insertSignedInt(_m_res);
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

void FactoryCrateAdapter::initializeTransientMembers() {
	(static_cast<FactoryCrate*>(stub))->initializeTransientMembers();
}

void FactoryCrateAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<FactoryCrate*>(stub))->sendBaselinesTo(player);
}

int FactoryCrateAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<FactoryCrate*>(stub))->handleObjectMenuSelect(player, selectedID);
}

bool FactoryCrateAdapter::isFactoryCrate() {
	return (static_cast<FactoryCrate*>(stub))->isFactoryCrate();
}

int FactoryCrateAdapter::getMaxCapacity() const {
	return (static_cast<FactoryCrate*>(stub))->getMaxCapacity();
}

void FactoryCrateAdapter::setMaxCapacity(int value) {
	(static_cast<FactoryCrate*>(stub))->setMaxCapacity(value);
}

void FactoryCrateAdapter::setUseCount(unsigned int newUseCount, bool notifyClient) {
	(static_cast<FactoryCrate*>(stub))->setUseCount(newUseCount, notifyClient);
}

Reference<TangibleObject* > FactoryCrateAdapter::getPrototype() {
	return (static_cast<FactoryCrate*>(stub))->getPrototype();
}

String FactoryCrateAdapter::getCraftersName() {
	return (static_cast<FactoryCrate*>(stub))->getCraftersName();
}

String FactoryCrateAdapter::getSerialNumber() {
	return (static_cast<FactoryCrate*>(stub))->getSerialNumber();
}

bool FactoryCrateAdapter::extractObjectToInventory(CreatureObject* player) {
	return (static_cast<FactoryCrate*>(stub))->extractObjectToInventory(player);
}

Reference<TangibleObject* > FactoryCrateAdapter::extractObject(int count) {
	return (static_cast<FactoryCrate*>(stub))->extractObject(count);
}

void FactoryCrateAdapter::split(int newStackSize) {
	(static_cast<FactoryCrate*>(stub))->split(newStackSize);
}

int FactoryCrateAdapter::getCountableObjectsRecursive() {
	return (static_cast<FactoryCrate*>(stub))->getCountableObjectsRecursive();
}

int FactoryCrateAdapter::getSizeOnVendorRecursive() {
	return (static_cast<FactoryCrate*>(stub))->getSizeOnVendorRecursive();
}

/*
 *	FactoryCrateHelper
 */

FactoryCrateHelper* FactoryCrateHelper::staticInitializer = FactoryCrateHelper::instance();

FactoryCrateHelper::FactoryCrateHelper() {
	className = "FactoryCrate";

	Core::getObjectBroker()->registerClass(className, this);
}

void FactoryCrateHelper::finalizeHelper() {
	FactoryCrateHelper::finalize();
}

DistributedObject* FactoryCrateHelper::instantiateObject() {
	return new FactoryCrate(DummyConstructorParameter::instance());
}

DistributedObjectServant* FactoryCrateHelper::instantiateServant() {
	return new FactoryCrateImplementation();
}

DistributedObjectAdapter* FactoryCrateHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FactoryCrateAdapter(static_cast<FactoryCrate*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

